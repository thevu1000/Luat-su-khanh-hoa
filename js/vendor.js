window.Modernizr = function(window, document, undefined) {
    var version = "2.8.3", Modernizr = {}, enableClasses = true, docElement = document.documentElement, mod = "modernizr", modElem = document.createElement(mod), mStyle = modElem.style, inputElem = document.createElement("input"), smile = ":)", toString = {}.toString, prefixes = " -webkit- -moz- -o- -ms- ".split(" "), omPrefixes = "Webkit Moz O ms", cssomPrefixes = omPrefixes.split(" "), domPrefixes = omPrefixes.toLowerCase().split(" "), ns = {
        svg: "http://www.w3.org/2000/svg"
    }, tests = {}, inputs = {}, attrs = {}, classes = [], slice = classes.slice, featureName, injectElementWithStyles = function(rule, callback, nodes, testnames) {
        var style, ret, node, docOverflow, div = document.createElement("div"), body = document.body, fakeBody = body || document.createElement("body");
        if (parseInt(nodes, 10)) {
            while (nodes--) {
                node = document.createElement("div");
                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                div.appendChild(node)
            }
        }
        style = ["&#173;", '<style id="s', mod, '">', rule, "</style>"].join("");
        div.id = mod;
        (body ? div : fakeBody).innerHTML += style;
        fakeBody.appendChild(div);
        if (!body) {
            fakeBody.style.background = "";
            fakeBody.style.overflow = "hidden";
            docOverflow = docElement.style.overflow;
            docElement.style.overflow = "hidden";
            docElement.appendChild(fakeBody)
        }
        ret = callback(div, rule);
        if (!body) {
            fakeBody.parentNode.removeChild(fakeBody);
            docElement.style.overflow = docOverflow
        } else {
            div.parentNode.removeChild(div)
        }
        return !!ret
    }, testMediaQuery = function(mq) {
        var matchMedia = window.matchMedia || window.msMatchMedia;
        if (matchMedia) {
            return matchMedia(mq) && matchMedia(mq).matches || false
        }
        var bool;
        injectElementWithStyles("@media " + mq + " { #" + mod + " { position: absolute; } }", function(node) {
            bool = (window.getComputedStyle ? getComputedStyle(node, null) : node.currentStyle)["position"] == "absolute"
        });
        return bool
    }, isEventSupported = function() {
        var TAGNAMES = {
            select: "input",
            change: "input",
            submit: "form",
            reset: "form",
            error: "img",
            load: "img",
            abort: "img"
        };
        function isEventSupported(eventName, element) {
            element = element || document.createElement(TAGNAMES[eventName] || "div");
            eventName = "on" + eventName;
            var isSupported = eventName in element;
            if (!isSupported) {
                if (!element.setAttribute) {
                    element = document.createElement("div")
                }
                if (element.setAttribute && element.removeAttribute) {
                    element.setAttribute(eventName, "");
                    isSupported = is(element[eventName], "function");
                    if (!is(element[eventName], "undefined")) {
                        element[eventName] = undefined
                    }
                    element.removeAttribute(eventName)
                }
            }
            element = null;
            return isSupported
        }
        return isEventSupported
    }(), _hasOwnProperty = {}.hasOwnProperty, hasOwnProp;
    if (!is(_hasOwnProperty, "undefined") && !is(_hasOwnProperty.call, "undefined")) {
        hasOwnProp = function(object, property) {
            return _hasOwnProperty.call(object, property)
        }
    } else {
        hasOwnProp = function(object, property) {
            return property in object && is(object.constructor.prototype[property], "undefined")
        }
    }
    if (!Function.prototype.bind) {
        Function.prototype.bind = function bind(that) {
            var target = this;
            if (typeof target != "function") {
                throw new TypeError
            }
            var args = slice.call(arguments, 1)
              , bound = function() {
                if (this instanceof bound) {
                    var F = function() {};
                    F.prototype = target.prototype;
                    var self = new F;
                    var result = target.apply(self, args.concat(slice.call(arguments)));
                    if (Object(result) === result) {
                        return result
                    }
                    return self
                } else {
                    return target.apply(that, args.concat(slice.call(arguments)))
                }
            };
            return bound
        }
    }
    function setCss(str) {
        mStyle.cssText = str
    }
    function setCssAll(str1, str2) {
        return setCss(prefixes.join(str1 + ";") + (str2 || ""))
    }
    function is(obj, type) {
        return typeof obj === type
    }
    function contains(str, substr) {
        return !!~("" + str).indexOf(substr)
    }
    function testProps(props, prefixed) {
        for (var i in props) {
            var prop = props[i];
            if (!contains(prop, "-") && mStyle[prop] !== undefined) {
                return prefixed == "pfx" ? prop : true
            }
        }
        return false
    }
    function testDOMProps(props, obj, elem) {
        for (var i in props) {
            var item = obj[props[i]];
            if (item !== undefined) {
                if (elem === false)
                    return props[i];
                if (is(item, "function")) {
                    return item.bind(elem || obj)
                }
                return item
            }
        }
        return false
    }
    function testPropsAll(prop, prefixed, elem) {
        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1)
          , props = (prop + " " + cssomPrefixes.join(ucProp + " ") + ucProp).split(" ");
        if (is(prefixed, "string") || is(prefixed, "undefined")) {
            return testProps(props, prefixed)
        } else {
            props = (prop + " " + domPrefixes.join(ucProp + " ") + ucProp).split(" ");
            return testDOMProps(props, prefixed, elem)
        }
    }
    tests["flexbox"] = function() {
        return testPropsAll("flexWrap")
    }
    ;
    tests["flexboxlegacy"] = function() {
        return testPropsAll("boxDirection")
    }
    ;
    tests["canvas"] = function() {
        var elem = document.createElement("canvas");
        return !!(elem.getContext && elem.getContext("2d"))
    }
    ;
    tests["canvastext"] = function() {
        return !!(Modernizr["canvas"] && is(document.createElement("canvas").getContext("2d").fillText, "function"))
    }
    ;
    tests["webgl"] = function() {
        return !!window.WebGLRenderingContext
    }
    ;
    tests["touch"] = function() {
        var bool;
        if ("ontouchstart"in window || window.DocumentTouch && document instanceof DocumentTouch) {
            bool = true
        } else {
            injectElementWithStyles(["@media (", prefixes.join("touch-enabled),("), mod, ")", "{#modernizr{top:9px;position:absolute}}"].join(""), function(node) {
                bool = node.offsetTop === 9
            })
        }
        return bool
    }
    ;
    tests["geolocation"] = function() {
        return "geolocation"in navigator
    }
    ;
    tests["postmessage"] = function() {
        return !!window.postMessage
    }
    ;
    tests["websqldatabase"] = function() {
        return !!window.openDatabase
    }
    ;
    tests["indexedDB"] = function() {
        return !!testPropsAll("indexedDB", window)
    }
    ;
    tests["hashchange"] = function() {
        return isEventSupported("hashchange", window) && (document.documentMode === undefined || document.documentMode > 7)
    }
    ;
    tests["history"] = function() {
        return !!(window.history && history.pushState)
    }
    ;
    tests["draganddrop"] = function() {
        var div = document.createElement("div");
        return "draggable"in div || "ondragstart"in div && "ondrop"in div
    }
    ;
    tests["websockets"] = function() {
        return "WebSocket"in window || "MozWebSocket"in window
    }
    ;
    tests["rgba"] = function() {
        setCss("background-color:rgba(150,255,150,.5)");
        return contains(mStyle.backgroundColor, "rgba")
    }
    ;
    tests["hsla"] = function() {
        setCss("background-color:hsla(120,40%,100%,.5)");
        return contains(mStyle.backgroundColor, "rgba") || contains(mStyle.backgroundColor, "hsla")
    }
    ;
    tests["multiplebgs"] = function() {
        setCss("background:url(https://),url(https://),red url(https://)");
        return /(url\s*\(.*?){3}/.test(mStyle.background)
    }
    ;
    tests["backgroundsize"] = function() {
        return testPropsAll("backgroundSize")
    }
    ;
    tests["borderimage"] = function() {
        return testPropsAll("borderImage")
    }
    ;
    tests["borderradius"] = function() {
        return testPropsAll("borderRadius")
    }
    ;
    tests["boxshadow"] = function() {
        return testPropsAll("boxShadow")
    }
    ;
    tests["textshadow"] = function() {
        return document.createElement("div").style.textShadow === ""
    }
    ;
    tests["opacity"] = function() {
        setCssAll("opacity:.55");
        return /^0.55$/.test(mStyle.opacity)
    }
    ;
    tests["cssanimations"] = function() {
        return testPropsAll("animationName")
    }
    ;
    tests["csscolumns"] = function() {
        return testPropsAll("columnCount")
    }
    ;
    tests["cssgradients"] = function() {
        var str1 = "background-image:"
          , str2 = "gradient(linear,left top,right bottom,from(#9f9),to(white));"
          , str3 = "linear-gradient(left top,#9f9, white);";
        setCss((str1 + "-webkit- ".split(" ").join(str2 + str1) + prefixes.join(str3 + str1)).slice(0, -str1.length));
        return contains(mStyle.backgroundImage, "gradient")
    }
    ;
    tests["cssreflections"] = function() {
        return testPropsAll("boxReflect")
    }
    ;
    tests["csstransforms"] = function() {
        return !!testPropsAll("transform")
    }
    ;
    tests["csstransforms3d"] = function() {
        var ret = !!testPropsAll("perspective");
        if (ret && "webkitPerspective"in docElement.style) {
            injectElementWithStyles("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}", function(node, rule) {
                ret = node.offsetLeft === 9 && node.offsetHeight === 3
            })
        }
        return ret
    }
    ;
    tests["csstransitions"] = function() {
        return testPropsAll("transition")
    }
    ;
    tests["fontface"] = function() {
        var bool;
        injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function(node, rule) {
            var style = document.getElementById("smodernizr")
              , sheet = style.sheet || style.styleSheet
              , cssText = sheet ? sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || "" : "";
            bool = /src/i.test(cssText) && cssText.indexOf(rule.split(" ")[0]) === 0
        });
        return bool
    }
    ;
    tests["generatedcontent"] = function() {
        var bool;
        injectElementWithStyles(["#", mod, "{font:0/0 a}#", mod, ':after{content:"', smile, '";visibility:hidden;font:3px/1 a}'].join(""), function(node) {
            bool = node.offsetHeight >= 3
        });
        return bool
    }
    ;
    tests["video"] = function() {
        var elem = document.createElement("video")
          , bool = false;
        try {
            if (bool = !!elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, "");
                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, "");
                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, "")
            }
        } catch (e) {}
        return bool
    }
    ;
    tests["audio"] = function() {
        var elem = document.createElement("audio")
          , bool = false;
        try {
            if (bool = !!elem.canPlayType) {
                bool = new Boolean(bool);
                bool.ogg = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, "");
                bool.mp3 = elem.canPlayType("audio/mpeg;").replace(/^no$/, "");
                bool.wav = elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, "");
                bool.m4a = (elem.canPlayType("audio/x-m4a;") || elem.canPlayType("audio/aac;")).replace(/^no$/, "")
            }
        } catch (e) {}
        return bool
    }
    ;
    tests["localstorage"] = function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true
        } catch (e) {
            return false
        }
    }
    ;
    tests["sessionstorage"] = function() {
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true
        } catch (e) {
            return false
        }
    }
    ;
    tests["webworkers"] = function() {
        return !!window.Worker
    }
    ;
    tests["applicationcache"] = function() {
        return !!window.applicationCache
    }
    ;
    tests["svg"] = function() {
        return !!document.createElementNS && !!document.createElementNS(ns.svg, "svg").createSVGRect
    }
    ;
    tests["inlinesvg"] = function() {
        var div = document.createElement("div");
        div.innerHTML = "<svg/>";
        return (div.firstChild && div.firstChild.namespaceURI) == ns.svg
    }
    ;
    tests["smil"] = function() {
        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, "animate")))
    }
    ;
    tests["svgclippaths"] = function() {
        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, "clipPath")))
    }
    ;
    function webforms() {
        Modernizr["input"] = function(props) {
            for (var i = 0, len = props.length; i < len; i++) {
                attrs[props[i]] = !!(props[i]in inputElem)
            }
            if (attrs.list) {
                attrs.list = !!(document.createElement("datalist") && window.HTMLDataListElement)
            }
            return attrs
        }("autocomplete autofocus list placeholder max min multiple pattern required step".split(" "));
        Modernizr["inputtypes"] = function(props) {
            for (var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++) {
                inputElem.setAttribute("type", inputElemType = props[i]);
                bool = inputElem.type !== "text";
                if (bool) {
                    inputElem.value = smile;
                    inputElem.style.cssText = "position:absolute;visibility:hidden;";
                    if (/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined) {
                        docElement.appendChild(inputElem);
                        defaultView = document.defaultView;
                        bool = defaultView.getComputedStyle && defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== "textfield" && inputElem.offsetHeight !== 0;
                        docElement.removeChild(inputElem)
                    } else if (/^(search|tel)$/.test(inputElemType)) {} else if (/^(url|email)$/.test(inputElemType)) {
                        bool = inputElem.checkValidity && inputElem.checkValidity() === false
                    } else {
                        bool = inputElem.value != smile
                    }
                }
                inputs[props[i]] = !!bool
            }
            return inputs
        }("search tel url email datetime date month week time datetime-local number range color".split(" "))
    }
    for (var feature in tests) {
        if (hasOwnProp(tests, feature)) {
            featureName = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();
            classes.push((Modernizr[featureName] ? "" : "no-") + featureName)
        }
    }
    Modernizr.input || webforms();
    Modernizr.addTest = function(feature, test) {
        if (typeof feature == "object") {
            for (var key in feature) {
                if (hasOwnProp(feature, key)) {
                    Modernizr.addTest(key, feature[key])
                }
            }
        } else {
            feature = feature.toLowerCase();
            if (Modernizr[feature] !== undefined) {
                return Modernizr
            }
            test = typeof test == "function" ? test() : test;
            if (typeof enableClasses !== "undefined" && enableClasses) {
                docElement.className += " " + (test ? "" : "no-") + feature
            }
            Modernizr[feature] = test
        }
        return Modernizr
    }
    ;
    setCss("");
    modElem = inputElem = null;
    (function(window, document) {
        var version = "3.7.0";
        var options = window.html5 || {};
        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
        var supportsHtml5Styles;
        var expando = "_html5shiv";
        var expanID = 0;
        var expandoData = {};
        var supportsUnknownElements;
        (function() {
            try {
                var a = document.createElement("a");
                a.innerHTML = "<xyz></xyz>";
                supportsHtml5Styles = "hidden"in a;
                supportsUnknownElements = a.childNodes.length == 1 || function() {
                    document.createElement("a");
                    var frag = document.createDocumentFragment();
                    return typeof frag.cloneNode == "undefined" || typeof frag.createDocumentFragment == "undefined" || typeof frag.createElement == "undefined"
                }()
            } catch (e) {
                supportsHtml5Styles = true;
                supportsUnknownElements = true
            }
        }
        )();
        function addStyleSheet(ownerDocument, cssText) {
            var p = ownerDocument.createElement("p")
              , parent = ownerDocument.getElementsByTagName("head")[0] || ownerDocument.documentElement;
            p.innerHTML = "x<style>" + cssText + "</style>";
            return parent.insertBefore(p.lastChild, parent.firstChild)
        }
        function getElements() {
            var elements = html5.elements;
            return typeof elements == "string" ? elements.split(" ") : elements
        }
        function getExpandoData(ownerDocument) {
            var data = expandoData[ownerDocument[expando]];
            if (!data) {
                data = {};
                expanID++;
                ownerDocument[expando] = expanID;
                expandoData[expanID] = data
            }
            return data
        }
        function createElement(nodeName, ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document
            }
            if (supportsUnknownElements) {
                return ownerDocument.createElement(nodeName)
            }
            if (!data) {
                data = getExpandoData(ownerDocument)
            }
            var node;
            if (data.cache[nodeName]) {
                node = data.cache[nodeName].cloneNode()
            } else if (saveClones.test(nodeName)) {
                node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode()
            } else {
                node = data.createElem(nodeName)
            }
            return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node
        }
        function createDocumentFragment(ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document
            }
            if (supportsUnknownElements) {
                return ownerDocument.createDocumentFragment()
            }
            data = data || getExpandoData(ownerDocument);
            var clone = data.frag.cloneNode()
              , i = 0
              , elems = getElements()
              , l = elems.length;
            for (; i < l; i++) {
                clone.createElement(elems[i])
            }
            return clone
        }
        function shivMethods(ownerDocument, data) {
            if (!data.cache) {
                data.cache = {};
                data.createElem = ownerDocument.createElement;
                data.createFrag = ownerDocument.createDocumentFragment;
                data.frag = data.createFrag()
            }
            ownerDocument.createElement = function(nodeName) {
                if (!html5.shivMethods) {
                    return data.createElem(nodeName)
                }
                return createElement(nodeName, ownerDocument, data)
            }
            ;
            ownerDocument.createDocumentFragment = Function("h,f", "return function(){" + "var n=f.cloneNode(),c=n.createElement;" + "h.shivMethods&&(" + getElements().join().replace(/[\w\-]+/g, function(nodeName) {
                data.createElem(nodeName);
                data.frag.createElement(nodeName);
                return 'c("' + nodeName + '")'
            }) + ");return n}")(html5, data.frag)
        }
        function shivDocument(ownerDocument) {
            if (!ownerDocument) {
                ownerDocument = document
            }
            var data = getExpandoData(ownerDocument);
            if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
                data.hasCSS = !!addStyleSheet(ownerDocument, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}" + "mark{background:#FF0;color:#000}" + "template{display:none}")
            }
            if (!supportsUnknownElements) {
                shivMethods(ownerDocument, data)
            }
            return ownerDocument
        }
        var html5 = {
            elements: options.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",
            version: version,
            shivCSS: options.shivCSS !== false,
            supportsUnknownElements: supportsUnknownElements,
            shivMethods: options.shivMethods !== false,
            type: "default",
            shivDocument: shivDocument,
            createElement: createElement,
            createDocumentFragment: createDocumentFragment
        };
        window.html5 = html5;
        shivDocument(document)
    }
    )(this, document);
    Modernizr._version = version;
    Modernizr._prefixes = prefixes;
    Modernizr._domPrefixes = domPrefixes;
    Modernizr._cssomPrefixes = cssomPrefixes;
    Modernizr.mq = testMediaQuery;
    Modernizr.hasEvent = isEventSupported;
    Modernizr.testProp = function(prop) {
        return testProps([prop])
    }
    ;
    Modernizr.testAllProps = testPropsAll;
    Modernizr.testStyles = injectElementWithStyles;
    Modernizr.prefixed = function(prop, obj, elem) {
        if (!obj) {
            return testPropsAll(prop, "pfx")
        } else {
            return testPropsAll(prop, obj, elem)
        }
    }
    ;
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (enableClasses ? " js " + classes.join(" ") : "");
    return Modernizr
}(this, this.document);
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else if (typeof exports === "object") {
        factory(require("jquery"))
    } else {
        factory(window.jQuery || window.Zepto)
    }
}
)(function($) {
    var CLOSE_EVENT = "Close"
      , BEFORE_CLOSE_EVENT = "BeforeClose"
      , AFTER_CLOSE_EVENT = "AfterClose"
      , BEFORE_APPEND_EVENT = "BeforeAppend"
      , MARKUP_PARSE_EVENT = "MarkupParse"
      , OPEN_EVENT = "Open"
      , CHANGE_EVENT = "Change"
      , NS = "mfp"
      , EVENT_NS = "." + NS
      , READY_CLASS = "mfp-ready"
      , REMOVING_CLASS = "mfp-removing"
      , PREVENT_CLOSE_CLASS = "mfp-prevent-close";
    var mfp, MagnificPopup = function() {}, _isJQ = !!window.jQuery, _prevStatus, _window = $(window), _document, _prevContentType, _wrapClasses, _currPopupType;
    var _mfpOn = function(name, f) {
        mfp.ev.on(NS + name + EVENT_NS, f)
    }
      , _getEl = function(className, appendTo, html, raw) {
        var el = document.createElement("div");
        el.className = "mfp-" + className;
        if (html) {
            el.innerHTML = html
        }
        if (!raw) {
            el = $(el);
            if (appendTo) {
                el.appendTo(appendTo)
            }
        } else if (appendTo) {
            appendTo.appendChild(el)
        }
        return el
    }
      , _mfpTrigger = function(e, data) {
        mfp.ev.triggerHandler(NS + e, data);
        if (mfp.st.callbacks) {
            e = e.charAt(0).toLowerCase() + e.slice(1);
            if (mfp.st.callbacks[e]) {
                mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data])
            }
        }
    }
      , _getCloseBtn = function(type) {
        if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
            mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace("%title%", mfp.st.tClose));
            _currPopupType = type
        }
        return mfp.currTemplate.closeBtn
    }
      , _checkInstance = function() {
        if (!$.magnificPopup.instance) {
            mfp = new MagnificPopup;
            mfp.init();
            $.magnificPopup.instance = mfp
        }
    }
      , supportsTransitions = function() {
        var s = document.createElement("p").style
          , v = ["ms", "O", "Moz", "Webkit"];
        if (s["transition"] !== undefined) {
            return true
        }
        while (v.length) {
            if (v.pop() + "Transition"in s) {
                return true
            }
        }
        return false
    };
    MagnificPopup.prototype = {
        constructor: MagnificPopup,
        init: function() {
            var appVersion = navigator.appVersion;
            mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
            mfp.isAndroid = /android/gi.test(appVersion);
            mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
            mfp.supportsTransition = supportsTransitions();
            mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
            _document = $(document);
            mfp.popupsCache = {}
        },
        open: function(data) {
            var i;
            if (data.isObj === false) {
                mfp.items = data.items.toArray();
                mfp.index = 0;
                var items = data.items, item;
                for (i = 0; i < items.length; i++) {
                    item = items[i];
                    if (item.parsed) {
                        item = item.el[0]
                    }
                    if (item === data.el[0]) {
                        mfp.index = i;
                        break
                    }
                }
            } else {
                mfp.items = $.isArray(data.items) ? data.items : [data.items];
                mfp.index = data.index || 0
            }
            if (mfp.isOpen) {
                mfp.updateItemHTML();
                return
            }
            mfp.types = [];
            _wrapClasses = "";
            if (data.mainEl && data.mainEl.length) {
                mfp.ev = data.mainEl.eq(0)
            } else {
                mfp.ev = _document
            }
            if (data.key) {
                if (!mfp.popupsCache[data.key]) {
                    mfp.popupsCache[data.key] = {}
                }
                mfp.currTemplate = mfp.popupsCache[data.key]
            } else {
                mfp.currTemplate = {}
            }
            mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
            mfp.fixedContentPos = mfp.st.fixedContentPos === "auto" ? !mfp.probablyMobile : mfp.st.fixedContentPos;
            if (mfp.st.modal) {
                mfp.st.closeOnContentClick = false;
                mfp.st.closeOnBgClick = false;
                mfp.st.showCloseBtn = false;
                mfp.st.enableEscapeKey = false
            }
            if (!mfp.bgOverlay) {
                mfp.bgOverlay = _getEl("bg").on("click" + EVENT_NS, function() {
                    mfp.close()
                });
                mfp.wrap = _getEl("wrap").attr("tabindex", -1).on("click" + EVENT_NS, function(e) {
                    if (mfp._checkIfClose(e.target)) {
                        mfp.close()
                    }
                });
                mfp.container = _getEl("container", mfp.wrap)
            }
            mfp.contentContainer = _getEl("content");
            if (mfp.st.preloader) {
                mfp.preloader = _getEl("preloader", mfp.container, mfp.st.tLoading)
            }
            var modules = $.magnificPopup.modules;
            for (i = 0; i < modules.length; i++) {
                var n = modules[i];
                n = n.charAt(0).toUpperCase() + n.slice(1);
                mfp["init" + n].call(mfp)
            }
            _mfpTrigger("BeforeOpen");
            if (mfp.st.showCloseBtn) {
                if (!mfp.st.closeBtnInside) {
                    mfp.wrap.append(_getCloseBtn())
                } else {
                    _mfpOn(MARKUP_PARSE_EVENT, function(e, template, values, item) {
                        values.close_replaceWith = _getCloseBtn(item.type)
                    });
                    _wrapClasses += " mfp-close-btn-in"
                }
            }
            if (mfp.st.alignTop) {
                _wrapClasses += " mfp-align-top"
            }
            if (mfp.fixedContentPos) {
                mfp.wrap.css({
                    overflow: mfp.st.overflowY,
                    overflowX: "hidden",
                    overflowY: mfp.st.overflowY
                })
            } else {
                mfp.wrap.css({
                    top: _window.scrollTop(),
                    position: "absolute"
                })
            }
            if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === "auto" && !mfp.fixedContentPos) {
                mfp.bgOverlay.css({
                    height: _document.height(),
                    position: "absolute"
                })
            }
            if (mfp.st.enableEscapeKey) {
                _document.on("keyup" + EVENT_NS, function(e) {
                    if (e.keyCode === 27) {
                        mfp.close()
                    }
                })
            }
            _window.on("resize" + EVENT_NS, function() {
                mfp.updateSize()
            });
            if (!mfp.st.closeOnContentClick) {
                _wrapClasses += " mfp-auto-cursor"
            }
            if (_wrapClasses)
                mfp.wrap.addClass(_wrapClasses);
            var windowHeight = mfp.wH = _window.height();
            var windowStyles = {};
            if (mfp.fixedContentPos) {
                if (mfp._hasScrollBar(windowHeight)) {
                    var s = mfp._getScrollbarSize();
                    if (s) {
                        windowStyles.marginRight = s
                    }
                }
            }
            if (mfp.fixedContentPos) {
                if (!mfp.isIE7) {
                    windowStyles.overflow = "hidden"
                } else {
                    $("body, html").css("overflow", "hidden")
                }
            }
            var classesToadd = mfp.st.mainClass;
            if (mfp.isIE7) {
                classesToadd += " mfp-ie7"
            }
            if (classesToadd) {
                mfp._addClassToMFP(classesToadd)
            }
            mfp.updateItemHTML();
            _mfpTrigger("BuildControls");
            $("html").css(windowStyles);
            mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));
            mfp._lastFocusedEl = document.activeElement;
            setTimeout(function() {
                if (mfp.content) {
                    mfp._addClassToMFP(READY_CLASS);
                    mfp._setFocus()
                } else {
                    mfp.bgOverlay.addClass(READY_CLASS)
                }
                _document.on("focusin" + EVENT_NS, mfp._onFocusIn)
            }, 16);
            mfp.isOpen = true;
            mfp.updateSize(windowHeight);
            _mfpTrigger(OPEN_EVENT);
            return data
        },
        close: function() {
            if (!mfp.isOpen)
                return;
            _mfpTrigger(BEFORE_CLOSE_EVENT);
            mfp.isOpen = false;
            if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
                mfp._addClassToMFP(REMOVING_CLASS);
                setTimeout(function() {
                    mfp._close()
                }, mfp.st.removalDelay)
            } else {
                mfp._close()
            }
        },
        _close: function() {
            _mfpTrigger(CLOSE_EVENT);
            var classesToRemove = REMOVING_CLASS + " " + READY_CLASS + " ";
            mfp.bgOverlay.detach();
            mfp.wrap.detach();
            mfp.container.empty();
            if (mfp.st.mainClass) {
                classesToRemove += mfp.st.mainClass + " "
            }
            mfp._removeClassFromMFP(classesToRemove);
            if (mfp.fixedContentPos) {
                var windowStyles = {
                    marginRight: ""
                };
                if (mfp.isIE7) {
                    $("body, html").css("overflow", "")
                } else {
                    windowStyles.overflow = ""
                }
                $("html").css(windowStyles)
            }
            _document.off("keyup" + EVENT_NS + " focusin" + EVENT_NS);
            mfp.ev.off(EVENT_NS);
            mfp.wrap.attr("class", "mfp-wrap").removeAttr("style");
            mfp.bgOverlay.attr("class", "mfp-bg");
            mfp.container.attr("class", "mfp-container");
            if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
                if (mfp.currTemplate.closeBtn)
                    mfp.currTemplate.closeBtn.detach()
            }
            if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
                $(mfp._lastFocusedEl).focus()
            }
            mfp.currItem = null;
            mfp.content = null;
            mfp.currTemplate = null;
            mfp.prevHeight = 0;
            _mfpTrigger(AFTER_CLOSE_EVENT)
        },
        updateSize: function(winHeight) {
            if (mfp.isIOS) {
                var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
                var height = window.innerHeight * zoomLevel;
                mfp.wrap.css("height", height);
                mfp.wH = height
            } else {
                mfp.wH = winHeight || _window.height()
            }
            if (!mfp.fixedContentPos) {
                mfp.wrap.css("height", mfp.wH)
            }
            _mfpTrigger("Resize")
        },
        updateItemHTML: function() {
            var item = mfp.items[mfp.index];
            mfp.contentContainer.detach();
            if (mfp.content)
                mfp.content.detach();
            if (!item.parsed) {
                item = mfp.parseEl(mfp.index)
            }
            var type = item.type;
            _mfpTrigger("BeforeChange", [mfp.currItem ? mfp.currItem.type : "", type]);
            mfp.currItem = item;
            if (!mfp.currTemplate[type]) {
                var markup = mfp.st[type] ? mfp.st[type].markup : false;
                _mfpTrigger("FirstMarkupParse", markup);
                if (markup) {
                    mfp.currTemplate[type] = $(markup)
                } else {
                    mfp.currTemplate[type] = true
                }
            }
            if (_prevContentType && _prevContentType !== item.type) {
                mfp.container.removeClass("mfp-" + _prevContentType + "-holder")
            }
            var newContent = mfp["get" + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
            mfp.appendContent(newContent, type);
            item.preloaded = true;
            _mfpTrigger(CHANGE_EVENT, item);
            _prevContentType = item.type;
            mfp.container.prepend(mfp.contentContainer);
            _mfpTrigger("AfterChange")
        },
        appendContent: function(newContent, type) {
            mfp.content = newContent;
            if (newContent) {
                if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
                    if (!mfp.content.find(".mfp-close").length) {
                        mfp.content.append(_getCloseBtn())
                    }
                } else {
                    mfp.content = newContent
                }
            } else {
                mfp.content = ""
            }
            _mfpTrigger(BEFORE_APPEND_EVENT);
            mfp.container.addClass("mfp-" + type + "-holder");
            mfp.contentContainer.append(mfp.content)
        },
        parseEl: function(index) {
            var item = mfp.items[index], type;
            if (item.tagName) {
                item = {
                    el: $(item)
                }
            } else {
                type = item.type;
                item = {
                    data: item,
                    src: item.src
                }
            }
            if (item.el) {
                var types = mfp.types;
                for (var i = 0; i < types.length; i++) {
                    if (item.el.hasClass("mfp-" + types[i])) {
                        type = types[i];
                        break
                    }
                }
                item.src = item.el.attr("data-mfp-src");
                if (!item.src) {
                    item.src = item.el.attr("href")
                }
            }
            item.type = type || mfp.st.type || "inline";
            item.index = index;
            item.parsed = true;
            mfp.items[index] = item;
            _mfpTrigger("ElementParse", item);
            return mfp.items[index]
        },
        addGroup: function(el, options) {
            var eHandler = function(e) {
                e.mfpEl = this;
                mfp._openClick(e, el, options)
            };
            if (!options) {
                options = {}
            }
            var eName = "click.magnificPopup";
            options.mainEl = el;
            if (options.items) {
                options.isObj = true;
                el.off(eName).on(eName, eHandler)
            } else {
                options.isObj = false;
                if (options.delegate) {
                    el.off(eName).on(eName, options.delegate, eHandler)
                } else {
                    options.items = el;
                    el.off(eName).on(eName, eHandler)
                }
            }
        },
        _openClick: function(e, el, options) {
            var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;
            if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
                return
            }
            var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;
            if (disableOn) {
                if ($.isFunction(disableOn)) {
                    if (!disableOn.call(mfp)) {
                        return true
                    }
                } else {
                    if (_window.width() < disableOn) {
                        return true
                    }
                }
            }
            if (e.type) {
                e.preventDefault();
                if (mfp.isOpen) {
                    e.stopPropagation()
                }
            }
            options.el = $(e.mfpEl);
            if (options.delegate) {
                options.items = el.find(options.delegate)
            }
            mfp.open(options)
        },
        updateStatus: function(status, text) {
            if (mfp.preloader) {
                if (_prevStatus !== status) {
                    mfp.container.removeClass("mfp-s-" + _prevStatus)
                }
                if (!text && status === "loading") {
                    text = mfp.st.tLoading
                }
                var data = {
                    status: status,
                    text: text
                };
                _mfpTrigger("UpdateStatus", data);
                status = data.status;
                text = data.text;
                mfp.preloader.html(text);
                mfp.preloader.find("a").on("click", function(e) {
                    e.stopImmediatePropagation()
                });
                mfp.container.addClass("mfp-s-" + status);
                _prevStatus = status
            }
        },
        _checkIfClose: function(target) {
            if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
                return
            }
            var closeOnContent = mfp.st.closeOnContentClick;
            var closeOnBg = mfp.st.closeOnBgClick;
            if (closeOnContent && closeOnBg) {
                return true
            } else {
                if (!mfp.content || $(target).hasClass("mfp-close") || mfp.preloader && target === mfp.preloader[0]) {
                    return true
                }
                if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
                    if (closeOnBg) {
                        if ($.contains(document, target)) {
                            return true
                        }
                    }
                } else if (closeOnContent) {
                    return true
                }
            }
            return false
        },
        _addClassToMFP: function(cName) {
            mfp.bgOverlay.addClass(cName);
            mfp.wrap.addClass(cName)
        },
        _removeClassFromMFP: function(cName) {
            this.bgOverlay.removeClass(cName);
            mfp.wrap.removeClass(cName)
        },
        _hasScrollBar: function(winHeight) {
            return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height())
        },
        _setFocus: function() {
            (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus()
        },
        _onFocusIn: function(e) {
            if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
                mfp._setFocus();
                return false
            }
        },
        _parseMarkup: function(template, values, item) {
            var arr;
            if (item.data) {
                values = $.extend(item.data, values)
            }
            _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);
            $.each(values, function(key, value) {
                if (value === undefined || value === false) {
                    return true
                }
                arr = key.split("_");
                if (arr.length > 1) {
                    var el = template.find(EVENT_NS + "-" + arr[0]);
                    if (el.length > 0) {
                        var attr = arr[1];
                        if (attr === "replaceWith") {
                            if (el[0] !== value[0]) {
                                el.replaceWith(value)
                            }
                        } else if (attr === "img") {
                            if (el.is("img")) {
                                el.attr("src", value)
                            } else {
                                el.replaceWith($("<img>").attr("src", value).attr("class", el.attr("class")))
                            }
                        } else {
                            el.attr(arr[1], value)
                        }
                    }
                } else {
                    template.find(EVENT_NS + "-" + key).html(value)
                }
            })
        },
        _getScrollbarSize: function() {
            if (mfp.scrollbarSize === undefined) {
                var scrollDiv = document.createElement("div");
                scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
                document.body.appendChild(scrollDiv);
                mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                document.body.removeChild(scrollDiv)
            }
            return mfp.scrollbarSize
        }
    };
    $.magnificPopup = {
        instance: null,
        proto: MagnificPopup.prototype,
        modules: [],
        open: function(options, index) {
            _checkInstance();
            if (!options) {
                options = {}
            } else {
                options = $.extend(true, {}, options)
            }
            options.isObj = true;
            options.index = index || 0;
            return this.instance.open(options)
        },
        close: function() {
            return $.magnificPopup.instance && $.magnificPopup.instance.close()
        },
        registerModule: function(name, module) {
            if (module.options) {
                $.magnificPopup.defaults[name] = module.options
            }
            $.extend(this.proto, module.proto);
            this.modules.push(name)
        },
        defaults: {
            disableOn: 0,
            key: null,
            midClick: false,
            mainClass: "",
            preloader: true,
            focus: "",
            closeOnContentClick: false,
            closeOnBgClick: true,
            closeBtnInside: true,
            showCloseBtn: true,
            enableEscapeKey: true,
            modal: false,
            alignTop: false,
            removalDelay: 0,
            prependTo: null,
            fixedContentPos: "auto",
            fixedBgPos: "auto",
            overflowY: "auto",
            closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',
            tClose: "Close (Esc)",
            tLoading: "Loading...",
            autoFocusLast: true
        }
    };
    $.fn.magnificPopup = function(options) {
        _checkInstance();
        var jqEl = $(this);
        if (typeof options === "string") {
            if (options === "open") {
                var items, itemOpts = _isJQ ? jqEl.data("magnificPopup") : jqEl[0].magnificPopup, index = parseInt(arguments[1], 10) || 0;
                if (itemOpts.items) {
                    items = itemOpts.items[index]
                } else {
                    items = jqEl;
                    if (itemOpts.delegate) {
                        items = items.find(itemOpts.delegate)
                    }
                    items = items.eq(index)
                }
                mfp._openClick({
                    mfpEl: items
                }, jqEl, itemOpts)
            } else {
                if (mfp.isOpen)
                    mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1))
            }
        } else {
            options = $.extend(true, {}, options);
            if (_isJQ) {
                jqEl.data("magnificPopup", options)
            } else {
                jqEl[0].magnificPopup = options
            }
            mfp.addGroup(jqEl, options)
        }
        return jqEl
    }
    ;
    var INLINE_NS = "inline", _hiddenClass, _inlinePlaceholder, _lastInlineElement, _putInlineElementsBack = function() {
        if (_lastInlineElement) {
            _inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
            _lastInlineElement = null
        }
    };
    $.magnificPopup.registerModule(INLINE_NS, {
        options: {
            hiddenClass: "hide",
            markup: "",
            tNotFound: "Content not found"
        },
        proto: {
            initInline: function() {
                mfp.types.push(INLINE_NS);
                _mfpOn(CLOSE_EVENT + "." + INLINE_NS, function() {
                    _putInlineElementsBack()
                })
            },
            getInline: function(item, template) {
                _putInlineElementsBack();
                if (item.src) {
                    var inlineSt = mfp.st.inline
                      , el = $(item.src);
                    if (el.length) {
                        var parent = el[0].parentNode;
                        if (parent && parent.tagName) {
                            if (!_inlinePlaceholder) {
                                _hiddenClass = inlineSt.hiddenClass;
                                _inlinePlaceholder = _getEl(_hiddenClass);
                                _hiddenClass = "mfp-" + _hiddenClass
                            }
                            _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass)
                        }
                        mfp.updateStatus("ready")
                    } else {
                        mfp.updateStatus("error", inlineSt.tNotFound);
                        el = $("<div>")
                    }
                    item.inlineElement = el;
                    return el
                }
                mfp.updateStatus("ready");
                mfp._parseMarkup(template, {}, item);
                return template
            }
        }
    });
    var AJAX_NS = "ajax", _ajaxCur, _removeAjaxCursor = function() {
        if (_ajaxCur) {
            $(document.body).removeClass(_ajaxCur)
        }
    }, _destroyAjaxRequest = function() {
        _removeAjaxCursor();
        if (mfp.req) {
            mfp.req.abort()
        }
    };
    $.magnificPopup.registerModule(AJAX_NS, {
        options: {
            settings: null,
            cursor: "mfp-ajax-cur",
            tError: '<a href="%url%">The content</a> could not be loaded.'
        },
        proto: {
            initAjax: function() {
                mfp.types.push(AJAX_NS);
                _ajaxCur = mfp.st.ajax.cursor;
                _mfpOn(CLOSE_EVENT + "." + AJAX_NS, _destroyAjaxRequest);
                _mfpOn("BeforeChange." + AJAX_NS, _destroyAjaxRequest)
            },
            getAjax: function(item) {
                if (_ajaxCur) {
                    $(document.body).addClass(_ajaxCur)
                }
                mfp.updateStatus("loading");
                var opts = $.extend({
                    url: item.src,
                    success: function(data, textStatus, jqXHR) {
                        var temp = {
                            data: data,
                            xhr: jqXHR
                        };
                        _mfpTrigger("ParseAjax", temp);
                        mfp.appendContent($(temp.data), AJAX_NS);
                        item.finished = true;
                        _removeAjaxCursor();
                        mfp._setFocus();
                        setTimeout(function() {
                            mfp.wrap.addClass(READY_CLASS)
                        }, 16);
                        mfp.updateStatus("ready");
                        _mfpTrigger("AjaxContentAdded")
                    },
                    error: function() {
                        _removeAjaxCursor();
                        item.finished = item.loadError = true;
                        mfp.updateStatus("error", mfp.st.ajax.tError.replace("%url%", item.src))
                    }
                }, mfp.st.ajax.settings);
                mfp.req = $.ajax(opts);
                return ""
            }
        }
    });
    var _imgInterval, _getTitle = function(item) {
        if (item.data && item.data.title !== undefined)
            return item.data.title;
        var src = mfp.st.image.titleSrc;
        if (src) {
            if ($.isFunction(src)) {
                return src.call(mfp, item)
            } else if (item.el) {
                return item.el.attr(src) || ""
            }
        }
        return ""
    };
    $.magnificPopup.registerModule("image", {
        options: {
            markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + "<figure>" + '<div class="mfp-img"></div>' + "<figcaption>" + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + "</div>" + "</figcaption>" + "</figure>" + "</div>",
            cursor: "mfp-zoom-out-cur",
            titleSrc: "title",
            verticalFit: true,
            tError: '<a href="%url%">The image</a> could not be loaded.'
        },
        proto: {
            initImage: function() {
                var imgSt = mfp.st.image
                  , ns = ".image";
                mfp.types.push("image");
                _mfpOn(OPEN_EVENT + ns, function() {
                    if (mfp.currItem.type === "image" && imgSt.cursor) {
                        $(document.body).addClass(imgSt.cursor)
                    }
                });
                _mfpOn(CLOSE_EVENT + ns, function() {
                    if (imgSt.cursor) {
                        $(document.body).removeClass(imgSt.cursor)
                    }
                    _window.off("resize" + EVENT_NS)
                });
                _mfpOn("Resize" + ns, mfp.resizeImage);
                if (mfp.isLowIE) {
                    _mfpOn("AfterChange", mfp.resizeImage)
                }
            },
            resizeImage: function() {
                var item = mfp.currItem;
                if (!item || !item.img)
                    return;
                if (mfp.st.image.verticalFit) {
                    var decr = 0;
                    if (mfp.isLowIE) {
                        decr = parseInt(item.img.css("padding-top"), 10) + parseInt(item.img.css("padding-bottom"), 10)
                    }
                    item.img.css("max-height", mfp.wH - decr)
                }
            },
            _onImageHasSize: function(item) {
                if (item.img) {
                    item.hasSize = true;
                    if (_imgInterval) {
                        clearInterval(_imgInterval)
                    }
                    item.isCheckingImgSize = false;
                    _mfpTrigger("ImageHasSize", item);
                    if (item.imgHidden) {
                        if (mfp.content)
                            mfp.content.removeClass("mfp-loading");
                        item.imgHidden = false
                    }
                }
            },
            findImageSize: function(item) {
                var counter = 0
                  , img = item.img[0]
                  , mfpSetInterval = function(delay) {
                    if (_imgInterval) {
                        clearInterval(_imgInterval)
                    }
                    _imgInterval = setInterval(function() {
                        if (img.naturalWidth > 0) {
                            mfp._onImageHasSize(item);
                            return
                        }
                        if (counter > 200) {
                            clearInterval(_imgInterval)
                        }
                        counter++;
                        if (counter === 3) {
                            mfpSetInterval(10)
                        } else if (counter === 40) {
                            mfpSetInterval(50)
                        } else if (counter === 100) {
                            mfpSetInterval(500)
                        }
                    }, delay)
                };
                mfpSetInterval(1)
            },
            getImage: function(item, template) {
                var guard = 0
                  , onLoadComplete = function() {
                    if (item) {
                        if (item.img[0].complete) {
                            item.img.off(".mfploader");
                            if (item === mfp.currItem) {
                                mfp._onImageHasSize(item);
                                mfp.updateStatus("ready")
                            }
                            item.hasSize = true;
                            item.loaded = true;
                            _mfpTrigger("ImageLoadComplete")
                        } else {
                            guard++;
                            if (guard < 200) {
                                setTimeout(onLoadComplete, 100)
                            } else {
                                onLoadError()
                            }
                        }
                    }
                }
                  , onLoadError = function() {
                    if (item) {
                        item.img.off(".mfploader");
                        if (item === mfp.currItem) {
                            mfp._onImageHasSize(item);
                            mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src))
                        }
                        item.hasSize = true;
                        item.loaded = true;
                        item.loadError = true
                    }
                }
                  , imgSt = mfp.st.image;
                var el = template.find(".mfp-img");
                if (el.length) {
                    var img = document.createElement("img");
                    img.className = "mfp-img";
                    if (item.el && item.el.find("img").length) {
                        img.alt = item.el.find("img").attr("alt")
                    }
                    item.img = $(img).on("load.mfploader", onLoadComplete).on("error.mfploader", onLoadError);
                    img.src = item.src;
                    if (el.is("img")) {
                        item.img = item.img.clone()
                    }
                    img = item.img[0];
                    if (img.naturalWidth > 0) {
                        item.hasSize = true
                    } else if (!img.width) {
                        item.hasSize = false
                    }
                }
                mfp._parseMarkup(template, {
                    title: _getTitle(item),
                    img_replaceWith: item.img
                }, item);
                mfp.resizeImage();
                if (item.hasSize) {
                    if (_imgInterval)
                        clearInterval(_imgInterval);
                    if (item.loadError) {
                        template.addClass("mfp-loading");
                        mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src))
                    } else {
                        template.removeClass("mfp-loading");
                        mfp.updateStatus("ready")
                    }
                    return template
                }
                mfp.updateStatus("loading");
                item.loading = true;
                if (!item.hasSize) {
                    item.imgHidden = true;
                    template.addClass("mfp-loading");
                    mfp.findImageSize(item)
                }
                return template
            }
        }
    });
    var hasMozTransform, getHasMozTransform = function() {
        if (hasMozTransform === undefined) {
            hasMozTransform = document.createElement("p").style.MozTransform !== undefined
        }
        return hasMozTransform
    };
    $.magnificPopup.registerModule("zoom", {
        options: {
            enabled: false,
            easing: "ease-in-out",
            duration: 300,
            opener: function(element) {
                return element.is("img") ? element : element.find("img")
            }
        },
        proto: {
            initZoom: function() {
                var zoomSt = mfp.st.zoom, ns = ".zoom", image;
                if (!zoomSt.enabled || !mfp.supportsTransition) {
                    return
                }
                var duration = zoomSt.duration, getElToAnimate = function(image) {
                    var newImg = image.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image")
                      , transition = "all " + zoomSt.duration / 1e3 + "s " + zoomSt.easing
                      , cssObj = {
                        position: "fixed",
                        zIndex: 9999,
                        left: 0,
                        top: 0,
                        "-webkit-backface-visibility": "hidden"
                    }
                      , t = "transition";
                    cssObj["-webkit-" + t] = cssObj["-moz-" + t] = cssObj["-o-" + t] = cssObj[t] = transition;
                    newImg.css(cssObj);
                    return newImg
                }, showMainContent = function() {
                    mfp.content.css("visibility", "visible")
                }, openTimeout, animatedImg;
                _mfpOn("BuildControls" + ns, function() {
                    if (mfp._allowZoom()) {
                        clearTimeout(openTimeout);
                        mfp.content.css("visibility", "hidden");
                        image = mfp._getItemToZoom();
                        if (!image) {
                            showMainContent();
                            return
                        }
                        animatedImg = getElToAnimate(image);
                        animatedImg.css(mfp._getOffset());
                        mfp.wrap.append(animatedImg);
                        openTimeout = setTimeout(function() {
                            animatedImg.css(mfp._getOffset(true));
                            openTimeout = setTimeout(function() {
                                showMainContent();
                                setTimeout(function() {
                                    animatedImg.remove();
                                    image = animatedImg = null;
                                    _mfpTrigger("ZoomAnimationEnded")
                                }, 16)
                            }, duration)
                        }, 16)
                    }
                });
                _mfpOn(BEFORE_CLOSE_EVENT + ns, function() {
                    if (mfp._allowZoom()) {
                        clearTimeout(openTimeout);
                        mfp.st.removalDelay = duration;
                        if (!image) {
                            image = mfp._getItemToZoom();
                            if (!image) {
                                return
                            }
                            animatedImg = getElToAnimate(image)
                        }
                        animatedImg.css(mfp._getOffset(true));
                        mfp.wrap.append(animatedImg);
                        mfp.content.css("visibility", "hidden");
                        setTimeout(function() {
                            animatedImg.css(mfp._getOffset())
                        }, 16)
                    }
                });
                _mfpOn(CLOSE_EVENT + ns, function() {
                    if (mfp._allowZoom()) {
                        showMainContent();
                        if (animatedImg) {
                            animatedImg.remove()
                        }
                        image = null
                    }
                })
            },
            _allowZoom: function() {
                return mfp.currItem.type === "image"
            },
            _getItemToZoom: function() {
                if (mfp.currItem.hasSize) {
                    return mfp.currItem.img
                } else {
                    return false
                }
            },
            _getOffset: function(isLarge) {
                var el;
                if (isLarge) {
                    el = mfp.currItem.img
                } else {
                    el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem)
                }
                var offset = el.offset();
                var paddingTop = parseInt(el.css("padding-top"), 10);
                var paddingBottom = parseInt(el.css("padding-bottom"), 10);
                offset.top -= $(window).scrollTop() - paddingTop;
                var obj = {
                    width: el.width(),
                    height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
                };
                if (getHasMozTransform()) {
                    obj["-moz-transform"] = obj["transform"] = "translate(" + offset.left + "px," + offset.top + "px)"
                } else {
                    obj.left = offset.left;
                    obj.top = offset.top
                }
                return obj
            }
        }
    });
    var IFRAME_NS = "iframe"
      , _emptyPage = "//about:blank"
      , _fixIframeBugs = function(isShowing) {
        if (mfp.currTemplate[IFRAME_NS]) {
            var el = mfp.currTemplate[IFRAME_NS].find("iframe");
            if (el.length) {
                if (!isShowing) {
                    el[0].src = _emptyPage
                }
                if (mfp.isIE8) {
                    el.css("display", isShowing ? "block" : "none")
                }
            }
        }
    };
    $.magnificPopup.registerModule(IFRAME_NS, {
        options: {
            markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + "</div>",
            srcAction: "iframe_src",
            patterns: {
                youtube: {
                    index: "youtube.com",
                    id: "v=",
                    src: "//www.youtube.com/embed/%id%?autoplay=1"
                },
                vimeo: {
                    index: "vimeo.com/",
                    id: "/",
                    src: "//player.vimeo.com/video/%id%?autoplay=1"
                },
                gmaps: {
                    index: "//maps.google.",
                    src: "%id%&output=embed"
                }
            }
        },
        proto: {
            initIframe: function() {
                mfp.types.push(IFRAME_NS);
                _mfpOn("BeforeChange", function(e, prevType, newType) {
                    if (prevType !== newType) {
                        if (prevType === IFRAME_NS) {
                            _fixIframeBugs()
                        } else if (newType === IFRAME_NS) {
                            _fixIframeBugs(true)
                        }
                    }
                });
                _mfpOn(CLOSE_EVENT + "." + IFRAME_NS, function() {
                    _fixIframeBugs()
                })
            },
            getIframe: function(item, template) {
                var embedSrc = item.src;
                var iframeSt = mfp.st.iframe;
                $.each(iframeSt.patterns, function() {
                    if (embedSrc.indexOf(this.index) > -1) {
                        if (this.id) {
                            if (typeof this.id === "string") {
                                embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length)
                            } else {
                                embedSrc = this.id.call(this, embedSrc)
                            }
                        }
                        embedSrc = this.src.replace("%id%", embedSrc);
                        return false
                    }
                });
                var dataObj = {};
                if (iframeSt.srcAction) {
                    dataObj[iframeSt.srcAction] = embedSrc
                }
                mfp._parseMarkup(template, dataObj, item);
                mfp.updateStatus("ready");
                return template
            }
        }
    });
    var _getLoopedId = function(index) {
        var numSlides = mfp.items.length;
        if (index > numSlides - 1) {
            return index - numSlides
        } else if (index < 0) {
            return numSlides + index
        }
        return index
    }
      , _replaceCurrTotal = function(text, curr, total) {
        return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total)
    };
    $.magnificPopup.registerModule("gallery", {
        options: {
            enabled: false,
            arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
            preload: [0, 2],
            navigateByImgClick: true,
            arrows: true,
            tPrev: "Previous (Left arrow key)",
            tNext: "Next (Right arrow key)",
            tCounter: "%curr% of %total%"
        },
        proto: {
            initGallery: function() {
                var gSt = mfp.st.gallery
                  , ns = ".mfp-gallery";
                mfp.direction = true;
                if (!gSt || !gSt.enabled)
                    return false;
                _wrapClasses += " mfp-gallery";
                _mfpOn(OPEN_EVENT + ns, function() {
                    if (gSt.navigateByImgClick) {
                        mfp.wrap.on("click" + ns, ".mfp-img", function() {
                            if (mfp.items.length > 1) {
                                mfp.next();
                                return false
                            }
                        })
                    }
                    _document.on("keydown" + ns, function(e) {
                        if (e.keyCode === 37) {
                            mfp.prev()
                        } else if (e.keyCode === 39) {
                            mfp.next()
                        }
                    })
                });
                _mfpOn("UpdateStatus" + ns, function(e, data) {
                    if (data.text) {
                        data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length)
                    }
                });
                _mfpOn(MARKUP_PARSE_EVENT + ns, function(e, element, values, item) {
                    var l = mfp.items.length;
                    values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : ""
                });
                _mfpOn("BuildControls" + ns, function() {
                    if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
                        var markup = gSt.arrowMarkup
                          , arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, "left")).addClass(PREVENT_CLOSE_CLASS)
                          , arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, "right")).addClass(PREVENT_CLOSE_CLASS);
                        arrowLeft.click(function() {
                            mfp.prev()
                        });
                        arrowRight.click(function() {
                            mfp.next()
                        });
                        mfp.container.append(arrowLeft.add(arrowRight))
                    }
                });
                _mfpOn(CHANGE_EVENT + ns, function() {
                    if (mfp._preloadTimeout)
                        clearTimeout(mfp._preloadTimeout);
                    mfp._preloadTimeout = setTimeout(function() {
                        mfp.preloadNearbyImages();
                        mfp._preloadTimeout = null
                    }, 16)
                });
                _mfpOn(CLOSE_EVENT + ns, function() {
                    _document.off(ns);
                    mfp.wrap.off("click" + ns);
                    mfp.arrowRight = mfp.arrowLeft = null
                })
            },
            next: function() {
                mfp.direction = true;
                mfp.index = _getLoopedId(mfp.index + 1);
                mfp.updateItemHTML()
            },
            prev: function() {
                mfp.direction = false;
                mfp.index = _getLoopedId(mfp.index - 1);
                mfp.updateItemHTML()
            },
            goTo: function(newIndex) {
                mfp.direction = newIndex >= mfp.index;
                mfp.index = newIndex;
                mfp.updateItemHTML()
            },
            preloadNearbyImages: function() {
                var p = mfp.st.gallery.preload, preloadBefore = Math.min(p[0], mfp.items.length), preloadAfter = Math.min(p[1], mfp.items.length), i;
                for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
                    mfp._preloadItem(mfp.index + i)
                }
                for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
                    mfp._preloadItem(mfp.index - i)
                }
            },
            _preloadItem: function(index) {
                index = _getLoopedId(index);
                if (mfp.items[index].preloaded) {
                    return
                }
                var item = mfp.items[index];
                if (!item.parsed) {
                    item = mfp.parseEl(index)
                }
                _mfpTrigger("LazyLoad", item);
                if (item.type === "image") {
                    item.img = $('<img class="mfp-img" />').on("load.mfploader", function() {
                        item.hasSize = true
                    }).on("error.mfploader", function() {
                        item.hasSize = true;
                        item.loadError = true;
                        _mfpTrigger("LazyLoadError", item)
                    }).attr("src", item.src)
                }
                item.preloaded = true
            }
        }
    });
    var RETINA_NS = "retina";
    $.magnificPopup.registerModule(RETINA_NS, {
        options: {
            replaceSrc: function(item) {
                return item.src.replace(/\.\w+$/, function(m) {
                    return "@2x" + m
                })
            },
            ratio: 1
        },
        proto: {
            initRetina: function() {
                if (window.devicePixelRatio > 1) {
                    var st = mfp.st.retina
                      , ratio = st.ratio;
                    ratio = !isNaN(ratio) ? ratio : ratio();
                    if (ratio > 1) {
                        _mfpOn("ImageHasSize" + "." + RETINA_NS, function(e, item) {
                            item.img.css({
                                "max-width": item.img[0].naturalWidth / ratio,
                                width: "100%"
                            })
                        });
                        _mfpOn("ElementParse" + "." + RETINA_NS, function(e, item) {
                            item.src = st.replaceSrc(item, ratio)
                        })
                    }
                }
            }
        }
    });
    _checkInstance()
});
(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define(function() {
            return root.is = factory()
        })
    } else if (typeof exports === "object") {
        module.exports = factory()
    } else {
        root.is = factory()
    }
}
)(this, function() {
    var root = this || global;
    var previousIs = root.is;
    var is = {};
    is.VERSION = "0.8.0";
    is.not = {};
    is.all = {};
    is.any = {};
    var toString = Object.prototype.toString;
    var arraySlice = Array.prototype.slice;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function not(func) {
        return function() {
            return !func.apply(null, arraySlice.call(arguments))
        }
    }
    function all(func) {
        return function() {
            var parameters = arraySlice.call(arguments);
            var length = parameters.length;
            if (length === 1 && is.array(parameters[0])) {
                parameters = parameters[0];
                length = parameters.length
            }
            for (var i = 0; i < length; i++) {
                if (!func.call(null, parameters[i])) {
                    return false
                }
            }
            return true
        }
    }
    function any(func) {
        return function() {
            var parameters = arraySlice.call(arguments);
            var length = parameters.length;
            if (length === 1 && is.array(parameters[0])) {
                parameters = parameters[0];
                length = parameters.length
            }
            for (var i = 0; i < length; i++) {
                if (func.call(null, parameters[i])) {
                    return true
                }
            }
            return false
        }
    }
    is.arguments = function(value) {
        return is.not["null"](value) && (toString.call(value) === "[object Arguments]" || typeof value === "object" && "callee"in value)
    }
    ;
    is.array = Array.isArray || function(value) {
        return toString.call(value) === "[object Array]"
    }
    ;
    is["boolean"] = function(value) {
        return value === true || value === false || toString.call(value) === "[object Boolean]"
    }
    ;
    is.date = function(value) {
        return toString.call(value) === "[object Date]"
    }
    ;
    is.error = function(value) {
        return toString.call(value) === "[object Error]"
    }
    ;
    is["function"] = function(value) {
        return toString.call(value) === "[object Function]" || typeof value === "function"
    }
    ;
    is.nan = function(value) {
        return value !== value
    }
    ;
    is["null"] = function(value) {
        return value === null
    }
    ;
    is.number = function(value) {
        return is.not.nan(value) && toString.call(value) === "[object Number]"
    }
    ;
    is.object = function(value) {
        var type = typeof value;
        return type === "function" || type === "object" && !!value
    }
    ;
    is.json = function(value) {
        return toString.call(value) === "[object Object]"
    }
    ;
    is.regexp = function(value) {
        return toString.call(value) === "[object RegExp]"
    }
    ;
    is.sameType = function(value1, value2) {
        if (is.nan(value1) || is.nan(value2)) {
            return is.nan(value1) === is.nan(value2)
        }
        return toString.call(value1) === toString.call(value2)
    }
    ;
    is.sameType.api = ["not"];
    is.string = function(value) {
        return toString.call(value) === "[object String]"
    }
    ;
    is["char"] = function(value) {
        return is.string(value) && value.length === 1
    }
    ;
    is.undefined = function(value) {
        return value === void 0
    }
    ;
    is.empty = function(value) {
        if (is.object(value)) {
            var num = Object.getOwnPropertyNames(value).length;
            if (num === 0 || num === 1 && is.array(value) || num === 2 && is.arguments(value)) {
                return true
            }
            return false
        } else {
            return value === ""
        }
    }
    ;
    is.existy = function(value) {
        return value !== null && value !== undefined
    }
    ;
    is.truthy = function(value) {
        return is.existy(value) && value !== false && is.not.nan(value) && value !== "" && value !== 0
    }
    ;
    is.falsy = not(is.truthy);
    is.space = function(value) {
        if (is["char"](value)) {
            var characterCode = value.charCodeAt(0);
            return characterCode > 8 && characterCode < 14 || characterCode === 32
        } else {
            return false
        }
    }
    ;
    is.equal = function(value1, value2) {
        if (is.all.number(value1, value2)) {
            return value1 === value2 && 1 / value1 === 1 / value2
        }
        if (is.all.string(value1, value2) || is.all.regexp(value1, value2)) {
            return "" + value1 === "" + value2
        }
        if (is.all["boolean"](value1, value2)) {
            return value1 === value2
        }
        return false
    }
    ;
    is.equal.api = ["not"];
    is.even = function(numb) {
        return is.number(numb) && numb % 2 === 0
    }
    ;
    is.odd = function(numb) {
        return is.number(numb) && numb % 2 === 1
    }
    ;
    is.positive = function(numb) {
        return is.number(numb) && numb > 0
    }
    ;
    is.negative = function(numb) {
        return is.number(numb) && numb < 0
    }
    ;
    is.above = function(numb, min) {
        return is.all.number(numb, min) && numb > min
    }
    ;
    is.above.api = ["not"];
    is.under = function(numb, max) {
        return is.all.number(numb, max) && numb < max
    }
    ;
    is.under.api = ["not"];
    is.within = function(numb, min, max) {
        return is.all.number(numb, min, max) && numb > min && numb < max
    }
    ;
    is.within.api = ["not"];
    is.decimal = function(numb) {
        return is.number(numb) && numb % 1 !== 0
    }
    ;
    is.integer = function(numb) {
        return is.number(numb) && numb % 1 === 0
    }
    ;
    is.finite = isFinite || function(numb) {
        return numb !== Infinity && numb !== -Infinity && is.not.nan(numb)
    }
    ;
    is.infinite = not(is.finite);
    var regexps = {
        url: /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/i,
        email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
        creditCard: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,
        alphaNumeric: /^[A-Za-z0-9]+$/,
        timeString: /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$/,
        dateString: /^(1[0-2]|0?[1-9])\/(3[01]|[12][0-9]|0?[1-9])\/(?:[0-9]{2})?[0-9]{2}$/,
        usZipCode: /^[0-9]{5}(?:-[0-9]{4})?$/,
        caPostalCode: /^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\s?[0-9][A-Z][0-9]$/,
        ukPostCode: /^[A-Z]{1,2}[0-9RCHNQ][0-9A-Z]?\s?[0-9][ABD-HJLNP-UW-Z]{2}$|^[A-Z]{2}-?[0-9]{4}$/,
        nanpPhone: /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,
        eppPhone: /^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/,
        socialSecurityNumber: /^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$/,
        affirmative: /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/,
        hexadecimal: /^[0-9a-fA-F]+$/,
        hexColor: /^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/,
        ipv4: /^(?:(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$/,
        ipv6: /^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
        ip: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
    };
    for (var regexp in regexps) {
        if (regexps.hasOwnProperty(regexp)) {
            regexpCheck(regexp, regexps)
        }
    }
    function regexpCheck(regexp, regexps) {
        is[regexp] = function(value) {
            return regexps[regexp].test(value)
        }
    }
    is.include = function(str, substr) {
        return str.indexOf(substr) > -1
    }
    ;
    is.include.api = ["not"];
    is.upperCase = function(str) {
        return is.string(str) && str === str.toUpperCase()
    }
    ;
    is.lowerCase = function(str) {
        return is.string(str) && str === str.toLowerCase()
    }
    ;
    is.startWith = function(str, startWith) {
        return is.string(str) && str.indexOf(startWith) === 0
    }
    ;
    is.startWith.api = ["not"];
    is.endWith = function(str, endWith) {
        return is.string(str) && str.indexOf(endWith) > -1 && str.indexOf(endWith) === str.length - endWith.length
    }
    ;
    is.endWith.api = ["not"];
    is.capitalized = function(str) {
        if (is.not.string(str)) {
            return false
        }
        var words = str.split(" ");
        var capitalized = [];
        for (var i = 0; i < words.length; i++) {
            capitalized.push(words[i][0] === words[i][0].toUpperCase())
        }
        return is.all.truthy.apply(null, capitalized)
    }
    ;
    is.palindrome = function(str) {
        return is.string(str) && str == str.split("").reverse().join("")
    }
    ;
    var days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
    var months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
    is.today = function(obj) {
        var now = new Date;
        var todayString = now.toDateString();
        return is.date(obj) && obj.toDateString() === todayString
    }
    ;
    is.yesterday = function(obj) {
        var now = new Date;
        var yesterdayString = new Date(now.setDate(now.getDate() - 1)).toDateString();
        return is.date(obj) && obj.toDateString() === yesterdayString
    }
    ;
    is.tomorrow = function(obj) {
        var now = new Date;
        var tomorrowString = new Date(now.setDate(now.getDate() + 1)).toDateString();
        return is.date(obj) && obj.toDateString() === tomorrowString
    }
    ;
    is.past = function(obj) {
        var now = new Date;
        return is.date(obj) && obj.getTime() < now.getTime()
    }
    ;
    is.future = not(is.past);
    is.day = function(obj, dayString) {
        return is.date(obj) && dayString.toLowerCase() === days[obj.getDay()]
    }
    ;
    is.day.api = ["not"];
    is.month = function(obj, monthString) {
        return is.date(obj) && monthString.toLowerCase() === months[obj.getMonth()]
    }
    ;
    is.month.api = ["not"];
    is.year = function(obj, year) {
        return is.date(obj) && is.number(year) && year === obj.getFullYear()
    }
    ;
    is.year.api = ["not"];
    is.leapYear = function(year) {
        return is.number(year) && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0)
    }
    ;
    is.weekend = function(obj) {
        return is.date(obj) && (obj.getDay() === 6 || obj.getDay() === 0)
    }
    ;
    is.weekday = not(is.weekend);
    is.inDateRange = function(obj, startObj, endObj) {
        if (is.not.date(obj) || is.not.date(startObj) || is.not.date(endObj)) {
            return false
        }
        var givenDate = obj.getTime();
        var start = startObj.getTime();
        var end = endObj.getTime();
        return givenDate > start && givenDate < end
    }
    ;
    is.inDateRange.api = ["not"];
    is.inLastWeek = function(obj) {
        return is.inDateRange(obj, new Date((new Date).setDate((new Date).getDate() - 7)), new Date)
    }
    ;
    is.inLastMonth = function(obj) {
        return is.inDateRange(obj, new Date((new Date).setMonth((new Date).getMonth() - 1)), new Date)
    }
    ;
    is.inLastYear = function(obj) {
        return is.inDateRange(obj, new Date((new Date).setFullYear((new Date).getFullYear() - 1)), new Date)
    }
    ;
    is.inNextWeek = function(obj) {
        return is.inDateRange(obj, new Date, new Date((new Date).setDate((new Date).getDate() + 7)))
    }
    ;
    is.inNextMonth = function(obj) {
        return is.inDateRange(obj, new Date, new Date((new Date).setMonth((new Date).getMonth() + 1)))
    }
    ;
    is.inNextYear = function(obj) {
        return is.inDateRange(obj, new Date, new Date((new Date).setFullYear((new Date).getFullYear() + 1)))
    }
    ;
    is.quarterOfYear = function(obj, quarterNumber) {
        return is.date(obj) && is.number(quarterNumber) && quarterNumber === Math.floor((obj.getMonth() + 3) / 3)
    }
    ;
    is.quarterOfYear.api = ["not"];
    is.dayLightSavingTime = function(obj) {
        var january = new Date(obj.getFullYear(),0,1);
        var july = new Date(obj.getFullYear(),6,1);
        var stdTimezoneOffset = Math.max(january.getTimezoneOffset(), july.getTimezoneOffset());
        return obj.getTimezoneOffset() < stdTimezoneOffset
    }
    ;
    if (typeof window !== "undefined") {
        var userAgent = "navigator"in window && "userAgent"in navigator && navigator.userAgent.toLowerCase() || "";
        var vendor = "navigator"in window && "vendor"in navigator && navigator.vendor.toLowerCase() || "";
        var appVersion = "navigator"in window && "appVersion"in navigator && navigator.appVersion.toLowerCase() || "";
        is.chrome = function() {
            return /chrome|chromium/i.test(userAgent) && /google inc/.test(vendor)
        }
        ;
        is.chrome.api = ["not"];
        is.firefox = function() {
            return /firefox/i.test(userAgent)
        }
        ;
        is.firefox.api = ["not"];
        is.edge = function() {
            return /edge/i.test(userAgent)
        }
        ;
        is.edge.api = ["not"];
        is.ie = function(version) {
            if (!version) {
                return /msie/i.test(userAgent) || "ActiveXObject"in window
            }
            if (version >= 11) {
                return "ActiveXObject"in window
            }
            return new RegExp("msie " + version).test(userAgent)
        }
        ;
        is.ie.api = ["not"];
        is.opera = function() {
            return /^Opera\//.test(userAgent) || /\x20OPR\//.test(userAgent)
        }
        ;
        is.opera.api = ["not"];
        is.safari = function() {
            return /safari/i.test(userAgent) && /apple computer/i.test(vendor)
        }
        ;
        is.safari.api = ["not"];
        is.ios = function() {
            return is.iphone() || is.ipad() || is.ipod()
        }
        ;
        is.ios.api = ["not"];
        is.iphone = function() {
            return /iphone/i.test(userAgent)
        }
        ;
        is.iphone.api = ["not"];
        is.ipad = function() {
            return /ipad/i.test(userAgent)
        }
        ;
        is.ipad.api = ["not"];
        is.ipod = function() {
            return /ipod/i.test(userAgent)
        }
        ;
        is.ipod.api = ["not"];
        is.android = function() {
            return /android/i.test(userAgent)
        }
        ;
        is.android.api = ["not"];
        is.androidPhone = function() {
            return /android/i.test(userAgent) && /mobile/i.test(userAgent)
        }
        ;
        is.androidPhone.api = ["not"];
        is.androidTablet = function() {
            return /android/i.test(userAgent) && !/mobile/i.test(userAgent)
        }
        ;
        is.androidTablet.api = ["not"];
        is.blackberry = function() {
            return /blackberry/i.test(userAgent) || /BB10/i.test(userAgent)
        }
        ;
        is.blackberry.api = ["not"];
        is.desktop = function() {
            return is.not.mobile() && is.not.tablet()
        }
        ;
        is.desktop.api = ["not"];
        is.linux = function() {
            return /linux/i.test(appVersion)
        }
        ;
        is.linux.api = ["not"];
        is.mac = function() {
            return /mac/i.test(appVersion)
        }
        ;
        is.mac.api = ["not"];
        is.windows = function() {
            return /win/i.test(appVersion)
        }
        ;
        is.windows.api = ["not"];
        is.windowsPhone = function() {
            return is.windows() && /phone/i.test(userAgent)
        }
        ;
        is.windowsPhone.api = ["not"];
        is.windowsTablet = function() {
            return is.windows() && is.not.windowsPhone() && /touch/i.test(userAgent)
        }
        ;
        is.windowsTablet.api = ["not"];
        is.mobile = function() {
            return is.iphone() || is.ipod() || is.androidPhone() || is.blackberry() || is.windowsPhone()
        }
        ;
        is.mobile.api = ["not"];
        is.tablet = function() {
            return is.ipad() || is.androidTablet() || is.windowsTablet()
        }
        ;
        is.tablet.api = ["not"];
        is.online = function() {
            return navigator.onLine
        }
        ;
        is.online.api = ["not"];
        is.offline = not(is.online);
        is.offline.api = ["not"];
        is.touchDevice = function() {
            return "ontouchstart"in window || "DocumentTouch"in window && document instanceof DocumentTouch
        }
        ;
        is.touchDevice.api = ["not"]
    }
    is.propertyCount = function(obj, count) {
        if (!is.object(obj) || !is.number(count)) {
            return false
        }
        if (Object.keys) {
            return Object.keys(obj).length === count
        }
        var properties = [], property;
        for (property in obj) {
            if (hasOwnProperty.call(obj, property)) {
                properties.push(property)
            }
        }
        return properties.length === count
    }
    ;
    is.propertyCount.api = ["not"];
    is.propertyDefined = function(obj, property) {
        return is.object(obj) && is.string(property) && property in obj
    }
    ;
    is.propertyDefined.api = ["not"];
    is.windowObject = function(obj) {
        return typeof obj === "object" && "setInterval"in obj
    }
    ;
    is.domNode = function(obj) {
        return is.object(obj) && obj.nodeType > 0
    }
    ;
    is.inArray = function(val, arr) {
        if (is.not.array(arr)) {
            return false
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === val)
                return true
        }
        return false
    }
    ;
    is.inArray.api = ["not"];
    is.sorted = function(arr) {
        if (is.not.array(arr)) {
            return false
        }
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] > arr[i + 1])
                return false
        }
        return true
    }
    ;
    function setInterfaces() {
        var options = is;
        for (var option in options) {
            if (hasOwnProperty.call(options, option) && is["function"](options[option])) {
                var interfaces = options[option].api || ["not", "all", "any"];
                for (var i = 0; i < interfaces.length; i++) {
                    if (interfaces[i] === "not") {
                        is.not[option] = not(is[option])
                    }
                    if (interfaces[i] === "all") {
                        is.all[option] = all(is[option])
                    }
                    if (interfaces[i] === "any") {
                        is.any[option] = any(is[option])
                    }
                }
            }
        }
    }
    setInterfaces();
    is.setRegexp = function(regexp, regexpName) {
        for (var r in regexps) {
            if (hasOwnProperty.call(regexps, r) && regexpName === r) {
                regexps[r] = regexp
            }
        }
    }
    ;
    is.setNamespace = function() {
        root.is = previousIs;
        return this
    }
    ;
    return is
});
var _gsScope = typeof module !== "undefined" && module.exports && typeof global !== "undefined" ? global : this || window;
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function() {
    "use strict";
    _gsScope._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function(Animation, SimpleTimeline, TweenLite) {
        var _slice = function(a) {
            var b = [], l = a.length, i;
            for (i = 0; i !== l; b.push(a[i++]))
                ;
            return b
        }
          , _applyCycle = function(vars, targets, i) {
            var alt = vars.cycle, p, val;
            for (p in alt) {
                val = alt[p];
                vars[p] = typeof val === "function" ? val(i, targets[i]) : val[i % val.length]
            }
            delete vars.cycle
        }
          , TweenMax = function(target, duration, vars) {
            TweenLite.call(this, target, duration, vars);
            this._cycle = 0;
            this._yoyo = this.vars.yoyo === true;
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._dirty = true;
            this.render = TweenMax.prototype.render
        }
          , _tinyNum = 1e-10
          , TweenLiteInternals = TweenLite._internals
          , _isSelector = TweenLiteInternals.isSelector
          , _isArray = TweenLiteInternals.isArray
          , p = TweenMax.prototype = TweenLite.to({}, .1, {})
          , _blankArray = [];
        TweenMax.version = "1.19.0";
        p.constructor = TweenMax;
        p.kill()._gc = false;
        TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
        TweenMax.getTweensOf = TweenLite.getTweensOf;
        TweenMax.lagSmoothing = TweenLite.lagSmoothing;
        TweenMax.ticker = TweenLite.ticker;
        TweenMax.render = TweenLite.render;
        p.invalidate = function() {
            this._yoyo = this.vars.yoyo === true;
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._uncache(true);
            return TweenLite.prototype.invalidate.call(this)
        }
        ;
        p.updateTo = function(vars, resetDuration) {
            var curRatio = this.ratio, immediate = this.vars.immediateRender || vars.immediateRender, p;
            if (resetDuration && this._startTime < this._timeline._time) {
                this._startTime = this._timeline._time;
                this._uncache(false);
                if (this._gc) {
                    this._enabled(true, false)
                } else {
                    this._timeline.insert(this, this._startTime - this._delay)
                }
            }
            for (p in vars) {
                this.vars[p] = vars[p]
            }
            if (this._initted || immediate) {
                if (resetDuration) {
                    this._initted = false;
                    if (immediate) {
                        this.render(0, true, true)
                    }
                } else {
                    if (this._gc) {
                        this._enabled(true, false)
                    }
                    if (this._notifyPluginsOfEnabled && this._firstPT) {
                        TweenLite._onPluginEvent("_onDisable", this)
                    }
                    if (this._time / this._duration > .998) {
                        var prevTime = this._totalTime;
                        this.render(0, true, false);
                        this._initted = false;
                        this.render(prevTime, true, false)
                    } else {
                        this._initted = false;
                        this._init();
                        if (this._time > 0 || immediate) {
                            var inv = 1 / (1 - curRatio), pt = this._firstPT, endValue;
                            while (pt) {
                                endValue = pt.s + pt.c;
                                pt.c *= inv;
                                pt.s = endValue - pt.c;
                                pt = pt._next
                            }
                        }
                    }
                }
            }
            return this
        }
        ;
        p.render = function(time, suppressEvents, force) {
            if (!this._initted)
                if (this._duration === 0 && this.vars.repeat) {
                    this.invalidate()
                }
            var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(), prevTime = this._time, prevTotalTime = this._totalTime, prevCycle = this._cycle, duration = this._duration, prevRawPrevTime = this._rawPrevTime, isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime;
            if (time >= totalDur - 1e-7) {
                this._totalTime = totalDur;
                this._cycle = this._repeat;
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    this._time = 0;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0
                } else {
                    this._time = duration;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1
                }
                if (!this._reversed) {
                    isComplete = true;
                    callback = "onComplete";
                    force = force || this._timeline.autoRemoveChildren
                }
                if (duration === 0)
                    if (this._initted || !this.vars.lazy || force) {
                        if (this._startTime === this._timeline._duration) {
                            time = 0
                        }
                        if (prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || prevRawPrevTime === _tinyNum && this.data !== "isPause")
                            if (prevRawPrevTime !== time) {
                                force = true;
                                if (prevRawPrevTime > _tinyNum) {
                                    callback = "onReverseComplete"
                                }
                            }
                        this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum
                    }
            } else if (time < 1e-7) {
                this._totalTime = this._time = this._cycle = 0;
                this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                if (prevTotalTime !== 0 || duration === 0 && prevRawPrevTime > 0) {
                    callback = "onReverseComplete";
                    isComplete = this._reversed
                }
                if (time < 0) {
                    this._active = false;
                    if (duration === 0)
                        if (this._initted || !this.vars.lazy || force) {
                            if (prevRawPrevTime >= 0) {
                                force = true
                            }
                            this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum
                        }
                }
                if (!this._initted) {
                    force = true
                }
            } else {
                this._totalTime = this._time = time;
                if (this._repeat !== 0) {
                    cycleDuration = duration + this._repeatDelay;
                    this._cycle = this._totalTime / cycleDuration >> 0;
                    if (this._cycle !== 0)
                        if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                            this._cycle--
                        }
                    this._time = this._totalTime - this._cycle * cycleDuration;
                    if (this._yoyo)
                        if ((this._cycle & 1) !== 0) {
                            this._time = duration - this._time
                        }
                    if (this._time > duration) {
                        this._time = duration
                    } else if (this._time < 0) {
                        this._time = 0
                    }
                }
                if (this._easeType) {
                    r = this._time / duration;
                    type = this._easeType;
                    pow = this._easePower;
                    if (type === 1 || type === 3 && r >= .5) {
                        r = 1 - r
                    }
                    if (type === 3) {
                        r *= 2
                    }
                    if (pow === 1) {
                        r *= r
                    } else if (pow === 2) {
                        r *= r * r
                    } else if (pow === 3) {
                        r *= r * r * r
                    } else if (pow === 4) {
                        r *= r * r * r * r
                    }
                    if (type === 1) {
                        this.ratio = 1 - r
                    } else if (type === 2) {
                        this.ratio = r
                    } else if (this._time / duration < .5) {
                        this.ratio = r / 2
                    } else {
                        this.ratio = 1 - r / 2
                    }
                } else {
                    this.ratio = this._ease.getRatio(this._time / duration)
                }
            }
            if (prevTime === this._time && !force && prevCycle === this._cycle) {
                if (prevTotalTime !== this._totalTime)
                    if (this._onUpdate)
                        if (!suppressEvents) {
                            this._callback("onUpdate")
                        }
                return
            } else if (!this._initted) {
                this._init();
                if (!this._initted || this._gc) {
                    return
                } else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {
                    this._time = prevTime;
                    this._totalTime = prevTotalTime;
                    this._rawPrevTime = prevRawPrevTime;
                    this._cycle = prevCycle;
                    TweenLiteInternals.lazyTweens.push(this);
                    this._lazy = [time, suppressEvents];
                    return
                }
                if (this._time && !isComplete) {
                    this.ratio = this._ease.getRatio(this._time / duration)
                } else if (isComplete && this._ease._calcEnd) {
                    this.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1)
                }
            }
            if (this._lazy !== false) {
                this._lazy = false
            }
            if (!this._active)
                if (!this._paused && this._time !== prevTime && time >= 0) {
                    this._active = true
                }
            if (prevTotalTime === 0) {
                if (this._initted === 2 && time > 0) {
                    this._init()
                }
                if (this._startAt) {
                    if (time >= 0) {
                        this._startAt.render(time, suppressEvents, force)
                    } else if (!callback) {
                        callback = "_dummyGS"
                    }
                }
                if (this.vars.onStart)
                    if (this._totalTime !== 0 || duration === 0)
                        if (!suppressEvents) {
                            this._callback("onStart")
                        }
            }
            pt = this._firstPT;
            while (pt) {
                if (pt.f) {
                    pt.t[pt.p](pt.c * this.ratio + pt.s)
                } else {
                    pt.t[pt.p] = pt.c * this.ratio + pt.s
                }
                pt = pt._next
            }
            if (this._onUpdate) {
                if (time < 0)
                    if (this._startAt && this._startTime) {
                        this._startAt.render(time, suppressEvents, force)
                    }
                if (!suppressEvents)
                    if (this._totalTime !== prevTotalTime || callback) {
                        this._callback("onUpdate")
                    }
            }
            if (this._cycle !== prevCycle)
                if (!suppressEvents)
                    if (!this._gc)
                        if (this.vars.onRepeat) {
                            this._callback("onRepeat")
                        }
            if (callback)
                if (!this._gc || force) {
                    if (time < 0 && this._startAt && !this._onUpdate && this._startTime) {
                        this._startAt.render(time, suppressEvents, force)
                    }
                    if (isComplete) {
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false)
                        }
                        this._active = false
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback)
                    }
                    if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {
                        this._rawPrevTime = 0
                    }
                }
        }
        ;
        TweenMax.to = function(target, duration, vars) {
            return new TweenMax(target,duration,vars)
        }
        ;
        TweenMax.from = function(target, duration, vars) {
            vars.runBackwards = true;
            vars.immediateRender = vars.immediateRender != false;
            return new TweenMax(target,duration,vars)
        }
        ;
        TweenMax.fromTo = function(target, duration, fromVars, toVars) {
            toVars.startAt = fromVars;
            toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
            return new TweenMax(target,duration,toVars)
        }
        ;
        TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            stagger = stagger || 0;
            var delay = 0, a = [], finalComplete = function() {
                if (vars.onComplete) {
                    vars.onComplete.apply(vars.onCompleteScope || this, arguments)
                }
                onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray)
            }, cycle = vars.cycle, fromCycle = vars.startAt && vars.startAt.cycle, l, copy, i, p;
            if (!_isArray(targets)) {
                if (typeof targets === "string") {
                    targets = TweenLite.selector(targets) || targets
                }
                if (_isSelector(targets)) {
                    targets = _slice(targets)
                }
            }
            targets = targets || [];
            if (stagger < 0) {
                targets = _slice(targets);
                targets.reverse();
                stagger *= -1
            }
            l = targets.length - 1;
            for (i = 0; i <= l; i++) {
                copy = {};
                for (p in vars) {
                    copy[p] = vars[p]
                }
                if (cycle) {
                    _applyCycle(copy, targets, i);
                    if (copy.duration != null) {
                        duration = copy.duration;
                        delete copy.duration
                    }
                }
                if (fromCycle) {
                    fromCycle = copy.startAt = {};
                    for (p in vars.startAt) {
                        fromCycle[p] = vars.startAt[p]
                    }
                    _applyCycle(copy.startAt, targets, i)
                }
                copy.delay = delay + (copy.delay || 0);
                if (i === l && onCompleteAll) {
                    copy.onComplete = finalComplete
                }
                a[i] = new TweenMax(targets[i],duration,copy);
                delay += stagger
            }
            return a
        }
        ;
        TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            vars.runBackwards = true;
            vars.immediateRender = vars.immediateRender != false;
            return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope)
        }
        ;
        TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            toVars.startAt = fromVars;
            toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
            return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope)
        }
        ;
        TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
            return new TweenMax(callback,0,{
                delay: delay,
                onComplete: callback,
                onCompleteParams: params,
                callbackScope: scope,
                onReverseComplete: callback,
                onReverseCompleteParams: params,
                immediateRender: false,
                useFrames: useFrames,
                overwrite: 0
            })
        }
        ;
        TweenMax.set = function(target, vars) {
            return new TweenMax(target,0,vars)
        }
        ;
        TweenMax.isTweening = function(target) {
            return TweenLite.getTweensOf(target, true).length > 0
        }
        ;
        var _getChildrenOf = function(timeline, includeTimelines) {
            var a = []
              , cnt = 0
              , tween = timeline._first;
            while (tween) {
                if (tween instanceof TweenLite) {
                    a[cnt++] = tween
                } else {
                    if (includeTimelines) {
                        a[cnt++] = tween
                    }
                    a = a.concat(_getChildrenOf(tween, includeTimelines));
                    cnt = a.length
                }
                tween = tween._next
            }
            return a
        }
          , getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
            return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat(_getChildrenOf(Animation._rootFramesTimeline, includeTimelines))
        }
        ;
        TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
            if (tweens == null) {
                tweens = true
            }
            if (delayedCalls == null) {
                delayedCalls = true
            }
            var a = getAllTweens(timelines != false), l = a.length, allTrue = tweens && delayedCalls && timelines, isDC, tween, i;
            for (i = 0; i < l; i++) {
                tween = a[i];
                if (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {
                    if (complete) {
                        tween.totalTime(tween._reversed ? 0 : tween.totalDuration())
                    } else {
                        tween._enabled(false, false)
                    }
                }
            }
        }
        ;
        TweenMax.killChildTweensOf = function(parent, complete) {
            if (parent == null) {
                return
            }
            var tl = TweenLiteInternals.tweenLookup, a, curParent, p, i, l;
            if (typeof parent === "string") {
                parent = TweenLite.selector(parent) || parent
            }
            if (_isSelector(parent)) {
                parent = _slice(parent)
            }
            if (_isArray(parent)) {
                i = parent.length;
                while (--i > -1) {
                    TweenMax.killChildTweensOf(parent[i], complete)
                }
                return
            }
            a = [];
            for (p in tl) {
                curParent = tl[p].target.parentNode;
                while (curParent) {
                    if (curParent === parent) {
                        a = a.concat(tl[p].tweens)
                    }
                    curParent = curParent.parentNode
                }
            }
            l = a.length;
            for (i = 0; i < l; i++) {
                if (complete) {
                    a[i].totalTime(a[i].totalDuration())
                }
                a[i]._enabled(false, false)
            }
        }
        ;
        var _changePause = function(pause, tweens, delayedCalls, timelines) {
            tweens = tweens !== false;
            delayedCalls = delayedCalls !== false;
            timelines = timelines !== false;
            var a = getAllTweens(timelines), allTrue = tweens && delayedCalls && timelines, i = a.length, isDC, tween;
            while (--i > -1) {
                tween = a[i];
                if (allTrue || tween instanceof SimpleTimeline || (isDC = tween.target === tween.vars.onComplete) && delayedCalls || tweens && !isDC) {
                    tween.paused(pause)
                }
            }
        };
        TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
            _changePause(true, tweens, delayedCalls, timelines)
        }
        ;
        TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
            _changePause(false, tweens, delayedCalls, timelines)
        }
        ;
        TweenMax.globalTimeScale = function(value) {
            var tl = Animation._rootTimeline
              , t = TweenLite.ticker.time;
            if (!arguments.length) {
                return tl._timeScale
            }
            value = value || _tinyNum;
            tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;
            tl = Animation._rootFramesTimeline;
            t = TweenLite.ticker.frame;
            tl._startTime = t - (t - tl._startTime) * tl._timeScale / value;
            tl._timeScale = Animation._rootTimeline._timeScale = value;
            return value
        }
        ;
        p.progress = function(value, suppressEvents) {
            return !arguments.length ? this._time / this.duration() : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents)
        }
        ;
        p.totalProgress = function(value, suppressEvents) {
            return !arguments.length ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents)
        }
        ;
        p.time = function(value, suppressEvents) {
            if (!arguments.length) {
                return this._time
            }
            if (this._dirty) {
                this.totalDuration()
            }
            if (value > this._duration) {
                value = this._duration
            }
            if (this._yoyo && (this._cycle & 1) !== 0) {
                value = this._duration - value + this._cycle * (this._duration + this._repeatDelay)
            } else if (this._repeat !== 0) {
                value += this._cycle * (this._duration + this._repeatDelay)
            }
            return this.totalTime(value, suppressEvents)
        }
        ;
        p.duration = function(value) {
            if (!arguments.length) {
                return this._duration
            }
            return Animation.prototype.duration.call(this, value)
        }
        ;
        p.totalDuration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    this._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat;
                    this._dirty = false
                }
                return this._totalDuration
            }
            return this._repeat === -1 ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1))
        }
        ;
        p.repeat = function(value) {
            if (!arguments.length) {
                return this._repeat
            }
            this._repeat = value;
            return this._uncache(true)
        }
        ;
        p.repeatDelay = function(value) {
            if (!arguments.length) {
                return this._repeatDelay
            }
            this._repeatDelay = value;
            return this._uncache(true)
        }
        ;
        p.yoyo = function(value) {
            if (!arguments.length) {
                return this._yoyo
            }
            this._yoyo = value;
            return this
        }
        ;
        return TweenMax
    }, true);
    _gsScope._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function(Animation, SimpleTimeline, TweenLite) {
        var TimelineLite = function(vars) {
            SimpleTimeline.call(this, vars);
            this._labels = {};
            this.autoRemoveChildren = this.vars.autoRemoveChildren === true;
            this.smoothChildTiming = this.vars.smoothChildTiming === true;
            this._sortChildren = true;
            this._onUpdate = this.vars.onUpdate;
            var v = this.vars, val, p;
            for (p in v) {
                val = v[p];
                if (_isArray(val))
                    if (val.join("").indexOf("{self}") !== -1) {
                        v[p] = this._swapSelfInParams(val)
                    }
            }
            if (_isArray(v.tweens)) {
                this.add(v.tweens, 0, v.align, v.stagger)
            }
        }
          , _tinyNum = 1e-10
          , TweenLiteInternals = TweenLite._internals
          , _internals = TimelineLite._internals = {}
          , _isSelector = TweenLiteInternals.isSelector
          , _isArray = TweenLiteInternals.isArray
          , _lazyTweens = TweenLiteInternals.lazyTweens
          , _lazyRender = TweenLiteInternals.lazyRender
          , _globals = _gsScope._gsDefine.globals
          , _copy = function(vars) {
            var copy = {}, p;
            for (p in vars) {
                copy[p] = vars[p]
            }
            return copy
        }
          , _applyCycle = function(vars, targets, i) {
            var alt = vars.cycle, p, val;
            for (p in alt) {
                val = alt[p];
                vars[p] = typeof val === "function" ? val.call(targets[i], i) : val[i % val.length]
            }
            delete vars.cycle
        }
          , _pauseCallback = _internals.pauseCallback = function() {}
          , _slice = function(a) {
            var b = [], l = a.length, i;
            for (i = 0; i !== l; b.push(a[i++]))
                ;
            return b
        }
          , p = TimelineLite.prototype = new SimpleTimeline;
        TimelineLite.version = "1.19.0";
        p.constructor = TimelineLite;
        p.kill()._gc = p._forcingPlayhead = p._hasPause = false;
        p.to = function(target, duration, vars, position) {
            var Engine = vars.repeat && _globals.TweenMax || TweenLite;
            return duration ? this.add(new Engine(target,duration,vars), position) : this.set(target, vars, position)
        }
        ;
        p.from = function(target, duration, vars, position) {
            return this.add((vars.repeat && _globals.TweenMax || TweenLite).from(target, duration, vars), position)
        }
        ;
        p.fromTo = function(target, duration, fromVars, toVars, position) {
            var Engine = toVars.repeat && _globals.TweenMax || TweenLite;
            return duration ? this.add(Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position)
        }
        ;
        p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            var tl = new TimelineLite({
                onComplete: onCompleteAll,
                onCompleteParams: onCompleteAllParams,
                callbackScope: onCompleteAllScope,
                smoothChildTiming: this.smoothChildTiming
            }), cycle = vars.cycle, copy, i;
            if (typeof targets === "string") {
                targets = TweenLite.selector(targets) || targets
            }
            targets = targets || [];
            if (_isSelector(targets)) {
                targets = _slice(targets)
            }
            stagger = stagger || 0;
            if (stagger < 0) {
                targets = _slice(targets);
                targets.reverse();
                stagger *= -1
            }
            for (i = 0; i < targets.length; i++) {
                copy = _copy(vars);
                if (copy.startAt) {
                    copy.startAt = _copy(copy.startAt);
                    if (copy.startAt.cycle) {
                        _applyCycle(copy.startAt, targets, i)
                    }
                }
                if (cycle) {
                    _applyCycle(copy, targets, i);
                    if (copy.duration != null) {
                        duration = copy.duration;
                        delete copy.duration
                    }
                }
                tl.to(targets[i], duration, copy, i * stagger)
            }
            return this.add(tl, position)
        }
        ;
        p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            vars.immediateRender = vars.immediateRender != false;
            vars.runBackwards = true;
            return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope)
        }
        ;
        p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
            toVars.startAt = fromVars;
            toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
            return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope)
        }
        ;
        p.call = function(callback, params, scope, position) {
            return this.add(TweenLite.delayedCall(0, callback, params, scope), position)
        }
        ;
        p.set = function(target, vars, position) {
            position = this._parseTimeOrLabel(position, 0, true);
            if (vars.immediateRender == null) {
                vars.immediateRender = position === this._time && !this._paused
            }
            return this.add(new TweenLite(target,0,vars), position)
        }
        ;
        TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
            vars = vars || {};
            if (vars.smoothChildTiming == null) {
                vars.smoothChildTiming = true
            }
            var tl = new TimelineLite(vars), root = tl._timeline, tween, next;
            if (ignoreDelayedCalls == null) {
                ignoreDelayedCalls = true
            }
            root._remove(tl, true);
            tl._startTime = 0;
            tl._rawPrevTime = tl._time = tl._totalTime = root._time;
            tween = root._first;
            while (tween) {
                next = tween._next;
                if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                    tl.add(tween, tween._startTime - tween._delay)
                }
                tween = next
            }
            root.add(tl, 0);
            return tl
        }
        ;
        p.add = function(value, position, align, stagger) {
            var curTime, l, i, child, tl, beforeRawTime;
            if (typeof position !== "number") {
                position = this._parseTimeOrLabel(position, 0, true, value)
            }
            if (!(value instanceof Animation)) {
                if (value instanceof Array || value && value.push && _isArray(value)) {
                    align = align || "normal";
                    stagger = stagger || 0;
                    curTime = position;
                    l = value.length;
                    for (i = 0; i < l; i++) {
                        if (_isArray(child = value[i])) {
                            child = new TimelineLite({
                                tweens: child
                            })
                        }
                        this.add(child, curTime);
                        if (typeof child !== "string" && typeof child !== "function") {
                            if (align === "sequence") {
                                curTime = child._startTime + child.totalDuration() / child._timeScale
                            } else if (align === "start") {
                                child._startTime -= child.delay()
                            }
                        }
                        curTime += stagger
                    }
                    return this._uncache(true)
                } else if (typeof value === "string") {
                    return this.addLabel(value, position)
                } else if (typeof value === "function") {
                    value = TweenLite.delayedCall(0, value)
                } else {
                    throw "Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string."
                }
            }
            SimpleTimeline.prototype.add.call(this, value, position);
            if (this._gc || this._time === this._duration)
                if (!this._paused)
                    if (this._duration < this.duration()) {
                        tl = this;
                        beforeRawTime = tl.rawTime() > value._startTime;
                        while (tl._timeline) {
                            if (beforeRawTime && tl._timeline.smoothChildTiming) {
                                tl.totalTime(tl._totalTime, true)
                            } else if (tl._gc) {
                                tl._enabled(true, false)
                            }
                            tl = tl._timeline
                        }
                    }
            return this
        }
        ;
        p.remove = function(value) {
            if (value instanceof Animation) {
                this._remove(value, false);
                var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline;
                value._startTime = (value._paused ? value._pauseTime : tl._time) - (!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale;
                return this
            } else if (value instanceof Array || value && value.push && _isArray(value)) {
                var i = value.length;
                while (--i > -1) {
                    this.remove(value[i])
                }
                return this
            } else if (typeof value === "string") {
                return this.removeLabel(value)
            }
            return this.kill(null, value)
        }
        ;
        p._remove = function(tween, skipDisable) {
            SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
            var last = this._last;
            if (!last) {
                this._time = this._totalTime = this._duration = this._totalDuration = 0
            } else if (this._time > last._startTime + last._totalDuration / last._timeScale) {
                this._time = this.duration();
                this._totalTime = this._totalDuration
            }
            return this
        }
        ;
        p.append = function(value, offsetOrLabel) {
            return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value))
        }
        ;
        p.insert = p.insertMultiple = function(value, position, align, stagger) {
            return this.add(value, position || 0, align, stagger)
        }
        ;
        p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
            return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger)
        }
        ;
        p.addLabel = function(label, position) {
            this._labels[label] = this._parseTimeOrLabel(position);
            return this
        }
        ;
        p.addPause = function(position, callback, params, scope) {
            var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
            t.vars.onComplete = t.vars.onReverseComplete = callback;
            t.data = "isPause";
            this._hasPause = true;
            return this.add(t, position)
        }
        ;
        p.removeLabel = function(label) {
            delete this._labels[label];
            return this
        }
        ;
        p.getLabelTime = function(label) {
            return this._labels[label] != null ? this._labels[label] : -1
        }
        ;
        p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
            var i;
            if (ignore instanceof Animation && ignore.timeline === this) {
                this.remove(ignore)
            } else if (ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))) {
                i = ignore.length;
                while (--i > -1) {
                    if (ignore[i]instanceof Animation && ignore[i].timeline === this) {
                        this.remove(ignore[i])
                    }
                }
            }
            if (typeof offsetOrLabel === "string") {
                return this._parseTimeOrLabel(offsetOrLabel, appendIfAbsent && typeof timeOrLabel === "number" && this._labels[offsetOrLabel] == null ? timeOrLabel - this.duration() : 0, appendIfAbsent)
            }
            offsetOrLabel = offsetOrLabel || 0;
            if (typeof timeOrLabel === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) {
                i = timeOrLabel.indexOf("=");
                if (i === -1) {
                    if (this._labels[timeOrLabel] == null) {
                        return appendIfAbsent ? this._labels[timeOrLabel] = this.duration() + offsetOrLabel : offsetOrLabel
                    }
                    return this._labels[timeOrLabel] + offsetOrLabel
                }
                offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
                timeOrLabel = i > 1 ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : this.duration()
            } else if (timeOrLabel == null) {
                timeOrLabel = this.duration()
            }
            return Number(timeOrLabel) + offsetOrLabel
        }
        ;
        p.seek = function(position, suppressEvents) {
            return this.totalTime(typeof position === "number" ? position : this._parseTimeOrLabel(position), suppressEvents !== false)
        }
        ;
        p.stop = function() {
            return this.paused(true)
        }
        ;
        p.gotoAndPlay = function(position, suppressEvents) {
            return this.play(position, suppressEvents)
        }
        ;
        p.gotoAndStop = function(position, suppressEvents) {
            return this.pause(position, suppressEvents)
        }
        ;
        p.render = function(time, suppressEvents, force) {
            if (this._gc) {
                this._enabled(true, false)
            }
            var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(), prevTime = this._time, prevStart = this._startTime, prevTimeScale = this._timeScale, prevPaused = this._paused, tween, isComplete, next, callback, internalForce, pauseTween, curTime;
            if (time >= totalDur - 1e-7) {
                this._totalTime = this._time = totalDur;
                if (!this._reversed)
                    if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren;
                        if (this._duration === 0)
                            if (time <= 0 && time >= -1e-7 || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum)
                                if (this._rawPrevTime !== time && this._first) {
                                    internalForce = true;
                                    if (this._rawPrevTime > _tinyNum) {
                                        callback = "onReverseComplete"
                                    }
                                }
                    }
                this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
                time = totalDur + 1e-4
            } else if (time < 1e-7) {
                this._totalTime = this._time = 0;
                if (prevTime !== 0 || this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)) {
                    callback = "onReverseComplete";
                    isComplete = this._reversed
                }
                if (time < 0) {
                    this._active = false;
                    if (this._timeline.autoRemoveChildren && this._reversed) {
                        internalForce = isComplete = true;
                        callback = "onReverseComplete"
                    } else if (this._rawPrevTime >= 0 && this._first) {
                        internalForce = true
                    }
                    this._rawPrevTime = time
                } else {
                    this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
                    if (time === 0 && isComplete) {
                        tween = this._first;
                        while (tween && tween._startTime === 0) {
                            if (!tween._duration) {
                                isComplete = false
                            }
                            tween = tween._next
                        }
                    }
                    time = 0;
                    if (!this._initted) {
                        internalForce = true
                    }
                }
            } else {
                if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                    if (time >= prevTime) {
                        tween = this._first;
                        while (tween && tween._startTime <= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween
                                }
                            tween = tween._next
                        }
                    } else {
                        tween = this._last;
                        while (tween && tween._startTime >= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween
                                }
                            tween = tween._prev
                        }
                    }
                    if (pauseTween) {
                        this._time = time = pauseTween._startTime;
                        this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay)
                    }
                }
                this._totalTime = this._time = this._rawPrevTime = time
            }
            if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                return
            } else if (!this._initted) {
                this._initted = true
            }
            if (!this._active)
                if (!this._paused && this._time !== prevTime && time > 0) {
                    this._active = true
                }
            if (prevTime === 0)
                if (this.vars.onStart)
                    if (this._time !== 0 || !this._duration)
                        if (!suppressEvents) {
                            this._callback("onStart")
                        }
            curTime = this._time;
            if (curTime >= prevTime) {
                tween = this._first;
                while (tween) {
                    next = tween._next;
                    if (curTime !== this._time || this._paused && !prevPaused) {
                        break
                    } else if (tween._active || tween._startTime <= curTime && !tween._paused && !tween._gc) {
                        if (pauseTween === tween) {
                            this.pause()
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        } else {
                            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        }
                    }
                    tween = next
                }
            } else {
                tween = this._last;
                while (tween) {
                    next = tween._prev;
                    if (curTime !== this._time || this._paused && !prevPaused) {
                        break
                    } else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
                        if (pauseTween === tween) {
                            pauseTween = tween._prev;
                            while (pauseTween && pauseTween.endTime() > this._time) {
                                pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
                                pauseTween = pauseTween._prev
                            }
                            pauseTween = null;
                            this.pause()
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        } else {
                            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        }
                    }
                    tween = next
                }
            }
            if (this._onUpdate)
                if (!suppressEvents) {
                    if (_lazyTweens.length) {
                        _lazyRender()
                    }
                    this._callback("onUpdate")
                }
            if (callback)
                if (!this._gc)
                    if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                        if (this._time === 0 || totalDur >= this.totalDuration()) {
                            if (isComplete) {
                                if (_lazyTweens.length) {
                                    _lazyRender()
                                }
                                if (this._timeline.autoRemoveChildren) {
                                    this._enabled(false, false)
                                }
                                this._active = false
                            }
                            if (!suppressEvents && this.vars[callback]) {
                                this._callback(callback)
                            }
                        }
        }
        ;
        p._hasPausedChild = function() {
            var tween = this._first;
            while (tween) {
                if (tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()) {
                    return true
                }
                tween = tween._next
            }
            return false
        }
        ;
        p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
            ignoreBeforeTime = ignoreBeforeTime || -9999999999;
            var a = []
              , tween = this._first
              , cnt = 0;
            while (tween) {
                if (tween._startTime < ignoreBeforeTime) {} else if (tween instanceof TweenLite) {
                    if (tweens !== false) {
                        a[cnt++] = tween
                    }
                } else {
                    if (timelines !== false) {
                        a[cnt++] = tween
                    }
                    if (nested !== false) {
                        a = a.concat(tween.getChildren(true, tweens, timelines));
                        cnt = a.length
                    }
                }
                tween = tween._next
            }
            return a
        }
        ;
        p.getTweensOf = function(target, nested) {
            var disabled = this._gc, a = [], cnt = 0, tweens, i;
            if (disabled) {
                this._enabled(true, true)
            }
            tweens = TweenLite.getTweensOf(target);
            i = tweens.length;
            while (--i > -1) {
                if (tweens[i].timeline === this || nested && this._contains(tweens[i])) {
                    a[cnt++] = tweens[i]
                }
            }
            if (disabled) {
                this._enabled(false, true)
            }
            return a
        }
        ;
        p.recent = function() {
            return this._recent
        }
        ;
        p._contains = function(tween) {
            var tl = tween.timeline;
            while (tl) {
                if (tl === this) {
                    return true
                }
                tl = tl.timeline
            }
            return false
        }
        ;
        p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
            ignoreBeforeTime = ignoreBeforeTime || 0;
            var tween = this._first, labels = this._labels, p;
            while (tween) {
                if (tween._startTime >= ignoreBeforeTime) {
                    tween._startTime += amount
                }
                tween = tween._next
            }
            if (adjustLabels) {
                for (p in labels) {
                    if (labels[p] >= ignoreBeforeTime) {
                        labels[p] += amount
                    }
                }
            }
            return this._uncache(true)
        }
        ;
        p._kill = function(vars, target) {
            if (!vars && !target) {
                return this._enabled(false, false)
            }
            var tweens = !target ? this.getChildren(true, true, false) : this.getTweensOf(target)
              , i = tweens.length
              , changed = false;
            while (--i > -1) {
                if (tweens[i]._kill(vars, target)) {
                    changed = true
                }
            }
            return changed
        }
        ;
        p.clear = function(labels) {
            var tweens = this.getChildren(false, true, true)
              , i = tweens.length;
            this._time = this._totalTime = 0;
            while (--i > -1) {
                tweens[i]._enabled(false, false)
            }
            if (labels !== false) {
                this._labels = {}
            }
            return this._uncache(true)
        }
        ;
        p.invalidate = function() {
            var tween = this._first;
            while (tween) {
                tween.invalidate();
                tween = tween._next
            }
            return Animation.prototype.invalidate.call(this)
        }
        ;
        p._enabled = function(enabled, ignoreTimeline) {
            if (enabled === this._gc) {
                var tween = this._first;
                while (tween) {
                    tween._enabled(enabled, true);
                    tween = tween._next
                }
            }
            return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline)
        }
        ;
        p.totalTime = function(time, suppressEvents, uncapped) {
            this._forcingPlayhead = true;
            var val = Animation.prototype.totalTime.apply(this, arguments);
            this._forcingPlayhead = false;
            return val
        }
        ;
        p.duration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    this.totalDuration()
                }
                return this._duration
            }
            if (this.duration() !== 0 && value !== 0) {
                this.timeScale(this._duration / value)
            }
            return this
        }
        ;
        p.totalDuration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    var max = 0, tween = this._last, prevStart = 999999999999, prev, end;
                    while (tween) {
                        prev = tween._prev;
                        if (tween._dirty) {
                            tween.totalDuration()
                        }
                        if (tween._startTime > prevStart && this._sortChildren && !tween._paused) {
                            this.add(tween, tween._startTime - tween._delay)
                        } else {
                            prevStart = tween._startTime
                        }
                        if (tween._startTime < 0 && !tween._paused) {
                            max -= tween._startTime;
                            if (this._timeline.smoothChildTiming) {
                                this._startTime += tween._startTime / this._timeScale
                            }
                            this.shiftChildren(-tween._startTime, false, -9999999999);
                            prevStart = 0
                        }
                        end = tween._startTime + tween._totalDuration / tween._timeScale;
                        if (end > max) {
                            max = end
                        }
                        tween = prev
                    }
                    this._duration = this._totalDuration = max;
                    this._dirty = false
                }
                return this._totalDuration
            }
            return value && this.totalDuration() ? this.timeScale(this._totalDuration / value) : this
        }
        ;
        p.paused = function(value) {
            if (!value) {
                var tween = this._first
                  , time = this._time;
                while (tween) {
                    if (tween._startTime === time && tween.data === "isPause") {
                        tween._rawPrevTime = 0
                    }
                    tween = tween._next
                }
            }
            return Animation.prototype.paused.apply(this, arguments)
        }
        ;
        p.usesFrames = function() {
            var tl = this._timeline;
            while (tl._timeline) {
                tl = tl._timeline
            }
            return tl === Animation._rootFramesTimeline
        }
        ;
        p.rawTime = function() {
            return this._paused ? this._totalTime : (this._timeline.rawTime() - this._startTime) * this._timeScale
        }
        ;
        return TimelineLite
    }, true);
    _gsScope._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function(TimelineLite, TweenLite, Ease) {
        var TimelineMax = function(vars) {
            TimelineLite.call(this, vars);
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._cycle = 0;
            this._yoyo = this.vars.yoyo === true;
            this._dirty = true
        }
          , _tinyNum = 1e-10
          , TweenLiteInternals = TweenLite._internals
          , _lazyTweens = TweenLiteInternals.lazyTweens
          , _lazyRender = TweenLiteInternals.lazyRender
          , _globals = _gsScope._gsDefine.globals
          , _easeNone = new Ease(null,null,1,0)
          , p = TimelineMax.prototype = new TimelineLite;
        p.constructor = TimelineMax;
        p.kill()._gc = false;
        TimelineMax.version = "1.19.0";
        p.invalidate = function() {
            this._yoyo = this.vars.yoyo === true;
            this._repeat = this.vars.repeat || 0;
            this._repeatDelay = this.vars.repeatDelay || 0;
            this._uncache(true);
            return TimelineLite.prototype.invalidate.call(this)
        }
        ;
        p.addCallback = function(callback, position, params, scope) {
            return this.add(TweenLite.delayedCall(0, callback, params, scope), position)
        }
        ;
        p.removeCallback = function(callback, position) {
            if (callback) {
                if (position == null) {
                    this._kill(null, callback)
                } else {
                    var a = this.getTweensOf(callback, false)
                      , i = a.length
                      , time = this._parseTimeOrLabel(position);
                    while (--i > -1) {
                        if (a[i]._startTime === time) {
                            a[i]._enabled(false, false)
                        }
                    }
                }
            }
            return this
        }
        ;
        p.removePause = function(position) {
            return this.removeCallback(TimelineLite._internals.pauseCallback, position)
        }
        ;
        p.tweenTo = function(position, vars) {
            vars = vars || {};
            var copy = {
                ease: _easeNone,
                useFrames: this.usesFrames(),
                immediateRender: false
            }, Engine = vars.repeat && _globals.TweenMax || TweenLite, duration, p, t;
            for (p in vars) {
                copy[p] = vars[p]
            }
            copy.time = this._parseTimeOrLabel(position);
            duration = Math.abs(Number(copy.time) - this._time) / this._timeScale || .001;
            t = new Engine(this,duration,copy);
            copy.onStart = function() {
                t.target.paused(true);
                if (t.vars.time !== t.target.time() && duration === t.duration()) {
                    t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale)
                }
                if (vars.onStart) {
                    t._callback("onStart")
                }
            }
            ;
            return t
        }
        ;
        p.tweenFromTo = function(fromPosition, toPosition, vars) {
            vars = vars || {};
            fromPosition = this._parseTimeOrLabel(fromPosition);
            vars.startAt = {
                onComplete: this.seek,
                onCompleteParams: [fromPosition],
                callbackScope: this
            };
            vars.immediateRender = vars.immediateRender !== false;
            var t = this.tweenTo(toPosition, vars);
            return t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || .001)
        }
        ;
        p.render = function(time, suppressEvents, force) {
            if (this._gc) {
                this._enabled(true, false)
            }
            var totalDur = !this._dirty ? this._totalDuration : this.totalDuration(), dur = this._duration, prevTime = this._time, prevTotalTime = this._totalTime, prevStart = this._startTime, prevTimeScale = this._timeScale, prevRawPrevTime = this._rawPrevTime, prevPaused = this._paused, prevCycle = this._cycle, tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
            if (time >= totalDur - 1e-7) {
                if (!this._locked) {
                    this._totalTime = totalDur;
                    this._cycle = this._repeat
                }
                if (!this._reversed)
                    if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren;
                        if (this._duration === 0)
                            if (time <= 0 && time >= -1e-7 || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum)
                                if (prevRawPrevTime !== time && this._first) {
                                    internalForce = true;
                                    if (prevRawPrevTime > _tinyNum) {
                                        callback = "onReverseComplete"
                                    }
                                }
                    }
                this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    this._time = time = 0
                } else {
                    this._time = dur;
                    time = dur + 1e-4
                }
            } else if (time < 1e-7) {
                if (!this._locked) {
                    this._totalTime = this._cycle = 0
                }
                this._time = 0;
                if (prevTime !== 0 || dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked) {
                    callback = "onReverseComplete";
                    isComplete = this._reversed
                }
                if (time < 0) {
                    this._active = false;
                    if (this._timeline.autoRemoveChildren && this._reversed) {
                        internalForce = isComplete = true;
                        callback = "onReverseComplete"
                    } else if (prevRawPrevTime >= 0 && this._first) {
                        internalForce = true
                    }
                    this._rawPrevTime = time
                } else {
                    this._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time ? time : _tinyNum;
                    if (time === 0 && isComplete) {
                        tween = this._first;
                        while (tween && tween._startTime === 0) {
                            if (!tween._duration) {
                                isComplete = false
                            }
                            tween = tween._next
                        }
                    }
                    time = 0;
                    if (!this._initted) {
                        internalForce = true
                    }
                }
            } else {
                if (dur === 0 && prevRawPrevTime < 0) {
                    internalForce = true
                }
                this._time = this._rawPrevTime = time;
                if (!this._locked) {
                    this._totalTime = time;
                    if (this._repeat !== 0) {
                        cycleDuration = dur + this._repeatDelay;
                        this._cycle = this._totalTime / cycleDuration >> 0;
                        if (this._cycle !== 0)
                            if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                this._cycle--
                            }
                        this._time = this._totalTime - this._cycle * cycleDuration;
                        if (this._yoyo)
                            if ((this._cycle & 1) !== 0) {
                                this._time = dur - this._time
                            }
                        if (this._time > dur) {
                            this._time = dur;
                            time = dur + 1e-4
                        } else if (this._time < 0) {
                            this._time = time = 0
                        } else {
                            time = this._time
                        }
                    }
                }
                if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                    time = this._time;
                    if (time >= prevTime) {
                        tween = this._first;
                        while (tween && tween._startTime <= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween
                                }
                            tween = tween._next
                        }
                    } else {
                        tween = this._last;
                        while (tween && tween._startTime >= time && !pauseTween) {
                            if (!tween._duration)
                                if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween
                                }
                            tween = tween._prev
                        }
                    }
                    if (pauseTween) {
                        this._time = time = pauseTween._startTime;
                        this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay)
                    }
                }
            }
            if (this._cycle !== prevCycle)
                if (!this._locked) {
                    var backwards = this._yoyo && (prevCycle & 1) !== 0
                      , wrap = backwards === (this._yoyo && (this._cycle & 1) !== 0)
                      , recTotalTime = this._totalTime
                      , recCycle = this._cycle
                      , recRawPrevTime = this._rawPrevTime
                      , recTime = this._time;
                    this._totalTime = prevCycle * dur;
                    if (this._cycle < prevCycle) {
                        backwards = !backwards
                    } else {
                        this._totalTime += dur
                    }
                    this._time = prevTime;
                    this._rawPrevTime = dur === 0 ? prevRawPrevTime - 1e-4 : prevRawPrevTime;
                    this._cycle = prevCycle;
                    this._locked = true;
                    prevTime = backwards ? 0 : dur;
                    this.render(prevTime, suppressEvents, dur === 0);
                    if (!suppressEvents)
                        if (!this._gc) {
                            if (this.vars.onRepeat) {
                                this._callback("onRepeat")
                            }
                        }
                    if (prevTime !== this._time) {
                        return
                    }
                    if (wrap) {
                        prevTime = backwards ? dur + 1e-4 : -1e-4;
                        this.render(prevTime, true, false)
                    }
                    this._locked = false;
                    if (this._paused && !prevPaused) {
                        return
                    }
                    this._time = recTime;
                    this._totalTime = recTotalTime;
                    this._cycle = recCycle;
                    this._rawPrevTime = recRawPrevTime
                }
            if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                if (prevTotalTime !== this._totalTime)
                    if (this._onUpdate)
                        if (!suppressEvents) {
                            this._callback("onUpdate")
                        }
                return
            } else if (!this._initted) {
                this._initted = true
            }
            if (!this._active)
                if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
                    this._active = true
                }
            if (prevTotalTime === 0)
                if (this.vars.onStart)
                    if (this._totalTime !== 0 || !this._totalDuration)
                        if (!suppressEvents) {
                            this._callback("onStart")
                        }
            curTime = this._time;
            if (curTime >= prevTime) {
                tween = this._first;
                while (tween) {
                    next = tween._next;
                    if (curTime !== this._time || this._paused && !prevPaused) {
                        break
                    } else if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {
                        if (pauseTween === tween) {
                            this.pause()
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        } else {
                            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        }
                    }
                    tween = next
                }
            } else {
                tween = this._last;
                while (tween) {
                    next = tween._prev;
                    if (curTime !== this._time || this._paused && !prevPaused) {
                        break
                    } else if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
                        if (pauseTween === tween) {
                            pauseTween = tween._prev;
                            while (pauseTween && pauseTween.endTime() > this._time) {
                                pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
                                pauseTween = pauseTween._prev
                            }
                            pauseTween = null;
                            this.pause()
                        }
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        } else {
                            tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force)
                        }
                    }
                    tween = next
                }
            }
            if (this._onUpdate)
                if (!suppressEvents) {
                    if (_lazyTweens.length) {
                        _lazyRender()
                    }
                    this._callback("onUpdate")
                }
            if (callback)
                if (!this._locked)
                    if (!this._gc)
                        if (prevStart === this._startTime || prevTimeScale !== this._timeScale)
                            if (this._time === 0 || totalDur >= this.totalDuration()) {
                                if (isComplete) {
                                    if (_lazyTweens.length) {
                                        _lazyRender()
                                    }
                                    if (this._timeline.autoRemoveChildren) {
                                        this._enabled(false, false)
                                    }
                                    this._active = false
                                }
                                if (!suppressEvents && this.vars[callback]) {
                                    this._callback(callback)
                                }
                            }
        }
        ;
        p.getActive = function(nested, tweens, timelines) {
            if (nested == null) {
                nested = true
            }
            if (tweens == null) {
                tweens = true
            }
            if (timelines == null) {
                timelines = false
            }
            var a = [], all = this.getChildren(nested, tweens, timelines), cnt = 0, l = all.length, i, tween;
            for (i = 0; i < l; i++) {
                tween = all[i];
                if (tween.isActive()) {
                    a[cnt++] = tween
                }
            }
            return a
        }
        ;
        p.getLabelAfter = function(time) {
            if (!time)
                if (time !== 0) {
                    time = this._time
                }
            var labels = this.getLabelsArray(), l = labels.length, i;
            for (i = 0; i < l; i++) {
                if (labels[i].time > time) {
                    return labels[i].name
                }
            }
            return null
        }
        ;
        p.getLabelBefore = function(time) {
            if (time == null) {
                time = this._time
            }
            var labels = this.getLabelsArray()
              , i = labels.length;
            while (--i > -1) {
                if (labels[i].time < time) {
                    return labels[i].name
                }
            }
            return null
        }
        ;
        p.getLabelsArray = function() {
            var a = [], cnt = 0, p;
            for (p in this._labels) {
                a[cnt++] = {
                    time: this._labels[p],
                    name: p
                }
            }
            a.sort(function(a, b) {
                return a.time - b.time
            });
            return a
        }
        ;
        p.progress = function(value, suppressEvents) {
            return !arguments.length ? this._time / this.duration() : this.totalTime(this.duration() * (this._yoyo && (this._cycle & 1) !== 0 ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents)
        }
        ;
        p.totalProgress = function(value, suppressEvents) {
            return !arguments.length ? this._totalTime / this.totalDuration() : this.totalTime(this.totalDuration() * value, suppressEvents)
        }
        ;
        p.totalDuration = function(value) {
            if (!arguments.length) {
                if (this._dirty) {
                    TimelineLite.prototype.totalDuration.call(this);
                    this._totalDuration = this._repeat === -1 ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat
                }
                return this._totalDuration
            }
            return this._repeat === -1 || !value ? this : this.timeScale(this.totalDuration() / value)
        }
        ;
        p.time = function(value, suppressEvents) {
            if (!arguments.length) {
                return this._time
            }
            if (this._dirty) {
                this.totalDuration()
            }
            if (value > this._duration) {
                value = this._duration
            }
            if (this._yoyo && (this._cycle & 1) !== 0) {
                value = this._duration - value + this._cycle * (this._duration + this._repeatDelay)
            } else if (this._repeat !== 0) {
                value += this._cycle * (this._duration + this._repeatDelay)
            }
            return this.totalTime(value, suppressEvents)
        }
        ;
        p.repeat = function(value) {
            if (!arguments.length) {
                return this._repeat
            }
            this._repeat = value;
            return this._uncache(true)
        }
        ;
        p.repeatDelay = function(value) {
            if (!arguments.length) {
                return this._repeatDelay
            }
            this._repeatDelay = value;
            return this._uncache(true)
        }
        ;
        p.yoyo = function(value) {
            if (!arguments.length) {
                return this._yoyo
            }
            this._yoyo = value;
            return this
        }
        ;
        p.currentLabel = function(value) {
            if (!arguments.length) {
                return this.getLabelBefore(this._time + 1e-8)
            }
            return this.seek(value, true)
        }
        ;
        return TimelineMax
    }, true);
    (function() {
        var _RAD2DEG = 180 / Math.PI
          , _r1 = []
          , _r2 = []
          , _r3 = []
          , _corProps = {}
          , _globals = _gsScope._gsDefine.globals
          , Segment = function(a, b, c, d) {
            if (c === d) {
                c = d - (d - b) / 1e6
            }
            if (a === b) {
                b = a + (c - a) / 1e6
            }
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.da = d - a;
            this.ca = c - a;
            this.ba = b - a
        }
          , _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,"
          , cubicToQuadratic = function(a, b, c, d) {
            var q1 = {
                a: a
            }
              , q2 = {}
              , q3 = {}
              , q4 = {
                c: d
            }
              , mab = (a + b) / 2
              , mbc = (b + c) / 2
              , mcd = (c + d) / 2
              , mabc = (mab + mbc) / 2
              , mbcd = (mbc + mcd) / 2
              , m8 = (mbcd - mabc) / 8;
            q1.b = mab + (a - mab) / 4;
            q2.b = mabc + m8;
            q1.c = q2.a = (q1.b + q2.b) / 2;
            q2.c = q3.a = (mabc + mbcd) / 2;
            q3.b = mbcd - m8;
            q4.b = mcd + (d - mcd) / 4;
            q3.c = q4.a = (q3.b + q4.b) / 2;
            return [q1, q2, q3, q4]
        }
          , _calculateControlPoints = function(a, curviness, quad, basic, correlate) {
            var l = a.length - 1, ii = 0, cp1 = a[0].a, i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
            for (i = 0; i < l; i++) {
                seg = a[ii];
                p1 = seg.a;
                p2 = seg.d;
                p3 = a[ii + 1].d;
                if (correlate) {
                    r1 = _r1[i];
                    r2 = _r2[i];
                    tl = (r2 + r1) * curviness * .25 / (basic ? .5 : _r3[i] || .5);
                    m1 = p2 - (p2 - p1) * (basic ? curviness * .5 : r1 !== 0 ? tl / r1 : 0);
                    m2 = p2 + (p3 - p2) * (basic ? curviness * .5 : r2 !== 0 ? tl / r2 : 0);
                    mm = p2 - (m1 + ((m2 - m1) * (r1 * 3 / (r1 + r2) + .5) / 4 || 0))
                } else {
                    m1 = p2 - (p2 - p1) * curviness * .5;
                    m2 = p2 + (p3 - p2) * curviness * .5;
                    mm = p2 - (m1 + m2) / 2
                }
                m1 += mm;
                m2 += mm;
                seg.c = cp2 = m1;
                if (i !== 0) {
                    seg.b = cp1
                } else {
                    seg.b = cp1 = seg.a + (seg.c - seg.a) * .6
                }
                seg.da = p2 - p1;
                seg.ca = cp2 - p1;
                seg.ba = cp1 - p1;
                if (quad) {
                    qb = cubicToQuadratic(p1, cp1, cp2, p2);
                    a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                    ii += 4
                } else {
                    ii++
                }
                cp1 = m2
            }
            seg = a[ii];
            seg.b = cp1;
            seg.c = cp1 + (seg.d - cp1) * .4;
            seg.da = seg.d - seg.a;
            seg.ca = seg.c - seg.a;
            seg.ba = cp1 - seg.a;
            if (quad) {
                qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
                a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3])
            }
        }
          , _parseAnchors = function(values, p, correlate, prepend) {
            var a = [], l, i, p1, p2, p3, tmp;
            if (prepend) {
                values = [prepend].concat(values);
                i = values.length;
                while (--i > -1) {
                    if (typeof (tmp = values[i][p]) === "string")
                        if (tmp.charAt(1) === "=") {
                            values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2))
                        }
                }
            }
            l = values.length - 2;
            if (l < 0) {
                a[0] = new Segment(values[0][p],0,0,values[l < -1 ? 0 : 1][p]);
                return a
            }
            for (i = 0; i < l; i++) {
                p1 = values[i][p];
                p2 = values[i + 1][p];
                a[i] = new Segment(p1,0,0,p2);
                if (correlate) {
                    p3 = values[i + 2][p];
                    _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
                    _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2)
                }
            }
            a[i] = new Segment(values[i][p],0,0,values[i + 1][p]);
            return a
        }
          , bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
            var obj = {}, props = [], first = prepend || values[0], i, p, a, j, r, l, seamless, last;
            correlate = typeof correlate === "string" ? "," + correlate + "," : _correlate;
            if (curviness == null) {
                curviness = 1
            }
            for (p in values[0]) {
                props.push(p)
            }
            if (values.length > 1) {
                last = values[values.length - 1];
                seamless = true;
                i = props.length;
                while (--i > -1) {
                    p = props[i];
                    if (Math.abs(first[p] - last[p]) > .05) {
                        seamless = false;
                        break
                    }
                }
                if (seamless) {
                    values = values.concat();
                    if (prepend) {
                        values.unshift(prepend)
                    }
                    values.push(values[1]);
                    prepend = values[values.length - 3]
                }
            }
            _r1.length = _r2.length = _r3.length = 0;
            i = props.length;
            while (--i > -1) {
                p = props[i];
                _corProps[p] = correlate.indexOf("," + p + ",") !== -1;
                obj[p] = _parseAnchors(values, p, _corProps[p], prepend)
            }
            i = _r1.length;
            while (--i > -1) {
                _r1[i] = Math.sqrt(_r1[i]);
                _r2[i] = Math.sqrt(_r2[i])
            }
            if (!basic) {
                i = props.length;
                while (--i > -1) {
                    if (_corProps[p]) {
                        a = obj[props[i]];
                        l = a.length - 1;
                        for (j = 0; j < l; j++) {
                            r = a[j + 1].da / _r2[j] + a[j].da / _r1[j] || 0;
                            _r3[j] = (_r3[j] || 0) + r * r
                        }
                    }
                }
                i = _r3.length;
                while (--i > -1) {
                    _r3[i] = Math.sqrt(_r3[i])
                }
            }
            i = props.length;
            j = quadratic ? 4 : 1;
            while (--i > -1) {
                p = props[i];
                a = obj[p];
                _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]);
                if (seamless) {
                    a.splice(0, j);
                    a.splice(a.length - j, j)
                }
            }
            return obj
        }
          , _parseBezierData = function(values, type, prepend) {
            type = type || "soft";
            var obj = {}, inc = type === "cubic" ? 3 : 2, soft = type === "soft", props = [], a, b, c, d, cur, i, j, l, p, cnt, tmp;
            if (soft && prepend) {
                values = [prepend].concat(values)
            }
            if (values == null || values.length < inc + 1) {
                throw "invalid Bezier data"
            }
            for (p in values[0]) {
                props.push(p)
            }
            i = props.length;
            while (--i > -1) {
                p = props[i];
                obj[p] = cur = [];
                cnt = 0;
                l = values.length;
                for (j = 0; j < l; j++) {
                    a = prepend == null ? values[j][p] : typeof (tmp = values[j][p]) === "string" && tmp.charAt(1) === "=" ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
                    if (soft)
                        if (j > 1)
                            if (j < l - 1) {
                                cur[cnt++] = (a + cur[cnt - 2]) / 2
                            }
                    cur[cnt++] = a
                }
                l = cnt - inc + 1;
                cnt = 0;
                for (j = 0; j < l; j += inc) {
                    a = cur[j];
                    b = cur[j + 1];
                    c = cur[j + 2];
                    d = inc === 2 ? 0 : cur[j + 3];
                    cur[cnt++] = tmp = inc === 3 ? new Segment(a,b,c,d) : new Segment(a,(2 * b + a) / 3,(2 * b + c) / 3,c)
                }
                cur.length = cnt
            }
            return obj
        }
          , _addCubicLengths = function(a, steps, resolution) {
            var inc = 1 / resolution, j = a.length, d, d1, s, da, ca, ba, p, i, inv, bez, index;
            while (--j > -1) {
                bez = a[j];
                s = bez.a;
                da = bez.d - s;
                ca = bez.c - s;
                ba = bez.b - s;
                d = d1 = 0;
                for (i = 1; i <= resolution; i++) {
                    p = inc * i;
                    inv = 1 - p;
                    d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
                    index = j * resolution + i - 1;
                    steps[index] = (steps[index] || 0) + d * d
                }
            }
        }
          , _parseLengthData = function(obj, resolution) {
            resolution = resolution >> 0 || 6;
            var a = [], lengths = [], d = 0, total = 0, threshold = resolution - 1, segments = [], curLS = [], p, i, l, index;
            for (p in obj) {
                _addCubicLengths(obj[p], a, resolution)
            }
            l = a.length;
            for (i = 0; i < l; i++) {
                d += Math.sqrt(a[i]);
                index = i % resolution;
                curLS[index] = d;
                if (index === threshold) {
                    total += d;
                    index = i / resolution >> 0;
                    segments[index] = curLS;
                    lengths[index] = total;
                    d = 0;
                    curLS = []
                }
            }
            return {
                length: total,
                lengths: lengths,
                segments: segments
            }
        }
          , BezierPlugin = _gsScope._gsDefine.plugin({
            propName: "bezier",
            priority: -1,
            version: "1.3.7",
            API: 2,
            global: true,
            init: function(target, vars, tween) {
                this._target = target;
                if (vars instanceof Array) {
                    vars = {
                        values: vars
                    }
                }
                this._func = {};
                this._mod = {};
                this._props = [];
                this._timeRes = vars.timeResolution == null ? 6 : parseInt(vars.timeResolution, 10);
                var values = vars.values || [], first = {}, second = values[0], autoRotate = vars.autoRotate || tween.vars.orientToBezier, p, isFunc, i, j, prepend;
                this._autoRotate = autoRotate ? autoRotate instanceof Array ? autoRotate : [["x", "y", "rotation", autoRotate === true ? 0 : Number(autoRotate) || 0]] : null;
                for (p in second) {
                    this._props.push(p)
                }
                i = this._props.length;
                while (--i > -1) {
                    p = this._props[i];
                    this._overwriteProps.push(p);
                    isFunc = this._func[p] = typeof target[p] === "function";
                    first[p] = !isFunc ? parseFloat(target[p]) : target[p.indexOf("set") || typeof target["get" + p.substr(3)] !== "function" ? p : "get" + p.substr(3)]();
                    if (!prepend)
                        if (first[p] !== values[0][p]) {
                            prepend = first
                        }
                }
                this._beziers = vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft" ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, vars.type === "thruBasic", vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
                this._segCount = this._beziers[p].length;
                if (this._timeRes) {
                    var ld = _parseLengthData(this._beziers, this._timeRes);
                    this._length = ld.length;
                    this._lengths = ld.lengths;
                    this._segments = ld.segments;
                    this._l1 = this._li = this._s1 = this._si = 0;
                    this._l2 = this._lengths[0];
                    this._curSeg = this._segments[0];
                    this._s2 = this._curSeg[0];
                    this._prec = 1 / this._curSeg.length
                }
                if (autoRotate = this._autoRotate) {
                    this._initialRotations = [];
                    if (!(autoRotate[0]instanceof Array)) {
                        this._autoRotate = autoRotate = [autoRotate]
                    }
                    i = autoRotate.length;
                    while (--i > -1) {
                        for (j = 0; j < 3; j++) {
                            p = autoRotate[i][j];
                            this._func[p] = typeof target[p] === "function" ? target[p.indexOf("set") || typeof target["get" + p.substr(3)] !== "function" ? p : "get" + p.substr(3)] : false
                        }
                        p = autoRotate[i][2];
                        this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                        this._overwriteProps.push(p)
                    }
                }
                this._startRatio = tween.vars.runBackwards ? 1 : 0;
                return true
            },
            set: function(v) {
                var segments = this._segCount, func = this._func, target = this._target, notStart = v !== this._startRatio, curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
                if (!this._timeRes) {
                    curIndex = v < 0 ? 0 : v >= 1 ? segments - 1 : segments * v >> 0;
                    t = (v - curIndex * (1 / segments)) * segments
                } else {
                    lengths = this._lengths;
                    curSeg = this._curSeg;
                    v *= this._length;
                    i = this._li;
                    if (v > this._l2 && i < segments - 1) {
                        l = segments - 1;
                        while (i < l && (this._l2 = lengths[++i]) <= v) {}
                        this._l1 = lengths[i - 1];
                        this._li = i;
                        this._curSeg = curSeg = this._segments[i];
                        this._s2 = curSeg[this._s1 = this._si = 0]
                    } else if (v < this._l1 && i > 0) {
                        while (i > 0 && (this._l1 = lengths[--i]) >= v) {}
                        if (i === 0 && v < this._l1) {
                            this._l1 = 0
                        } else {
                            i++
                        }
                        this._l2 = lengths[i];
                        this._li = i;
                        this._curSeg = curSeg = this._segments[i];
                        this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
                        this._s2 = curSeg[this._si]
                    }
                    curIndex = i;
                    v -= this._l1;
                    i = this._si;
                    if (v > this._s2 && i < curSeg.length - 1) {
                        l = curSeg.length - 1;
                        while (i < l && (this._s2 = curSeg[++i]) <= v) {}
                        this._s1 = curSeg[i - 1];
                        this._si = i
                    } else if (v < this._s1 && i > 0) {
                        while (i > 0 && (this._s1 = curSeg[--i]) >= v) {}
                        if (i === 0 && v < this._s1) {
                            this._s1 = 0
                        } else {
                            i++
                        }
                        this._s2 = curSeg[i];
                        this._si = i
                    }
                    t = (i + (v - this._s1) / (this._s2 - this._s1)) * this._prec || 0
                }
                inv = 1 - t;
                i = this._props.length;
                while (--i > -1) {
                    p = this._props[i];
                    b = this._beziers[p][curIndex];
                    val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
                    if (this._mod[p]) {
                        val = this._mod[p](val, target)
                    }
                    if (func[p]) {
                        target[p](val)
                    } else {
                        target[p] = val
                    }
                }
                if (this._autoRotate) {
                    var ar = this._autoRotate, b2, x1, y1, x2, y2, add, conv;
                    i = ar.length;
                    while (--i > -1) {
                        p = ar[i][2];
                        add = ar[i][3] || 0;
                        conv = ar[i][4] === true ? 1 : _RAD2DEG;
                        b = this._beziers[ar[i][0]];
                        b2 = this._beziers[ar[i][1]];
                        if (b && b2) {
                            b = b[curIndex];
                            b2 = b2[curIndex];
                            x1 = b.a + (b.b - b.a) * t;
                            x2 = b.b + (b.c - b.b) * t;
                            x1 += (x2 - x1) * t;
                            x2 += (b.c + (b.d - b.c) * t - x2) * t;
                            y1 = b2.a + (b2.b - b2.a) * t;
                            y2 = b2.b + (b2.c - b2.b) * t;
                            y1 += (y2 - y1) * t;
                            y2 += (b2.c + (b2.d - b2.c) * t - y2) * t;
                            val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];
                            if (this._mod[p]) {
                                val = this._mod[p](val, target)
                            }
                            if (func[p]) {
                                target[p](val)
                            } else {
                                target[p] = val
                            }
                        }
                    }
                }
            }
        })
          , p = BezierPlugin.prototype;
        BezierPlugin.bezierThrough = bezierThrough;
        BezierPlugin.cubicToQuadratic = cubicToQuadratic;
        BezierPlugin._autoCSS = true;
        BezierPlugin.quadraticToCubic = function(a, b, c) {
            return new Segment(a,(2 * b + a) / 3,(2 * b + c) / 3,c)
        }
        ;
        BezierPlugin._cssRegister = function() {
            var CSSPlugin = _globals.CSSPlugin;
            if (!CSSPlugin) {
                return
            }
            var _internals = CSSPlugin._internals
              , _parseToProxy = _internals._parseToProxy
              , _setPluginRatio = _internals._setPluginRatio
              , CSSPropTween = _internals.CSSPropTween;
            _internals._registerComplexSpecialProp("bezier", {
                parser: function(t, e, prop, cssp, pt, plugin) {
                    if (e instanceof Array) {
                        e = {
                            values: e
                        }
                    }
                    plugin = new BezierPlugin;
                    var values = e.values, l = values.length - 1, pluginValues = [], v = {}, i, p, data;
                    if (l < 0) {
                        return pt
                    }
                    for (i = 0; i <= l; i++) {
                        data = _parseToProxy(t, values[i], cssp, pt, plugin, l !== i);
                        pluginValues[i] = data.end
                    }
                    for (p in e) {
                        v[p] = e[p]
                    }
                    v.values = pluginValues;
                    pt = new CSSPropTween(t,"bezier",0,0,data.pt,2);
                    pt.data = data;
                    pt.plugin = plugin;
                    pt.setRatio = _setPluginRatio;
                    if (v.autoRotate === 0) {
                        v.autoRotate = true
                    }
                    if (v.autoRotate && !(v.autoRotate instanceof Array)) {
                        i = v.autoRotate === true ? 0 : Number(v.autoRotate);
                        v.autoRotate = data.end.left != null ? [["left", "top", "rotation", i, false]] : data.end.x != null ? [["x", "y", "rotation", i, false]] : false
                    }
                    if (v.autoRotate) {
                        if (!cssp._transform) {
                            cssp._enableTransforms(false)
                        }
                        data.autoRotate = cssp._target._gsTransform;
                        data.proxy.rotation = data.autoRotate.rotation || 0;
                        cssp._overwriteProps.push("rotation")
                    }
                    plugin._onInitTween(data.proxy, v, cssp._tween);
                    return pt
                }
            })
        }
        ;
        p._mod = function(lookup) {
            var op = this._overwriteProps, i = op.length, val;
            while (--i > -1) {
                val = lookup[op[i]];
                if (val && typeof val === "function") {
                    this._mod[op[i]] = val
                }
            }
        }
        ;
        p._kill = function(lookup) {
            var a = this._props, p, i;
            for (p in this._beziers) {
                if (p in lookup) {
                    delete this._beziers[p];
                    delete this._func[p];
                    i = a.length;
                    while (--i > -1) {
                        if (a[i] === p) {
                            a.splice(i, 1)
                        }
                    }
                }
            }
            a = this._autoRotate;
            if (a) {
                i = a.length;
                while (--i > -1) {
                    if (lookup[a[i][2]]) {
                        a.splice(i, 1)
                    }
                }
            }
            return this._super._kill.call(this, lookup)
        }
    }
    )();
    _gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function(TweenPlugin, TweenLite) {
        var CSSPlugin = function() {
            TweenPlugin.call(this, "css");
            this._overwriteProps.length = 0;
            this.setRatio = CSSPlugin.prototype.setRatio
        }, _globals = _gsScope._gsDefine.globals, _hasPriority, _suffixMap, _cs, _overwriteProps, _specialProps = {}, p = CSSPlugin.prototype = new TweenPlugin("css");
        p.constructor = CSSPlugin;
        CSSPlugin.version = "1.19.0";
        CSSPlugin.API = 2;
        CSSPlugin.defaultTransformPerspective = 0;
        CSSPlugin.defaultSkewType = "compensated";
        CSSPlugin.defaultSmoothOrigin = true;
        p = "px";
        CSSPlugin.suffixMap = {
            top: p,
            right: p,
            bottom: p,
            left: p,
            width: p,
            height: p,
            fontSize: p,
            padding: p,
            margin: p,
            perspective: p,
            lineHeight: ""
        };
        var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g, _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g, _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, _NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g, _opacityExp = /opacity *= *([^)]*)/i, _opacityValExp = /opacity:([^;]*)/i, _alphaFilterExp = /alpha\(opacity *=.+?\)/i, _rgbhslExp = /^(rgb|hsl)/, _capsExp = /([A-Z])/g, _camelExp = /-([a-z])/gi, _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, _camelFunc = function(s, g) {
            return g.toUpperCase()
        }, _horizExp = /(?:Left|Right|Width)/i, _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi, _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i, _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, _complexExp = /[\s,\(]/i, _DEG2RAD = Math.PI / 180, _RAD2DEG = 180 / Math.PI, _forcePT = {}, _doc = document, _createElement = function(type) {
            return _doc.createElementNS ? _doc.createElementNS("http://www.w3.org/1999/xhtml", type) : _doc.createElement(type)
        }, _tempDiv = _createElement("div"), _tempImg = _createElement("img"), _internals = CSSPlugin._internals = {
            _specialProps: _specialProps
        }, _agent = navigator.userAgent, _autoRound, _reqSafariFix, _isSafari, _isFirefox, _isSafariLT6, _ieVers, _supportsOpacity = function() {
            var i = _agent.indexOf("Android")
              , a = _createElement("a");
            _isSafari = _agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || Number(_agent.substr(i + 8, 1)) > 3);
            _isSafariLT6 = _isSafari && Number(_agent.substr(_agent.indexOf("Version/") + 8, 1)) < 6;
            _isFirefox = _agent.indexOf("Firefox") !== -1;
            if (/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(_agent) || /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(_agent)) {
                _ieVers = parseFloat(RegExp.$1)
            }
            if (!a) {
                return false
            }
            a.style.cssText = "top:1px;opacity:.55;";
            return /^0.55/.test(a.style.opacity)
        }(), _getIEOpacity = function(v) {
            return _opacityExp.test(typeof v === "string" ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ? parseFloat(RegExp.$1) / 100 : 1
        }, _log = function(s) {
            if (window.console) {
                console.log(s)
            }
        }, _target, _index, _prefixCSS = "", _prefix = "", _checkPropPrefix = function(p, e) {
            e = e || _tempDiv;
            var s = e.style, a, i;
            if (s[p] !== undefined) {
                return p
            }
            p = p.charAt(0).toUpperCase() + p.substr(1);
            a = ["O", "Moz", "ms", "Ms", "Webkit"];
            i = 5;
            while (--i > -1 && s[a[i] + p] === undefined) {}
            if (i >= 0) {
                _prefix = i === 3 ? "ms" : a[i];
                _prefixCSS = "-" + _prefix.toLowerCase() + "-";
                return _prefix + p
            }
            return null
        }, _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {}
        , _getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
            var rv;
            if (!_supportsOpacity)
                if (p === "opacity") {
                    return _getIEOpacity(t)
                }
            if (!calc && t.style[p]) {
                rv = t.style[p]
            } else if (cs = cs || _getComputedStyle(t)) {
                rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase())
            } else if (t.currentStyle) {
                rv = t.currentStyle[p]
            }
            return dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto") ? dflt : rv
        }
        , _convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
            if (sfx === "px" || !sfx) {
                return v
            }
            if (sfx === "auto" || !v) {
                return 0
            }
            var horiz = _horizExp.test(p), node = t, style = _tempDiv.style, neg = v < 0, precise = v === 1, pix, cache, time;
            if (neg) {
                v = -v
            }
            if (precise) {
                v *= 100
            }
            if (sfx === "%" && p.indexOf("border") !== -1) {
                pix = v / 100 * (horiz ? t.clientWidth : t.clientHeight)
            } else {
                style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
                if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
                    node = t.parentNode || _doc.body;
                    cache = node._gsCache;
                    time = TweenLite.ticker.frame;
                    if (cache && horiz && cache.time === time) {
                        return cache.width * v / 100
                    }
                    style[horiz ? "width" : "height"] = v + sfx
                } else {
                    style[horiz ? "borderLeftWidth" : "borderTopWidth"] = v + sfx
                }
                node.appendChild(_tempDiv);
                pix = parseFloat(_tempDiv[horiz ? "offsetWidth" : "offsetHeight"]);
                node.removeChild(_tempDiv);
                if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
                    cache = node._gsCache = node._gsCache || {};
                    cache.time = time;
                    cache.width = pix / v * 100
                }
                if (pix === 0 && !recurse) {
                    pix = _convertToPixels(t, p, v, sfx, true)
                }
            }
            if (precise) {
                pix /= 100
            }
            return neg ? -pix : pix
        }
        , _calculateOffset = _internals.calculateOffset = function(t, p, cs) {
            if (_getStyle(t, "position", cs) !== "absolute") {
                return 0
            }
            var dim = p === "left" ? "Left" : "Top"
              , v = _getStyle(t, "margin" + dim, cs);
            return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0)
        }
        , _getAllStyles = function(t, cs) {
            var s = {}, i, tr, p;
            if (cs = cs || _getComputedStyle(t, null)) {
                if (i = cs.length) {
                    while (--i > -1) {
                        p = cs[i];
                        if (p.indexOf("-transform") === -1 || _transformPropCSS === p) {
                            s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p)
                        }
                    }
                } else {
                    for (i in cs) {
                        if (i.indexOf("Transform") === -1 || _transformProp === i) {
                            s[i] = cs[i]
                        }
                    }
                }
            } else if (cs = t.currentStyle || t.style) {
                for (i in cs) {
                    if (typeof i === "string" && s[i] === undefined) {
                        s[i.replace(_camelExp, _camelFunc)] = cs[i]
                    }
                }
            }
            if (!_supportsOpacity) {
                s.opacity = _getIEOpacity(t)
            }
            tr = _getTransform(t, cs, false);
            s.rotation = tr.rotation;
            s.skewX = tr.skewX;
            s.scaleX = tr.scaleX;
            s.scaleY = tr.scaleY;
            s.x = tr.x;
            s.y = tr.y;
            if (_supports3D) {
                s.z = tr.z;
                s.rotationX = tr.rotationX;
                s.rotationY = tr.rotationY;
                s.scaleZ = tr.scaleZ
            }
            if (s.filters) {
                delete s.filters
            }
            return s
        }, _cssDif = function(t, s1, s2, vars, forceLookup) {
            var difs = {}, style = t.style, val, p, mpt;
            for (p in s2) {
                if (p !== "cssText")
                    if (p !== "length")
                        if (isNaN(p))
                            if (s1[p] !== (val = s2[p]) || forceLookup && forceLookup[p])
                                if (p.indexOf("Origin") === -1)
                                    if (typeof val === "number" || typeof val === "string") {
                                        difs[p] = val === "auto" && (p === "left" || p === "top") ? _calculateOffset(t, p) : (val === "" || val === "auto" || val === "none") && typeof s1[p] === "string" && s1[p].replace(_NaNExp, "") !== "" ? 0 : val;
                                        if (style[p] !== undefined) {
                                            mpt = new MiniPropTween(style,p,style[p],mpt)
                                        }
                                    }
            }
            if (vars) {
                for (p in vars) {
                    if (p !== "className") {
                        difs[p] = vars[p]
                    }
                }
            }
            return {
                difs: difs,
                firstMPT: mpt
            }
        }, _dimensions = {
            width: ["Left", "Right"],
            height: ["Top", "Bottom"]
        }, _margins = ["marginLeft", "marginRight", "marginTop", "marginBottom"], _getDimension = function(t, p, cs) {
            if ((t.nodeName + "").toLowerCase() === "svg") {
                return (cs || _getComputedStyle(t))[p] || 0
            } else if (t.getBBox && _isSVG(t)) {
                return t.getBBox()[p] || 0
            }
            var v = parseFloat(p === "width" ? t.offsetWidth : t.offsetHeight)
              , a = _dimensions[p]
              , i = a.length;
            cs = cs || _getComputedStyle(t, null);
            while (--i > -1) {
                v -= parseFloat(_getStyle(t, "padding" + a[i], cs, true)) || 0;
                v -= parseFloat(_getStyle(t, "border" + a[i] + "Width", cs, true)) || 0
            }
            return v
        }, _parsePosition = function(v, recObj) {
            if (v === "contain" || v === "auto" || v === "auto auto") {
                return v + " "
            }
            if (v == null || v === "") {
                v = "0 0"
            }
            var a = v.split(" "), x = v.indexOf("left") !== -1 ? "0%" : v.indexOf("right") !== -1 ? "100%" : a[0], y = v.indexOf("top") !== -1 ? "0%" : v.indexOf("bottom") !== -1 ? "100%" : a[1], i;
            if (a.length > 3 && !recObj) {
                a = v.split(", ").join(",").split(",");
                v = [];
                for (i = 0; i < a.length; i++) {
                    v.push(_parsePosition(a[i]))
                }
                return v.join(",")
            }
            if (y == null) {
                y = x === "center" ? "50%" : "0"
            } else if (y === "center") {
                y = "50%"
            }
            if (x === "center" || isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1) {
                x = "50%"
            }
            v = x + " " + y + (a.length > 2 ? " " + a[2] : "");
            if (recObj) {
                recObj.oxp = x.indexOf("%") !== -1;
                recObj.oyp = y.indexOf("%") !== -1;
                recObj.oxr = x.charAt(1) === "=";
                recObj.oyr = y.charAt(1) === "=";
                recObj.ox = parseFloat(x.replace(_NaNExp, ""));
                recObj.oy = parseFloat(y.replace(_NaNExp, ""));
                recObj.v = v
            }
            return recObj || v
        }, _parseChange = function(e, b) {
            if (typeof e === "function") {
                e = e(_index, _target)
            }
            return typeof e === "string" && e.charAt(1) === "=" ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : parseFloat(e) - parseFloat(b) || 0
        }, _parseVal = function(v, d) {
            if (typeof v === "function") {
                v = v(_index, _target)
            }
            return v == null ? d : typeof v === "string" && v.charAt(1) === "=" ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0
        }, _parseAngle = function(v, d, p, directionalEnd) {
            var min = 1e-6, cap, split, dif, result, isRelative;
            if (typeof v === "function") {
                v = v(_index, _target)
            }
            if (v == null) {
                result = d
            } else if (typeof v === "number") {
                result = v
            } else {
                cap = 360;
                split = v.split("_");
                isRelative = v.charAt(1) === "=";
                dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * (v.indexOf("rad") === -1 ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
                if (split.length) {
                    if (directionalEnd) {
                        directionalEnd[p] = d + dif
                    }
                    if (v.indexOf("short") !== -1) {
                        dif = dif % cap;
                        if (dif !== dif % (cap / 2)) {
                            dif = dif < 0 ? dif + cap : dif - cap
                        }
                    }
                    if (v.indexOf("_cw") !== -1 && dif < 0) {
                        dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap
                    } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                        dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap
                    }
                }
                result = d + dif
            }
            if (result < min && result > -min) {
                result = 0
            }
            return result
        }, _colorLookup = {
            aqua: [0, 255, 255],
            lime: [0, 255, 0],
            silver: [192, 192, 192],
            black: [0, 0, 0],
            maroon: [128, 0, 0],
            teal: [0, 128, 128],
            blue: [0, 0, 255],
            navy: [0, 0, 128],
            white: [255, 255, 255],
            fuchsia: [255, 0, 255],
            olive: [128, 128, 0],
            yellow: [255, 255, 0],
            orange: [255, 165, 0],
            gray: [128, 128, 128],
            purple: [128, 0, 128],
            green: [0, 128, 0],
            red: [255, 0, 0],
            pink: [255, 192, 203],
            cyan: [0, 255, 255],
            transparent: [255, 255, 255, 0]
        }, _hue = function(h, m1, m2) {
            h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
            return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255 + .5 | 0
        }, _parseColor = CSSPlugin.parseColor = function(v, toHSL) {
            var a, r, g, b, h, s, l, max, min, d, wasHSL;
            if (!v) {
                a = _colorLookup.black
            } else if (typeof v === "number") {
                a = [v >> 16, v >> 8 & 255, v & 255]
            } else {
                if (v.charAt(v.length - 1) === ",") {
                    v = v.substr(0, v.length - 1)
                }
                if (_colorLookup[v]) {
                    a = _colorLookup[v]
                } else if (v.charAt(0) === "#") {
                    if (v.length === 4) {
                        r = v.charAt(1);
                        g = v.charAt(2);
                        b = v.charAt(3);
                        v = "#" + r + r + g + g + b + b
                    }
                    v = parseInt(v.substr(1), 16);
                    a = [v >> 16, v >> 8 & 255, v & 255]
                } else if (v.substr(0, 3) === "hsl") {
                    a = wasHSL = v.match(_numExp);
                    if (!toHSL) {
                        h = Number(a[0]) % 360 / 360;
                        s = Number(a[1]) / 100;
                        l = Number(a[2]) / 100;
                        g = l <= .5 ? l * (s + 1) : l + s - l * s;
                        r = l * 2 - g;
                        if (a.length > 3) {
                            a[3] = Number(v[3])
                        }
                        a[0] = _hue(h + 1 / 3, r, g);
                        a[1] = _hue(h, r, g);
                        a[2] = _hue(h - 1 / 3, r, g)
                    } else if (v.indexOf("=") !== -1) {
                        return v.match(_relNumExp)
                    }
                } else {
                    a = v.match(_numExp) || _colorLookup.transparent
                }
                a[0] = Number(a[0]);
                a[1] = Number(a[1]);
                a[2] = Number(a[2]);
                if (a.length > 3) {
                    a[3] = Number(a[3])
                }
            }
            if (toHSL && !wasHSL) {
                r = a[0] / 255;
                g = a[1] / 255;
                b = a[2] / 255;
                max = Math.max(r, g, b);
                min = Math.min(r, g, b);
                l = (max + min) / 2;
                if (max === min) {
                    h = s = 0
                } else {
                    d = max - min;
                    s = l > .5 ? d / (2 - max - min) : d / (max + min);
                    h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
                    h *= 60
                }
                a[0] = h + .5 | 0;
                a[1] = s * 100 + .5 | 0;
                a[2] = l * 100 + .5 | 0
            }
            return a
        }
        , _formatColors = function(s, toHSL) {
            var colors = s.match(_colorExp) || [], charIndex = 0, parsed = colors.length ? "" : s, i, color, temp;
            for (i = 0; i < colors.length; i++) {
                color = colors[i];
                temp = s.substr(charIndex, s.indexOf(color, charIndex) - charIndex);
                charIndex += temp.length + color.length;
                color = _parseColor(color, toHSL);
                if (color.length === 3) {
                    color.push(1)
                }
                parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")"
            }
            return parsed + s.substr(charIndex)
        }, _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";
        for (p in _colorLookup) {
            _colorExp += "|" + p + "\\b"
        }
        _colorExp = new RegExp(_colorExp + ")","gi");
        CSSPlugin.colorStringFilter = function(a) {
            var combined = a[0] + a[1], toHSL;
            if (_colorExp.test(combined)) {
                toHSL = combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1;
                a[0] = _formatColors(a[0], toHSL);
                a[1] = _formatColors(a[1], toHSL)
            }
            _colorExp.lastIndex = 0
        }
        ;
        if (!TweenLite.defaultStringFilter) {
            TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter
        }
        var _getFormatter = function(dflt, clr, collapsible, multi) {
            if (dflt == null) {
                return function(v) {
                    return v
                }
            }
            var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "", dVals = dflt.split(dColor).join("").match(_valuesExp) || [], pfx = dflt.substr(0, dflt.indexOf(dVals[0])), sfx = dflt.charAt(dflt.length - 1) === ")" ? ")" : "", delim = dflt.indexOf(" ") !== -1 ? " " : ",", numVals = dVals.length, dSfx = numVals > 0 ? dVals[0].replace(_numExp, "") : "", formatter;
            if (!numVals) {
                return function(v) {
                    return v
                }
            }
            if (clr) {
                formatter = function(v) {
                    var color, vals, i, a;
                    if (typeof v === "number") {
                        v += dSfx
                    } else if (multi && _commasOutsideParenExp.test(v)) {
                        a = v.replace(_commasOutsideParenExp, "|").split("|");
                        for (i = 0; i < a.length; i++) {
                            a[i] = formatter(a[i])
                        }
                        return a.join(",")
                    }
                    color = (v.match(_colorExp) || [dColor])[0];
                    vals = v.split(color).join("").match(_valuesExp) || [];
                    i = vals.length;
                    if (numVals > i--) {
                        while (++i < numVals) {
                            vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i]
                        }
                    }
                    return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "")
                }
                ;
                return formatter
            }
            formatter = function(v) {
                var vals, a, i;
                if (typeof v === "number") {
                    v += dSfx
                } else if (multi && _commasOutsideParenExp.test(v)) {
                    a = v.replace(_commasOutsideParenExp, "|").split("|");
                    for (i = 0; i < a.length; i++) {
                        a[i] = formatter(a[i])
                    }
                    return a.join(",")
                }
                vals = v.match(_valuesExp) || [];
                i = vals.length;
                if (numVals > i--) {
                    while (++i < numVals) {
                        vals[i] = collapsible ? vals[(i - 1) / 2 | 0] : dVals[i]
                    }
                }
                return pfx + vals.join(delim) + sfx
            }
            ;
            return formatter
        }
          , _getEdgeParser = function(props) {
            props = props.split(",");
            return function(t, e, p, cssp, pt, plugin, vars) {
                var a = (e + "").split(" "), i;
                vars = {};
                for (i = 0; i < 4; i++) {
                    vars[props[i]] = a[i] = a[i] || a[(i - 1) / 2 >> 0]
                }
                return cssp.parse(t, vars, pt, plugin)
            }
        }
          , _setPluginRatio = _internals._setPluginRatio = function(v) {
            this.plugin.setRatio(v);
            var d = this.data, proxy = d.proxy, mpt = d.firstMPT, min = 1e-6, val, pt, i, str, p;
            while (mpt) {
                val = proxy[mpt.v];
                if (mpt.r) {
                    val = Math.round(val)
                } else if (val < min && val > -min) {
                    val = 0
                }
                mpt.t[mpt.p] = val;
                mpt = mpt._next
            }
            if (d.autoRotate) {
                d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation
            }
            if (v === 1 || v === 0) {
                mpt = d.firstMPT;
                p = v === 1 ? "e" : "b";
                while (mpt) {
                    pt = mpt.t;
                    if (!pt.type) {
                        pt[p] = pt.s + pt.xs0
                    } else if (pt.type === 1) {
                        str = pt.xs0 + pt.s + pt.xs1;
                        for (i = 1; i < pt.l; i++) {
                            str += pt["xn" + i] + pt["xs" + (i + 1)]
                        }
                        pt[p] = str
                    }
                    mpt = mpt._next
                }
            }
        }
          , MiniPropTween = function(t, p, v, next, r) {
            this.t = t;
            this.p = p;
            this.v = v;
            this.r = r;
            if (next) {
                next._prev = this;
                this._next = next
            }
        }
          , _parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
            var bpt = pt, start = {}, end = {}, transform = cssp._transform, oldForce = _forcePT, i, p, xp, mpt, firstPT;
            cssp._transform = null;
            _forcePT = vars;
            pt = firstPT = cssp.parse(t, vars, pt, plugin);
            _forcePT = oldForce;
            if (shallow) {
                cssp._transform = transform;
                if (bpt) {
                    bpt._prev = null;
                    if (bpt._prev) {
                        bpt._prev._next = null
                    }
                }
            }
            while (pt && pt !== bpt) {
                if (pt.type <= 1) {
                    p = pt.p;
                    end[p] = pt.s + pt.c;
                    start[p] = pt.s;
                    if (!shallow) {
                        mpt = new MiniPropTween(pt,"s",p,mpt,pt.r);
                        pt.c = 0
                    }
                    if (pt.type === 1) {
                        i = pt.l;
                        while (--i > 0) {
                            xp = "xn" + i;
                            p = pt.p + "_" + xp;
                            end[p] = pt.data[xp];
                            start[p] = pt[xp];
                            if (!shallow) {
                                mpt = new MiniPropTween(pt,xp,p,mpt,pt.rxp[xp])
                            }
                        }
                    }
                }
                pt = pt._next
            }
            return {
                proxy: start,
                end: end,
                firstMPT: mpt,
                pt: firstPT
            }
        }
          , CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
            this.t = t;
            this.p = p;
            this.s = s;
            this.c = c;
            this.n = n || p;
            if (!(t instanceof CSSPropTween)) {
                _overwriteProps.push(this.n)
            }
            this.r = r;
            this.type = type || 0;
            if (pr) {
                this.pr = pr;
                _hasPriority = true
            }
            this.b = b === undefined ? s : b;
            this.e = e === undefined ? s + c : e;
            if (next) {
                this._next = next;
                next._prev = this
            }
        }
          , _addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) {
            var pt = new CSSPropTween(target,prop,start,end - start,next,-1,overwriteProp);
            pt.b = start;
            pt.e = pt.xs0 = end;
            return pt
        }
          , _parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
            b = b || dflt || "";
            if (typeof e === "function") {
                e = e(_index, _target)
            }
            pt = new CSSPropTween(t,p,0,0,pt,setRatio ? 2 : 1,null,false,pr,b,e);
            e += "";
            if (clrs && _colorExp.test(e + b)) {
                e = [b, e];
                CSSPlugin.colorStringFilter(e);
                b = e[0];
                e = e[1]
            }
            var ba = b.split(", ").join(",").split(" "), ea = e.split(", ").join(",").split(" "), l = ba.length, autoRound = _autoRound !== false, i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
            if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
                ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                l = ba.length
            }
            if (l !== ea.length) {
                ba = (dflt || "").split(" ");
                l = ba.length
            }
            pt.plugin = plugin;
            pt.setRatio = setRatio;
            _colorExp.lastIndex = 0;
            for (i = 0; i < l; i++) {
                bv = ba[i];
                ev = ea[i];
                bn = parseFloat(bv);
                if (bn || bn === 0) {
                    pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), autoRound && ev.indexOf("px") !== -1, true)
                } else if (clrs && _colorExp.test(bv)) {
                    str = ev.indexOf(")") + 1;
                    str = ")" + (str ? ev.substr(str) : "");
                    useHSL = ev.indexOf("hsl") !== -1 && _supportsOpacity;
                    bv = _parseColor(bv, useHSL);
                    ev = _parseColor(ev, useHSL);
                    hasAlpha = bv.length + ev.length > 6;
                    if (hasAlpha && !_supportsOpacity && ev[3] === 0) {
                        pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                        pt.e = pt.e.split(ea[i]).join("transparent")
                    } else {
                        if (!_supportsOpacity) {
                            hasAlpha = false
                        }
                        if (useHSL) {
                            pt.appendXtra(hasAlpha ? "hsla(" : "hsl(", bv[0], _parseChange(ev[0], bv[0]), ",", false, true).appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false).appendXtra("", bv[2], _parseChange(ev[2], bv[2]), hasAlpha ? "%," : "%" + str, false)
                        } else {
                            pt.appendXtra(hasAlpha ? "rgba(" : "rgb(", bv[0], ev[0] - bv[0], ",", true, true).appendXtra("", bv[1], ev[1] - bv[1], ",", true).appendXtra("", bv[2], ev[2] - bv[2], hasAlpha ? "," : str, true)
                        }
                        if (hasAlpha) {
                            bv = bv.length < 4 ? 1 : bv[3];
                            pt.appendXtra("", bv, (ev.length < 4 ? 1 : ev[3]) - bv, str, false)
                        }
                    }
                    _colorExp.lastIndex = 0
                } else {
                    bnums = bv.match(_numExp);
                    if (!bnums) {
                        pt["xs" + pt.l] += pt.l || pt["xs" + pt.l] ? " " + ev : ev
                    } else {
                        enums = ev.match(_relNumExp);
                        if (!enums || enums.length !== bnums.length) {
                            return pt
                        }
                        ni = 0;
                        for (xi = 0; xi < bnums.length; xi++) {
                            cv = bnums[xi];
                            temp = bv.indexOf(cv, ni);
                            pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", autoRound && bv.substr(temp + cv.length, 2) === "px", xi === 0);
                            ni = temp + cv.length
                        }
                        pt["xs" + pt.l] += bv.substr(ni)
                    }
                }
            }
            if (e.indexOf("=") !== -1)
                if (pt.data) {
                    str = pt.xs0 + pt.data.s;
                    for (i = 1; i < pt.l; i++) {
                        str += pt["xs" + i] + pt.data["xn" + i]
                    }
                    pt.e = str + pt["xs" + i]
                }
            if (!pt.l) {
                pt.type = -1;
                pt.xs0 = pt.e
            }
            return pt.xfirst || pt
        }
          , i = 9;
        p = CSSPropTween.prototype;
        p.l = p.pr = 0;
        while (--i > 0) {
            p["xn" + i] = 0;
            p["xs" + i] = ""
        }
        p.xs0 = "";
        p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;
        p.appendXtra = function(pfx, s, c, sfx, r, pad) {
            var pt = this
              , l = pt.l;
            pt["xs" + l] += pad && (l || pt["xs" + l]) ? " " + pfx : pfx || "";
            if (!c)
                if (l !== 0 && !pt.plugin) {
                    pt["xs" + l] += s + (sfx || "");
                    return pt
                }
            pt.l++;
            pt.type = pt.setRatio ? 2 : 1;
            pt["xs" + pt.l] = sfx || "";
            if (l > 0) {
                pt.data["xn" + l] = s + c;
                pt.rxp["xn" + l] = r;
                pt["xn" + l] = s;
                if (!pt.plugin) {
                    pt.xfirst = new CSSPropTween(pt,"xn" + l,s,c,pt.xfirst || pt,0,pt.n,r,pt.pr);
                    pt.xfirst.xs0 = 0
                }
                return pt
            }
            pt.data = {
                s: s + c
            };
            pt.rxp = {};
            pt.s = s;
            pt.c = c;
            pt.r = r;
            return pt
        }
        ;
        var SpecialProp = function(p, options) {
            options = options || {};
            this.p = options.prefix ? _checkPropPrefix(p) || p : p;
            _specialProps[p] = _specialProps[this.p] = this;
            this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
            if (options.parser) {
                this.parse = options.parser
            }
            this.clrs = options.color;
            this.multi = options.multi;
            this.keyword = options.keyword;
            this.dflt = options.defaultValue;
            this.pr = options.priority || 0
        }
          , _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
            if (typeof options !== "object") {
                options = {
                    parser: defaults
                }
            }
            var a = p.split(","), d = options.defaultValue, i, temp;
            defaults = defaults || [d];
            for (i = 0; i < a.length; i++) {
                options.prefix = i === 0 && options.prefix;
                options.defaultValue = defaults[i] || d;
                temp = new SpecialProp(a[i],options)
            }
        }
          , _registerPluginProp = _internals._registerPluginProp = function(p) {
            if (!_specialProps[p]) {
                var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
                _registerComplexSpecialProp(p, {
                    parser: function(t, e, p, cssp, pt, plugin, vars) {
                        var pluginClass = _globals.com.greensock.plugins[pluginName];
                        if (!pluginClass) {
                            _log("Error: " + pluginName + " js file not loaded.");
                            return pt
                        }
                        pluginClass._cssRegister();
                        return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars)
                    }
                })
            }
        }
        ;
        p = SpecialProp.prototype;
        p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
            var kwd = this.keyword, i, ba, ea, l, bi, ei;
            if (this.multi)
                if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
                    ba = b.replace(_commasOutsideParenExp, "|").split("|");
                    ea = e.replace(_commasOutsideParenExp, "|").split("|")
                } else if (kwd) {
                    ba = [b];
                    ea = [e]
                }
            if (ea) {
                l = ea.length > ba.length ? ea.length : ba.length;
                for (i = 0; i < l; i++) {
                    b = ba[i] = ba[i] || this.dflt;
                    e = ea[i] = ea[i] || this.dflt;
                    if (kwd) {
                        bi = b.indexOf(kwd);
                        ei = e.indexOf(kwd);
                        if (bi !== ei) {
                            if (ei === -1) {
                                ba[i] = ba[i].split(kwd).join("")
                            } else if (bi === -1) {
                                ba[i] += " " + kwd
                            }
                        }
                    }
                }
                b = ba.join(", ");
                e = ea.join(", ")
            }
            return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio)
        }
        ;
        p.parse = function(t, e, p, cssp, pt, plugin, vars) {
            return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin)
        }
        ;
        CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
            _registerComplexSpecialProp(name, {
                parser: function(t, e, p, cssp, pt, plugin, vars) {
                    var rv = new CSSPropTween(t,p,0,0,pt,2,p,false,priority);
                    rv.plugin = plugin;
                    rv.setRatio = onInitTween(t, e, cssp._tween, p);
                    return rv
                },
                priority: priority
            })
        }
        ;
        CSSPlugin.useSVGTransformAttr = _isSafari || _isFirefox;
        var _transformProps = "scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","), _transformProp = _checkPropPrefix("transform"), _transformPropCSS = _prefixCSS + "transform", _transformOriginProp = _checkPropPrefix("transformOrigin"), _supports3D = _checkPropPrefix("perspective") !== null, Transform = _internals.Transform = function() {
            this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
            this.force3D = CSSPlugin.defaultForce3D === false || !_supports3D ? false : CSSPlugin.defaultForce3D || "auto"
        }
        , _SVGElement = window.SVGElement, _useSVGTransformAttr, _createSVG = function(type, container, attributes) {
            var element = _doc.createElementNS("http://www.w3.org/2000/svg", type), reg = /([a-z])([A-Z])/g, p;
            for (p in attributes) {
                element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p])
            }
            container.appendChild(element);
            return element
        }, _docElement = _doc.documentElement, _forceSVGTransformAttr = function() {
            var force = _ieVers || /Android/i.test(_agent) && !window.chrome, svg, rect, width;
            if (_doc.createElementNS && !force) {
                svg = _createSVG("svg", _docElement);
                rect = _createSVG("rect", svg, {
                    width: 100,
                    height: 50,
                    x: 100
                });
                width = rect.getBoundingClientRect().width;
                rect.style[_transformOriginProp] = "50% 50%";
                rect.style[_transformProp] = "scaleX(0.5)";
                force = width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D);
                _docElement.removeChild(svg)
            }
            return force
        }(), _parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
            var tm = e._gsTransform, m = _getMatrix(e, true), v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
            if (tm) {
                xOriginOld = tm.xOrigin;
                yOriginOld = tm.yOrigin
            }
            if (!absolute || (v = absolute.split(" ")).length < 2) {
                b = e.getBBox();
                local = _parsePosition(local).split(" ");
                v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x, (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y]
            }
            decoratee.xOrigin = xOrigin = parseFloat(v[0]);
            decoratee.yOrigin = yOrigin = parseFloat(v[1]);
            if (absolute && m !== _identity2DMatrix) {
                a = m[0];
                b = m[1];
                c = m[2];
                d = m[3];
                tx = m[4];
                ty = m[5];
                determinant = a * d - b * c;
                x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
                y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
                xOrigin = decoratee.xOrigin = v[0] = x;
                yOrigin = decoratee.yOrigin = v[1] = y
            }
            if (tm) {
                if (skipRecord) {
                    decoratee.xOffset = tm.xOffset;
                    decoratee.yOffset = tm.yOffset;
                    tm = decoratee
                }
                if (smoothOrigin || smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false) {
                    x = xOrigin - xOriginOld;
                    y = yOrigin - yOriginOld;
                    tm.xOffset += x * m[0] + y * m[2] - x;
                    tm.yOffset += x * m[1] + y * m[3] - y
                } else {
                    tm.xOffset = tm.yOffset = 0
                }
            }
            if (!skipRecord) {
                e.setAttribute("data-svg-origin", v.join(" "))
            }
        }, _canGetBBox = function(e) {
            try {
                return e.getBBox()
            } catch (e) {}
        }, _isSVG = function(e) {
            return !!(_SVGElement && e.getBBox && e.getCTM && _canGetBBox(e) && (!e.parentNode || e.parentNode.getBBox && e.parentNode.getCTM))
        }, _identity2DMatrix = [1, 0, 0, 1, 0, 0], _getMatrix = function(e, force2D) {
            var tm = e._gsTransform || new Transform, rnd = 1e5, style = e.style, isDefault, s, m, n, dec, none;
            if (_transformProp) {
                s = _getStyle(e, _transformPropCSS, null, true)
            } else if (e.currentStyle) {
                s = e.currentStyle.filter.match(_ieGetMatrixExp);
                s = s && s.length === 4 ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), tm.x || 0, tm.y || 0].join(",") : ""
            }
            isDefault = !s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)";
            if (isDefault && _transformProp && ((none = _getComputedStyle(e).display === "none") || !e.parentNode)) {
                if (none) {
                    n = style.display;
                    style.display = "block"
                }
                if (!e.parentNode) {
                    dec = 1;
                    _docElement.appendChild(e)
                }
                s = _getStyle(e, _transformPropCSS, null, true);
                isDefault = !s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)";
                if (n) {
                    style.display = n
                } else if (none) {
                    _removeProp(style, "display")
                }
                if (dec) {
                    _docElement.removeChild(e)
                }
            }
            if (tm.svg || e.getBBox && _isSVG(e)) {
                if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) {
                    s = style[_transformProp];
                    isDefault = 0
                }
                m = e.getAttribute("transform");
                if (isDefault && m) {
                    if (m.indexOf("matrix") !== -1) {
                        s = m;
                        isDefault = 0
                    } else if (m.indexOf("translate") !== -1) {
                        s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")";
                        isDefault = 0
                    }
                }
            }
            if (isDefault) {
                return _identity2DMatrix
            }
            m = (s || "").match(_numExp) || [];
            i = m.length;
            while (--i > -1) {
                n = Number(m[i]);
                m[i] = (dec = n - (n |= 0)) ? (dec * rnd + (dec < 0 ? -.5 : .5) | 0) / rnd + n : n
            }
            return force2D && m.length > 6 ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m
        }, _getTransform = _internals.getTransform = function(t, cs, rec, parse) {
            if (t._gsTransform && rec && !parse) {
                return t._gsTransform
            }
            var tm = rec ? t._gsTransform || new Transform : new Transform, invX = tm.scaleX < 0, min = 2e-5, rnd = 1e5, zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin || 0 : 0, defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0, m, i, scaleX, scaleY, rotation, skewX;
            tm.svg = !!(t.getBBox && _isSVG(t));
            if (tm.svg) {
                _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
                _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr
            }
            m = _getMatrix(t);
            if (m !== _identity2DMatrix) {
                if (m.length === 16) {
                    var a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3], a12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7], a13 = m[8], a23 = m[9], a33 = m[10], a14 = m[12], a24 = m[13], a34 = m[14], a43 = m[11], angle = Math.atan2(a32, a33), t1, t2, t3, t4, cos, sin;
                    if (tm.zOrigin) {
                        a34 = -tm.zOrigin;
                        a14 = a13 * a34 - m[12];
                        a24 = a23 * a34 - m[13];
                        a34 = a33 * a34 + tm.zOrigin - m[14]
                    }
                    tm.rotationX = angle * _RAD2DEG;
                    if (angle) {
                        cos = Math.cos(-angle);
                        sin = Math.sin(-angle);
                        t1 = a12 * cos + a13 * sin;
                        t2 = a22 * cos + a23 * sin;
                        t3 = a32 * cos + a33 * sin;
                        a13 = a12 * -sin + a13 * cos;
                        a23 = a22 * -sin + a23 * cos;
                        a33 = a32 * -sin + a33 * cos;
                        a43 = a42 * -sin + a43 * cos;
                        a12 = t1;
                        a22 = t2;
                        a32 = t3
                    }
                    angle = Math.atan2(-a31, a33);
                    tm.rotationY = angle * _RAD2DEG;
                    if (angle) {
                        cos = Math.cos(-angle);
                        sin = Math.sin(-angle);
                        t1 = a11 * cos - a13 * sin;
                        t2 = a21 * cos - a23 * sin;
                        t3 = a31 * cos - a33 * sin;
                        a23 = a21 * sin + a23 * cos;
                        a33 = a31 * sin + a33 * cos;
                        a43 = a41 * sin + a43 * cos;
                        a11 = t1;
                        a21 = t2;
                        a31 = t3
                    }
                    angle = Math.atan2(a21, a11);
                    tm.rotation = angle * _RAD2DEG;
                    if (angle) {
                        cos = Math.cos(-angle);
                        sin = Math.sin(-angle);
                        a11 = a11 * cos + a12 * sin;
                        t2 = a21 * cos + a22 * sin;
                        a22 = a21 * -sin + a22 * cos;
                        a32 = a31 * -sin + a32 * cos;
                        a21 = t2
                    }
                    if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) {
                        tm.rotationX = tm.rotation = 0;
                        tm.rotationY = 180 - tm.rotationY
                    }
                    tm.scaleX = (Math.sqrt(a11 * a11 + a21 * a21) * rnd + .5 | 0) / rnd;
                    tm.scaleY = (Math.sqrt(a22 * a22 + a23 * a23) * rnd + .5 | 0) / rnd;
                    tm.scaleZ = (Math.sqrt(a32 * a32 + a33 * a33) * rnd + .5 | 0) / rnd;
                    if (tm.rotationX || tm.rotationY) {
                        tm.skewX = 0
                    } else {
                        tm.skewX = a12 || a22 ? Math.atan2(a12, a22) * _RAD2DEG + tm.rotation : tm.skewX || 0;
                        if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
                            if (invX) {
                                tm.scaleX *= -1;
                                tm.skewX += tm.rotation <= 0 ? 180 : -180;
                                tm.rotation += tm.rotation <= 0 ? 180 : -180
                            } else {
                                tm.scaleY *= -1;
                                tm.skewX += tm.skewX <= 0 ? 180 : -180
                            }
                        }
                    }
                    tm.perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
                    tm.x = a14;
                    tm.y = a24;
                    tm.z = a34;
                    if (tm.svg) {
                        tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
                        tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22)
                    }
                } else if (!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) {
                    var k = m.length >= 6
                      , a = k ? m[0] : 1
                      , b = m[1] || 0
                      , c = m[2] || 0
                      , d = k ? m[3] : 1;
                    tm.x = m[4] || 0;
                    tm.y = m[5] || 0;
                    scaleX = Math.sqrt(a * a + b * b);
                    scaleY = Math.sqrt(d * d + c * c);
                    rotation = a || b ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0;
                    skewX = c || d ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
                        if (invX) {
                            scaleX *= -1;
                            skewX += rotation <= 0 ? 180 : -180;
                            rotation += rotation <= 0 ? 180 : -180
                        } else {
                            scaleY *= -1;
                            skewX += skewX <= 0 ? 180 : -180
                        }
                    }
                    tm.scaleX = scaleX;
                    tm.scaleY = scaleY;
                    tm.rotation = rotation;
                    tm.skewX = skewX;
                    if (_supports3D) {
                        tm.rotationX = tm.rotationY = tm.z = 0;
                        tm.perspective = defaultTransformPerspective;
                        tm.scaleZ = 1
                    }
                    if (tm.svg) {
                        tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
                        tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d)
                    }
                }
                tm.zOrigin = zOrigin;
                for (i in tm) {
                    if (tm[i] < min)
                        if (tm[i] > -min) {
                            tm[i] = 0
                        }
                }
            }
            if (rec) {
                t._gsTransform = tm;
                if (tm.svg) {
                    if (_useSVGTransformAttr && t.style[_transformProp]) {
                        TweenLite.delayedCall(.001, function() {
                            _removeProp(t.style, _transformProp)
                        })
                    } else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
                        TweenLite.delayedCall(.001, function() {
                            t.removeAttribute("transform")
                        })
                    }
                }
            }
            return tm
        }
        , _setIETransformRatio = function(v) {
            var t = this.data, ang = -t.rotation * _DEG2RAD, skew = ang + t.skewX * _DEG2RAD, rnd = 1e5, a = (Math.cos(ang) * t.scaleX * rnd | 0) / rnd, b = (Math.sin(ang) * t.scaleX * rnd | 0) / rnd, c = (Math.sin(skew) * -t.scaleY * rnd | 0) / rnd, d = (Math.cos(skew) * t.scaleY * rnd | 0) / rnd, style = this.t.style, cs = this.t.currentStyle, filters, val;
            if (!cs) {
                return
            }
            val = b;
            b = -c;
            c = -val;
            filters = cs.filter;
            style.filter = "";
            var w = this.t.offsetWidth, h = this.t.offsetHeight, clip = cs.position !== "absolute", m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d, ox = t.x + w * t.xPercent / 100, oy = t.y + h * t.yPercent / 100, dx, dy;
            if (t.ox != null) {
                dx = (t.oxp ? w * t.ox * .01 : t.ox) - w / 2;
                dy = (t.oyp ? h * t.oy * .01 : t.oy) - h / 2;
                ox += dx - (dx * a + dy * b);
                oy += dy - (dx * c + dy * d)
            }
            if (!clip) {
                m += ", sizingMethod='auto expand')"
            } else {
                dx = w / 2;
                dy = h / 2;
                m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")"
            }
            if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
                style.filter = filters.replace(_ieSetMatrixExp, m)
            } else {
                style.filter = m + " " + filters
            }
            if (v === 0 || v === 1)
                if (a === 1)
                    if (b === 0)
                        if (c === 0)
                            if (d === 1)
                                if (!clip || m.indexOf("Dx=0, Dy=0") !== -1)
                                    if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100)
                                        if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
                                            style.removeAttribute("filter")
                                        }
            if (!clip) {
                var mult = _ieVers < 8 ? 1 : -1, marg, prop, dif;
                dx = t.ieOffsetX || 0;
                dy = t.ieOffsetY || 0;
                t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
                t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
                for (i = 0; i < 4; i++) {
                    prop = _margins[i];
                    marg = cs[prop];
                    val = marg.indexOf("px") !== -1 ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                    if (val !== t[prop]) {
                        dif = i < 2 ? -t.ieOffsetX : -t.ieOffsetY
                    } else {
                        dif = i < 2 ? dx - t.ieOffsetX : dy - t.ieOffsetY
                    }
                    style[prop] = (t[prop] = Math.round(val - dif * (i === 0 || i === 2 ? 1 : mult))) + "px"
                }
            }
        }, _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
            var t = this.data, style = this.t.style, angle = t.rotation, rotationX = t.rotationX, rotationY = t.rotationY, sx = t.scaleX, sy = t.scaleY, sz = t.scaleZ, x = t.x, y = t.y, z = t.z, isSVG = t.svg, perspective = t.perspective, force3D = t.force3D, a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43, zOrigin, min, cos, sin, t1, t2, transform, comma, zero, skew, rnd;
            if (((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1 || _useSVGTransformAttr && isSVG || !_supports3D) {
                if (angle || t.skewX || isSVG) {
                    angle *= _DEG2RAD;
                    skew = t.skewX * _DEG2RAD;
                    rnd = 1e5;
                    a11 = Math.cos(angle) * sx;
                    a21 = Math.sin(angle) * sx;
                    a12 = Math.sin(angle - skew) * -sy;
                    a22 = Math.cos(angle - skew) * sy;
                    if (skew && t.skewType === "simple") {
                        t1 = Math.tan(skew - t.skewY * _DEG2RAD);
                        t1 = Math.sqrt(1 + t1 * t1);
                        a12 *= t1;
                        a22 *= t1;
                        if (t.skewY) {
                            t1 = Math.tan(t.skewY * _DEG2RAD);
                            t1 = Math.sqrt(1 + t1 * t1);
                            a11 *= t1;
                            a21 *= t1
                        }
                    }
                    if (isSVG) {
                        x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                        y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                        if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) {
                            min = this.t.getBBox();
                            x += t.xPercent * .01 * min.width;
                            y += t.yPercent * .01 * min.height
                        }
                        min = 1e-6;
                        if (x < min)
                            if (x > -min) {
                                x = 0
                            }
                        if (y < min)
                            if (y > -min) {
                                y = 0
                            }
                    }
                    transform = (a11 * rnd | 0) / rnd + "," + (a21 * rnd | 0) / rnd + "," + (a12 * rnd | 0) / rnd + "," + (a22 * rnd | 0) / rnd + "," + x + "," + y + ")";
                    if (isSVG && _useSVGTransformAttr) {
                        this.t.setAttribute("transform", "matrix(" + transform)
                    } else {
                        style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform
                    }
                } else {
                    style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")"
                }
                return
            }
            if (_isFirefox) {
                min = 1e-4;
                if (sx < min && sx > -min) {
                    sx = sz = 2e-5
                }
                if (sy < min && sy > -min) {
                    sy = sz = 2e-5
                }
                if (perspective && !t.z && !t.rotationX && !t.rotationY) {
                    perspective = 0
                }
            }
            if (angle || t.skewX) {
                angle *= _DEG2RAD;
                cos = a11 = Math.cos(angle);
                sin = a21 = Math.sin(angle);
                if (t.skewX) {
                    angle -= t.skewX * _DEG2RAD;
                    cos = Math.cos(angle);
                    sin = Math.sin(angle);
                    if (t.skewType === "simple") {
                        t1 = Math.tan((t.skewX - t.skewY) * _DEG2RAD);
                        t1 = Math.sqrt(1 + t1 * t1);
                        cos *= t1;
                        sin *= t1;
                        if (t.skewY) {
                            t1 = Math.tan(t.skewY * _DEG2RAD);
                            t1 = Math.sqrt(1 + t1 * t1);
                            a11 *= t1;
                            a21 *= t1
                        }
                    }
                }
                a12 = -sin;
                a22 = cos
            } else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) {
                style[_transformProp] = (t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z + "px)" + (sx !== 1 || sy !== 1 ? " scale(" + sx + "," + sy + ")" : "");
                return
            } else {
                a11 = a22 = 1;
                a12 = a21 = 0
            }
            a33 = 1;
            a13 = a23 = a31 = a32 = a41 = a42 = 0;
            a43 = perspective ? -1 / perspective : 0;
            zOrigin = t.zOrigin;
            min = 1e-6;
            comma = ",";
            zero = "0";
            angle = rotationY * _DEG2RAD;
            if (angle) {
                cos = Math.cos(angle);
                sin = Math.sin(angle);
                a31 = -sin;
                a41 = a43 * -sin;
                a13 = a11 * sin;
                a23 = a21 * sin;
                a33 = cos;
                a43 *= cos;
                a11 *= cos;
                a21 *= cos
            }
            angle = rotationX * _DEG2RAD;
            if (angle) {
                cos = Math.cos(angle);
                sin = Math.sin(angle);
                t1 = a12 * cos + a13 * sin;
                t2 = a22 * cos + a23 * sin;
                a32 = a33 * sin;
                a42 = a43 * sin;
                a13 = a12 * -sin + a13 * cos;
                a23 = a22 * -sin + a23 * cos;
                a33 = a33 * cos;
                a43 = a43 * cos;
                a12 = t1;
                a22 = t2
            }
            if (sz !== 1) {
                a13 *= sz;
                a23 *= sz;
                a33 *= sz;
                a43 *= sz
            }
            if (sy !== 1) {
                a12 *= sy;
                a22 *= sy;
                a32 *= sy;
                a42 *= sy
            }
            if (sx !== 1) {
                a11 *= sx;
                a21 *= sx;
                a31 *= sx;
                a41 *= sx
            }
            if (zOrigin || isSVG) {
                if (zOrigin) {
                    x += a13 * -zOrigin;
                    y += a23 * -zOrigin;
                    z += a33 * -zOrigin + zOrigin
                }
                if (isSVG) {
                    x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                    y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset
                }
                if (x < min && x > -min) {
                    x = zero
                }
                if (y < min && y > -min) {
                    y = zero
                }
                if (z < min && z > -min) {
                    z = 0
                }
            }
            transform = t.xPercent || t.yPercent ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(";
            transform += (a11 < min && a11 > -min ? zero : a11) + comma + (a21 < min && a21 > -min ? zero : a21) + comma + (a31 < min && a31 > -min ? zero : a31);
            transform += comma + (a41 < min && a41 > -min ? zero : a41) + comma + (a12 < min && a12 > -min ? zero : a12) + comma + (a22 < min && a22 > -min ? zero : a22);
            if (rotationX || rotationY || sz !== 1) {
                transform += comma + (a32 < min && a32 > -min ? zero : a32) + comma + (a42 < min && a42 > -min ? zero : a42) + comma + (a13 < min && a13 > -min ? zero : a13);
                transform += comma + (a23 < min && a23 > -min ? zero : a23) + comma + (a33 < min && a33 > -min ? zero : a33) + comma + (a43 < min && a43 > -min ? zero : a43) + comma
            } else {
                transform += ",0,0,0,0,1,0,"
            }
            transform += x + comma + y + comma + z + comma + (perspective ? 1 + -z / perspective : 1) + ")";
            style[_transformProp] = transform
        }
        ;
        p = Transform.prototype;
        p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
        p.scaleX = p.scaleY = p.scaleZ = 1;
        _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
            parser: function(t, e, parsingProp, cssp, pt, plugin, vars) {
                if (cssp._lastParsedTransform === vars) {
                    return pt
                }
                cssp._lastParsedTransform = vars;
                var swapFunc;
                if (typeof vars[parsingProp] === "function") {
                    swapFunc = vars[parsingProp];
                    vars[parsingProp] = e
                }
                var originalGSTransform = t._gsTransform, style = t.style, min = 1e-6, i = _transformProps.length, v = vars, endRotations = {}, transformOriginString = "transformOrigin", m1 = _getTransform(t, _cs, true, v.parseTransform), orig = v.transform && (typeof v.transform === "function" ? v.transform(_index, _target) : v.transform), m2, copy, has3D, hasChange, dr, x, y, matrix, p;
                cssp._transform = m1;
                if (orig && typeof orig === "string" && _transformProp) {
                    copy = _tempDiv.style;
                    copy[_transformProp] = orig;
                    copy.display = "block";
                    copy.position = "absolute";
                    _doc.body.appendChild(_tempDiv);
                    m2 = _getTransform(_tempDiv, null, false);
                    if (m1.svg) {
                        x = m1.xOrigin;
                        y = m1.yOrigin;
                        m2.x -= m1.xOffset;
                        m2.y -= m1.yOffset;
                        if (v.transformOrigin || v.svgOrigin) {
                            orig = {};
                            _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
                            x = orig.xOrigin;
                            y = orig.yOrigin;
                            m2.x -= orig.xOffset - m1.xOffset;
                            m2.y -= orig.yOffset - m1.yOffset
                        }
                        if (x || y) {
                            matrix = _getMatrix(_tempDiv, true);
                            m2.x -= x - (x * matrix[0] + y * matrix[2]);
                            m2.y -= y - (x * matrix[1] + y * matrix[3])
                        }
                    }
                    _doc.body.removeChild(_tempDiv);
                    if (!m2.perspective) {
                        m2.perspective = m1.perspective
                    }
                    if (v.xPercent != null) {
                        m2.xPercent = _parseVal(v.xPercent, m1.xPercent)
                    }
                    if (v.yPercent != null) {
                        m2.yPercent = _parseVal(v.yPercent, m1.yPercent)
                    }
                } else if (typeof v === "object") {
                    m2 = {
                        scaleX: _parseVal(v.scaleX != null ? v.scaleX : v.scale, m1.scaleX),
                        scaleY: _parseVal(v.scaleY != null ? v.scaleY : v.scale, m1.scaleY),
                        scaleZ: _parseVal(v.scaleZ, m1.scaleZ),
                        x: _parseVal(v.x, m1.x),
                        y: _parseVal(v.y, m1.y),
                        z: _parseVal(v.z, m1.z),
                        xPercent: _parseVal(v.xPercent, m1.xPercent),
                        yPercent: _parseVal(v.yPercent, m1.yPercent),
                        perspective: _parseVal(v.transformPerspective, m1.perspective)
                    };
                    dr = v.directionalRotation;
                    if (dr != null) {
                        if (typeof dr === "object") {
                            for (copy in dr) {
                                v[copy] = dr[copy]
                            }
                        } else {
                            v.rotation = dr
                        }
                    }
                    if (typeof v.x === "string" && v.x.indexOf("%") !== -1) {
                        m2.x = 0;
                        m2.xPercent = _parseVal(v.x, m1.xPercent)
                    }
                    if (typeof v.y === "string" && v.y.indexOf("%") !== -1) {
                        m2.y = 0;
                        m2.yPercent = _parseVal(v.y, m1.yPercent)
                    }
                    m2.rotation = _parseAngle("rotation"in v ? v.rotation : "shortRotation"in v ? v.shortRotation + "_short" : "rotationZ"in v ? v.rotationZ : m1.rotation - m1.skewY, m1.rotation - m1.skewY, "rotation", endRotations);
                    if (_supports3D) {
                        m2.rotationX = _parseAngle("rotationX"in v ? v.rotationX : "shortRotationX"in v ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
                        m2.rotationY = _parseAngle("rotationY"in v ? v.rotationY : "shortRotationY"in v ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations)
                    }
                    m2.skewX = _parseAngle(v.skewX, m1.skewX - m1.skewY);
                    if (m2.skewY = _parseAngle(v.skewY, m1.skewY)) {
                        m2.skewX += m2.skewY;
                        m2.rotation += m2.skewY
                    }
                }
                if (_supports3D && v.force3D != null) {
                    m1.force3D = v.force3D;
                    hasChange = true
                }
                m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
                has3D = m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;
                if (!has3D && v.scale != null) {
                    m2.scaleZ = 1
                }
                while (--i > -1) {
                    p = _transformProps[i];
                    orig = m2[p] - m1[p];
                    if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
                        hasChange = true;
                        pt = new CSSPropTween(m1,p,m1[p],orig,pt);
                        if (p in endRotations) {
                            pt.e = endRotations[p]
                        }
                        pt.xs0 = 0;
                        pt.plugin = plugin;
                        cssp._overwriteProps.push(pt.n)
                    }
                }
                orig = v.transformOrigin;
                if (m1.svg && (orig || v.svgOrigin)) {
                    x = m1.xOffset;
                    y = m1.yOffset;
                    _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
                    pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString);
                    pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
                    if (x !== m1.xOffset || y !== m1.yOffset) {
                        pt = _addNonTweeningNumericPT(m1, "xOffset", originalGSTransform ? x : m1.xOffset, m1.xOffset, pt, transformOriginString);
                        pt = _addNonTweeningNumericPT(m1, "yOffset", originalGSTransform ? y : m1.yOffset, m1.yOffset, pt, transformOriginString)
                    }
                    orig = _useSVGTransformAttr ? null : "0px 0px"
                }
                if (orig || _supports3D && has3D && m1.zOrigin) {
                    if (_transformProp) {
                        hasChange = true;
                        p = _transformOriginProp;
                        orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + "";
                        pt = new CSSPropTween(style,p,0,0,pt,-1,transformOriginString);
                        pt.b = style[p];
                        pt.plugin = plugin;
                        if (_supports3D) {
                            copy = m1.zOrigin;
                            orig = orig.split(" ");
                            m1.zOrigin = (orig.length > 2 && !(copy !== 0 && orig[2] === "0px") ? parseFloat(orig[2]) : copy) || 0;
                            pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px";
                            pt = new CSSPropTween(m1,"zOrigin",0,0,pt,-1,pt.n);
                            pt.b = copy;
                            pt.xs0 = pt.e = m1.zOrigin
                        } else {
                            pt.xs0 = pt.e = orig
                        }
                    } else {
                        _parsePosition(orig + "", m1)
                    }
                }
                if (hasChange) {
                    cssp._transformType = !(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3) ? 3 : 2
                }
                if (swapFunc) {
                    vars[parsingProp] = swapFunc
                }
                return pt
            },
            prefix: true
        });
        _registerComplexSpecialProp("boxShadow", {
            defaultValue: "0px 0px 0px 0px #999",
            prefix: true,
            color: true,
            multi: true,
            keyword: "inset"
        });
        _registerComplexSpecialProp("borderRadius", {
            defaultValue: "0px",
            parser: function(t, e, p, cssp, pt, plugin) {
                e = this.format(e);
                var props = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"], style = t.style, ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
                w = parseFloat(t.offsetWidth);
                h = parseFloat(t.offsetHeight);
                ea1 = e.split(" ");
                for (i = 0; i < props.length; i++) {
                    if (this.p.indexOf("border")) {
                        props[i] = _checkPropPrefix(props[i])
                    }
                    bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                    if (bs.indexOf(" ") !== -1) {
                        bs2 = bs.split(" ");
                        bs = bs2[0];
                        bs2 = bs2[1]
                    }
                    es = es2 = ea1[i];
                    bn = parseFloat(bs);
                    bsfx = bs.substr((bn + "").length);
                    rel = es.charAt(1) === "=";
                    if (rel) {
                        en = parseInt(es.charAt(0) + "1", 10);
                        es = es.substr(2);
                        en *= parseFloat(es);
                        esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || ""
                    } else {
                        en = parseFloat(es);
                        esfx = es.substr((en + "").length)
                    }
                    if (esfx === "") {
                        esfx = _suffixMap[p] || bsfx
                    }
                    if (esfx !== bsfx) {
                        hn = _convertToPixels(t, "borderLeft", bn, bsfx);
                        vn = _convertToPixels(t, "borderTop", bn, bsfx);
                        if (esfx === "%") {
                            bs = hn / w * 100 + "%";
                            bs2 = vn / h * 100 + "%"
                        } else if (esfx === "em") {
                            em = _convertToPixels(t, "borderLeft", 1, "em");
                            bs = hn / em + "em";
                            bs2 = vn / em + "em"
                        } else {
                            bs = hn + "px";
                            bs2 = vn + "px"
                        }
                        if (rel) {
                            es = parseFloat(bs) + en + esfx;
                            es2 = parseFloat(bs2) + en + esfx
                        }
                    }
                    pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt)
                }
                return pt
            },
            prefix: true,
            formatter: _getFormatter("0px 0px 0px 0px", false, true)
        });
        _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
            defaultValue: "0px",
            parser: function(t, e, p, cssp, pt, plugin) {
                return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt)
            },
            prefix: true,
            formatter: _getFormatter("0px 0px", false, true)
        });
        _registerComplexSpecialProp("backgroundPosition", {
            defaultValue: "0 0",
            parser: function(t, e, p, cssp, pt, plugin) {
                var bp = "background-position", cs = _cs || _getComputedStyle(t, null), bs = this.format((cs ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), es = this.format(e), ba, ea, i, pct, overlap, src;
                if (bs.indexOf("%") !== -1 !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
                    src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
                    if (src && src !== "none") {
                        ba = bs.split(" ");
                        ea = es.split(" ");
                        _tempImg.setAttribute("src", src);
                        i = 2;
                        while (--i > -1) {
                            bs = ba[i];
                            pct = bs.indexOf("%") !== -1;
                            if (pct !== (ea[i].indexOf("%") !== -1)) {
                                overlap = i === 0 ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
                                ba[i] = pct ? parseFloat(bs) / 100 * overlap + "px" : parseFloat(bs) / overlap * 100 + "%"
                            }
                        }
                        bs = ba.join(" ")
                    }
                }
                return this.parseComplex(t.style, bs, es, pt, plugin)
            },
            formatter: _parsePosition
        });
        _registerComplexSpecialProp("backgroundSize", {
            defaultValue: "0 0",
            formatter: function(v) {
                v += "";
                return _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v)
            }
        });
        _registerComplexSpecialProp("perspective", {
            defaultValue: "0px",
            prefix: true
        });
        _registerComplexSpecialProp("perspectiveOrigin", {
            defaultValue: "50% 50%",
            prefix: true
        });
        _registerComplexSpecialProp("transformStyle", {
            prefix: true
        });
        _registerComplexSpecialProp("backfaceVisibility", {
            prefix: true
        });
        _registerComplexSpecialProp("userSelect", {
            prefix: true
        });
        _registerComplexSpecialProp("margin", {
            parser: _getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")
        });
        _registerComplexSpecialProp("padding", {
            parser: _getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")
        });
        _registerComplexSpecialProp("clip", {
            defaultValue: "rect(0px,0px,0px,0px)",
            parser: function(t, e, p, cssp, pt, plugin) {
                var b, cs, delim;
                if (_ieVers < 9) {
                    cs = t.currentStyle;
                    delim = _ieVers < 8 ? " " : ",";
                    b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
                    e = this.format(e).split(",").join(delim)
                } else {
                    b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
                    e = this.format(e)
                }
                return this.parseComplex(t.style, b, e, pt, plugin)
            }
        });
        _registerComplexSpecialProp("textShadow", {
            defaultValue: "0px 0px 0px #999",
            color: true,
            multi: true
        });
        _registerComplexSpecialProp("autoRound,strictUnits", {
            parser: function(t, e, p, cssp, pt) {
                return pt
            }
        });
        _registerComplexSpecialProp("border", {
            defaultValue: "0px solid #000",
            parser: function(t, e, p, cssp, pt, plugin) {
                var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px")
                  , end = this.format(e).split(" ")
                  , esfx = end[0].replace(_suffixExp, "");
                if (esfx !== "px") {
                    bw = parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx) + esfx
                }
                return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin)
            },
            color: true,
            formatter: function(v) {
                var a = v.split(" ");
                return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0]
            }
        });
        _registerComplexSpecialProp("borderWidth", {
            parser: _getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")
        });
        _registerComplexSpecialProp("float,cssFloat,styleFloat", {
            parser: function(t, e, p, cssp, pt, plugin) {
                var s = t.style
                  , prop = "cssFloat"in s ? "cssFloat" : "styleFloat";
                return new CSSPropTween(s,prop,0,0,pt,-1,p,false,0,s[prop],e)
            }
        });
        var _setIEOpacityRatio = function(v) {
            var t = this.t, filters = t.filter || _getStyle(this.data, "filter") || "", val = this.s + this.c * v | 0, skip;
            if (val === 100) {
                if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
                    t.removeAttribute("filter");
                    skip = !_getStyle(this.data, "filter")
                } else {
                    t.filter = filters.replace(_alphaFilterExp, "");
                    skip = true
                }
            }
            if (!skip) {
                if (this.xn1) {
                    t.filter = filters = filters || "alpha(opacity=" + val + ")"
                }
                if (filters.indexOf("pacity") === -1) {
                    if (val !== 0 || !this.xn1) {
                        t.filter = filters + " alpha(opacity=" + val + ")"
                    }
                } else {
                    t.filter = filters.replace(_opacityExp, "opacity=" + val)
                }
            }
        };
        _registerComplexSpecialProp("opacity,alpha,autoAlpha", {
            defaultValue: "1",
            parser: function(t, e, p, cssp, pt, plugin) {
                var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1"))
                  , style = t.style
                  , isAutoAlpha = p === "autoAlpha";
                if (typeof e === "string" && e.charAt(1) === "=") {
                    e = (e.charAt(0) === "-" ? -1 : 1) * parseFloat(e.substr(2)) + b
                }
                if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) {
                    b = 0
                }
                if (_supportsOpacity) {
                    pt = new CSSPropTween(style,"opacity",b,e - b,pt)
                } else {
                    pt = new CSSPropTween(style,"opacity",b * 100,(e - b) * 100,pt);
                    pt.xn1 = isAutoAlpha ? 1 : 0;
                    style.zoom = 1;
                    pt.type = 2;
                    pt.b = "alpha(opacity=" + pt.s + ")";
                    pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
                    pt.data = t;
                    pt.plugin = plugin;
                    pt.setRatio = _setIEOpacityRatio
                }
                if (isAutoAlpha) {
                    pt = new CSSPropTween(style,"visibility",0,0,pt,-1,null,false,0,b !== 0 ? "inherit" : "hidden",e === 0 ? "hidden" : "inherit");
                    pt.xs0 = "inherit";
                    cssp._overwriteProps.push(pt.n);
                    cssp._overwriteProps.push(p)
                }
                return pt
            }
        });
        var _removeProp = function(s, p) {
            if (p) {
                if (s.removeProperty) {
                    if (p.substr(0, 2) === "ms" || p.substr(0, 6) === "webkit") {
                        p = "-" + p
                    }
                    s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase())
                } else {
                    s.removeAttribute(p)
                }
            }
        }
          , _setClassNameRatio = function(v) {
            this.t._gsClassPT = this;
            if (v === 1 || v === 0) {
                this.t.setAttribute("class", v === 0 ? this.b : this.e);
                var mpt = this.data
                  , s = this.t.style;
                while (mpt) {
                    if (!mpt.v) {
                        _removeProp(s, mpt.p)
                    } else {
                        s[mpt.p] = mpt.v
                    }
                    mpt = mpt._next
                }
                if (v === 1 && this.t._gsClassPT === this) {
                    this.t._gsClassPT = null
                }
            } else if (this.t.getAttribute("class") !== this.e) {
                this.t.setAttribute("class", this.e)
            }
        };
        _registerComplexSpecialProp("className", {
            parser: function(t, e, p, cssp, pt, plugin, vars) {
                var b = t.getAttribute("class") || "", cssText = t.style.cssText, difData, bs, cnpt, cnptLookup, mpt;
                pt = cssp._classNamePT = new CSSPropTween(t,p,0,0,pt,2);
                pt.setRatio = _setClassNameRatio;
                pt.pr = -11;
                _hasPriority = true;
                pt.b = b;
                bs = _getAllStyles(t, _cs);
                cnpt = t._gsClassPT;
                if (cnpt) {
                    cnptLookup = {};
                    mpt = cnpt.data;
                    while (mpt) {
                        cnptLookup[mpt.p] = 1;
                        mpt = mpt._next
                    }
                    cnpt.setRatio(1)
                }
                t._gsClassPT = pt;
                pt.e = e.charAt(1) !== "=" ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + (e.charAt(0) === "+" ? " " + e.substr(2) : "");
                t.setAttribute("class", pt.e);
                difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
                t.setAttribute("class", b);
                pt.data = difData.firstMPT;
                t.style.cssText = cssText;
                pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin);
                return pt
            }
        });
        var _setClearPropsRatio = function(v) {
            if (v === 1 || v === 0)
                if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") {
                    var s = this.t.style, transformParse = _specialProps.transform.parse, a, p, i, clearTransform, transform;
                    if (this.e === "all") {
                        s.cssText = "";
                        clearTransform = true
                    } else {
                        a = this.e.split(" ").join("").split(",");
                        i = a.length;
                        while (--i > -1) {
                            p = a[i];
                            if (_specialProps[p]) {
                                if (_specialProps[p].parse === transformParse) {
                                    clearTransform = true
                                } else {
                                    p = p === "transformOrigin" ? _transformOriginProp : _specialProps[p].p
                                }
                            }
                            _removeProp(s, p)
                        }
                    }
                    if (clearTransform) {
                        _removeProp(s, _transformProp);
                        transform = this.t._gsTransform;
                        if (transform) {
                            if (transform.svg) {
                                this.t.removeAttribute("data-svg-origin");
                                this.t.removeAttribute("transform")
                            }
                            delete this.t._gsTransform
                        }
                    }
                }
        };
        _registerComplexSpecialProp("clearProps", {
            parser: function(t, e, p, cssp, pt) {
                pt = new CSSPropTween(t,p,0,0,pt,2);
                pt.setRatio = _setClearPropsRatio;
                pt.e = e;
                pt.pr = -10;
                pt.data = cssp._tween;
                _hasPriority = true;
                return pt
            }
        });
        p = "bezier,throwProps,physicsProps,physics2D".split(",");
        i = p.length;
        while (i--) {
            _registerPluginProp(p[i])
        }
        p = CSSPlugin.prototype;
        p._firstPT = p._lastParsedTransform = p._transform = null;
        p._onInitTween = function(target, vars, tween, index) {
            if (!target.nodeType) {
                return false
            }
            this._target = _target = target;
            this._tween = tween;
            this._vars = vars;
            _index = index;
            _autoRound = vars.autoRound;
            _hasPriority = false;
            _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
            _cs = _getComputedStyle(target, "");
            _overwriteProps = this._overwriteProps;
            var style = target.style, v, pt, pt2, first, last, next, zIndex, tpt, threeD;
            if (_reqSafariFix)
                if (style.zIndex === "") {
                    v = _getStyle(target, "zIndex", _cs);
                    if (v === "auto" || v === "") {
                        this._addLazySet(style, "zIndex", 0)
                    }
                }
            if (typeof vars === "string") {
                first = style.cssText;
                v = _getAllStyles(target, _cs);
                style.cssText = first + ";" + vars;
                v = _cssDif(target, v, _getAllStyles(target)).difs;
                if (!_supportsOpacity && _opacityValExp.test(vars)) {
                    v.opacity = parseFloat(RegExp.$1)
                }
                vars = v;
                style.cssText = first
            }
            if (vars.className) {
                this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars)
            } else {
                this._firstPT = pt = this.parse(target, vars, null)
            }
            if (this._transformType) {
                threeD = this._transformType === 3;
                if (!_transformProp) {
                    style.zoom = 1
                } else if (_isSafari) {
                    _reqSafariFix = true;
                    if (style.zIndex === "") {
                        zIndex = _getStyle(target, "zIndex", _cs);
                        if (zIndex === "auto" || zIndex === "") {
                            this._addLazySet(style, "zIndex", 0)
                        }
                    }
                    if (_isSafariLT6) {
                        this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"))
                    }
                }
                pt2 = pt;
                while (pt2 && pt2._next) {
                    pt2 = pt2._next
                }
                tpt = new CSSPropTween(target,"transform",0,0,null,2);
                this._linkCSSP(tpt, null, pt2);
                tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
                tpt.data = this._transform || _getTransform(target, _cs, true);
                tpt.tween = tween;
                tpt.pr = -1;
                _overwriteProps.pop()
            }
            if (_hasPriority) {
                while (pt) {
                    next = pt._next;
                    pt2 = first;
                    while (pt2 && pt2.pr > pt.pr) {
                        pt2 = pt2._next
                    }
                    if (pt._prev = pt2 ? pt2._prev : last) {
                        pt._prev._next = pt
                    } else {
                        first = pt
                    }
                    if (pt._next = pt2) {
                        pt2._prev = pt
                    } else {
                        last = pt
                    }
                    pt = next
                }
                this._firstPT = first
            }
            return true
        }
        ;
        p.parse = function(target, vars, pt, plugin) {
            var style = target.style, p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
            for (p in vars) {
                es = vars[p];
                if (typeof es === "function") {
                    es = es(_index, _target)
                }
                sp = _specialProps[p];
                if (sp) {
                    pt = sp.parse(target, es, p, this, pt, plugin, vars)
                } else {
                    bs = _getStyle(target, p, _cs) + "";
                    isStr = typeof es === "string";
                    if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || isStr && _rgbhslExp.test(es)) {
                        if (!isStr) {
                            es = _parseColor(es);
                            es = (es.length > 3 ? "rgba(" : "rgb(") + es.join(",") + ")"
                        }
                        pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin)
                    } else if (isStr && _complexExp.test(es)) {
                        pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin)
                    } else {
                        bn = parseFloat(bs);
                        bsfx = bn || bn === 0 ? bs.substr((bn + "").length) : "";
                        if (bs === "" || bs === "auto") {
                            if (p === "width" || p === "height") {
                                bn = _getDimension(target, p, _cs);
                                bsfx = "px"
                            } else if (p === "left" || p === "top") {
                                bn = _calculateOffset(target, p, _cs);
                                bsfx = "px"
                            } else {
                                bn = p !== "opacity" ? 0 : 1;
                                bsfx = ""
                            }
                        }
                        rel = isStr && es.charAt(1) === "=";
                        if (rel) {
                            en = parseInt(es.charAt(0) + "1", 10);
                            es = es.substr(2);
                            en *= parseFloat(es);
                            esfx = es.replace(_suffixExp, "")
                        } else {
                            en = parseFloat(es);
                            esfx = isStr ? es.replace(_suffixExp, "") : ""
                        }
                        if (esfx === "") {
                            esfx = p in _suffixMap ? _suffixMap[p] : bsfx
                        }
                        es = en || en === 0 ? (rel ? en + bn : en) + esfx : vars[p];
                        if (bsfx !== esfx)
                            if (esfx !== "")
                                if (en || en === 0)
                                    if (bn) {
                                        bn = _convertToPixels(target, p, bn, bsfx);
                                        if (esfx === "%") {
                                            bn /= _convertToPixels(target, p, 100, "%") / 100;
                                            if (vars.strictUnits !== true) {
                                                bs = bn + "%"
                                            }
                                        } else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
                                            bn /= _convertToPixels(target, p, 1, esfx)
                                        } else if (esfx !== "px") {
                                            en = _convertToPixels(target, p, en, esfx);
                                            esfx = "px"
                                        }
                                        if (rel)
                                            if (en || en === 0) {
                                                es = en + bn + esfx
                                            }
                                    }
                        if (rel) {
                            en += bn
                        }
                        if ((bn || bn === 0) && (en || en === 0)) {
                            pt = new CSSPropTween(style,p,bn,en - bn,pt,0,p,_autoRound !== false && (esfx === "px" || p === "zIndex"),0,bs,es);
                            pt.xs0 = esfx
                        } else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
                            _log("invalid " + p + " tween value: " + vars[p])
                        } else {
                            pt = new CSSPropTween(style,p,en || bn || 0,0,pt,-1,p,false,0,bs,es);
                            pt.xs0 = es === "none" && (p === "display" || p.indexOf("Style") !== -1) ? bs : es
                        }
                    }
                }
                if (plugin)
                    if (pt && !pt.plugin) {
                        pt.plugin = plugin
                    }
            }
            return pt
        }
        ;
        p.setRatio = function(v) {
            var pt = this._firstPT, min = 1e-6, val, str, i;
            if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
                while (pt) {
                    if (pt.type !== 2) {
                        if (pt.r && pt.type !== -1) {
                            val = Math.round(pt.s + pt.c);
                            if (!pt.type) {
                                pt.t[pt.p] = val + pt.xs0
                            } else if (pt.type === 1) {
                                i = pt.l;
                                str = pt.xs0 + val + pt.xs1;
                                for (i = 1; i < pt.l; i++) {
                                    str += pt["xn" + i] + pt["xs" + (i + 1)]
                                }
                                pt.t[pt.p] = str
                            }
                        } else {
                            pt.t[pt.p] = pt.e
                        }
                    } else {
                        pt.setRatio(v)
                    }
                    pt = pt._next
                }
            } else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -1e-6) {
                while (pt) {
                    val = pt.c * v + pt.s;
                    if (pt.r) {
                        val = Math.round(val)
                    } else if (val < min)
                        if (val > -min) {
                            val = 0
                        }
                    if (!pt.type) {
                        pt.t[pt.p] = val + pt.xs0
                    } else if (pt.type === 1) {
                        i = pt.l;
                        if (i === 2) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2
                        } else if (i === 3) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3
                        } else if (i === 4) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4
                        } else if (i === 5) {
                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5
                        } else {
                            str = pt.xs0 + val + pt.xs1;
                            for (i = 1; i < pt.l; i++) {
                                str += pt["xn" + i] + pt["xs" + (i + 1)]
                            }
                            pt.t[pt.p] = str
                        }
                    } else if (pt.type === -1) {
                        pt.t[pt.p] = pt.xs0
                    } else if (pt.setRatio) {
                        pt.setRatio(v)
                    }
                    pt = pt._next
                }
            } else {
                while (pt) {
                    if (pt.type !== 2) {
                        pt.t[pt.p] = pt.b
                    } else {
                        pt.setRatio(v)
                    }
                    pt = pt._next
                }
            }
        }
        ;
        p._enableTransforms = function(threeD) {
            this._transform = this._transform || _getTransform(this._target, _cs, true);
            this._transformType = !(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3) ? 3 : 2
        }
        ;
        var lazySet = function(v) {
            this.t[this.p] = this.e;
            this.data._linkCSSP(this, this._next, null, true)
        };
        p._addLazySet = function(t, p, v) {
            var pt = this._firstPT = new CSSPropTween(t,p,0,0,this._firstPT,2);
            pt.e = v;
            pt.setRatio = lazySet;
            pt.data = this
        }
        ;
        p._linkCSSP = function(pt, next, prev, remove) {
            if (pt) {
                if (next) {
                    next._prev = pt
                }
                if (pt._next) {
                    pt._next._prev = pt._prev
                }
                if (pt._prev) {
                    pt._prev._next = pt._next
                } else if (this._firstPT === pt) {
                    this._firstPT = pt._next;
                    remove = true
                }
                if (prev) {
                    prev._next = pt
                } else if (!remove && this._firstPT === null) {
                    this._firstPT = pt
                }
                pt._next = next;
                pt._prev = prev
            }
            return pt
        }
        ;
        p._mod = function(lookup) {
            var pt = this._firstPT;
            while (pt) {
                if (typeof lookup[pt.p] === "function" && lookup[pt.p] === Math.round) {
                    pt.r = 1
                }
                pt = pt._next
            }
        }
        ;
        p._kill = function(lookup) {
            var copy = lookup, pt, p, xfirst;
            if (lookup.autoAlpha || lookup.alpha) {
                copy = {};
                for (p in lookup) {
                    copy[p] = lookup[p]
                }
                copy.opacity = 1;
                if (copy.autoAlpha) {
                    copy.visibility = 1
                }
            }
            if (lookup.className && (pt = this._classNamePT)) {
                xfirst = pt.xfirst;
                if (xfirst && xfirst._prev) {
                    this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev)
                } else if (xfirst === this._firstPT) {
                    this._firstPT = pt._next
                }
                if (pt._next) {
                    this._linkCSSP(pt._next, pt._next._next, xfirst._prev)
                }
                this._classNamePT = null
            }
            pt = this._firstPT;
            while (pt) {
                if (pt.plugin && pt.plugin !== p && pt.plugin._kill) {
                    pt.plugin._kill(lookup);
                    p = pt.plugin
                }
                pt = pt._next
            }
            return TweenPlugin.prototype._kill.call(this, copy)
        }
        ;
        var _getChildStyles = function(e, props, targets) {
            var children, i, child, type;
            if (e.slice) {
                i = e.length;
                while (--i > -1) {
                    _getChildStyles(e[i], props, targets)
                }
                return
            }
            children = e.childNodes;
            i = children.length;
            while (--i > -1) {
                child = children[i];
                type = child.type;
                if (child.style) {
                    props.push(_getAllStyles(child));
                    if (targets) {
                        targets.push(child)
                    }
                }
                if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
                    _getChildStyles(child, props, targets)
                }
            }
        };
        CSSPlugin.cascadeTo = function(target, duration, vars) {
            var tween = TweenLite.to(target, duration, vars), results = [tween], b = [], e = [], targets = [], _reservedProps = TweenLite._internals.reservedProps, i, difs, p, from;
            target = tween._targets || tween.target;
            _getChildStyles(target, b, targets);
            tween.render(duration, true, true);
            _getChildStyles(target, e);
            tween.render(0, true, true);
            tween._enabled(true);
            i = targets.length;
            while (--i > -1) {
                difs = _cssDif(targets[i], b[i], e[i]);
                if (difs.firstMPT) {
                    difs = difs.difs;
                    for (p in vars) {
                        if (_reservedProps[p]) {
                            difs[p] = vars[p]
                        }
                    }
                    from = {};
                    for (p in difs) {
                        from[p] = b[i][p]
                    }
                    results.push(TweenLite.fromTo(targets[i], duration, from, difs))
                }
            }
            return results
        }
        ;
        TweenPlugin.activate([CSSPlugin]);
        return CSSPlugin
    }, true);
    (function() {
        var RoundPropsPlugin = _gsScope._gsDefine.plugin({
            propName: "roundProps",
            version: "1.6.0",
            priority: -1,
            API: 2,
            init: function(target, value, tween) {
                this._tween = tween;
                return true
            }
        })
          , _roundLinkedList = function(node) {
            while (node) {
                if (!node.f && !node.blob) {
                    node.m = Math.round
                }
                node = node._next
            }
        }
          , p = RoundPropsPlugin.prototype;
        p._onInitAllProps = function() {
            var tween = this._tween, rp = tween.vars.roundProps.join ? tween.vars.roundProps : tween.vars.roundProps.split(","), i = rp.length, lookup = {}, rpt = tween._propLookup.roundProps, prop, pt, next;
            while (--i > -1) {
                lookup[rp[i]] = Math.round
            }
            i = rp.length;
            while (--i > -1) {
                prop = rp[i];
                pt = tween._firstPT;
                while (pt) {
                    next = pt._next;
                    if (pt.pg) {
                        pt.t._mod(lookup)
                    } else if (pt.n === prop) {
                        if (pt.f === 2 && pt.t) {
                            _roundLinkedList(pt.t._firstPT)
                        } else {
                            this._add(pt.t, prop, pt.s, pt.c);
                            if (next) {
                                next._prev = pt._prev
                            }
                            if (pt._prev) {
                                pt._prev._next = next
                            } else if (tween._firstPT === pt) {
                                tween._firstPT = next
                            }
                            pt._next = pt._prev = null;
                            tween._propLookup[prop] = rpt
                        }
                    }
                    pt = next
                }
            }
            return false
        }
        ;
        p._add = function(target, p, s, c) {
            this._addTween(target, p, s, s + c, p, Math.round);
            this._overwriteProps.push(p)
        }
    }
    )();
    (function() {
        _gsScope._gsDefine.plugin({
            propName: "attr",
            API: 2,
            version: "0.6.0",
            init: function(target, value, tween, index) {
                var p, end;
                if (typeof target.setAttribute !== "function") {
                    return false
                }
                for (p in value) {
                    end = value[p];
                    if (typeof end === "function") {
                        end = end(index, target)
                    }
                    this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
                    this._overwriteProps.push(p)
                }
                return true
            }
        })
    }
    )();
    _gsScope._gsDefine.plugin({
        propName: "directionalRotation",
        version: "0.3.0",
        API: 2,
        init: function(target, value, tween, index) {
            if (typeof value !== "object") {
                value = {
                    rotation: value
                }
            }
            this.finals = {};
            var cap = value.useRadians === true ? Math.PI * 2 : 360, min = 1e-6, p, v, start, end, dif, split;
            for (p in value) {
                if (p !== "useRadians") {
                    end = value[p];
                    if (typeof end === "function") {
                        end = end(index, target)
                    }
                    split = (end + "").split("_");
                    v = split[0];
                    start = parseFloat(typeof target[p] !== "function" ? target[p] : target[p.indexOf("set") || typeof target["get" + p.substr(3)] !== "function" ? p : "get" + p.substr(3)]());
                    end = this.finals[p] = typeof v === "string" && v.charAt(1) === "=" ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
                    dif = end - start;
                    if (split.length) {
                        v = split.join("_");
                        if (v.indexOf("short") !== -1) {
                            dif = dif % cap;
                            if (dif !== dif % (cap / 2)) {
                                dif = dif < 0 ? dif + cap : dif - cap
                            }
                        }
                        if (v.indexOf("_cw") !== -1 && dif < 0) {
                            dif = (dif + cap * 9999999999) % cap - (dif / cap | 0) * cap
                        } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                            dif = (dif - cap * 9999999999) % cap - (dif / cap | 0) * cap
                        }
                    }
                    if (dif > min || dif < -min) {
                        this._addTween(target, p, start, start + dif, p);
                        this._overwriteProps.push(p)
                    }
                }
            }
            return true
        },
        set: function(ratio) {
            var pt;
            if (ratio !== 1) {
                this._super.setRatio.call(this, ratio)
            } else {
                pt = this._firstPT;
                while (pt) {
                    if (pt.f) {
                        pt.t[pt.p](this.finals[pt.p])
                    } else {
                        pt.t[pt.p] = this.finals[pt.p]
                    }
                    pt = pt._next
                }
            }
        }
    })._autoCSS = true;
    _gsScope._gsDefine("easing.Back", ["easing.Ease"], function(Ease) {
        var w = _gsScope.GreenSockGlobals || _gsScope, gs = w.com.greensock, _2PI = Math.PI * 2, _HALF_PI = Math.PI / 2, _class = gs._class, _create = function(n, f) {
            var C = _class("easing." + n, function() {}, true)
              , p = C.prototype = new Ease;
            p.constructor = C;
            p.getRatio = f;
            return C
        }, _easeReg = Ease.register || function() {}
        , _wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
            var C = _class("easing." + name, {
                easeOut: new EaseOut,
                easeIn: new EaseIn,
                easeInOut: new EaseInOut
            }, true);
            _easeReg(C, name);
            return C
        }, EasePoint = function(time, value, next) {
            this.t = time;
            this.v = value;
            if (next) {
                this.next = next;
                next.prev = this;
                this.c = next.v - value;
                this.gap = next.t - time
            }
        }, _createBack = function(n, f) {
            var C = _class("easing." + n, function(overshoot) {
                this._p1 = overshoot || overshoot === 0 ? overshoot : 1.70158;
                this._p2 = this._p1 * 1.525
            }, true)
              , p = C.prototype = new Ease;
            p.constructor = C;
            p.getRatio = f;
            p.config = function(overshoot) {
                return new C(overshoot)
            }
            ;
            return C
        }, Back = _wrap("Back", _createBack("BackOut", function(p) {
            return (p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1
        }), _createBack("BackIn", function(p) {
            return p * p * ((this._p1 + 1) * p - this._p1)
        }), _createBack("BackInOut", function(p) {
            return (p *= 2) < 1 ? .5 * p * p * ((this._p2 + 1) * p - this._p2) : .5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2)
        })), SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
            power = power || power === 0 ? power : .7;
            if (linearRatio == null) {
                linearRatio = .7
            } else if (linearRatio > 1) {
                linearRatio = 1
            }
            this._p = linearRatio !== 1 ? power : 0;
            this._p1 = (1 - linearRatio) / 2;
            this._p2 = linearRatio;
            this._p3 = this._p1 + this._p2;
            this._calcEnd = yoyoMode === true
        }, true), p = SlowMo.prototype = new Ease, SteppedEase, RoughEase, _createElastic;
        p.constructor = SlowMo;
        p.getRatio = function(p) {
            var r = p + (.5 - p) * this._p;
            if (p < this._p1) {
                return this._calcEnd ? 1 - (p = 1 - p / this._p1) * p : r - (p = 1 - p / this._p1) * p * p * p * r
            } else if (p > this._p3) {
                return this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p
            }
            return this._calcEnd ? 1 : r
        }
        ;
        SlowMo.ease = new SlowMo(.7,.7);
        p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
            return new SlowMo(linearRatio,power,yoyoMode)
        }
        ;
        SteppedEase = _class("easing.SteppedEase", function(steps) {
            steps = steps || 1;
            this._p1 = 1 / steps;
            this._p2 = steps + 1
        }, true);
        p = SteppedEase.prototype = new Ease;
        p.constructor = SteppedEase;
        p.getRatio = function(p) {
            if (p < 0) {
                p = 0
            } else if (p >= 1) {
                p = .999999999
            }
            return (this._p2 * p >> 0) * this._p1
        }
        ;
        p.config = SteppedEase.config = function(steps) {
            return new SteppedEase(steps)
        }
        ;
        RoughEase = _class("easing.RoughEase", function(vars) {
            vars = vars || {};
            var taper = vars.taper || "none", a = [], cnt = 0, points = (vars.points || 20) | 0, i = points, randomize = vars.randomize !== false, clamp = vars.clamp === true, template = vars.template instanceof Ease ? vars.template : null, strength = typeof vars.strength === "number" ? vars.strength * .4 : .4, x, y, bump, invX, obj, pnt;
            while (--i > -1) {
                x = randomize ? Math.random() : 1 / points * i;
                y = template ? template.getRatio(x) : x;
                if (taper === "none") {
                    bump = strength
                } else if (taper === "out") {
                    invX = 1 - x;
                    bump = invX * invX * strength
                } else if (taper === "in") {
                    bump = x * x * strength
                } else if (x < .5) {
                    invX = x * 2;
                    bump = invX * invX * .5 * strength
                } else {
                    invX = (1 - x) * 2;
                    bump = invX * invX * .5 * strength
                }
                if (randomize) {
                    y += Math.random() * bump - bump * .5
                } else if (i % 2) {
                    y += bump * .5
                } else {
                    y -= bump * .5
                }
                if (clamp) {
                    if (y > 1) {
                        y = 1
                    } else if (y < 0) {
                        y = 0
                    }
                }
                a[cnt++] = {
                    x: x,
                    y: y
                }
            }
            a.sort(function(a, b) {
                return a.x - b.x
            });
            pnt = new EasePoint(1,1,null);
            i = points;
            while (--i > -1) {
                obj = a[i];
                pnt = new EasePoint(obj.x,obj.y,pnt)
            }
            this._prev = new EasePoint(0,0,pnt.t !== 0 ? pnt : pnt.next)
        }, true);
        p = RoughEase.prototype = new Ease;
        p.constructor = RoughEase;
        p.getRatio = function(p) {
            var pnt = this._prev;
            if (p > pnt.t) {
                while (pnt.next && p >= pnt.t) {
                    pnt = pnt.next
                }
                pnt = pnt.prev
            } else {
                while (pnt.prev && p <= pnt.t) {
                    pnt = pnt.prev
                }
            }
            this._prev = pnt;
            return pnt.v + (p - pnt.t) / pnt.gap * pnt.c
        }
        ;
        p.config = function(vars) {
            return new RoughEase(vars)
        }
        ;
        RoughEase.ease = new RoughEase;
        _wrap("Bounce", _create("BounceOut", function(p) {
            if (p < 1 / 2.75) {
                return 7.5625 * p * p
            } else if (p < 2 / 2.75) {
                return 7.5625 * (p -= 1.5 / 2.75) * p + .75
            } else if (p < 2.5 / 2.75) {
                return 7.5625 * (p -= 2.25 / 2.75) * p + .9375
            }
            return 7.5625 * (p -= 2.625 / 2.75) * p + .984375
        }), _create("BounceIn", function(p) {
            if ((p = 1 - p) < 1 / 2.75) {
                return 1 - 7.5625 * p * p
            } else if (p < 2 / 2.75) {
                return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + .75)
            } else if (p < 2.5 / 2.75) {
                return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + .9375)
            }
            return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + .984375)
        }), _create("BounceInOut", function(p) {
            var invert = p < .5;
            if (invert) {
                p = 1 - p * 2
            } else {
                p = p * 2 - 1
            }
            if (p < 1 / 2.75) {
                p = 7.5625 * p * p
            } else if (p < 2 / 2.75) {
                p = 7.5625 * (p -= 1.5 / 2.75) * p + .75
            } else if (p < 2.5 / 2.75) {
                p = 7.5625 * (p -= 2.25 / 2.75) * p + .9375
            } else {
                p = 7.5625 * (p -= 2.625 / 2.75) * p + .984375
            }
            return invert ? (1 - p) * .5 : p * .5 + .5
        }));
        _wrap("Circ", _create("CircOut", function(p) {
            return Math.sqrt(1 - (p = p - 1) * p)
        }), _create("CircIn", function(p) {
            return -(Math.sqrt(1 - p * p) - 1)
        }), _create("CircInOut", function(p) {
            return (p *= 2) < 1 ? -.5 * (Math.sqrt(1 - p * p) - 1) : .5 * (Math.sqrt(1 - (p -= 2) * p) + 1)
        }));
        _createElastic = function(n, f, def) {
            var C = _class("easing." + n, function(amplitude, period) {
                this._p1 = amplitude >= 1 ? amplitude : 1;
                this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
                this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
                this._p2 = _2PI / this._p2
            }, true)
              , p = C.prototype = new Ease;
            p.constructor = C;
            p.getRatio = f;
            p.config = function(amplitude, period) {
                return new C(amplitude,period)
            }
            ;
            return C
        }
        ;
        _wrap("Elastic", _createElastic("ElasticOut", function(p) {
            return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1
        }, .3), _createElastic("ElasticIn", function(p) {
            return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2))
        }, .3), _createElastic("ElasticInOut", function(p) {
            return (p *= 2) < 1 ? -.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 * (p -= 1)) * Math.sin((p - this._p3) * this._p2) * .5 + 1
        }, .45));
        _wrap("Expo", _create("ExpoOut", function(p) {
            return 1 - Math.pow(2, -10 * p)
        }), _create("ExpoIn", function(p) {
            return Math.pow(2, 10 * (p - 1)) - .001
        }), _create("ExpoInOut", function(p) {
            return (p *= 2) < 1 ? .5 * Math.pow(2, 10 * (p - 1)) : .5 * (2 - Math.pow(2, -10 * (p - 1)))
        }));
        _wrap("Sine", _create("SineOut", function(p) {
            return Math.sin(p * _HALF_PI)
        }), _create("SineIn", function(p) {
            return -Math.cos(p * _HALF_PI) + 1
        }), _create("SineInOut", function(p) {
            return -.5 * (Math.cos(Math.PI * p) - 1)
        }));
        _class("easing.EaseLookup", {
            find: function(s) {
                return Ease.map[s]
            }
        }, true);
        _easeReg(w.SlowMo, "SlowMo", "ease,");
        _easeReg(RoughEase, "RoughEase", "ease,");
        _easeReg(SteppedEase, "SteppedEase", "ease,");
        return Back
    }, true)
});
if (_gsScope._gsDefine) {
    _gsScope._gsQueue.pop()()
}
(function(window, moduleName) {
    "use strict";
    var _exports = {}
      , _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
    if (_globals.TweenLite) {
        return
    }
    var _namespace = function(ns) {
        var a = ns.split("."), p = _globals, i;
        for (i = 0; i < a.length; i++) {
            p[a[i]] = p = p[a[i]] || {}
        }
        return p
    }, gs = _namespace("com.greensock"), _tinyNum = 1e-10, _slice = function(a) {
        var b = [], l = a.length, i;
        for (i = 0; i !== l; b.push(a[i++])) {}
        return b
    }, _emptyFunc = function() {}, _isArray = function() {
        var toString = Object.prototype.toString
          , array = toString.call([]);
        return function(obj) {
            return obj != null && (obj instanceof Array || typeof obj === "object" && !!obj.push && toString.call(obj) === array)
        }
    }(), a, i, p, _ticker, _tickerActive, _defLookup = {}, Definition = function(ns, dependencies, func, global) {
        this.sc = _defLookup[ns] ? _defLookup[ns].sc : [];
        _defLookup[ns] = this;
        this.gsClass = null;
        this.func = func;
        var _classes = [];
        this.check = function(init) {
            var i = dependencies.length, missing = i, cur, a, n, cl, hasModule;
            while (--i > -1) {
                if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i],[])).gsClass) {
                    _classes[i] = cur.gsClass;
                    missing--
                } else if (init) {
                    cur.sc.push(this)
                }
            }
            if (missing === 0 && func) {
                a = ("com.greensock." + ns).split(".");
                n = a.pop();
                cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);
                if (global) {
                    _globals[n] = _exports[n] = cl;
                    hasModule = typeof module !== "undefined" && module.exports;
                    if (!hasModule && typeof define === "function" && define.amd) {
                        define((window.GreenSockAMDPath ? window.GreenSockAMDPath + "/" : "") + ns.split(".").pop(), [], function() {
                            return cl
                        })
                    } else if (hasModule) {
                        if (ns === moduleName) {
                            module.exports = _exports[moduleName] = cl;
                            for (i in _exports) {
                                cl[i] = _exports[i]
                            }
                        } else if (_exports[moduleName]) {
                            _exports[moduleName][n] = cl
                        }
                    }
                }
                for (i = 0; i < this.sc.length; i++) {
                    this.sc[i].check()
                }
            }
        }
        ;
        this.check(true)
    }, _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
        return new Definition(ns,dependencies,func,global)
    }
    , _class = gs._class = function(ns, func, global) {
        func = func || function() {}
        ;
        _gsDefine(ns, [], function() {
            return func
        }, global);
        return func
    }
    ;
    _gsDefine.globals = _globals;
    var _baseParams = [0, 0, 1, 1]
      , _blankArray = []
      , Ease = _class("easing.Ease", function(func, extraParams, type, power) {
        this._func = func;
        this._type = type || 0;
        this._power = power || 0;
        this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams
    }, true)
      , _easeMap = Ease.map = {}
      , _easeReg = Ease.register = function(ease, names, types, create) {
        var na = names.split(","), i = na.length, ta = (types || "easeIn,easeOut,easeInOut").split(","), e, name, j, type;
        while (--i > -1) {
            name = na[i];
            e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
            j = ta.length;
            while (--j > -1) {
                type = ta[j];
                _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease
            }
        }
    }
    ;
    p = Ease.prototype;
    p._calcEnd = false;
    p.getRatio = function(p) {
        if (this._func) {
            this._params[0] = p;
            return this._func.apply(null, this._params)
        }
        var t = this._type
          , pw = this._power
          , r = t === 1 ? 1 - p : t === 2 ? p : p < .5 ? p * 2 : (1 - p) * 2;
        if (pw === 1) {
            r *= r
        } else if (pw === 2) {
            r *= r * r
        } else if (pw === 3) {
            r *= r * r * r
        } else if (pw === 4) {
            r *= r * r * r * r
        }
        return t === 1 ? 1 - r : t === 2 ? r : p < .5 ? r / 2 : 1 - r / 2
    }
    ;
    a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
    i = a.length;
    while (--i > -1) {
        p = a[i] + ",Power" + i;
        _easeReg(new Ease(null,null,1,i), p, "easeOut", true);
        _easeReg(new Ease(null,null,2,i), p, "easeIn" + (i === 0 ? ",easeNone" : ""));
        _easeReg(new Ease(null,null,3,i), p, "easeInOut")
    }
    _easeMap.linear = gs.easing.Linear.easeIn;
    _easeMap.swing = gs.easing.Quad.easeInOut;
    var EventDispatcher = _class("events.EventDispatcher", function(target) {
        this._listeners = {};
        this._eventTarget = target || this
    });
    p = EventDispatcher.prototype;
    p.addEventListener = function(type, callback, scope, useParam, priority) {
        priority = priority || 0;
        var list = this._listeners[type], index = 0, listener, i;
        if (this === _ticker && !_tickerActive) {
            _ticker.wake()
        }
        if (list == null) {
            this._listeners[type] = list = []
        }
        i = list.length;
        while (--i > -1) {
            listener = list[i];
            if (listener.c === callback && listener.s === scope) {
                list.splice(i, 1)
            } else if (index === 0 && listener.pr < priority) {
                index = i + 1
            }
        }
        list.splice(index, 0, {
            c: callback,
            s: scope,
            up: useParam,
            pr: priority
        })
    }
    ;
    p.removeEventListener = function(type, callback) {
        var list = this._listeners[type], i;
        if (list) {
            i = list.length;
            while (--i > -1) {
                if (list[i].c === callback) {
                    list.splice(i, 1);
                    return
                }
            }
        }
    }
    ;
    p.dispatchEvent = function(type) {
        var list = this._listeners[type], i, t, listener;
        if (list) {
            i = list.length;
            if (i > 1) {
                list = list.slice(0)
            }
            t = this._eventTarget;
            while (--i > -1) {
                listener = list[i];
                if (listener) {
                    if (listener.up) {
                        listener.c.call(listener.s || t, {
                            type: type,
                            target: t
                        })
                    } else {
                        listener.c.call(listener.s || t)
                    }
                }
            }
        }
    }
    ;
    var _reqAnimFrame = window.requestAnimationFrame
      , _cancelAnimFrame = window.cancelAnimationFrame
      , _getTime = Date.now || function() {
        return (new Date).getTime()
    }
      , _lastUpdate = _getTime();
    a = ["ms", "moz", "webkit", "o"];
    i = a.length;
    while (--i > -1 && !_reqAnimFrame) {
        _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
        _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"]
    }
    _class("Ticker", function(fps, useRAF) {
        var _self = this, _startTime = _getTime(), _useRAF = useRAF !== false && _reqAnimFrame ? "auto" : false, _lagThreshold = 500, _adjustedLag = 33, _tickWord = "tick", _fps, _req, _id, _gap, _nextTime, _tick = function(manual) {
            var elapsed = _getTime() - _lastUpdate, overlap, dispatch;
            if (elapsed > _lagThreshold) {
                _startTime += elapsed - _adjustedLag
            }
            _lastUpdate += elapsed;
            _self.time = (_lastUpdate - _startTime) / 1e3;
            overlap = _self.time - _nextTime;
            if (!_fps || overlap > 0 || manual === true) {
                _self.frame++;
                _nextTime += overlap + (overlap >= _gap ? .004 : _gap - overlap);
                dispatch = true
            }
            if (manual !== true) {
                _id = _req(_tick)
            }
            if (dispatch) {
                _self.dispatchEvent(_tickWord)
            }
        };
        EventDispatcher.call(_self);
        _self.time = _self.frame = 0;
        _self.tick = function() {
            _tick(true)
        }
        ;
        _self.lagSmoothing = function(threshold, adjustedLag) {
            _lagThreshold = threshold || 1 / _tinyNum;
            _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0)
        }
        ;
        _self.sleep = function() {
            if (_id == null) {
                return
            }
            if (!_useRAF || !_cancelAnimFrame) {
                clearTimeout(_id)
            } else {
                _cancelAnimFrame(_id)
            }
            _req = _emptyFunc;
            _id = null;
            if (_self === _ticker) {
                _tickerActive = false
            }
        }
        ;
        _self.wake = function(seamless) {
            if (_id !== null) {
                _self.sleep()
            } else if (seamless) {
                _startTime += -_lastUpdate + (_lastUpdate = _getTime())
            } else if (_self.frame > 10) {
                _lastUpdate = _getTime() - _lagThreshold + 5
            }
            _req = _fps === 0 ? _emptyFunc : !_useRAF || !_reqAnimFrame ? function(f) {
                return setTimeout(f, (_nextTime - _self.time) * 1e3 + 1 | 0)
            }
            : _reqAnimFrame;
            if (_self === _ticker) {
                _tickerActive = true
            }
            _tick(2)
        }
        ;
        _self.fps = function(value) {
            if (!arguments.length) {
                return _fps
            }
            _fps = value;
            _gap = 1 / (_fps || 60);
            _nextTime = this.time + _gap;
            _self.wake()
        }
        ;
        _self.useRAF = function(value) {
            if (!arguments.length) {
                return _useRAF
            }
            _self.sleep();
            _useRAF = value;
            _self.fps(_fps)
        }
        ;
        _self.fps(fps);
        setTimeout(function() {
            if (_useRAF === "auto" && _self.frame < 5 && document.visibilityState !== "hidden") {
                _self.useRAF(false)
            }
        }, 1500)
    });
    p = gs.Ticker.prototype = new gs.events.EventDispatcher;
    p.constructor = gs.Ticker;
    var Animation = _class("core.Animation", function(duration, vars) {
        this.vars = vars = vars || {};
        this._duration = this._totalDuration = duration || 0;
        this._delay = Number(vars.delay) || 0;
        this._timeScale = 1;
        this._active = vars.immediateRender === true;
        this.data = vars.data;
        this._reversed = vars.reversed === true;
        if (!_rootTimeline) {
            return
        }
        if (!_tickerActive) {
            _ticker.wake()
        }
        var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
        tl.add(this, tl._time);
        if (this.vars.paused) {
            this.paused(true)
        }
    });
    _ticker = Animation.ticker = new gs.Ticker;
    p = Animation.prototype;
    p._dirty = p._gc = p._initted = p._paused = false;
    p._totalTime = p._time = 0;
    p._rawPrevTime = -1;
    p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
    p._paused = false;
    var _checkTimeout = function() {
        if (_tickerActive && _getTime() - _lastUpdate > 2e3) {
            _ticker.wake()
        }
        setTimeout(_checkTimeout, 2e3)
    };
    _checkTimeout();
    p.play = function(from, suppressEvents) {
        if (from != null) {
            this.seek(from, suppressEvents)
        }
        return this.reversed(false).paused(false)
    }
    ;
    p.pause = function(atTime, suppressEvents) {
        if (atTime != null) {
            this.seek(atTime, suppressEvents)
        }
        return this.paused(true)
    }
    ;
    p.resume = function(from, suppressEvents) {
        if (from != null) {
            this.seek(from, suppressEvents)
        }
        return this.paused(false)
    }
    ;
    p.seek = function(time, suppressEvents) {
        return this.totalTime(Number(time), suppressEvents !== false)
    }
    ;
    p.restart = function(includeDelay, suppressEvents) {
        return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, suppressEvents !== false, true)
    }
    ;
    p.reverse = function(from, suppressEvents) {
        if (from != null) {
            this.seek(from || this.totalDuration(), suppressEvents)
        }
        return this.reversed(true).paused(false)
    }
    ;
    p.render = function(time, suppressEvents, force) {}
    ;
    p.invalidate = function() {
        this._time = this._totalTime = 0;
        this._initted = this._gc = false;
        this._rawPrevTime = -1;
        if (this._gc || !this.timeline) {
            this._enabled(true)
        }
        return this
    }
    ;
    p.isActive = function() {
        var tl = this._timeline, startTime = this._startTime, rawTime;
        return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime()) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale
    }
    ;
    p._enabled = function(enabled, ignoreTimeline) {
        if (!_tickerActive) {
            _ticker.wake()
        }
        this._gc = !enabled;
        this._active = this.isActive();
        if (ignoreTimeline !== true) {
            if (enabled && !this.timeline) {
                this._timeline.add(this, this._startTime - this._delay)
            } else if (!enabled && this.timeline) {
                this._timeline._remove(this, true)
            }
        }
        return false
    }
    ;
    p._kill = function(vars, target) {
        return this._enabled(false, false)
    }
    ;
    p.kill = function(vars, target) {
        this._kill(vars, target);
        return this
    }
    ;
    p._uncache = function(includeSelf) {
        var tween = includeSelf ? this : this.timeline;
        while (tween) {
            tween._dirty = true;
            tween = tween.timeline
        }
        return this
    }
    ;
    p._swapSelfInParams = function(params) {
        var i = params.length
          , copy = params.concat();
        while (--i > -1) {
            if (params[i] === "{self}") {
                copy[i] = this
            }
        }
        return copy
    }
    ;
    p._callback = function(type) {
        var v = this.vars
          , callback = v[type]
          , params = v[type + "Params"]
          , scope = v[type + "Scope"] || v.callbackScope || this
          , l = params ? params.length : 0;
        switch (l) {
        case 0:
            callback.call(scope);
            break;
        case 1:
            callback.call(scope, params[0]);
            break;
        case 2:
            callback.call(scope, params[0], params[1]);
            break;
        default:
            callback.apply(scope, params)
        }
    }
    ;
    p.eventCallback = function(type, callback, params, scope) {
        if ((type || "").substr(0, 2) === "on") {
            var v = this.vars;
            if (arguments.length === 1) {
                return v[type]
            }
            if (callback == null) {
                delete v[type]
            } else {
                v[type] = callback;
                v[type + "Params"] = _isArray(params) && params.join("").indexOf("{self}") !== -1 ? this._swapSelfInParams(params) : params;
                v[type + "Scope"] = scope
            }
            if (type === "onUpdate") {
                this._onUpdate = callback
            }
        }
        return this
    }
    ;
    p.delay = function(value) {
        if (!arguments.length) {
            return this._delay
        }
        if (this._timeline.smoothChildTiming) {
            this.startTime(this._startTime + value - this._delay)
        }
        this._delay = value;
        return this
    }
    ;
    p.duration = function(value) {
        if (!arguments.length) {
            this._dirty = false;
            return this._duration
        }
        this._duration = this._totalDuration = value;
        this._uncache(true);
        if (this._timeline.smoothChildTiming)
            if (this._time > 0)
                if (this._time < this._duration)
                    if (value !== 0) {
                        this.totalTime(this._totalTime * (value / this._duration), true)
                    }
        return this
    }
    ;
    p.totalDuration = function(value) {
        this._dirty = false;
        return !arguments.length ? this._totalDuration : this.duration(value)
    }
    ;
    p.time = function(value, suppressEvents) {
        if (!arguments.length) {
            return this._time
        }
        if (this._dirty) {
            this.totalDuration()
        }
        return this.totalTime(value > this._duration ? this._duration : value, suppressEvents)
    }
    ;
    p.totalTime = function(time, suppressEvents, uncapped) {
        if (!_tickerActive) {
            _ticker.wake()
        }
        if (!arguments.length) {
            return this._totalTime
        }
        if (this._timeline) {
            if (time < 0 && !uncapped) {
                time += this.totalDuration()
            }
            if (this._timeline.smoothChildTiming) {
                if (this._dirty) {
                    this.totalDuration()
                }
                var totalDuration = this._totalDuration
                  , tl = this._timeline;
                if (time > totalDuration && !uncapped) {
                    time = totalDuration
                }
                this._startTime = (this._paused ? this._pauseTime : tl._time) - (!this._reversed ? time : totalDuration - time) / this._timeScale;
                if (!tl._dirty) {
                    this._uncache(false)
                }
                if (tl._timeline) {
                    while (tl._timeline) {
                        if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                            tl.totalTime(tl._totalTime, true)
                        }
                        tl = tl._timeline
                    }
                }
            }
            if (this._gc) {
                this._enabled(true, false)
            }
            if (this._totalTime !== time || this._duration === 0) {
                if (_lazyTweens.length) {
                    _lazyRender()
                }
                this.render(time, suppressEvents, false);
                if (_lazyTweens.length) {
                    _lazyRender()
                }
            }
        }
        return this
    }
    ;
    p.progress = p.totalProgress = function(value, suppressEvents) {
        var duration = this.duration();
        return !arguments.length ? duration ? this._time / duration : this.ratio : this.totalTime(duration * value, suppressEvents)
    }
    ;
    p.startTime = function(value) {
        if (!arguments.length) {
            return this._startTime
        }
        if (value !== this._startTime) {
            this._startTime = value;
            if (this.timeline)
                if (this.timeline._sortChildren) {
                    this.timeline.add(this, value - this._delay)
                }
        }
        return this
    }
    ;
    p.endTime = function(includeRepeats) {
        return this._startTime + (includeRepeats != false ? this.totalDuration() : this.duration()) / this._timeScale
    }
    ;
    p.timeScale = function(value) {
        if (!arguments.length) {
            return this._timeScale
        }
        value = value || _tinyNum;
        if (this._timeline && this._timeline.smoothChildTiming) {
            var pauseTime = this._pauseTime
              , t = pauseTime || pauseTime === 0 ? pauseTime : this._timeline.totalTime();
            this._startTime = t - (t - this._startTime) * this._timeScale / value
        }
        this._timeScale = value;
        return this._uncache(false)
    }
    ;
    p.reversed = function(value) {
        if (!arguments.length) {
            return this._reversed
        }
        if (value != this._reversed) {
            this._reversed = value;
            this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true)
        }
        return this
    }
    ;
    p.paused = function(value) {
        if (!arguments.length) {
            return this._paused
        }
        var tl = this._timeline, raw, elapsed;
        if (value != this._paused)
            if (tl) {
                if (!_tickerActive && !value) {
                    _ticker.wake()
                }
                raw = tl.rawTime();
                elapsed = raw - this._pauseTime;
                if (!value && tl.smoothChildTiming) {
                    this._startTime += elapsed;
                    this._uncache(false)
                }
                this._pauseTime = value ? raw : null;
                this._paused = value;
                this._active = this.isActive();
                if (!value && elapsed !== 0 && this._initted && this.duration()) {
                    raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
                    this.render(raw, raw === this._totalTime, true)
                }
            }
        if (this._gc && !value) {
            this._enabled(true, false)
        }
        return this
    }
    ;
    var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
        Animation.call(this, 0, vars);
        this.autoRemoveChildren = this.smoothChildTiming = true
    });
    p = SimpleTimeline.prototype = new Animation;
    p.constructor = SimpleTimeline;
    p.kill()._gc = false;
    p._first = p._last = p._recent = null;
    p._sortChildren = false;
    p.add = p.insert = function(child, position, align, stagger) {
        var prevTween, st;
        child._startTime = Number(position || 0) + child._delay;
        if (child._paused)
            if (this !== child._timeline) {
                child._pauseTime = child._startTime + (this.rawTime() - child._startTime) / child._timeScale
            }
        if (child.timeline) {
            child.timeline._remove(child, true)
        }
        child.timeline = child._timeline = this;
        if (child._gc) {
            child._enabled(true, true)
        }
        prevTween = this._last;
        if (this._sortChildren) {
            st = child._startTime;
            while (prevTween && prevTween._startTime > st) {
                prevTween = prevTween._prev
            }
        }
        if (prevTween) {
            child._next = prevTween._next;
            prevTween._next = child
        } else {
            child._next = this._first;
            this._first = child
        }
        if (child._next) {
            child._next._prev = child
        } else {
            this._last = child
        }
        child._prev = prevTween;
        this._recent = child;
        if (this._timeline) {
            this._uncache(true)
        }
        return this
    }
    ;
    p._remove = function(tween, skipDisable) {
        if (tween.timeline === this) {
            if (!skipDisable) {
                tween._enabled(false, true)
            }
            if (tween._prev) {
                tween._prev._next = tween._next
            } else if (this._first === tween) {
                this._first = tween._next
            }
            if (tween._next) {
                tween._next._prev = tween._prev
            } else if (this._last === tween) {
                this._last = tween._prev
            }
            tween._next = tween._prev = tween.timeline = null;
            if (tween === this._recent) {
                this._recent = this._last
            }
            if (this._timeline) {
                this._uncache(true)
            }
        }
        return this
    }
    ;
    p.render = function(time, suppressEvents, force) {
        var tween = this._first, next;
        this._totalTime = this._time = this._rawPrevTime = time;
        while (tween) {
            next = tween._next;
            if (tween._active || time >= tween._startTime && !tween._paused) {
                if (!tween._reversed) {
                    tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force)
                } else {
                    tween.render((!tween._dirty ? tween._totalDuration : tween.totalDuration()) - (time - tween._startTime) * tween._timeScale, suppressEvents, force)
                }
            }
            tween = next
        }
    }
    ;
    p.rawTime = function() {
        if (!_tickerActive) {
            _ticker.wake()
        }
        return this._totalTime
    }
    ;
    var TweenLite = _class("TweenLite", function(target, duration, vars) {
        Animation.call(this, duration, vars);
        this.render = TweenLite.prototype.render;
        if (target == null) {
            throw "Cannot tween a null target."
        }
        this.target = target = typeof target !== "string" ? target : TweenLite.selector(target) || target;
        var isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType), overwrite = this.vars.overwrite, i, targ, targets;
        this._overwrite = overwrite = overwrite == null ? _overwriteLookup[TweenLite.defaultOverwrite] : typeof overwrite === "number" ? overwrite >> 0 : _overwriteLookup[overwrite];
        if ((isSelector || target instanceof Array || target.push && _isArray(target)) && typeof target[0] !== "number") {
            this._targets = targets = _slice(target);
            this._propLookup = [];
            this._siblings = [];
            for (i = 0; i < targets.length; i++) {
                targ = targets[i];
                if (!targ) {
                    targets.splice(i--, 1);
                    continue
                } else if (typeof targ === "string") {
                    targ = targets[i--] = TweenLite.selector(targ);
                    if (typeof targ === "string") {
                        targets.splice(i + 1, 1)
                    }
                    continue
                } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {
                    targets.splice(i--, 1);
                    this._targets = targets = targets.concat(_slice(targ));
                    continue
                }
                this._siblings[i] = _register(targ, this, false);
                if (overwrite === 1)
                    if (this._siblings[i].length > 1) {
                        _applyOverwrite(targ, this, null, 1, this._siblings[i])
                    }
            }
        } else {
            this._propLookup = {};
            this._siblings = _register(target, this, false);
            if (overwrite === 1)
                if (this._siblings.length > 1) {
                    _applyOverwrite(target, this, null, 1, this._siblings)
                }
        }
        if (this.vars.immediateRender || duration === 0 && this._delay === 0 && this.vars.immediateRender !== false) {
            this._time = -_tinyNum;
            this.render(Math.min(0, -this._delay))
        }
    }, true)
      , _isSelector = function(v) {
        return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType)
    }
      , _autoCSS = function(vars, target) {
        var css = {}, p;
        for (p in vars) {
            if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || _plugins[p] && _plugins[p]._autoCSS)) {
                css[p] = vars[p];
                delete vars[p]
            }
        }
        vars.css = css
    };
    p = TweenLite.prototype = new Animation;
    p.constructor = TweenLite;
    p.kill()._gc = false;
    p.ratio = 0;
    p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
    p._notifyPluginsOfEnabled = p._lazy = false;
    TweenLite.version = "1.19.0";
    TweenLite.defaultEase = p._ease = new Ease(null,null,1,1);
    TweenLite.defaultOverwrite = "auto";
    TweenLite.ticker = _ticker;
    TweenLite.autoSleep = 120;
    TweenLite.lagSmoothing = function(threshold, adjustedLag) {
        _ticker.lagSmoothing(threshold, adjustedLag)
    }
    ;
    TweenLite.selector = window.$ || window.jQuery || function(e) {
        var selector = window.$ || window.jQuery;
        if (selector) {
            TweenLite.selector = selector;
            return selector(e)
        }
        return typeof document === "undefined" ? e : document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById(e.charAt(0) === "#" ? e.substr(1) : e)
    }
    ;
    var _lazyTweens = []
      , _lazyLookup = {}
      , _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi
      , _setRatio = function(v) {
        var pt = this._firstPT, min = 1e-6, val;
        while (pt) {
            val = !pt.blob ? pt.c * v + pt.s : v ? this.join("") : this.start;
            if (pt.m) {
                val = pt.m(val, this._target || pt.t)
            } else if (val < min)
                if (val > -min) {
                    val = 0
                }
            if (!pt.f) {
                pt.t[pt.p] = val
            } else if (pt.fp) {
                pt.t[pt.p](pt.fp, val)
            } else {
                pt.t[pt.p](val)
            }
            pt = pt._next
        }
    }
      , _blobDif = function(start, end, filter, pt) {
        var a = [start, end], charIndex = 0, s = "", color = 0, startNums, endNums, num, i, l, nonNumbers, currentNum;
        a.start = start;
        if (filter) {
            filter(a);
            start = a[0];
            end = a[1]
        }
        a.length = 0;
        startNums = start.match(_numbersExp) || [];
        endNums = end.match(_numbersExp) || [];
        if (pt) {
            pt._next = null;
            pt.blob = 1;
            a._firstPT = a._applyPT = pt
        }
        l = endNums.length;
        for (i = 0; i < l; i++) {
            currentNum = endNums[i];
            nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex) - charIndex);
            s += nonNumbers || !i ? nonNumbers : ",";
            charIndex += nonNumbers.length;
            if (color) {
                color = (color + 1) % 5
            } else if (nonNumbers.substr(-5) === "rgba(") {
                color = 1
            }
            if (currentNum === startNums[i] || startNums.length <= i) {
                s += currentNum
            } else {
                if (s) {
                    a.push(s);
                    s = ""
                }
                num = parseFloat(startNums[i]);
                a.push(num);
                a._firstPT = {
                    _next: a._firstPT,
                    t: a,
                    p: a.length - 1,
                    s: num,
                    c: (currentNum.charAt(1) === "=" ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : parseFloat(currentNum) - num) || 0,
                    f: 0,
                    m: color && color < 4 ? Math.round : 0
                }
            }
            charIndex += currentNum.length
        }
        s += end.substr(charIndex);
        if (s) {
            a.push(s)
        }
        a.setRatio = _setRatio;
        return a
    }
      , _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
        if (typeof end === "function") {
            end = end(index || 0, target)
        }
        var s = start === "get" ? target[prop] : start, type = typeof target[prop], isRelative = typeof end === "string" && end.charAt(1) === "=", pt = {
            t: target,
            p: prop,
            s: s,
            f: type === "function",
            pg: 0,
            n: overwriteProp || prop,
            m: !mod ? 0 : typeof mod === "function" ? mod : Math.round,
            pr: 0,
            c: isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0
        }, blob, getterName;
        if (type !== "number") {
            if (type === "function" && start === "get") {
                getterName = prop.indexOf("set") || typeof target["get" + prop.substr(3)] !== "function" ? prop : "get" + prop.substr(3);
                pt.s = s = funcParam ? target[getterName](funcParam) : target[getterName]()
            }
            if (typeof s === "string" && (funcParam || isNaN(s))) {
                pt.fp = funcParam;
                blob = _blobDif(s, end, stringFilter || TweenLite.defaultStringFilter, pt);
                pt = {
                    t: blob,
                    p: "setRatio",
                    s: 0,
                    c: 1,
                    f: 2,
                    pg: 0,
                    n: overwriteProp || prop,
                    pr: 0,
                    m: 0
                }
            } else if (!isRelative) {
                pt.s = parseFloat(s);
                pt.c = parseFloat(end) - pt.s || 0
            }
        }
        if (pt.c) {
            if (pt._next = this._firstPT) {
                pt._next._prev = pt
            }
            this._firstPT = pt;
            return pt
        }
    }
      , _internals = TweenLite._internals = {
        isArray: _isArray,
        isSelector: _isSelector,
        lazyTweens: _lazyTweens,
        blobDif: _blobDif
    }
      , _plugins = TweenLite._plugins = {}
      , _tweenLookup = _internals.tweenLookup = {}
      , _tweenLookupNum = 0
      , _reservedProps = _internals.reservedProps = {
        ease: 1,
        delay: 1,
        overwrite: 1,
        onComplete: 1,
        onCompleteParams: 1,
        onCompleteScope: 1,
        useFrames: 1,
        runBackwards: 1,
        startAt: 1,
        onUpdate: 1,
        onUpdateParams: 1,
        onUpdateScope: 1,
        onStart: 1,
        onStartParams: 1,
        onStartScope: 1,
        onReverseComplete: 1,
        onReverseCompleteParams: 1,
        onReverseCompleteScope: 1,
        onRepeat: 1,
        onRepeatParams: 1,
        onRepeatScope: 1,
        easeParams: 1,
        yoyo: 1,
        immediateRender: 1,
        repeat: 1,
        repeatDelay: 1,
        data: 1,
        paused: 1,
        reversed: 1,
        autoCSS: 1,
        lazy: 1,
        onOverwrite: 1,
        callbackScope: 1,
        stringFilter: 1,
        id: 1
    }
      , _overwriteLookup = {
        none: 0,
        all: 1,
        auto: 2,
        concurrent: 3,
        allOnStart: 4,
        preexisting: 5,
        "true": 1,
        "false": 0
    }
      , _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline
      , _rootTimeline = Animation._rootTimeline = new SimpleTimeline
      , _nextGCFrame = 30
      , _lazyRender = _internals.lazyRender = function() {
        var i = _lazyTweens.length, tween;
        _lazyLookup = {};
        while (--i > -1) {
            tween = _lazyTweens[i];
            if (tween && tween._lazy !== false) {
                tween.render(tween._lazy[0], tween._lazy[1], true);
                tween._lazy = false
            }
        }
        _lazyTweens.length = 0
    }
    ;
    _rootTimeline._startTime = _ticker.time;
    _rootFramesTimeline._startTime = _ticker.frame;
    _rootTimeline._active = _rootFramesTimeline._active = true;
    setTimeout(_lazyRender, 1);
    Animation._updateRoot = TweenLite.render = function() {
        var i, a, p;
        if (_lazyTweens.length) {
            _lazyRender()
        }
        _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
        _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
        if (_lazyTweens.length) {
            _lazyRender()
        }
        if (_ticker.frame >= _nextGCFrame) {
            _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
            for (p in _tweenLookup) {
                a = _tweenLookup[p].tweens;
                i = a.length;
                while (--i > -1) {
                    if (a[i]._gc) {
                        a.splice(i, 1)
                    }
                }
                if (a.length === 0) {
                    delete _tweenLookup[p]
                }
            }
            p = _rootTimeline._first;
            if (!p || p._paused)
                if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
                    while (p && p._paused) {
                        p = p._next
                    }
                    if (!p) {
                        _ticker.sleep()
                    }
                }
        }
    }
    ;
    _ticker.addEventListener("tick", Animation._updateRoot);
    var _register = function(target, tween, scrub) {
        var id = target._gsTweenID, a, i;
        if (!_tweenLookup[id || (target._gsTweenID = id = "t" + _tweenLookupNum++)]) {
            _tweenLookup[id] = {
                target: target,
                tweens: []
            }
        }
        if (tween) {
            a = _tweenLookup[id].tweens;
            a[i = a.length] = tween;
            if (scrub) {
                while (--i > -1) {
                    if (a[i] === tween) {
                        a.splice(i, 1)
                    }
                }
            }
        }
        return _tweenLookup[id].tweens
    }
      , _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
        var func = overwrittenTween.vars.onOverwrite, r1, r2;
        if (func) {
            r1 = func(overwrittenTween, overwritingTween, target, killedProps)
        }
        func = TweenLite.onOverwrite;
        if (func) {
            r2 = func(overwrittenTween, overwritingTween, target, killedProps)
        }
        return r1 !== false && r2 !== false
    }
      , _applyOverwrite = function(target, tween, props, mode, siblings) {
        var i, changed, curTween, l;
        if (mode === 1 || mode >= 4) {
            l = siblings.length;
            for (i = 0; i < l; i++) {
                if ((curTween = siblings[i]) !== tween) {
                    if (!curTween._gc) {
                        if (curTween._kill(null, target, tween)) {
                            changed = true
                        }
                    }
                } else if (mode === 5) {
                    break
                }
            }
            return changed
        }
        var startTime = tween._startTime + _tinyNum, overlaps = [], oCount = 0, zeroDur = tween._duration === 0, globalStart;
        i = siblings.length;
        while (--i > -1) {
            if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {} else if (curTween._timeline !== tween._timeline) {
                globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
                    overlaps[oCount++] = curTween
                }
            } else if (curTween._startTime <= startTime)
                if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime)
                    if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 2e-10)) {
                        overlaps[oCount++] = curTween
                    }
        }
        i = oCount;
        while (--i > -1) {
            curTween = overlaps[i];
            if (mode === 2)
                if (curTween._kill(props, target, tween)) {
                    changed = true
                }
            if (mode !== 2 || !curTween._firstPT && curTween._initted) {
                if (mode !== 2 && !_onOverwrite(curTween, tween)) {
                    continue
                }
                if (curTween._enabled(false, false)) {
                    changed = true
                }
            }
        }
        return changed
    }
      , _checkOverlap = function(tween, reference, zeroDur) {
        var tl = tween._timeline
          , ts = tl._timeScale
          , t = tween._startTime;
        while (tl._timeline) {
            t += tl._startTime;
            ts *= tl._timeScale;
            if (tl._paused) {
                return -100
            }
            tl = tl._timeline
        }
        t /= ts;
        return t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2 * _tinyNum ? _tinyNum : (t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum ? 0 : t - reference - _tinyNum
    };
    p._init = function() {
        var v = this.vars, op = this._overwrittenProps, dur = this._duration, immediate = !!v.immediateRender, ease = v.ease, i, initPlugins, pt, p, startVars, l;
        if (v.startAt) {
            if (this._startAt) {
                this._startAt.render(-1, true);
                this._startAt.kill()
            }
            startVars = {};
            for (p in v.startAt) {
                startVars[p] = v.startAt[p]
            }
            startVars.overwrite = false;
            startVars.immediateRender = true;
            startVars.lazy = immediate && v.lazy !== false;
            startVars.startAt = startVars.delay = null;
            this._startAt = TweenLite.to(this.target, 0, startVars);
            if (immediate) {
                if (this._time > 0) {
                    this._startAt = null
                } else if (dur !== 0) {
                    return
                }
            }
        } else if (v.runBackwards && dur !== 0) {
            if (this._startAt) {
                this._startAt.render(-1, true);
                this._startAt.kill();
                this._startAt = null
            } else {
                if (this._time !== 0) {
                    immediate = false
                }
                pt = {};
                for (p in v) {
                    if (!_reservedProps[p] || p === "autoCSS") {
                        pt[p] = v[p]
                    }
                }
                pt.overwrite = 0;
                pt.data = "isFromStart";
                pt.lazy = immediate && v.lazy !== false;
                pt.immediateRender = immediate;
                this._startAt = TweenLite.to(this.target, 0, pt);
                if (!immediate) {
                    this._startAt._init();
                    this._startAt._enabled(false);
                    if (this.vars.immediateRender) {
                        this._startAt = null
                    }
                } else if (this._time === 0) {
                    return
                }
            }
        }
        this._ease = ease = !ease ? TweenLite.defaultEase : ease instanceof Ease ? ease : typeof ease === "function" ? new Ease(ease,v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
        if (v.easeParams instanceof Array && ease.config) {
            this._ease = ease.config.apply(ease, v.easeParams)
        }
        this._easeType = this._ease._type;
        this._easePower = this._ease._power;
        this._firstPT = null;
        if (this._targets) {
            l = this._targets.length;
            for (i = 0; i < l; i++) {
                if (this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null, i)) {
                    initPlugins = true
                }
            }
        } else {
            initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0)
        }
        if (initPlugins) {
            TweenLite._onPluginEvent("_onInitAllProps", this)
        }
        if (op)
            if (!this._firstPT)
                if (typeof this.target !== "function") {
                    this._enabled(false, false)
                }
        if (v.runBackwards) {
            pt = this._firstPT;
            while (pt) {
                pt.s += pt.c;
                pt.c = -pt.c;
                pt = pt._next
            }
        }
        this._onUpdate = v.onUpdate;
        this._initted = true
    }
    ;
    p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
        var p, i, initPlugins, plugin, pt, v;
        if (target == null) {
            return false
        }
        if (_lazyLookup[target._gsTweenID]) {
            _lazyRender()
        }
        if (!this.vars.css)
            if (target.style)
                if (target !== window && target.nodeType)
                    if (_plugins.css)
                        if (this.vars.autoCSS !== false) {
                            _autoCSS(this.vars, target)
                        }
        for (p in this.vars) {
            v = this.vars[p];
            if (_reservedProps[p]) {
                if (v)
                    if (v instanceof Array || v.push && _isArray(v))
                        if (v.join("").indexOf("{self}") !== -1) {
                            this.vars[p] = v = this._swapSelfInParams(v, this)
                        }
            } else if (_plugins[p] && (plugin = new _plugins[p])._onInitTween(target, this.vars[p], this, index)) {
                this._firstPT = pt = {
                    _next: this._firstPT,
                    t: plugin,
                    p: "setRatio",
                    s: 0,
                    c: 1,
                    f: 1,
                    n: p,
                    pg: 1,
                    pr: plugin._priority,
                    m: 0
                };
                i = plugin._overwriteProps.length;
                while (--i > -1) {
                    propLookup[plugin._overwriteProps[i]] = this._firstPT
                }
                if (plugin._priority || plugin._onInitAllProps) {
                    initPlugins = true
                }
                if (plugin._onDisable || plugin._onEnable) {
                    this._notifyPluginsOfEnabled = true
                }
                if (pt._next) {
                    pt._next._prev = pt
                }
            } else {
                propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index)
            }
        }
        if (overwrittenProps)
            if (this._kill(overwrittenProps, target)) {
                return this._initProps(target, propLookup, siblings, overwrittenProps, index)
            }
        if (this._overwrite > 1)
            if (this._firstPT)
                if (siblings.length > 1)
                    if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
                        this._kill(propLookup, target);
                        return this._initProps(target, propLookup, siblings, overwrittenProps, index)
                    }
        if (this._firstPT)
            if (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration) {
                _lazyLookup[target._gsTweenID] = true
            }
        return initPlugins
    }
    ;
    p.render = function(time, suppressEvents, force) {
        var prevTime = this._time, duration = this._duration, prevRawPrevTime = this._rawPrevTime, isComplete, callback, pt, rawPrevTime;
        if (time >= duration - 1e-7) {
            this._totalTime = this._time = duration;
            this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
            if (!this._reversed) {
                isComplete = true;
                callback = "onComplete";
                force = force || this._timeline.autoRemoveChildren
            }
            if (duration === 0)
                if (this._initted || !this.vars.lazy || force) {
                    if (this._startTime === this._timeline._duration) {
                        time = 0
                    }
                    if (prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || prevRawPrevTime === _tinyNum && this.data !== "isPause")
                        if (prevRawPrevTime !== time) {
                            force = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete"
                            }
                        }
                    this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum
                }
        } else if (time < 1e-7) {
            this._totalTime = this._time = 0;
            this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
            if (prevTime !== 0 || duration === 0 && prevRawPrevTime > 0) {
                callback = "onReverseComplete";
                isComplete = this._reversed
            }
            if (time < 0) {
                this._active = false;
                if (duration === 0)
                    if (this._initted || !this.vars.lazy || force) {
                        if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
                            force = true
                        }
                        this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : _tinyNum
                    }
            }
            if (!this._initted) {
                force = true
            }
        } else {
            this._totalTime = this._time = time;
            if (this._easeType) {
                var r = time / duration
                  , type = this._easeType
                  , pow = this._easePower;
                if (type === 1 || type === 3 && r >= .5) {
                    r = 1 - r
                }
                if (type === 3) {
                    r *= 2
                }
                if (pow === 1) {
                    r *= r
                } else if (pow === 2) {
                    r *= r * r
                } else if (pow === 3) {
                    r *= r * r * r
                } else if (pow === 4) {
                    r *= r * r * r * r
                }
                if (type === 1) {
                    this.ratio = 1 - r
                } else if (type === 2) {
                    this.ratio = r
                } else if (time / duration < .5) {
                    this.ratio = r / 2
                } else {
                    this.ratio = 1 - r / 2
                }
            } else {
                this.ratio = this._ease.getRatio(time / duration)
            }
        }
        if (this._time === prevTime && !force) {
            return
        } else if (!this._initted) {
            this._init();
            if (!this._initted || this._gc) {
                return
            } else if (!force && this._firstPT && (this.vars.lazy !== false && this._duration || this.vars.lazy && !this._duration)) {
                this._time = this._totalTime = prevTime;
                this._rawPrevTime = prevRawPrevTime;
                _lazyTweens.push(this);
                this._lazy = [time, suppressEvents];
                return
            }
            if (this._time && !isComplete) {
                this.ratio = this._ease.getRatio(this._time / duration)
            } else if (isComplete && this._ease._calcEnd) {
                this.ratio = this._ease.getRatio(this._time === 0 ? 0 : 1)
            }
        }
        if (this._lazy !== false) {
            this._lazy = false
        }
        if (!this._active)
            if (!this._paused && this._time !== prevTime && time >= 0) {
                this._active = true
            }
        if (prevTime === 0) {
            if (this._startAt) {
                if (time >= 0) {
                    this._startAt.render(time, suppressEvents, force)
                } else if (!callback) {
                    callback = "_dummyGS"
                }
            }
            if (this.vars.onStart)
                if (this._time !== 0 || duration === 0)
                    if (!suppressEvents) {
                        this._callback("onStart")
                    }
        }
        pt = this._firstPT;
        while (pt) {
            if (pt.f) {
                pt.t[pt.p](pt.c * this.ratio + pt.s)
            } else {
                pt.t[pt.p] = pt.c * this.ratio + pt.s
            }
            pt = pt._next
        }
        if (this._onUpdate) {
            if (time < 0)
                if (this._startAt && time !== -1e-4) {
                    this._startAt.render(time, suppressEvents, force)
                }
            if (!suppressEvents)
                if (this._time !== prevTime || isComplete || force) {
                    this._callback("onUpdate")
                }
        }
        if (callback)
            if (!this._gc || force) {
                if (time < 0 && this._startAt && !this._onUpdate && time !== -1e-4) {
                    this._startAt.render(time, suppressEvents, force)
                }
                if (isComplete) {
                    if (this._timeline.autoRemoveChildren) {
                        this._enabled(false, false)
                    }
                    this._active = false
                }
                if (!suppressEvents && this.vars[callback]) {
                    this._callback(callback)
                }
                if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) {
                    this._rawPrevTime = 0
                }
            }
    }
    ;
    p._kill = function(vars, target, overwritingTween) {
        if (vars === "all") {
            vars = null
        }
        if (vars == null)
            if (target == null || target === this.target) {
                this._lazy = false;
                return this._enabled(false, false)
            }
        target = typeof target !== "string" ? target || this._targets || this.target : TweenLite.selector(target) || target;
        var simultaneousOverwrite = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline, i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
        if ((_isArray(target) || _isSelector(target)) && typeof target[0] !== "number") {
            i = target.length;
            while (--i > -1) {
                if (this._kill(vars, target[i], overwritingTween)) {
                    changed = true
                }
            }
        } else {
            if (this._targets) {
                i = this._targets.length;
                while (--i > -1) {
                    if (target === this._targets[i]) {
                        propLookup = this._propLookup[i] || {};
                        this._overwrittenProps = this._overwrittenProps || [];
                        overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                        break
                    }
                }
            } else if (target !== this.target) {
                return false
            } else {
                propLookup = this._propLookup;
                overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all"
            }
            if (propLookup) {
                killProps = vars || propLookup;
                record = vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof vars !== "object" || !vars._tempKill);
                if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                    for (p in killProps) {
                        if (propLookup[p]) {
                            if (!killed) {
                                killed = []
                            }
                            killed.push(p)
                        }
                    }
                    if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) {
                        return false
                    }
                }
                for (p in killProps) {
                    if (pt = propLookup[p]) {
                        if (simultaneousOverwrite) {
                            if (pt.f) {
                                pt.t[pt.p](pt.s)
                            } else {
                                pt.t[pt.p] = pt.s
                            }
                            changed = true
                        }
                        if (pt.pg && pt.t._kill(killProps)) {
                            changed = true
                        }
                        if (!pt.pg || pt.t._overwriteProps.length === 0) {
                            if (pt._prev) {
                                pt._prev._next = pt._next
                            } else if (pt === this._firstPT) {
                                this._firstPT = pt._next
                            }
                            if (pt._next) {
                                pt._next._prev = pt._prev
                            }
                            pt._next = pt._prev = null
                        }
                        delete propLookup[p]
                    }
                    if (record) {
                        overwrittenProps[p] = 1
                    }
                }
                if (!this._firstPT && this._initted) {
                    this._enabled(false, false)
                }
            }
        }
        return changed
    }
    ;
    p.invalidate = function() {
        if (this._notifyPluginsOfEnabled) {
            TweenLite._onPluginEvent("_onDisable", this)
        }
        this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
        this._notifyPluginsOfEnabled = this._active = this._lazy = false;
        this._propLookup = this._targets ? {} : [];
        Animation.prototype.invalidate.call(this);
        if (this.vars.immediateRender) {
            this._time = -_tinyNum;
            this.render(Math.min(0, -this._delay))
        }
        return this
    }
    ;
    p._enabled = function(enabled, ignoreTimeline) {
        if (!_tickerActive) {
            _ticker.wake()
        }
        if (enabled && this._gc) {
            var targets = this._targets, i;
            if (targets) {
                i = targets.length;
                while (--i > -1) {
                    this._siblings[i] = _register(targets[i], this, true)
                }
            } else {
                this._siblings = _register(this.target, this, true)
            }
        }
        Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
        if (this._notifyPluginsOfEnabled)
            if (this._firstPT) {
                return TweenLite._onPluginEvent(enabled ? "_onEnable" : "_onDisable", this)
            }
        return false
    }
    ;
    TweenLite.to = function(target, duration, vars) {
        return new TweenLite(target,duration,vars)
    }
    ;
    TweenLite.from = function(target, duration, vars) {
        vars.runBackwards = true;
        vars.immediateRender = vars.immediateRender != false;
        return new TweenLite(target,duration,vars)
    }
    ;
    TweenLite.fromTo = function(target, duration, fromVars, toVars) {
        toVars.startAt = fromVars;
        toVars.immediateRender = toVars.immediateRender != false && fromVars.immediateRender != false;
        return new TweenLite(target,duration,toVars)
    }
    ;
    TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
        return new TweenLite(callback,0,{
            delay: delay,
            onComplete: callback,
            onCompleteParams: params,
            callbackScope: scope,
            onReverseComplete: callback,
            onReverseCompleteParams: params,
            immediateRender: false,
            lazy: false,
            useFrames: useFrames,
            overwrite: 0
        })
    }
    ;
    TweenLite.set = function(target, vars) {
        return new TweenLite(target,0,vars)
    }
    ;
    TweenLite.getTweensOf = function(target, onlyActive) {
        if (target == null) {
            return []
        }
        target = typeof target !== "string" ? target : TweenLite.selector(target) || target;
        var i, a, j, t;
        if ((_isArray(target) || _isSelector(target)) && typeof target[0] !== "number") {
            i = target.length;
            a = [];
            while (--i > -1) {
                a = a.concat(TweenLite.getTweensOf(target[i], onlyActive))
            }
            i = a.length;
            while (--i > -1) {
                t = a[i];
                j = i;
                while (--j > -1) {
                    if (t === a[j]) {
                        a.splice(i, 1)
                    }
                }
            }
        } else {
            a = _register(target).concat();
            i = a.length;
            while (--i > -1) {
                if (a[i]._gc || onlyActive && !a[i].isActive()) {
                    a.splice(i, 1)
                }
            }
        }
        return a
    }
    ;
    TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
        if (typeof onlyActive === "object") {
            vars = onlyActive;
            onlyActive = false
        }
        var a = TweenLite.getTweensOf(target, onlyActive)
          , i = a.length;
        while (--i > -1) {
            a[i]._kill(vars, target)
        }
    }
    ;
    var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
        this._overwriteProps = (props || "").split(",");
        this._propName = this._overwriteProps[0];
        this._priority = priority || 0;
        this._super = TweenPlugin.prototype
    }, true);
    p = TweenPlugin.prototype;
    TweenPlugin.version = "1.19.0";
    TweenPlugin.API = 2;
    p._firstPT = null;
    p._addTween = _addPropTween;
    p.setRatio = _setRatio;
    p._kill = function(lookup) {
        var a = this._overwriteProps, pt = this._firstPT, i;
        if (lookup[this._propName] != null) {
            this._overwriteProps = []
        } else {
            i = a.length;
            while (--i > -1) {
                if (lookup[a[i]] != null) {
                    a.splice(i, 1)
                }
            }
        }
        while (pt) {
            if (lookup[pt.n] != null) {
                if (pt._next) {
                    pt._next._prev = pt._prev
                }
                if (pt._prev) {
                    pt._prev._next = pt._next;
                    pt._prev = null
                } else if (this._firstPT === pt) {
                    this._firstPT = pt._next
                }
            }
            pt = pt._next
        }
        return false
    }
    ;
    p._mod = p._roundProps = function(lookup) {
        var pt = this._firstPT, val;
        while (pt) {
            val = lookup[this._propName] || pt.n != null && lookup[pt.n.split(this._propName + "_").join("")];
            if (val && typeof val === "function") {
                if (pt.f === 2) {
                    pt.t._applyPT.m = val
                } else {
                    pt.m = val
                }
            }
            pt = pt._next
        }
    }
    ;
    TweenLite._onPluginEvent = function(type, tween) {
        var pt = tween._firstPT, changed, pt2, first, last, next;
        if (type === "_onInitAllProps") {
            while (pt) {
                next = pt._next;
                pt2 = first;
                while (pt2 && pt2.pr > pt.pr) {
                    pt2 = pt2._next
                }
                if (pt._prev = pt2 ? pt2._prev : last) {
                    pt._prev._next = pt
                } else {
                    first = pt
                }
                if (pt._next = pt2) {
                    pt2._prev = pt
                } else {
                    last = pt
                }
                pt = next
            }
            pt = tween._firstPT = first
        }
        while (pt) {
            if (pt.pg)
                if (typeof pt.t[type] === "function")
                    if (pt.t[type]()) {
                        changed = true
                    }
            pt = pt._next
        }
        return changed
    }
    ;
    TweenPlugin.activate = function(plugins) {
        var i = plugins.length;
        while (--i > -1) {
            if (plugins[i].API === TweenPlugin.API) {
                _plugins[(new plugins[i])._propName] = plugins[i]
            }
        }
        return true
    }
    ;
    _gsDefine.plugin = function(config) {
        if (!config || !config.propName || !config.init || !config.API) {
            throw "illegal plugin definition."
        }
        var propName = config.propName, priority = config.priority || 0, overwriteProps = config.overwriteProps, map = {
            init: "_onInitTween",
            set: "setRatio",
            kill: "_kill",
            round: "_mod",
            mod: "_mod",
            initAll: "_onInitAllProps"
        }, Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin", function() {
            TweenPlugin.call(this, propName, priority);
            this._overwriteProps = overwriteProps || []
        }, config.global === true), p = Plugin.prototype = new TweenPlugin(propName), prop;
        p.constructor = Plugin;
        Plugin.API = config.API;
        for (prop in map) {
            if (typeof config[prop] === "function") {
                p[map[prop]] = config[prop]
            }
        }
        Plugin.version = config.version;
        TweenPlugin.activate([Plugin]);
        return Plugin
    }
    ;
    a = window._gsQueue;
    if (a) {
        for (i = 0; i < a.length; i++) {
            a[i]()
        }
        for (p in _defLookup) {
            if (!_defLookup[p].func) {
                window.console.log("GSAP encountered missing dependency: " + p)
            }
        }
    }
    _tickerActive = false
}
)(typeof module !== "undefined" && module.exports && typeof global !== "undefined" ? global : this || window, "TweenMax");
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else {
        factory(jQuery)
    }
}
)(function($) {
    $.ui = $.ui || {};
    var version = $.ui.version = "1.12.0";
    var widgetUuid = 0;
    var widgetSlice = Array.prototype.slice;
    $.cleanData = function(orig) {
        return function(elems) {
            var events, elem, i;
            for (i = 0; (elem = elems[i]) != null; i++) {
                try {
                    events = $._data(elem, "events");
                    if (events && events.remove) {
                        $(elem).triggerHandler("remove")
                    }
                } catch (e) {}
            }
            orig(elems)
        }
    }($.cleanData);
    $.widget = function(name, base, prototype) {
        var existingConstructor, constructor, basePrototype;
        var proxiedPrototype = {};
        var namespace = name.split(".")[0];
        name = name.split(".")[1];
        var fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget
        }
        if ($.isArray(prototype)) {
            prototype = $.extend.apply(null, [{}].concat(prototype))
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName)
        }
        ;
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) {
                return new constructor(options,element)
            }
            if (arguments.length) {
                this._createWidget(options, element)
            }
        }
        ;
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base;
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return
            }
            proxiedPrototype[prop] = function() {
                function _super() {
                    return base.prototype[prop].apply(this, arguments)
                }
                function _superApply(args) {
                    return base.prototype[prop].apply(this, args)
                }
                return function() {
                    var __super = this._super;
                    var __superApply = this._superApply;
                    var returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue
                }
            }()
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto)
            });
            delete existingConstructor._childConstructors
        } else {
            base._childConstructors.push(constructor)
        }
        $.widget.bridge(name, constructor);
        return constructor
    }
    ;
    $.widget.extend = function(target) {
        var input = widgetSlice.call(arguments, 1);
        var inputIndex = 0;
        var inputLength = input.length;
        var key;
        var value;
        for (; inputIndex < inputLength; inputIndex++) {
            for (key in input[inputIndex]) {
                value = input[inputIndex][key];
                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                    if ($.isPlainObject(value)) {
                        target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value)
                    } else {
                        target[key] = value
                    }
                }
            }
        }
        return target
    }
    ;
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = typeof options === "string";
            var args = widgetSlice.call(arguments, 1);
            var returnValue = this;
            if (isMethodCall) {
                this.each(function() {
                    var methodValue;
                    var instance = $.data(this, fullName);
                    if (options === "instance") {
                        returnValue = instance;
                        return false
                    }
                    if (!instance) {
                        return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'")
                    }
                    if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                        return $.error("no such method '" + options + "' for " + name + " widget instance")
                    }
                    methodValue = instance[options].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                        return false
                    }
                })
            } else {
                if (args.length) {
                    options = $.widget.extend.apply(null, [options].concat(args))
                }
                this.each(function() {
                    var instance = $.data(this, fullName);
                    if (instance) {
                        instance.option(options || {});
                        if (instance._init) {
                            instance._init()
                        }
                    } else {
                        $.data(this, fullName, new object(options,this))
                    }
                })
            }
            return returnValue
        }
    }
    ;
    $.Widget = function() {}
    ;
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            classes: {},
            disabled: false,
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = widgetUuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            this.classesElementLookup = {};
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function(event) {
                        if (event.target === element) {
                            this.destroy()
                        }
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow)
            }
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this._create();
            if (this.options.disabled) {
                this._setOptionDisabled(this.options.disabled)
            }
            this._trigger("create", null, this._getCreateEventData());
            this._init()
        },
        _getCreateOptions: function() {
            return {}
        },
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            var that = this;
            this._destroy();
            $.each(this.classesElementLookup, function(key, value) {
                that._removeClass(value, key)
            });
            this.element.off(this.eventNamespace).removeData(this.widgetFullName);
            this.widget().off(this.eventNamespace).removeAttr("aria-disabled");
            this.bindings.off(this.eventNamespace)
        },
        _destroy: $.noop,
        widget: function() {
            return this.element
        },
        option: function(key, value) {
            var options = key;
            var parts;
            var curOption;
            var i;
            if (arguments.length === 0) {
                return $.widget.extend({}, this.options)
            }
            if (typeof key === "string") {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]]
                    }
                    key = parts.pop();
                    if (arguments.length === 1) {
                        return curOption[key] === undefined ? null : curOption[key]
                    }
                    curOption[key] = value
                } else {
                    if (arguments.length === 1) {
                        return this.options[key] === undefined ? null : this.options[key]
                    }
                    options[key] = value
                }
            }
            this._setOptions(options);
            return this
        },
        _setOptions: function(options) {
            var key;
            for (key in options) {
                this._setOption(key, options[key])
            }
            return this
        },
        _setOption: function(key, value) {
            if (key === "classes") {
                this._setOptionClasses(value)
            }
            this.options[key] = value;
            if (key === "disabled") {
                this._setOptionDisabled(value)
            }
            return this
        },
        _setOptionClasses: function(value) {
            var classKey, elements, currentElements;
            for (classKey in value) {
                currentElements = this.classesElementLookup[classKey];
                if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) {
                    continue
                }
                elements = $(currentElements.get());
                this._removeClass(currentElements, classKey);
                elements.addClass(this._classes({
                    element: elements,
                    keys: classKey,
                    classes: value,
                    add: true
                }))
            }
        },
        _setOptionDisabled: function(value) {
            this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value);
            if (value) {
                this._removeClass(this.hoverable, null, "ui-state-hover");
                this._removeClass(this.focusable, null, "ui-state-focus")
            }
        },
        enable: function() {
            return this._setOptions({
                disabled: false
            })
        },
        disable: function() {
            return this._setOptions({
                disabled: true
            })
        },
        _classes: function(options) {
            var full = [];
            var that = this;
            options = $.extend({
                element: this.element,
                classes: this.options.classes || {}
            }, options);
            function processClassString(classes, checkOption) {
                var current, i;
                for (i = 0; i < classes.length; i++) {
                    current = that.classesElementLookup[classes[i]] || $();
                    if (options.add) {
                        current = $($.unique(current.get().concat(options.element.get())))
                    } else {
                        current = $(current.not(options.element).get())
                    }
                    that.classesElementLookup[classes[i]] = current;
                    full.push(classes[i]);
                    if (checkOption && options.classes[classes[i]]) {
                        full.push(options.classes[classes[i]])
                    }
                }
            }
            if (options.keys) {
                processClassString(options.keys.match(/\S+/g) || [], true)
            }
            if (options.extra) {
                processClassString(options.extra.match(/\S+/g) || [])
            }
            return full.join(" ")
        },
        _removeClass: function(element, keys, extra) {
            return this._toggleClass(element, keys, extra, false)
        },
        _addClass: function(element, keys, extra) {
            return this._toggleClass(element, keys, extra, true)
        },
        _toggleClass: function(element, keys, extra, add) {
            add = typeof add === "boolean" ? add : extra;
            var shift = typeof element === "string" || element === null
              , options = {
                extra: shift ? keys : extra,
                keys: shift ? element : keys,
                element: shift ? this.element : element,
                add: add
            };
            options.element.toggleClass(this._classes(options), add);
            return this
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement;
            var instance = this;
            if (typeof suppressDisabledCheck !== "boolean") {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget()
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element)
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                        return
                    }
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments)
                }
                if (typeof handler !== "string") {
                    handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++
                }
                var match = event.match(/^([\w:-]*)\s*(.*)$/);
                var eventName = match[1] + instance.eventNamespace;
                var selector = match[2];
                if (selector) {
                    delegateElement.on(eventName, selector, handlerProxy)
                } else {
                    element.on(eventName, handlerProxy)
                }
            })
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.off(eventName).off(eventName);
            this.bindings = $(this.bindings.not(element).get());
            this.focusable = $(this.focusable.not(element).get());
            this.hoverable = $(this.hoverable.not(element).get())
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments)
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0)
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    this._addClass($(event.currentTarget), null, "ui-state-hover")
                },
                mouseleave: function(event) {
                    this._removeClass($(event.currentTarget), null, "ui-state-hover")
                }
            })
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    this._addClass($(event.currentTarget), null, "ui-state-focus")
                },
                focusout: function(event) {
                    this._removeClass($(event.currentTarget), null, "ui-state-focus")
                }
            })
        },
        _trigger: function(type, event, data) {
            var prop, orig;
            var callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop]
                    }
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented())
        }
    };
    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if (typeof options === "string") {
                options = {
                    effect: options
                }
            }
            var hasOptions;
            var effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if (typeof options === "number") {
                options = {
                    duration: options
                }
            }
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) {
                element.delay(options.delay)
            }
            if (hasOptions && $.effects && $.effects.effect[effectName]) {
                element[method](options)
            } else if (effectName !== method && element[effectName]) {
                element[effectName](options.duration, options.easing, callback)
            } else {
                element.queue(function(next) {
                    $(this)[method]();
                    if (callback) {
                        callback.call(element[0])
                    }
                    next()
                })
            }
        }
    });
    var widget = $.widget;
    (function() {
        var cachedScrollbarWidth, supportsOffsetFractions, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
        supportsOffsetFractions = function() {
            var element = $("<div>").css("position", "absolute").appendTo("body").offset({
                top: 1.5,
                left: 1.5
            })
              , support = element.offset().top === 1.5;
            element.remove();
            supportsOffsetFractions = function() {
                return support
            }
            ;
            return support
        }
        ;
        function getOffsets(offsets, width, height) {
            return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)]
        }
        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0
        }
        function getDimensions(elem) {
            var raw = elem[0];
            if (raw.nodeType === 9) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: 0,
                        left: 0
                    }
                }
            }
            if ($.isWindow(raw)) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: elem.scrollTop(),
                        left: elem.scrollLeft()
                    }
                }
            }
            if (raw.preventDefault) {
                return {
                    width: 0,
                    height: 0,
                    offset: {
                        top: raw.pageY,
                        left: raw.pageX
                    }
                }
            }
            return {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            }
        }
        $.position = {
            scrollbarWidth: function() {
                if (cachedScrollbarWidth !== undefined) {
                    return cachedScrollbarWidth
                }
                var w1, w2, div = $("<div " + "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" + "<div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
                $("body").append(div);
                w1 = innerDiv.offsetWidth;
                div.css("overflow", "scroll");
                w2 = innerDiv.offsetWidth;
                if (w1 === w2) {
                    w2 = div[0].clientWidth
                }
                div.remove();
                return cachedScrollbarWidth = w1 - w2
            },
            getScrollInfo: function(within) {
                var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x")
                  , overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y")
                  , hasOverflowX = overflowX === "scroll" || overflowX === "auto" && within.width < within.element[0].scrollWidth
                  , hasOverflowY = overflowY === "scroll" || overflowY === "auto" && within.height < within.element[0].scrollHeight;
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                }
            },
            getWithinInfo: function(element) {
                var withinElement = $(element || window)
                  , isWindow = $.isWindow(withinElement[0])
                  , isDocument = !!withinElement[0] && withinElement[0].nodeType === 9
                  , hasOffset = !isWindow && !isDocument;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: hasOffset ? $(element).offset() : {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    width: withinElement.outerWidth(),
                    height: withinElement.outerHeight()
                }
            }
        };
        $.fn.position = function(options) {
            if (!options || !options.of) {
                return _position.apply(this, arguments)
            }
            options = $.extend({}, options);
            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
            dimensions = getDimensions(target);
            if (target[0].preventDefault) {
                options.at = "left top"
            }
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;
            basePosition = $.extend({}, targetOffset);
            $.each(["my", "at"], function() {
                var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
                if (pos.length === 1) {
                    pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"]
                }
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
                horizontalOffset = roffset.exec(pos[0]);
                verticalOffset = roffset.exec(pos[1]);
                offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0];
                options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]]
            });
            if (collision.length === 1) {
                collision[1] = collision[0]
            }
            if (options.at[0] === "right") {
                basePosition.left += targetWidth
            } else if (options.at[0] === "center") {
                basePosition.left += targetWidth / 2
            }
            if (options.at[1] === "bottom") {
                basePosition.top += targetHeight
            } else if (options.at[1] === "center") {
                basePosition.top += targetHeight / 2
            }
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
            basePosition.left += atOffset[0];
            basePosition.top += atOffset[1];
            return this.each(function() {
                var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                if (options.my[0] === "right") {
                    position.left -= elemWidth
                } else if (options.my[0] === "center") {
                    position.left -= elemWidth / 2
                }
                if (options.my[1] === "bottom") {
                    position.top -= elemHeight
                } else if (options.my[1] === "center") {
                    position.top -= elemHeight / 2
                }
                position.left += myOffset[0];
                position.top += myOffset[1];
                if (!supportsOffsetFractions()) {
                    position.left = round(position.left);
                    position.top = round(position.top)
                }
                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };
                $.each(["left", "top"], function(i, dir) {
                    if ($.ui.position[collision[i]]) {
                        $.ui.position[collision[i]][dir](position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        })
                    }
                });
                if (options.using) {
                    using = function(props) {
                        var left = targetOffset.left - position.left
                          , right = left + targetWidth - elemWidth
                          , top = targetOffset.top - position.top
                          , bottom = top + targetHeight - elemHeight
                          , feedback = {
                            target: {
                                element: target,
                                left: targetOffset.left,
                                top: targetOffset.top,
                                width: targetWidth,
                                height: targetHeight
                            },
                            element: {
                                element: elem,
                                left: position.left,
                                top: position.top,
                                width: elemWidth,
                                height: elemHeight
                            },
                            horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                            vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                        };
                        if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                            feedback.horizontal = "center"
                        }
                        if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                            feedback.vertical = "middle"
                        }
                        if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                            feedback.important = "horizontal"
                        } else {
                            feedback.important = "vertical"
                        }
                        options.using.call(this, props, feedback)
                    }
                }
                elem.offset($.extend(position, {
                    using: using
                }))
            })
        }
        ;
        $.ui.position = {
            fit: {
                left: function(position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                    if (data.collisionWidth > outerWidth) {
                        if (overLeft > 0 && overRight <= 0) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                            position.left += overLeft - newOverRight
                        } else if (overRight > 0 && overLeft <= 0) {
                            position.left = withinOffset
                        } else {
                            if (overLeft > overRight) {
                                position.left = withinOffset + outerWidth - data.collisionWidth
                            } else {
                                position.left = withinOffset
                            }
                        }
                    } else if (overLeft > 0) {
                        position.left += overLeft
                    } else if (overRight > 0) {
                        position.left -= overRight
                    } else {
                        position.left = max(position.left - collisionPosLeft, position.left)
                    }
                },
                top: function(position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                    if (data.collisionHeight > outerHeight) {
                        if (overTop > 0 && overBottom <= 0) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                            position.top += overTop - newOverBottom
                        } else if (overBottom > 0 && overTop <= 0) {
                            position.top = withinOffset
                        } else {
                            if (overTop > overBottom) {
                                position.top = withinOffset + outerHeight - data.collisionHeight
                            } else {
                                position.top = withinOffset
                            }
                        }
                    } else if (overTop > 0) {
                        position.top += overTop
                    } else if (overBottom > 0) {
                        position.top -= overBottom
                    } else {
                        position.top = max(position.top - collisionPosTop, position.top)
                    }
                }
            },
            flip: {
                left: function(position, data) {
                    var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0, atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                    if (overLeft < 0) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                        if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                            position.left += myOffset + atOffset + offset
                        }
                    } else if (overRight > 0) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                        if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                            position.left += myOffset + atOffset + offset
                        }
                    }
                },
                top: function(position, data) {
                    var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === "top", myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0, atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                    if (overTop < 0) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                        if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                            position.top += myOffset + atOffset + offset
                        }
                    } else if (overBottom > 0) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                        if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                            position.top += myOffset + atOffset + offset
                        }
                    }
                }
            },
            flipfit: {
                left: function() {
                    $.ui.position.flip.left.apply(this, arguments);
                    $.ui.position.fit.left.apply(this, arguments)
                },
                top: function() {
                    $.ui.position.flip.top.apply(this, arguments);
                    $.ui.position.fit.top.apply(this, arguments)
                }
            }
        }
    }
    )();
    var position = $.ui.position;
    var data = $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName)
            }
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3])
        }
    });
    var disableSelection = $.fn.extend({
        disableSelection: function() {
            var eventType = "onselectstart"in document.createElement("div") ? "selectstart" : "mousedown";
            return function() {
                return this.on(eventType + ".ui-disableSelection", function(event) {
                    event.preventDefault()
                })
            }
        }(),
        enableSelection: function() {
            return this.off(".ui-disableSelection")
        }
    });
    var dataSpace = "ui-effects-"
      , dataSpaceStyle = "ui-effects-style"
      , dataSpaceAnimated = "ui-effects-animated"
      , jQuery = $;
    $.effects = {
        effect: {}
    };
    (function(jQuery, undefined) {
        var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " + "borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [{
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [execResult[1], execResult[2], execResult[3], execResult[4]]
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]]
            }
        }, {
            re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
            parse: function(execResult) {
                return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)]
            }
        }, {
            re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
            parse: function(execResult) {
                return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)]
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
            space: "hsla",
            parse: function(execResult) {
                return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]]
            }
        }], color = jQuery.Color = function(color, green, blue, alpha) {
            return new jQuery.Color.fn.parse(color,green,blue,alpha)
        }
        , spaces = {
            rgba: {
                props: {
                    red: {
                        idx: 0,
                        type: "byte"
                    },
                    green: {
                        idx: 1,
                        type: "byte"
                    },
                    blue: {
                        idx: 2,
                        type: "byte"
                    }
                }
            },
            hsla: {
                props: {
                    hue: {
                        idx: 0,
                        type: "degrees"
                    },
                    saturation: {
                        idx: 1,
                        type: "percent"
                    },
                    lightness: {
                        idx: 2,
                        type: "percent"
                    }
                }
            }
        }, propTypes = {
            "byte": {
                floor: true,
                max: 255
            },
            percent: {
                max: 1
            },
            degrees: {
                mod: 360,
                floor: true
            }
        }, support = color.support = {}, supportElem = jQuery("<p>")[0], colors, each = jQuery.each;
        supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
        support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
        each(spaces, function(spaceName, space) {
            space.cache = "_" + spaceName;
            space.props.alpha = {
                idx: 3,
                type: "percent",
                def: 1
            }
        });
        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            if (value == null) {
                return allowEmpty || !prop.def ? null : prop.def
            }
            value = type.floor ? ~~value : parseFloat(value);
            if (isNaN(value)) {
                return prop.def
            }
            if (type.mod) {
                return (value + type.mod) % type.mod
            }
            return 0 > value ? 0 : type.max < value ? type.max : value
        }
        function stringParse(string) {
            var inst = color()
              , rgba = inst._rgba = [];
            string = string.toLowerCase();
            each(stringParsers, function(i, parser) {
                var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                if (values) {
                    parsed = inst[spaceName](values);
                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                    rgba = inst._rgba = parsed._rgba;
                    return false
                }
            });
            if (rgba.length) {
                if (rgba.join() === "0,0,0,0") {
                    jQuery.extend(rgba, colors.transparent)
                }
                return inst
            }
            return colors[string]
        }
        color.fn = jQuery.extend(color.prototype, {
            parse: function(red, green, blue, alpha) {
                if (red === undefined) {
                    this._rgba = [null, null, null, null];
                    return this
                }
                if (red.jquery || red.nodeType) {
                    red = jQuery(red).css(green);
                    green = undefined
                }
                var inst = this
                  , type = jQuery.type(red)
                  , rgba = this._rgba = [];
                if (green !== undefined) {
                    red = [red, green, blue, alpha];
                    type = "array"
                }
                if (type === "string") {
                    return this.parse(stringParse(red) || colors._default)
                }
                if (type === "array") {
                    each(spaces.rgba.props, function(key, prop) {
                        rgba[prop.idx] = clamp(red[prop.idx], prop)
                    });
                    return this
                }
                if (type === "object") {
                    if (red instanceof color) {
                        each(spaces, function(spaceName, space) {
                            if (red[space.cache]) {
                                inst[space.cache] = red[space.cache].slice()
                            }
                        })
                    } else {
                        each(spaces, function(spaceName, space) {
                            var cache = space.cache;
                            each(space.props, function(key, prop) {
                                if (!inst[cache] && space.to) {
                                    if (key === "alpha" || red[key] == null) {
                                        return
                                    }
                                    inst[cache] = space.to(inst._rgba)
                                }
                                inst[cache][prop.idx] = clamp(red[key], prop, true)
                            });
                            if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                inst[cache][3] = 1;
                                if (space.from) {
                                    inst._rgba = space.from(inst[cache])
                                }
                            }
                        })
                    }
                    return this
                }
            },
            is: function(compare) {
                var is = color(compare)
                  , same = true
                  , inst = this;
                each(spaces, function(_, space) {
                    var localCache, isCache = is[space.cache];
                    if (isCache) {
                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                        each(space.props, function(_, prop) {
                            if (isCache[prop.idx] != null) {
                                same = isCache[prop.idx] === localCache[prop.idx];
                                return same
                            }
                        })
                    }
                    return same
                });
                return same
            },
            _space: function() {
                var used = []
                  , inst = this;
                each(spaces, function(spaceName, space) {
                    if (inst[space.cache]) {
                        used.push(spaceName)
                    }
                });
                return used.pop()
            },
            transition: function(other, distance) {
                var end = color(other)
                  , spaceName = end._space()
                  , space = spaces[spaceName]
                  , startColor = this.alpha() === 0 ? color("transparent") : this
                  , start = startColor[space.cache] || space.to(startColor._rgba)
                  , result = start.slice();
                end = end[space.cache];
                each(space.props, function(key, prop) {
                    var index = prop.idx
                      , startValue = start[index]
                      , endValue = end[index]
                      , type = propTypes[prop.type] || {};
                    if (endValue === null) {
                        return
                    }
                    if (startValue === null) {
                        result[index] = endValue
                    } else {
                        if (type.mod) {
                            if (endValue - startValue > type.mod / 2) {
                                startValue += type.mod
                            } else if (startValue - endValue > type.mod / 2) {
                                startValue -= type.mod
                            }
                        }
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop)
                    }
                });
                return this[spaceName](result)
            },
            blend: function(opaque) {
                if (this._rgba[3] === 1) {
                    return this
                }
                var rgb = this._rgba.slice()
                  , a = rgb.pop()
                  , blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function(v, i) {
                    return (1 - a) * blend[i] + a * v
                }))
            },
            toRgbaString: function() {
                var prefix = "rgba("
                  , rgba = jQuery.map(this._rgba, function(v, i) {
                    return v == null ? i > 2 ? 1 : 0 : v
                });
                if (rgba[3] === 1) {
                    rgba.pop();
                    prefix = "rgb("
                }
                return prefix + rgba.join() + ")"
            },
            toHslaString: function() {
                var prefix = "hsla("
                  , hsla = jQuery.map(this.hsla(), function(v, i) {
                    if (v == null) {
                        v = i > 2 ? 1 : 0
                    }
                    if (i && i < 3) {
                        v = Math.round(v * 100) + "%"
                    }
                    return v
                });
                if (hsla[3] === 1) {
                    hsla.pop();
                    prefix = "hsl("
                }
                return prefix + hsla.join() + ")"
            },
            toHexString: function(includeAlpha) {
                var rgba = this._rgba.slice()
                  , alpha = rgba.pop();
                if (includeAlpha) {
                    rgba.push(~~(alpha * 255))
                }
                return "#" + jQuery.map(rgba, function(v) {
                    v = (v || 0).toString(16);
                    return v.length === 1 ? "0" + v : v
                }).join("")
            },
            toString: function() {
                return this._rgba[3] === 0 ? "transparent" : this.toRgbaString()
            }
        });
        color.fn.parse.prototype = color.fn;
        function hue2rgb(p, q, h) {
            h = (h + 1) % 1;
            if (h * 6 < 1) {
                return p + (q - p) * h * 6
            }
            if (h * 2 < 1) {
                return q
            }
            if (h * 3 < 2) {
                return p + (q - p) * (2 / 3 - h) * 6
            }
            return p
        }
        spaces.hsla.to = function(rgba) {
            if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                return [null, null, null, rgba[3]]
            }
            var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = add * .5, h, s;
            if (min === max) {
                h = 0
            } else if (r === max) {
                h = 60 * (g - b) / diff + 360
            } else if (g === max) {
                h = 60 * (b - r) / diff + 120
            } else {
                h = 60 * (r - g) / diff + 240
            }
            if (diff === 0) {
                s = 0
            } else if (l <= .5) {
                s = diff / add
            } else {
                s = diff / (2 - add)
            }
            return [Math.round(h) % 360, s, l, a == null ? 1 : a]
        }
        ;
        spaces.hsla.from = function(hsla) {
            if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                return [null, null, null, hsla[3]]
            }
            var h = hsla[0] / 360
              , s = hsla[1]
              , l = hsla[2]
              , a = hsla[3]
              , q = l <= .5 ? l * (1 + s) : l + s - l * s
              , p = 2 * l - q;
            return [Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a]
        }
        ;
        each(spaces, function(spaceName, space) {
            var props = space.props
              , cache = space.cache
              , to = space.to
              , from = space.from;
            color.fn[spaceName] = function(value) {
                if (to && !this[cache]) {
                    this[cache] = to(this._rgba)
                }
                if (value === undefined) {
                    return this[cache].slice()
                }
                var ret, type = jQuery.type(value), arr = type === "array" || type === "object" ? value : arguments, local = this[cache].slice();
                each(props, function(key, prop) {
                    var val = arr[type === "object" ? key : prop.idx];
                    if (val == null) {
                        val = local[prop.idx]
                    }
                    local[prop.idx] = clamp(val, prop)
                });
                if (from) {
                    ret = color(from(local));
                    ret[cache] = local;
                    return ret
                } else {
                    return color(local)
                }
            }
            ;
            each(props, function(key, prop) {
                if (color.fn[key]) {
                    return
                }
                color.fn[key] = function(value) {
                    var vtype = jQuery.type(value), fn = key === "alpha" ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx], match;
                    if (vtype === "undefined") {
                        return cur
                    }
                    if (vtype === "function") {
                        value = value.call(this, cur);
                        vtype = jQuery.type(value)
                    }
                    if (value == null && prop.empty) {
                        return this
                    }
                    if (vtype === "string") {
                        match = rplusequals.exec(value);
                        if (match) {
                            value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1)
                        }
                    }
                    local[prop.idx] = value;
                    return this[fn](local)
                }
            })
        });
        color.hook = function(hook) {
            var hooks = hook.split(" ");
            each(hooks, function(i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function(elem, value) {
                        var parsed, curElem, backgroundColor = "";
                        if (value !== "transparent" && (jQuery.type(value) !== "string" || (parsed = stringParse(value)))) {
                            value = color(parsed || value);
                            if (!support.rgba && value._rgba[3] !== 1) {
                                curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                                while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                                    try {
                                        backgroundColor = jQuery.css(curElem, "backgroundColor");
                                        curElem = curElem.parentNode
                                    } catch (e) {}
                                }
                                value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default")
                            }
                            value = value.toRgbaString()
                        }
                        try {
                            elem.style[hook] = value
                        } catch (e) {}
                    }
                };
                jQuery.fx.step[hook] = function(fx) {
                    if (!fx.colorInit) {
                        fx.start = color(fx.elem, hook);
                        fx.end = color(fx.end);
                        fx.colorInit = true
                    }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos))
                }
            })
        }
        ;
        color.hook(stepHooks);
        jQuery.cssHooks.borderColor = {
            expand: function(value) {
                var expanded = {};
                each(["Top", "Right", "Bottom", "Left"], function(i, part) {
                    expanded["border" + part + "Color"] = value
                });
                return expanded
            }
        };
        colors = jQuery.Color.names = {
            aqua: "#00ffff",
            black: "#000000",
            blue: "#0000ff",
            fuchsia: "#ff00ff",
            gray: "#808080",
            green: "#008000",
            lime: "#00ff00",
            maroon: "#800000",
            navy: "#000080",
            olive: "#808000",
            purple: "#800080",
            red: "#ff0000",
            silver: "#c0c0c0",
            teal: "#008080",
            white: "#ffffff",
            yellow: "#ffff00",
            transparent: [null, null, null, 0],
            _default: "#ffffff"
        }
    }
    )(jQuery);
    (function() {
        var classAnimationActions = ["add", "remove", "toggle"]
          , shorthandStyles = {
            border: 1,
            borderBottom: 1,
            borderColor: 1,
            borderLeft: 1,
            borderRight: 1,
            borderTop: 1,
            borderWidth: 1,
            margin: 1,
            padding: 1
        };
        $.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function(_, prop) {
            $.fx.step[prop] = function(fx) {
                if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                    jQuery.style(fx.elem, prop, fx.end);
                    fx.setAttr = true
                }
            }
        });
        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
            if (style && style.length && style[0] && style[style[0]]) {
                len = style.length;
                while (len--) {
                    key = style[len];
                    if (typeof style[key] === "string") {
                        styles[$.camelCase(key)] = style[key]
                    }
                }
            } else {
                for (key in style) {
                    if (typeof style[key] === "string") {
                        styles[key] = style[key]
                    }
                }
            }
            return styles
        }
        function styleDifference(oldStyle, newStyle) {
            var diff = {}, name, value;
            for (name in newStyle) {
                value = newStyle[name];
                if (oldStyle[name] !== value) {
                    if (!shorthandStyles[name]) {
                        if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                            diff[name] = value
                        }
                    }
                }
            }
            return diff
        }
        if (!$.fn.addBack) {
            $.fn.addBack = function(selector) {
                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
            }
        }
        $.effects.animateClass = function(value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function() {
                var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
                allAnimations = allAnimations.map(function() {
                    var el = $(this);
                    return {
                        el: el,
                        start: getElementStyles(this)
                    }
                });
                applyClassChange = function() {
                    $.each(classAnimationActions, function(i, action) {
                        if (value[action]) {
                            animated[action + "Class"](value[action])
                        }
                    })
                }
                ;
                applyClassChange();
                allAnimations = allAnimations.map(function() {
                    this.end = getElementStyles(this.el[0]);
                    this.diff = styleDifference(this.start, this.end);
                    return this
                });
                animated.attr("class", baseClass);
                allAnimations = allAnimations.map(function() {
                    var styleInfo = this
                      , dfd = $.Deferred()
                      , opts = $.extend({}, o, {
                        queue: false,
                        complete: function() {
                            dfd.resolve(styleInfo)
                        }
                    });
                    this.el.animate(this.diff, opts);
                    return dfd.promise()
                });
                $.when.apply($, allAnimations.get()).done(function() {
                    applyClassChange();
                    $.each(arguments, function() {
                        var el = this.el;
                        $.each(this.diff, function(key) {
                            el.css(key, "")
                        })
                    });
                    o.complete.call(animated[0])
                })
            })
        }
        ;
        $.fn.extend({
            addClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, {
                        add: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments)
                }
            }($.fn.addClass),
            removeClass: function(orig) {
                return function(classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, {
                        remove: classNames
                    }, speed, easing, callback) : orig.apply(this, arguments)
                }
            }($.fn.removeClass),
            toggleClass: function(orig) {
                return function(classNames, force, speed, easing, callback) {
                    if (typeof force === "boolean" || force === undefined) {
                        if (!speed) {
                            return orig.apply(this, arguments)
                        } else {
                            return $.effects.animateClass.call(this, force ? {
                                add: classNames
                            } : {
                                remove: classNames
                            }, speed, easing, callback)
                        }
                    } else {
                        return $.effects.animateClass.call(this, {
                            toggle: classNames
                        }, force, speed, easing)
                    }
                }
            }($.fn.toggleClass),
            switchClass: function(remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    add: add,
                    remove: remove
                }, speed, easing, callback)
            }
        })
    }
    )();
    (function() {
        if ($.expr && $.expr.filters && $.expr.filters.animated) {
            $.expr.filters.animated = function(orig) {
                return function(elem) {
                    return !!$(elem).data(dataSpaceAnimated) || orig(elem)
                }
            }($.expr.filters.animated)
        }
        if ($.uiBackCompat !== false) {
            $.extend($.effects, {
                save: function(element, set) {
                    var i = 0
                      , length = set.length;
                    for (; i < length; i++) {
                        if (set[i] !== null) {
                            element.data(dataSpace + set[i], element[0].style[set[i]])
                        }
                    }
                },
                restore: function(element, set) {
                    var val, i = 0, length = set.length;
                    for (; i < length; i++) {
                        if (set[i] !== null) {
                            val = element.data(dataSpace + set[i]);
                            element.css(set[i], val)
                        }
                    }
                },
                setMode: function(el, mode) {
                    if (mode === "toggle") {
                        mode = el.is(":hidden") ? "show" : "hide"
                    }
                    return mode
                },
                createWrapper: function(element) {
                    if (element.parent().is(".ui-effects-wrapper")) {
                        return element.parent()
                    }
                    var props = {
                        width: element.outerWidth(true),
                        height: element.outerHeight(true),
                        "float": element.css("float")
                    }
                      , wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                        fontSize: "100%",
                        background: "transparent",
                        border: "none",
                        margin: 0,
                        padding: 0
                    })
                      , size = {
                        width: element.width(),
                        height: element.height()
                    }
                      , active = document.activeElement;
                    try {
                        active.id
                    } catch (e) {
                        active = document.body
                    }
                    element.wrap(wrapper);
                    if (element[0] === active || $.contains(element[0], active)) {
                        $(active).trigger("focus")
                    }
                    wrapper = element.parent();
                    if (element.css("position") === "static") {
                        wrapper.css({
                            position: "relative"
                        });
                        element.css({
                            position: "relative"
                        })
                    } else {
                        $.extend(props, {
                            position: element.css("position"),
                            zIndex: element.css("z-index")
                        });
                        $.each(["top", "left", "bottom", "right"], function(i, pos) {
                            props[pos] = element.css(pos);
                            if (isNaN(parseInt(props[pos], 10))) {
                                props[pos] = "auto"
                            }
                        });
                        element.css({
                            position: "relative",
                            top: 0,
                            left: 0,
                            right: "auto",
                            bottom: "auto"
                        })
                    }
                    element.css(size);
                    return wrapper.css(props).show()
                },
                removeWrapper: function(element) {
                    var active = document.activeElement;
                    if (element.parent().is(".ui-effects-wrapper")) {
                        element.parent().replaceWith(element);
                        if (element[0] === active || $.contains(element[0], active)) {
                            $(active).trigger("focus")
                        }
                    }
                    return element
                }
            })
        }
        $.extend($.effects, {
            version: "1.12.0",
            define: function(name, mode, effect) {
                if (!effect) {
                    effect = mode;
                    mode = "effect"
                }
                $.effects.effect[name] = effect;
                $.effects.effect[name].mode = mode;
                return effect
            },
            scaledDimensions: function(element, percent, direction) {
                if (percent === 0) {
                    return {
                        height: 0,
                        width: 0,
                        outerHeight: 0,
                        outerWidth: 0
                    }
                }
                var x = direction !== "horizontal" ? (percent || 100) / 100 : 1
                  , y = direction !== "vertical" ? (percent || 100) / 100 : 1;
                return {
                    height: element.height() * y,
                    width: element.width() * x,
                    outerHeight: element.outerHeight() * y,
                    outerWidth: element.outerWidth() * x
                }
            },
            clipToBox: function(animation) {
                return {
                    width: animation.clip.right - animation.clip.left,
                    height: animation.clip.bottom - animation.clip.top,
                    left: animation.clip.left,
                    top: animation.clip.top
                }
            },
            unshift: function(element, queueLength, count) {
                var queue = element.queue();
                if (queueLength > 1) {
                    queue.splice.apply(queue, [1, 0].concat(queue.splice(queueLength, count)))
                }
                element.dequeue()
            },
            saveStyle: function(element) {
                element.data(dataSpaceStyle, element[0].style.cssText)
            },
            restoreStyle: function(element) {
                element[0].style.cssText = element.data(dataSpaceStyle) || "";
                element.removeData(dataSpaceStyle)
            },
            mode: function(element, mode) {
                var hidden = element.is(":hidden");
                if (mode === "toggle") {
                    mode = hidden ? "show" : "hide"
                }
                if (hidden ? mode === "hide" : mode === "show") {
                    mode = "none"
                }
                return mode
            },
            getBaseline: function(origin, original) {
                var y, x;
                switch (origin[0]) {
                case "top":
                    y = 0;
                    break;
                case "middle":
                    y = .5;
                    break;
                case "bottom":
                    y = 1;
                    break;
                default:
                    y = origin[0] / original.height
                }
                switch (origin[1]) {
                case "left":
                    x = 0;
                    break;
                case "center":
                    x = .5;
                    break;
                case "right":
                    x = 1;
                    break;
                default:
                    x = origin[1] / original.width
                }
                return {
                    x: x,
                    y: y
                }
            },
            createPlaceholder: function(element) {
                var placeholder, cssPosition = element.css("position"), position = element.position();
                element.css({
                    marginTop: element.css("marginTop"),
                    marginBottom: element.css("marginBottom"),
                    marginLeft: element.css("marginLeft"),
                    marginRight: element.css("marginRight")
                }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight());
                if (/^(static|relative)/.test(cssPosition)) {
                    cssPosition = "absolute";
                    placeholder = $("<" + element[0].nodeName + ">").insertAfter(element).css({
                        display: /^(inline|ruby)/.test(element.css("display")) ? "inline-block" : "block",
                        visibility: "hidden",
                        marginTop: element.css("marginTop"),
                        marginBottom: element.css("marginBottom"),
                        marginLeft: element.css("marginLeft"),
                        marginRight: element.css("marginRight"),
                        "float": element.css("float")
                    }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass("ui-effects-placeholder");
                    element.data(dataSpace + "placeholder", placeholder)
                }
                element.css({
                    position: cssPosition,
                    left: position.left,
                    top: position.top
                });
                return placeholder
            },
            removePlaceholder: function(element) {
                var dataKey = dataSpace + "placeholder"
                  , placeholder = element.data(dataKey);
                if (placeholder) {
                    placeholder.remove();
                    element.removeData(dataKey)
                }
            },
            cleanUp: function(element) {
                $.effects.restoreStyle(element);
                $.effects.removePlaceholder(element)
            },
            setTransition: function(element, list, factor, value) {
                value = value || {};
                $.each(list, function(i, x) {
                    var unit = element.cssUnit(x);
                    if (unit[0] > 0) {
                        value[x] = unit[0] * factor + unit[1]
                    }
                });
                return value
            }
        });
        function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) {
                options = effect;
                effect = effect.effect
            }
            effect = {
                effect: effect
            };
            if (options == null) {
                options = {}
            }
            if ($.isFunction(options)) {
                callback = options;
                speed = null;
                options = {}
            }
            if (typeof options === "number" || $.fx.speeds[options]) {
                callback = speed;
                speed = options;
                options = {}
            }
            if ($.isFunction(speed)) {
                callback = speed;
                speed = null
            }
            if (options) {
                $.extend(effect, options)
            }
            speed = speed || options.duration;
            effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
            effect.complete = callback || options.complete;
            return effect
        }
        function standardAnimationOption(option) {
            if (!option || typeof option === "number" || $.fx.speeds[option]) {
                return true
            }
            if (typeof option === "string" && !$.effects.effect[option]) {
                return true
            }
            if ($.isFunction(option)) {
                return true
            }
            if (typeof option === "object" && !option.effect) {
                return true
            }
            return false
        }
        $.fn.extend({
            effect: function() {
                var args = _normalizeArguments.apply(this, arguments)
                  , effectMethod = $.effects.effect[args.effect]
                  , defaultMode = effectMethod.mode
                  , queue = args.queue
                  , queueName = queue || "fx"
                  , complete = args.complete
                  , mode = args.mode
                  , modes = []
                  , prefilter = function(next) {
                    var el = $(this)
                      , normalizedMode = $.effects.mode(el, mode) || defaultMode;
                    el.data(dataSpaceAnimated, true);
                    modes.push(normalizedMode);
                    if (defaultMode && (normalizedMode === "show" || normalizedMode === defaultMode && normalizedMode === "hide")) {
                        el.show()
                    }
                    if (!defaultMode || normalizedMode !== "none") {
                        $.effects.saveStyle(el)
                    }
                    if ($.isFunction(next)) {
                        next()
                    }
                };
                if ($.fx.off || !effectMethod) {
                    if (mode) {
                        return this[mode](args.duration, complete)
                    } else {
                        return this.each(function() {
                            if (complete) {
                                complete.call(this)
                            }
                        })
                    }
                }
                function run(next) {
                    var elem = $(this);
                    function cleanup() {
                        elem.removeData(dataSpaceAnimated);
                        $.effects.cleanUp(elem);
                        if (args.mode === "hide") {
                            elem.hide()
                        }
                        done()
                    }
                    function done() {
                        if ($.isFunction(complete)) {
                            complete.call(elem[0])
                        }
                        if ($.isFunction(next)) {
                            next()
                        }
                    }
                    args.mode = modes.shift();
                    if ($.uiBackCompat !== false && !defaultMode) {
                        if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                            elem[mode]();
                            done()
                        } else {
                            effectMethod.call(elem[0], args, done)
                        }
                    } else {
                        if (args.mode === "none") {
                            elem[mode]();
                            done()
                        } else {
                            effectMethod.call(elem[0], args, cleanup)
                        }
                    }
                }
                return queue === false ? this.each(prefilter).each(run) : this.queue(queueName, prefilter).queue(queueName, run)
            },
            show: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) {
                        return orig.apply(this, arguments)
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "show";
                        return this.effect.call(this, args)
                    }
                }
            }($.fn.show),
            hide: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option)) {
                        return orig.apply(this, arguments)
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "hide";
                        return this.effect.call(this, args)
                    }
                }
            }($.fn.hide),
            toggle: function(orig) {
                return function(option) {
                    if (standardAnimationOption(option) || typeof option === "boolean") {
                        return orig.apply(this, arguments)
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = "toggle";
                        return this.effect.call(this, args)
                    }
                }
            }($.fn.toggle),
            cssUnit: function(key) {
                var style = this.css(key)
                  , val = [];
                $.each(["em", "px", "%", "pt"], function(i, unit) {
                    if (style.indexOf(unit) > 0) {
                        val = [parseFloat(style), unit]
                    }
                });
                return val
            },
            cssClip: function(clipObj) {
                if (clipObj) {
                    return this.css("clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " + clipObj.bottom + "px " + clipObj.left + "px)")
                }
                return parseClip(this.css("clip"), this)
            },
            transfer: function(options, done) {
                var element = $(this)
                  , target = $(options.to)
                  , targetFixed = target.css("position") === "fixed"
                  , body = $("body")
                  , fixTop = targetFixed ? body.scrollTop() : 0
                  , fixLeft = targetFixed ? body.scrollLeft() : 0
                  , endPosition = target.offset()
                  , animation = {
                    top: endPosition.top - fixTop,
                    left: endPosition.left - fixLeft,
                    height: target.innerHeight(),
                    width: target.innerWidth()
                }
                  , startPosition = element.offset()
                  , transfer = $("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(options.className).css({
                    top: startPosition.top - fixTop,
                    left: startPosition.left - fixLeft,
                    height: element.innerHeight(),
                    width: element.innerWidth(),
                    position: targetFixed ? "fixed" : "absolute"
                }).animate(animation, options.duration, options.easing, function() {
                    transfer.remove();
                    if ($.isFunction(done)) {
                        done()
                    }
                })
            }
        });
        function parseClip(str, element) {
            var outerWidth = element.outerWidth()
              , outerHeight = element.outerHeight()
              , clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/
              , values = clipRegex.exec(str) || ["", 0, outerWidth, outerHeight, 0];
            return {
                top: parseFloat(values[1]) || 0,
                right: values[2] === "auto" ? outerWidth : parseFloat(values[2]),
                bottom: values[3] === "auto" ? outerHeight : parseFloat(values[3]),
                left: parseFloat(values[4]) || 0
            }
        }
        $.fx.step.clip = function(fx) {
            if (!fx.clipInit) {
                fx.start = $(fx.elem).cssClip();
                if (typeof fx.end === "string") {
                    fx.end = parseClip(fx.end, fx.elem)
                }
                fx.clipInit = true
            }
            $(fx.elem).cssClip({
                top: fx.pos * (fx.end.top - fx.start.top) + fx.start.top,
                right: fx.pos * (fx.end.right - fx.start.right) + fx.start.right,
                bottom: fx.pos * (fx.end.bottom - fx.start.bottom) + fx.start.bottom,
                left: fx.pos * (fx.end.left - fx.start.left) + fx.start.left
            })
        }
    }
    )();
    (function() {
        var baseEasings = {};
        $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function(i, name) {
            baseEasings[name] = function(p) {
                return Math.pow(p, i + 2)
            }
        });
        $.extend(baseEasings, {
            Sine: function(p) {
                return 1 - Math.cos(p * Math.PI / 2)
            },
            Circ: function(p) {
                return 1 - Math.sqrt(1 - p * p)
            },
            Elastic: function(p) {
                return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15)
            },
            Back: function(p) {
                return p * p * (3 * p - 2)
            },
            Bounce: function(p) {
                var pow2, bounce = 4;
                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2)
            }
        });
        $.each(baseEasings, function(name, easeIn) {
            $.easing["easeIn" + name] = easeIn;
            $.easing["easeOut" + name] = function(p) {
                return 1 - easeIn(1 - p)
            }
            ;
            $.easing["easeInOut" + name] = function(p) {
                return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2
            }
        })
    }
    )();
    var effect = $.effects;
    var effectsEffectBlind = $.effects.define("blind", "hide", function(options, done) {
        var map = {
            up: ["bottom", "top"],
            vertical: ["bottom", "top"],
            down: ["top", "bottom"],
            left: ["right", "left"],
            horizontal: ["right", "left"],
            right: ["left", "right"]
        }
          , element = $(this)
          , direction = options.direction || "up"
          , start = element.cssClip()
          , animate = {
            clip: $.extend({}, start)
        }
          , placeholder = $.effects.createPlaceholder(element);
        animate.clip[map[direction][0]] = animate.clip[map[direction][1]];
        if (options.mode === "show") {
            element.cssClip(animate.clip);
            if (placeholder) {
                placeholder.css($.effects.clipToBox(animate))
            }
            animate.clip = start
        }
        if (placeholder) {
            placeholder.animate($.effects.clipToBox(animate), options.duration, options.easing)
        }
        element.animate(animate, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    var effectsEffectBounce = $.effects.define("bounce", function(options, done) {
        var upAnim, downAnim, refValue, element = $(this), mode = options.mode, hide = mode === "hide", show = mode === "show", direction = options.direction || "up", distance = options.distance, times = options.times || 5, anims = times * 2 + (show || hide ? 1 : 0), speed = options.duration / anims, easing = options.easing, ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left", i = 0, queuelen = element.queue().length;
        $.effects.createPlaceholder(element);
        refValue = element.css(ref);
        if (!distance) {
            distance = element[ref === "top" ? "outerHeight" : "outerWidth"]() / 3
        }
        if (show) {
            downAnim = {
                opacity: 1
            };
            downAnim[ref] = refValue;
            element.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing)
        }
        if (hide) {
            distance = distance / Math.pow(2, times - 1)
        }
        downAnim = {};
        downAnim[ref] = refValue;
        for (; i < times; i++) {
            upAnim = {};
            upAnim[ref] = (motion ? "-=" : "+=") + distance;
            element.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
            distance = hide ? distance * 2 : distance / 2
        }
        if (hide) {
            upAnim = {
                opacity: 0
            };
            upAnim[ref] = (motion ? "-=" : "+=") + distance;
            element.animate(upAnim, speed, easing)
        }
        element.queue(done);
        $.effects.unshift(element, queuelen, anims + 1)
    });
    var effectsEffectClip = $.effects.define("clip", "hide", function(options, done) {
        var start, animate = {}, element = $(this), direction = options.direction || "vertical", both = direction === "both", horizontal = both || direction === "horizontal", vertical = both || direction === "vertical";
        start = element.cssClip();
        animate.clip = {
            top: vertical ? (start.bottom - start.top) / 2 : start.top,
            right: horizontal ? (start.right - start.left) / 2 : start.right,
            bottom: vertical ? (start.bottom - start.top) / 2 : start.bottom,
            left: horizontal ? (start.right - start.left) / 2 : start.left
        };
        $.effects.createPlaceholder(element);
        if (options.mode === "show") {
            element.cssClip(animate.clip);
            animate.clip = start
        }
        element.animate(animate, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    var effectsEffectDrop = $.effects.define("drop", "hide", function(options, done) {
        var distance, element = $(this), mode = options.mode, show = mode === "show", direction = options.direction || "left", ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left" ? "-=" : "+=", oppositeMotion = motion === "+=" ? "-=" : "+=", animation = {
            opacity: 0
        };
        $.effects.createPlaceholder(element);
        distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2;
        animation[ref] = motion + distance;
        if (show) {
            element.css(animation);
            animation[ref] = oppositeMotion + distance;
            animation.opacity = 1
        }
        element.animate(animation, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    var effectsEffectExplode = $.effects.define("explode", "hide", function(options, done) {
        var i, j, left, top, mx, my, rows = options.pieces ? Math.round(Math.sqrt(options.pieces)) : 3, cells = rows, element = $(this), mode = options.mode, show = mode === "show", offset = element.show().css("visibility", "hidden").offset(), width = Math.ceil(element.outerWidth() / cells), height = Math.ceil(element.outerHeight() / rows), pieces = [];
        function childComplete() {
            pieces.push(this);
            if (pieces.length === rows * cells) {
                animComplete()
            }
        }
        for (i = 0; i < rows; i++) {
            top = offset.top + i * height;
            my = i - (rows - 1) / 2;
            for (j = 0; j < cells; j++) {
                left = offset.left + j * width;
                mx = j - (cells - 1) / 2;
                element.clone().appendTo("body").wrap("<div></div>").css({
                    position: "absolute",
                    visibility: "visible",
                    left: -j * width,
                    top: -i * height
                }).parent().addClass("ui-effects-explode").css({
                    position: "absolute",
                    overflow: "hidden",
                    width: width,
                    height: height,
                    left: left + (show ? mx * width : 0),
                    top: top + (show ? my * height : 0),
                    opacity: show ? 0 : 1
                }).animate({
                    left: left + (show ? 0 : mx * width),
                    top: top + (show ? 0 : my * height),
                    opacity: show ? 1 : 0
                }, options.duration || 500, options.easing, childComplete)
            }
        }
        function animComplete() {
            element.css({
                visibility: "visible"
            });
            $(pieces).remove();
            done()
        }
    });
    var effectsEffectFade = $.effects.define("fade", "toggle", function(options, done) {
        var show = options.mode === "show";
        $(this).css("opacity", show ? 0 : 1).animate({
            opacity: show ? 1 : 0
        }, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    var effectsEffectFold = $.effects.define("fold", "hide", function(options, done) {
        var element = $(this)
          , mode = options.mode
          , show = mode === "show"
          , hide = mode === "hide"
          , size = options.size || 15
          , percent = /([0-9]+)%/.exec(size)
          , horizFirst = !!options.horizFirst
          , ref = horizFirst ? ["right", "bottom"] : ["bottom", "right"]
          , duration = options.duration / 2
          , placeholder = $.effects.createPlaceholder(element)
          , start = element.cssClip()
          , animation1 = {
            clip: $.extend({}, start)
        }
          , animation2 = {
            clip: $.extend({}, start)
        }
          , distance = [start[ref[0]], start[ref[1]]]
          , queuelen = element.queue().length;
        if (percent) {
            size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1]
        }
        animation1.clip[ref[0]] = size;
        animation2.clip[ref[0]] = size;
        animation2.clip[ref[1]] = 0;
        if (show) {
            element.cssClip(animation2.clip);
            if (placeholder) {
                placeholder.css($.effects.clipToBox(animation2))
            }
            animation2.clip = start
        }
        element.queue(function(next) {
            if (placeholder) {
                placeholder.animate($.effects.clipToBox(animation1), duration, options.easing).animate($.effects.clipToBox(animation2), duration, options.easing)
            }
            next()
        }).animate(animation1, duration, options.easing).animate(animation2, duration, options.easing).queue(done);
        $.effects.unshift(element, queuelen, 4)
    });
    var effectsEffectHighlight = $.effects.define("highlight", "show", function(options, done) {
        var element = $(this)
          , animation = {
            backgroundColor: element.css("backgroundColor")
        };
        if (options.mode === "hide") {
            animation.opacity = 0
        }
        $.effects.saveStyle(element);
        element.css({
            backgroundImage: "none",
            backgroundColor: options.color || "#ffff99"
        }).animate(animation, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    var effectsEffectSize = $.effects.define("size", function(options, done) {
        var baseline, factor, temp, element = $(this), cProps = ["fontSize"], vProps = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], hProps = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], mode = options.mode, restore = mode !== "effect", scale = options.scale || "both", origin = options.origin || ["middle", "center"], position = element.css("position"), pos = element.position(), original = $.effects.scaledDimensions(element), from = options.from || original, to = options.to || $.effects.scaledDimensions(element, 0);
        $.effects.createPlaceholder(element);
        if (mode === "show") {
            temp = from;
            from = to;
            to = temp
        }
        factor = {
            from: {
                y: from.height / original.height,
                x: from.width / original.width
            },
            to: {
                y: to.height / original.height,
                x: to.width / original.width
            }
        };
        if (scale === "box" || scale === "both") {
            if (factor.from.y !== factor.to.y) {
                from = $.effects.setTransition(element, vProps, factor.from.y, from);
                to = $.effects.setTransition(element, vProps, factor.to.y, to)
            }
            if (factor.from.x !== factor.to.x) {
                from = $.effects.setTransition(element, hProps, factor.from.x, from);
                to = $.effects.setTransition(element, hProps, factor.to.x, to)
            }
        }
        if (scale === "content" || scale === "both") {
            if (factor.from.y !== factor.to.y) {
                from = $.effects.setTransition(element, cProps, factor.from.y, from);
                to = $.effects.setTransition(element, cProps, factor.to.y, to)
            }
        }
        if (origin) {
            baseline = $.effects.getBaseline(origin, original);
            from.top = (original.outerHeight - from.outerHeight) * baseline.y + pos.top;
            from.left = (original.outerWidth - from.outerWidth) * baseline.x + pos.left;
            to.top = (original.outerHeight - to.outerHeight) * baseline.y + pos.top;
            to.left = (original.outerWidth - to.outerWidth) * baseline.x + pos.left
        }
        element.css(from);
        if (scale === "content" || scale === "both") {
            vProps = vProps.concat(["marginTop", "marginBottom"]).concat(cProps);
            hProps = hProps.concat(["marginLeft", "marginRight"]);
            element.find("*[width]").each(function() {
                var child = $(this)
                  , childOriginal = $.effects.scaledDimensions(child)
                  , childFrom = {
                    height: childOriginal.height * factor.from.y,
                    width: childOriginal.width * factor.from.x,
                    outerHeight: childOriginal.outerHeight * factor.from.y,
                    outerWidth: childOriginal.outerWidth * factor.from.x
                }
                  , childTo = {
                    height: childOriginal.height * factor.to.y,
                    width: childOriginal.width * factor.to.x,
                    outerHeight: childOriginal.height * factor.to.y,
                    outerWidth: childOriginal.width * factor.to.x
                };
                if (factor.from.y !== factor.to.y) {
                    childFrom = $.effects.setTransition(child, vProps, factor.from.y, childFrom);
                    childTo = $.effects.setTransition(child, vProps, factor.to.y, childTo)
                }
                if (factor.from.x !== factor.to.x) {
                    childFrom = $.effects.setTransition(child, hProps, factor.from.x, childFrom);
                    childTo = $.effects.setTransition(child, hProps, factor.to.x, childTo)
                }
                if (restore) {
                    $.effects.saveStyle(child)
                }
                child.css(childFrom);
                child.animate(childTo, options.duration, options.easing, function() {
                    if (restore) {
                        $.effects.restoreStyle(child)
                    }
                })
            })
        }
        element.animate(to, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: function() {
                var offset = element.offset();
                if (to.opacity === 0) {
                    element.css("opacity", from.opacity)
                }
                if (!restore) {
                    element.css("position", position === "static" ? "relative" : position).offset(offset);
                    $.effects.saveStyle(element)
                }
                done()
            }
        })
    });
    var effectsEffectScale = $.effects.define("scale", function(options, done) {
        var el = $(this)
          , mode = options.mode
          , percent = parseInt(options.percent, 10) || (parseInt(options.percent, 10) === 0 ? 0 : mode !== "effect" ? 0 : 100)
          , newOptions = $.extend(true, {
            from: $.effects.scaledDimensions(el),
            to: $.effects.scaledDimensions(el, percent, options.direction || "both"),
            origin: options.origin || ["middle", "center"]
        }, options);
        if (options.fade) {
            newOptions.from.opacity = 1;
            newOptions.to.opacity = 0
        }
        $.effects.effect.size.call(this, newOptions, done)
    });
    var effectsEffectPuff = $.effects.define("puff", "hide", function(options, done) {
        var newOptions = $.extend(true, {}, options, {
            fade: true,
            percent: parseInt(options.percent, 10) || 150
        });
        $.effects.effect.scale.call(this, newOptions, done)
    });
    var effectsEffectPulsate = $.effects.define("pulsate", "show", function(options, done) {
        var element = $(this)
          , mode = options.mode
          , show = mode === "show"
          , hide = mode === "hide"
          , showhide = show || hide
          , anims = (options.times || 5) * 2 + (showhide ? 1 : 0)
          , duration = options.duration / anims
          , animateTo = 0
          , i = 1
          , queuelen = element.queue().length;
        if (show || !element.is(":visible")) {
            element.css("opacity", 0).show();
            animateTo = 1
        }
        for (; i < anims; i++) {
            element.animate({
                opacity: animateTo
            }, duration, options.easing);
            animateTo = 1 - animateTo
        }
        element.animate({
            opacity: animateTo
        }, duration, options.easing);
        element.queue(done);
        $.effects.unshift(element, queuelen, anims + 1)
    });
    var effectsEffectShake = $.effects.define("shake", function(options, done) {
        var i = 1
          , element = $(this)
          , direction = options.direction || "left"
          , distance = options.distance || 20
          , times = options.times || 3
          , anims = times * 2 + 1
          , speed = Math.round(options.duration / anims)
          , ref = direction === "up" || direction === "down" ? "top" : "left"
          , positiveMotion = direction === "up" || direction === "left"
          , animation = {}
          , animation1 = {}
          , animation2 = {}
          , queuelen = element.queue().length;
        $.effects.createPlaceholder(element);
        animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
        animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2;
        animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2;
        element.animate(animation, speed, options.easing);
        for (; i < times; i++) {
            element.animate(animation1, speed, options.easing).animate(animation2, speed, options.easing)
        }
        element.animate(animation1, speed, options.easing).animate(animation, speed / 2, options.easing).queue(done);
        $.effects.unshift(element, queuelen, anims + 1)
    });
    var effectsEffectSlide = $.effects.define("slide", "show", function(options, done) {
        var startClip, startRef, element = $(this), map = {
            up: ["bottom", "top"],
            down: ["top", "bottom"],
            left: ["right", "left"],
            right: ["left", "right"]
        }, mode = options.mode, direction = options.direction || "left", ref = direction === "up" || direction === "down" ? "top" : "left", positiveMotion = direction === "up" || direction === "left", distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true), animation = {};
        $.effects.createPlaceholder(element);
        startClip = element.cssClip();
        startRef = element.position()[ref];
        animation[ref] = (positiveMotion ? -1 : 1) * distance + startRef;
        animation.clip = element.cssClip();
        animation.clip[map[direction][1]] = animation.clip[map[direction][0]];
        if (mode === "show") {
            element.cssClip(animation.clip);
            element.css(ref, animation[ref]);
            animation.clip = startClip;
            animation[ref] = startRef
        }
        element.animate(animation, {
            queue: false,
            duration: options.duration,
            easing: options.easing,
            complete: done
        })
    });
    var effect;
    if ($.uiBackCompat !== false) {
        effect = $.effects.define("transfer", function(options, done) {
            $(this).transfer(options, done)
        })
    }
    var effectsEffectTransfer = effect;
    $.ui.focusable = function(element, hasTabindex) {
        var map, mapName, img, focusableIfVisible, fieldset, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false
            }
            img = $("img[usemap='#" + mapName + "']");
            return img.length > 0 && img.is(":visible")
        }
        if (/^(input|select|textarea|button|object)$/.test(nodeName)) {
            focusableIfVisible = !element.disabled;
            if (focusableIfVisible) {
                fieldset = $(element).closest("fieldset")[0];
                if (fieldset) {
                    focusableIfVisible = !fieldset.disabled
                }
            }
        } else if ("a" === nodeName) {
            focusableIfVisible = element.href || hasTabindex
        } else {
            focusableIfVisible = hasTabindex
        }
        return focusableIfVisible && $(element).is(":visible") && visible($(element))
    }
    ;
    function visible(element) {
        var visibility = element.css("visibility");
        while (visibility === "inherit") {
            element = element.parent();
            visibility = element.css("visibility")
        }
        return visibility !== "hidden"
    }
    $.extend($.expr[":"], {
        focusable: function(element) {
            return $.ui.focusable(element, $.attr(element, "tabindex") != null)
        }
    });
    var focusable = $.ui.focusable;
    var form = $.fn.form = function() {
        return typeof this[0].form === "string" ? this.closest("form") : $(this[0].form)
    }
    ;
    var formResetMixin = $.ui.formResetMixin = {
        _formResetHandler: function() {
            var form = $(this);
            setTimeout(function() {
                var instances = form.data("ui-form-reset-instances");
                $.each(instances, function() {
                    this.refresh()
                })
            })
        },
        _bindFormResetHandler: function() {
            this.form = this.element.form();
            if (!this.form.length) {
                return
            }
            var instances = this.form.data("ui-form-reset-instances") || [];
            if (!instances.length) {
                this.form.on("reset.ui-form-reset", this._formResetHandler)
            }
            instances.push(this);
            this.form.data("ui-form-reset-instances", instances)
        },
        _unbindFormResetHandler: function() {
            if (!this.form.length) {
                return
            }
            var instances = this.form.data("ui-form-reset-instances");
            instances.splice($.inArray(this, instances), 1);
            if (instances.length) {
                this.form.data("ui-form-reset-instances", instances)
            } else {
                this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")
            }
        }
    };
    if ($.fn.jquery.substring(0, 3) === "1.7") {
        $.each(["Width", "Height"], function(i, name) {
            var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"]
              , type = name.toLowerCase()
              , orig = {
                innerWidth: $.fn.innerWidth,
                innerHeight: $.fn.innerHeight,
                outerWidth: $.fn.outerWidth,
                outerHeight: $.fn.outerHeight
            };
            function reduce(elem, size, border, margin) {
                $.each(side, function() {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0;
                    if (border) {
                        size -= parseFloat($.css(elem, "border" + this + "Width")) || 0
                    }
                    if (margin) {
                        size -= parseFloat($.css(elem, "margin" + this)) || 0
                    }
                });
                return size
            }
            $.fn["inner" + name] = function(size) {
                if (size === undefined) {
                    return orig["inner" + name].call(this)
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size) + "px")
                })
            }
            ;
            $.fn["outer" + name] = function(size, margin) {
                if (typeof size !== "number") {
                    return orig["outer" + name].call(this, size)
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size, true, margin) + "px")
                })
            }
        });
        $.fn.addBack = function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
        }
    }
    var keycode = $.ui.keyCode = {
        BACKSPACE: 8,
        COMMA: 188,
        DELETE: 46,
        DOWN: 40,
        END: 35,
        ENTER: 13,
        ESCAPE: 27,
        HOME: 36,
        LEFT: 37,
        PAGE_DOWN: 34,
        PAGE_UP: 33,
        PERIOD: 190,
        RIGHT: 39,
        SPACE: 32,
        TAB: 9,
        UP: 38
    };
    var escapeSelector = $.ui.escapeSelector = function() {
        var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;
        return function(selector) {
            return selector.replace(selectorEscape, "\\$1")
        }
    }();
    var labels = $.fn.labels = function() {
        var ancestor, selector, id, labels, ancestors;
        if (this[0].labels && this[0].labels.length) {
            return this.pushStack(this[0].labels)
        }
        labels = this.eq(0).parents("label");
        id = this.attr("id");
        if (id) {
            ancestor = this.eq(0).parents().last();
            ancestors = ancestor.add(ancestor.length ? ancestor.siblings() : this.siblings());
            selector = "label[for='" + $.ui.escapeSelector(id) + "']";
            labels = labels.add(ancestors.find(selector).addBack(selector))
        }
        return this.pushStack(labels)
    }
    ;
    var scrollParent = $.fn.scrollParent = function(includeHidden) {
        var position = this.css("position")
          , excludeStaticParent = position === "absolute"
          , overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/
          , scrollParent = this.parents().filter(function() {
            var parent = $(this);
            if (excludeStaticParent && parent.css("position") === "static") {
                return false
            }
            return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") + parent.css("overflow-x"))
        }).eq(0);
        return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent
    }
    ;
    var tabbable = $.extend($.expr[":"], {
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex")
              , hasTabindex = tabIndex != null;
            return (!hasTabindex || tabIndex >= 0) && $.ui.focusable(element, hasTabindex)
        }
    });
    var uniqueId = $.fn.extend({
        uniqueId: function() {
            var uuid = 0;
            return function() {
                return this.each(function() {
                    if (!this.id) {
                        this.id = "ui-id-" + ++uuid
                    }
                })
            }
        }(),
        removeUniqueId: function() {
            return this.each(function() {
                if (/^ui-id-\d+$/.test(this.id)) {
                    $(this).removeAttr("id")
                }
            })
        }
    });
    var widgetsAccordion = $.widget("ui.accordion", {
        version: "1.12.0",
        options: {
            active: 0,
            animate: {},
            classes: {
                "ui-accordion-header": "ui-corner-top",
                "ui-accordion-header-collapsed": "ui-corner-all",
                "ui-accordion-content": "ui-corner-bottom"
            },
            collapsible: false,
            event: "click",
            header: "> li > :first-child, > :not(li):even",
            heightStyle: "auto",
            icons: {
                activeHeader: "ui-icon-triangle-1-s",
                header: "ui-icon-triangle-1-e"
            },
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: "hide",
            borderBottomWidth: "hide",
            paddingTop: "hide",
            paddingBottom: "hide",
            height: "hide"
        },
        showProps: {
            borderTopWidth: "show",
            borderBottomWidth: "show",
            paddingTop: "show",
            paddingBottom: "show",
            height: "show"
        },
        _create: function() {
            var options = this.options;
            this.prevShow = this.prevHide = $();
            this._addClass("ui-accordion", "ui-widget ui-helper-reset");
            this.element.attr("role", "tablist");
            if (!options.collapsible && (options.active === false || options.active == null)) {
                options.active = 0
            }
            this._processPanels();
            if (options.active < 0) {
                options.active += this.headers.length
            }
            this._refresh()
        },
        _getCreateEventData: function() {
            return {
                header: this.active,
                panel: !this.active.length ? $() : this.active.next()
            }
        },
        _createIcons: function() {
            var icon, children, icons = this.options.icons;
            if (icons) {
                icon = $("<span>");
                this._addClass(icon, "ui-accordion-header-icon", "ui-icon " + icons.header);
                icon.prependTo(this.headers);
                children = this.active.children(".ui-accordion-header-icon");
                this._removeClass(children, icons.header)._addClass(children, null, icons.activeHeader)._addClass(this.headers, "ui-accordion-icons")
            }
        },
        _destroyIcons: function() {
            this._removeClass(this.headers, "ui-accordion-icons");
            this.headers.children(".ui-accordion-header-icon").remove()
        },
        _destroy: function() {
            var contents;
            this.element.removeAttr("role");
            this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId();
            this._destroyIcons();
            contents = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId();
            if (this.options.heightStyle !== "content") {
                contents.css("height", "")
            }
        },
        _setOption: function(key, value) {
            if (key === "active") {
                this._activate(value);
                return
            }
            if (key === "event") {
                if (this.options.event) {
                    this._off(this.headers, this.options.event)
                }
                this._setupEvents(value)
            }
            this._super(key, value);
            if (key === "collapsible" && !value && this.options.active === false) {
                this._activate(0)
            }
            if (key === "icons") {
                this._destroyIcons();
                if (value) {
                    this._createIcons()
                }
            }
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.element.attr("aria-disabled", value);
            this._toggleClass(null, "ui-state-disabled", !!value);
            this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!value)
        },
        _keydown: function(event) {
            if (event.altKey || event.ctrlKey) {
                return
            }
            var keyCode = $.ui.keyCode
              , length = this.headers.length
              , currentIndex = this.headers.index(event.target)
              , toFocus = false;
            switch (event.keyCode) {
            case keyCode.RIGHT:
            case keyCode.DOWN:
                toFocus = this.headers[(currentIndex + 1) % length];
                break;
            case keyCode.LEFT:
            case keyCode.UP:
                toFocus = this.headers[(currentIndex - 1 + length) % length];
                break;
            case keyCode.SPACE:
            case keyCode.ENTER:
                this._eventHandler(event);
                break;
            case keyCode.HOME:
                toFocus = this.headers[0];
                break;
            case keyCode.END:
                toFocus = this.headers[length - 1];
                break
            }
            if (toFocus) {
                $(event.target).attr("tabIndex", -1);
                $(toFocus).attr("tabIndex", 0);
                $(toFocus).trigger("focus");
                event.preventDefault()
            }
        },
        _panelKeyDown: function(event) {
            if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
                $(event.currentTarget).prev().trigger("focus")
            }
        },
        refresh: function() {
            var options = this.options;
            this._processPanels();
            if (options.active === false && options.collapsible === true || !this.headers.length) {
                options.active = false;
                this.active = $()
            } else if (options.active === false) {
                this._activate(0)
            } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {
                if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
                    options.active = false;
                    this.active = $()
                } else {
                    this._activate(Math.max(0, options.active - 1))
                }
            } else {
                options.active = this.headers.index(this.active)
            }
            this._destroyIcons();
            this._refresh()
        },
        _processPanels: function() {
            var prevHeaders = this.headers
              , prevPanels = this.panels;
            this.headers = this.element.find(this.options.header);
            this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default");
            this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide();
            this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content");
            if (prevPanels) {
                this._off(prevHeaders.not(this.headers));
                this._off(prevPanels.not(this.panels))
            }
        },
        _refresh: function() {
            var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent();
            this.active = this._findActive(options.active);
            this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed");
            this._addClass(this.active.next(), "ui-accordion-content-active");
            this.active.next().show();
            this.headers.attr("role", "tab").each(function() {
                var header = $(this)
                  , headerId = header.uniqueId().attr("id")
                  , panel = header.next()
                  , panelId = panel.uniqueId().attr("id");
                header.attr("aria-controls", panelId);
                panel.attr("aria-labelledby", headerId)
            }).next().attr("role", "tabpanel");
            this.headers.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            }).next().attr({
                "aria-hidden": "true"
            }).hide();
            if (!this.active.length) {
                this.headers.eq(0).attr("tabIndex", 0)
            } else {
                this.active.attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                }).next().attr({
                    "aria-hidden": "false"
                })
            }
            this._createIcons();
            this._setupEvents(options.event);
            if (heightStyle === "fill") {
                maxHeight = parent.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this)
                      , position = elem.css("position");
                    if (position === "absolute" || position === "fixed") {
                        return
                    }
                    maxHeight -= elem.outerHeight(true)
                });
                this.headers.each(function() {
                    maxHeight -= $(this).outerHeight(true)
                });
                this.headers.next().each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()))
                }).css("overflow", "auto")
            } else if (heightStyle === "auto") {
                maxHeight = 0;
                this.headers.next().each(function() {
                    var isVisible = $(this).is(":visible");
                    if (!isVisible) {
                        $(this).show()
                    }
                    maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
                    if (!isVisible) {
                        $(this).hide()
                    }
                }).height(maxHeight)
            }
        },
        _activate: function(index) {
            var active = this._findActive(index)[0];
            if (active === this.active[0]) {
                return
            }
            active = active || this.active[0];
            this._eventHandler({
                target: active,
                currentTarget: active,
                preventDefault: $.noop
            })
        },
        _findActive: function(selector) {
            return typeof selector === "number" ? this.headers.eq(selector) : $()
        },
        _setupEvents: function(event) {
            var events = {
                keydown: "_keydown"
            };
            if (event) {
                $.each(event.split(" "), function(index, eventName) {
                    events[eventName] = "_eventHandler"
                })
            }
            this._off(this.headers.add(this.headers.next()));
            this._on(this.headers, events);
            this._on(this.headers.next(), {
                keydown: "_panelKeyDown"
            });
            this._hoverable(this.headers);
            this._focusable(this.headers)
        },
        _eventHandler: function(event) {
            var activeChildren, clickedChildren, options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = {
                oldHeader: active,
                oldPanel: toHide,
                newHeader: collapsing ? $() : clicked,
                newPanel: toShow
            };
            event.preventDefault();
            if (clickedIsActive && !options.collapsible || this._trigger("beforeActivate", event, eventData) === false) {
                return
            }
            options.active = collapsing ? false : this.headers.index(clicked);
            this.active = clickedIsActive ? $() : clicked;
            this._toggle(eventData);
            this._removeClass(active, "ui-accordion-header-active", "ui-state-active");
            if (options.icons) {
                activeChildren = active.children(".ui-accordion-header-icon");
                this._removeClass(activeChildren, null, options.icons.activeHeader)._addClass(activeChildren, null, options.icons.header)
            }
            if (!clickedIsActive) {
                this._removeClass(clicked, "ui-accordion-header-collapsed")._addClass(clicked, "ui-accordion-header-active", "ui-state-active");
                if (options.icons) {
                    clickedChildren = clicked.children(".ui-accordion-header-icon");
                    this._removeClass(clickedChildren, null, options.icons.header)._addClass(clickedChildren, null, options.icons.activeHeader)
                }
                this._addClass(clicked.next(), "ui-accordion-content-active")
            }
        },
        _toggle: function(data) {
            var toShow = data.newPanel
              , toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
            this.prevShow.add(this.prevHide).stop(true, true);
            this.prevShow = toShow;
            this.prevHide = toHide;
            if (this.options.animate) {
                this._animate(toShow, toHide, data)
            } else {
                toHide.hide();
                toShow.show();
                this._toggleComplete(data)
            }
            toHide.attr({
                "aria-hidden": "true"
            });
            toHide.prev().attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            });
            if (toShow.length && toHide.length) {
                toHide.prev().attr({
                    tabIndex: -1,
                    "aria-expanded": "false"
                })
            } else if (toShow.length) {
                this.headers.filter(function() {
                    return parseInt($(this).attr("tabIndex"), 10) === 0
                }).attr("tabIndex", -1)
            }
            toShow.attr("aria-hidden", "false").prev().attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            })
        },
        _animate: function(toShow, toHide, data) {
            var total, easing, duration, that = this, adjust = 0, boxSizing = toShow.css("box-sizing"), down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
                that._toggleComplete(data)
            };
            if (typeof options === "number") {
                duration = options
            }
            if (typeof options === "string") {
                easing = options
            }
            easing = easing || options.easing || animate.easing;
            duration = duration || options.duration || animate.duration;
            if (!toHide.length) {
                return toShow.animate(this.showProps, duration, easing, complete)
            }
            if (!toShow.length) {
                return toHide.animate(this.hideProps, duration, easing, complete)
            }
            total = toShow.show().outerHeight();
            toHide.animate(this.hideProps, {
                duration: duration,
                easing: easing,
                step: function(now, fx) {
                    fx.now = Math.round(now)
                }
            });
            toShow.hide().animate(this.showProps, {
                duration: duration,
                easing: easing,
                complete: complete,
                step: function(now, fx) {
                    fx.now = Math.round(now);
                    if (fx.prop !== "height") {
                        if (boxSizing === "content-box") {
                            adjust += fx.now
                        }
                    } else if (that.options.heightStyle !== "content") {
                        fx.now = Math.round(total - toHide.outerHeight() - adjust);
                        adjust = 0
                    }
                }
            })
        },
        _toggleComplete: function(data) {
            var toHide = data.oldPanel
              , prev = toHide.prev();
            this._removeClass(toHide, "ui-accordion-content-active");
            this._removeClass(prev, "ui-accordion-header-active")._addClass(prev, "ui-accordion-header-collapsed");
            if (toHide.length) {
                toHide.parent()[0].className = toHide.parent()[0].className
            }
            this._trigger("activate", null, data)
        }
    });
    var safeActiveElement = $.ui.safeActiveElement = function(document) {
        var activeElement;
        try {
            activeElement = document.activeElement
        } catch (error) {
            activeElement = document.body
        }
        if (!activeElement) {
            activeElement = document.body
        }
        if (!activeElement.nodeName) {
            activeElement = document.body
        }
        return activeElement
    }
    ;
    var widgetsMenu = $.widget("ui.menu", {
        version: "1.12.0",
        defaultElement: "<ul>",
        delay: 300,
        options: {
            icons: {
                submenu: "ui-icon-caret-1-e"
            },
            items: "> *",
            menus: "ul",
            position: {
                my: "left top",
                at: "right top"
            },
            role: "menu",
            blur: null,
            focus: null,
            select: null
        },
        _create: function() {
            this.activeMenu = this.element;
            this.mouseHandled = false;
            this.element.uniqueId().attr({
                role: this.options.role,
                tabIndex: 0
            });
            this._addClass("ui-menu", "ui-widget ui-widget-content");
            this._on({
                "mousedown .ui-menu-item": function(event) {
                    event.preventDefault()
                },
                "click .ui-menu-item": function(event) {
                    var target = $(event.target);
                    var active = $($.ui.safeActiveElement(this.document[0]));
                    if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                        this.select(event);
                        if (!event.isPropagationStopped()) {
                            this.mouseHandled = true
                        }
                        if (target.has(".ui-menu").length) {
                            this.expand(event)
                        } else if (!this.element.is(":focus") && active.closest(".ui-menu").length) {
                            this.element.trigger("focus", [true]);
                            if (this.active && this.active.parents(".ui-menu").length === 1) {
                                clearTimeout(this.timer)
                            }
                        }
                    }
                },
                "mouseenter .ui-menu-item": function(event) {
                    if (this.previousFilter) {
                        return
                    }
                    var actualTarget = $(event.target).closest(".ui-menu-item")
                      , target = $(event.currentTarget);
                    if (actualTarget[0] !== target[0]) {
                        return
                    }
                    this._removeClass(target.siblings().children(".ui-state-active"), null, "ui-state-active");
                    this.focus(event, target)
                },
                mouseleave: "collapseAll",
                "mouseleave .ui-menu": "collapseAll",
                focus: function(event, keepActiveItem) {
                    var item = this.active || this.element.find(this.options.items).eq(0);
                    if (!keepActiveItem) {
                        this.focus(event, item)
                    }
                },
                blur: function(event) {
                    this._delay(function() {
                        var notContained = !$.contains(this.element[0], $.ui.safeActiveElement(this.document[0]));
                        if (notContained) {
                            this.collapseAll(event)
                        }
                    })
                },
                keydown: "_keydown"
            });
            this.refresh();
            this._on(this.document, {
                click: function(event) {
                    if (this._closeOnDocumentClick(event)) {
                        this.collapseAll(event)
                    }
                    this.mouseHandled = false
                }
            })
        },
        _destroy: function() {
            var items = this.element.find(".ui-menu-item").removeAttr("role aria-disabled")
              , submenus = items.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");
            this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled " + "tabIndex").removeUniqueId().show();
            submenus.children().each(function() {
                var elem = $(this);
                if (elem.data("ui-menu-submenu-caret")) {
                    elem.remove()
                }
            })
        },
        _keydown: function(event) {
            var match, prev, character, skip, preventDefault = true;
            switch (event.keyCode) {
            case $.ui.keyCode.PAGE_UP:
                this.previousPage(event);
                break;
            case $.ui.keyCode.PAGE_DOWN:
                this.nextPage(event);
                break;
            case $.ui.keyCode.HOME:
                this._move("first", "first", event);
                break;
            case $.ui.keyCode.END:
                this._move("last", "last", event);
                break;
            case $.ui.keyCode.UP:
                this.previous(event);
                break;
            case $.ui.keyCode.DOWN:
                this.next(event);
                break;
            case $.ui.keyCode.LEFT:
                this.collapse(event);
                break;
            case $.ui.keyCode.RIGHT:
                if (this.active && !this.active.is(".ui-state-disabled")) {
                    this.expand(event)
                }
                break;
            case $.ui.keyCode.ENTER:
            case $.ui.keyCode.SPACE:
                this._activate(event);
                break;
            case $.ui.keyCode.ESCAPE:
                this.collapse(event);
                break;
            default:
                preventDefault = false;
                prev = this.previousFilter || "";
                character = String.fromCharCode(event.keyCode);
                skip = false;
                clearTimeout(this.filterTimer);
                if (character === prev) {
                    skip = true
                } else {
                    character = prev + character
                }
                match = this._filterMenuItems(character);
                match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;
                if (!match.length) {
                    character = String.fromCharCode(event.keyCode);
                    match = this._filterMenuItems(character)
                }
                if (match.length) {
                    this.focus(event, match);
                    this.previousFilter = character;
                    this.filterTimer = this._delay(function() {
                        delete this.previousFilter
                    }, 1e3)
                } else {
                    delete this.previousFilter
                }
            }
            if (preventDefault) {
                event.preventDefault()
            }
        },
        _activate: function(event) {
            if (this.active && !this.active.is(".ui-state-disabled")) {
                if (this.active.children("[aria-haspopup='true']").length) {
                    this.expand(event)
                } else {
                    this.select(event)
                }
            }
        },
        refresh: function() {
            var menus, items, newSubmenus, newItems, newWrappers, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
            this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length);
            newSubmenus = submenus.filter(":not(.ui-menu)").hide().attr({
                role: this.options.role,
                "aria-hidden": "true",
                "aria-expanded": "false"
            }).each(function() {
                var menu = $(this)
                  , item = menu.prev()
                  , submenuCaret = $("<span>").data("ui-menu-submenu-caret", true);
                that._addClass(submenuCaret, "ui-menu-icon", "ui-icon " + icon);
                item.attr("aria-haspopup", "true").prepend(submenuCaret);
                menu.attr("aria-labelledby", item.attr("id"))
            });
            this._addClass(newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front");
            menus = submenus.add(this.element);
            items = menus.find(this.options.items);
            items.not(".ui-menu-item").each(function() {
                var item = $(this);
                if (that._isDivider(item)) {
                    that._addClass(item, "ui-menu-divider", "ui-widget-content")
                }
            });
            newItems = items.not(".ui-menu-item, .ui-menu-divider");
            newWrappers = newItems.children().not(".ui-menu").uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            });
            this._addClass(newItems, "ui-menu-item")._addClass(newWrappers, "ui-menu-item-wrapper");
            items.filter(".ui-state-disabled").attr("aria-disabled", "true");
            if (this.active && !$.contains(this.element[0], this.active[0])) {
                this.blur()
            }
        },
        _itemRole: function() {
            return {
                menu: "menuitem",
                listbox: "option"
            }[this.options.role]
        },
        _setOption: function(key, value) {
            if (key === "icons") {
                var icons = this.element.find(".ui-menu-icon");
                this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu)
            }
            this._super(key, value)
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.element.attr("aria-disabled", String(value));
            this._toggleClass(null, "ui-state-disabled", !!value)
        },
        focus: function(event, item) {
            var nested, focused, activeParent;
            this.blur(event, event && event.type === "focus");
            this._scrollIntoView(item);
            this.active = item.first();
            focused = this.active.children(".ui-menu-item-wrapper");
            this._addClass(focused, null, "ui-state-active");
            if (this.options.role) {
                this.element.attr("aria-activedescendant", focused.attr("id"))
            }
            activeParent = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper");
            this._addClass(activeParent, null, "ui-state-active");
            if (event && event.type === "keydown") {
                this._close()
            } else {
                this.timer = this._delay(function() {
                    this._close()
                }, this.delay)
            }
            nested = item.children(".ui-menu");
            if (nested.length && event && /^mouse/.test(event.type)) {
                this._startOpening(nested)
            }
            this.activeMenu = item.parent();
            this._trigger("focus", event, {
                item: item
            })
        },
        _scrollIntoView: function(item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();
                if (offset < 0) {
                    this.activeMenu.scrollTop(scroll + offset)
                } else if (offset + itemHeight > elementHeight) {
                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight)
                }
            }
        },
        blur: function(event, fromFocus) {
            if (!fromFocus) {
                clearTimeout(this.timer)
            }
            if (!this.active) {
                return
            }
            this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active");
            this._trigger("blur", event, {
                item: this.active
            });
            this.active = null
        },
        _startOpening: function(submenu) {
            clearTimeout(this.timer);
            if (submenu.attr("aria-hidden") !== "true") {
                return
            }
            this.timer = this._delay(function() {
                this._close();
                this._open(submenu)
            }, this.delay)
        },
        _open: function(submenu) {
            var position = $.extend({
                of: this.active
            }, this.options.position);
            clearTimeout(this.timer);
            this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
            submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position)
        },
        collapseAll: function(event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                if (!currentMenu.length) {
                    currentMenu = this.element
                }
                this._close(currentMenu);
                this.blur(event);
                this._removeClass(currentMenu.find(".ui-state-active"), null, "ui-state-active");
                this.activeMenu = currentMenu
            }, this.delay)
        },
        _close: function(startMenu) {
            if (!startMenu) {
                startMenu = this.active ? this.active.parent() : this.element
            }
            startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false")
        },
        _closeOnDocumentClick: function(event) {
            return !$(event.target).closest(".ui-menu").length
        },
        _isDivider: function(item) {
            return !/[^\-\u2014\u2013\s]/.test(item.text())
        },
        collapse: function(event) {
            var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem)
            }
        },
        expand: function(event) {
            var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
            if (newItem && newItem.length) {
                this._open(newItem.parent());
                this._delay(function() {
                    this.focus(event, newItem)
                })
            }
        },
        next: function(event) {
            this._move("next", "first", event)
        },
        previous: function(event) {
            this._move("prev", "last", event)
        },
        isFirstItem: function() {
            return this.active && !this.active.prevAll(".ui-menu-item").length
        },
        isLastItem: function() {
            return this.active && !this.active.nextAll(".ui-menu-item").length
        },
        _move: function(direction, filter, event) {
            var next;
            if (this.active) {
                if (direction === "first" || direction === "last") {
                    next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1)
                } else {
                    next = this.active[direction + "All"](".ui-menu-item").eq(0)
                }
            }
            if (!next || !next.length || !this.active) {
                next = this.activeMenu.find(this.options.items)[filter]()
            }
            this.focus(event, next)
        },
        nextPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return
            }
            if (this.isLastItem()) {
                return
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base - height < 0
                });
                this.focus(event, item)
            } else {
                this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? "first" : "last"]())
            }
        },
        previousPage: function(event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return
            }
            if (this.isFirstItem()) {
                return
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll(".ui-menu-item").each(function() {
                    item = $(this);
                    return item.offset().top - base + height > 0
                });
                this.focus(event, item)
            } else {
                this.focus(event, this.activeMenu.find(this.options.items).first())
            }
        },
        _hasScroll: function() {
            return this.element.outerHeight() < this.element.prop("scrollHeight")
        },
        select: function(event) {
            this.active = this.active || $(event.target).closest(".ui-menu-item");
            var ui = {
                item: this.active
            };
            if (!this.active.has(".ui-menu").length) {
                this.collapseAll(event, true)
            }
            this._trigger("select", event, ui)
        },
        _filterMenuItems: function(character) {
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
              , regex = new RegExp("^" + escapedCharacter,"i");
            return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
                return regex.test($.trim($(this).children(".ui-menu-item-wrapper").text()))
            })
        }
    });
    $.widget("ui.autocomplete", {
        version: "1.12.0",
        defaultElement: "<input>",
        options: {
            appendTo: null,
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function() {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = nodeName === "textarea", isInput = nodeName === "input";
            this.isMultiLine = isTextarea || !isInput && this._isContentEditable(this.element);
            this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
            this.isNewMenu = true;
            this._addClass("ui-autocomplete-input");
            this.element.attr("autocomplete", "off");
            this._on(this.element, {
                keydown: function(event) {
                    if (this.element.prop("readOnly")) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return
                    }
                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                    case keyCode.PAGE_UP:
                        suppressKeyPress = true;
                        this._move("previousPage", event);
                        break;
                    case keyCode.PAGE_DOWN:
                        suppressKeyPress = true;
                        this._move("nextPage", event);
                        break;
                    case keyCode.UP:
                        suppressKeyPress = true;
                        this._keyEvent("previous", event);
                        break;
                    case keyCode.DOWN:
                        suppressKeyPress = true;
                        this._keyEvent("next", event);
                        break;
                    case keyCode.ENTER:
                        if (this.menu.active) {
                            suppressKeyPress = true;
                            event.preventDefault();
                            this.menu.select(event)
                        }
                        break;
                    case keyCode.TAB:
                        if (this.menu.active) {
                            this.menu.select(event)
                        }
                        break;
                    case keyCode.ESCAPE:
                        if (this.menu.element.is(":visible")) {
                            if (!this.isMultiLine) {
                                this._value(this.term)
                            }
                            this.close(event);
                            event.preventDefault()
                        }
                        break;
                    default:
                        suppressKeyPressRepeat = true;
                        this._searchTimeout(event);
                        break
                    }
                },
                keypress: function(event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        if (!this.isMultiLine || this.menu.element.is(":visible")) {
                            event.preventDefault()
                        }
                        return
                    }
                    if (suppressKeyPressRepeat) {
                        return
                    }
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                    case keyCode.PAGE_UP:
                        this._move("previousPage", event);
                        break;
                    case keyCode.PAGE_DOWN:
                        this._move("nextPage", event);
                        break;
                    case keyCode.UP:
                        this._keyEvent("previous", event);
                        break;
                    case keyCode.DOWN:
                        this._keyEvent("next", event);
                        break
                    }
                },
                input: function(event) {
                    if (suppressInput) {
                        suppressInput = false;
                        event.preventDefault();
                        return
                    }
                    this._searchTimeout(event)
                },
                focus: function() {
                    this.selectedItem = null;
                    this.previous = this._value()
                },
                blur: function(event) {
                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return
                    }
                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event)
                }
            });
            this._initSource();
            this.menu = $("<ul>").appendTo(this._appendTo()).menu({
                role: null
            }).hide().menu("instance");
            this._addClass(this.menu.element, "ui-autocomplete", "ui-front");
            this._on(this.menu.element, {
                mousedown: function(event) {
                    event.preventDefault();
                    this.cancelBlur = true;
                    this._delay(function() {
                        delete this.cancelBlur;
                        if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {
                            this.element.trigger("focus")
                        }
                    })
                },
                menufocus: function(event, ui) {
                    var label, item;
                    if (this.isNewMenu) {
                        this.isNewMenu = false;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            this.document.one("mousemove", function() {
                                $(event.target).trigger(event.originalEvent)
                            });
                            return
                        }
                    }
                    item = ui.item.data("ui-autocomplete-item");
                    if (false !== this._trigger("focus", event, {
                        item: item
                    })) {
                        if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                            this._value(item.value)
                        }
                    }
                    label = ui.item.attr("aria-label") || item.value;
                    if (label && $.trim(label).length) {
                        this.liveRegion.children().hide();
                        $("<div>").text(label).appendTo(this.liveRegion)
                    }
                },
                menuselect: function(event, ui) {
                    var item = ui.item.data("ui-autocomplete-item")
                      , previous = this.previous;
                    if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) {
                        this.element.trigger("focus");
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous;
                            this.selectedItem = item
                        })
                    }
                    if (false !== this._trigger("select", event, {
                        item: item
                    })) {
                        this._value(item.value)
                    }
                    this.term = this._value();
                    this.close(event);
                    this.selectedItem = item
                }
            });
            this.liveRegion = $("<div>", {
                role: "status",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).appendTo(this.document[0].body);
            this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete")
                }
            })
        },
        _destroy: function() {
            clearTimeout(this.searching);
            this.element.removeAttr("autocomplete");
            this.menu.element.remove();
            this.liveRegion.remove()
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "source") {
                this._initSource()
            }
            if (key === "appendTo") {
                this.menu.element.appendTo(this._appendTo())
            }
            if (key === "disabled" && value && this.xhr) {
                this.xhr.abort()
            }
        },
        _isEventTargetInWidget: function(event) {
            var menuElement = this.menu.element[0];
            return event.target === this.element[0] || event.target === menuElement || $.contains(menuElement, event.target)
        },
        _closeOnClickOutside: function(event) {
            if (!this._isEventTargetInWidget(event)) {
                this.close()
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0)
            }
            if (!element || !element[0]) {
                element = this.element.closest(".ui-front, dialog")
            }
            if (!element.length) {
                element = this.document[0].body
            }
            return element
        },
        _initSource: function() {
            var array, url, that = this;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function(request, response) {
                    response($.ui.autocomplete.filter(array, request.term))
                }
            } else if (typeof this.options.source === "string") {
                url = this.options.source;
                this.source = function(request, response) {
                    if (that.xhr) {
                        that.xhr.abort()
                    }
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: "json",
                        success: function(data) {
                            response(data)
                        },
                        error: function() {
                            response([])
                        }
                    })
                }
            } else {
                this.source = this.options.source
            }
        },
        _searchTimeout: function(event) {
            clearTimeout(this.searching);
            this.searching = this._delay(function() {
                var equalValues = this.term === this._value()
                  , menuVisible = this.menu.element.is(":visible")
                  , modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
                if (!equalValues || equalValues && !menuVisible && !modifierKey) {
                    this.selectedItem = null;
                    this.search(null, event)
                }
            }, this.options.delay)
        },
        search: function(value, event) {
            value = value != null ? value : this._value();
            this.term = this._value();
            if (value.length < this.options.minLength) {
                return this.close(event)
            }
            if (this._trigger("search", event) === false) {
                return
            }
            return this._search(value)
        },
        _search: function(value) {
            this.pending++;
            this._addClass("ui-autocomplete-loading");
            this.cancelSearch = false;
            this.source({
                term: value
            }, this._response())
        },
        _response: function() {
            var index = ++this.requestIndex;
            return $.proxy(function(content) {
                if (index === this.requestIndex) {
                    this.__response(content)
                }
                this.pending--;
                if (!this.pending) {
                    this._removeClass("ui-autocomplete-loading")
                }
            }, this)
        },
        __response: function(content) {
            if (content) {
                content = this._normalize(content)
            }
            this._trigger("response", null, {
                content: content
            });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
                this._trigger("open")
            } else {
                this._close()
            }
        },
        close: function(event) {
            this.cancelSearch = true;
            this._close(event)
        },
        _close: function(event) {
            this._off(this.document, "mousedown");
            if (this.menu.element.is(":visible")) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = true;
                this._trigger("close", event)
            }
        },
        _change: function(event) {
            if (this.previous !== this._value()) {
                this._trigger("change", event, {
                    item: this.selectedItem
                })
            }
        },
        _normalize: function(items) {
            if (items.length && items[0].label && items[0].value) {
                return items
            }
            return $.map(items, function(item) {
                if (typeof item === "string") {
                    return {
                        label: item,
                        value: item
                    }
                }
                return $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                })
            })
        },
        _suggest: function(items) {
            var ul = this.menu.element.empty();
            this._renderMenu(ul, items);
            this.isNewMenu = true;
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({
                of: this.element
            }, this.options.position));
            if (this.options.autoFocus) {
                this.menu.next()
            }
            this._on(this.document, {
                mousedown: "_closeOnClickOutside"
            })
        },
        _resizeMenu: function() {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth()))
        },
        _renderMenu: function(ul, items) {
            var that = this;
            $.each(items, function(index, item) {
                that._renderItemData(ul, item)
            })
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-autocomplete-item", item)
        },
        _renderItem: function(ul, item) {
            return $("<li>").append($("<div>").text(item.label)).appendTo(ul)
        },
        _move: function(direction, event) {
            if (!this.menu.element.is(":visible")) {
                this.search(null, event);
                return
            }
            if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                if (!this.isMultiLine) {
                    this._value(this.term)
                }
                this.menu.blur();
                return
            }
            this.menu[direction](event)
        },
        widget: function() {
            return this.menu.element
        },
        _value: function() {
            return this.valueMethod.apply(this.element, arguments)
        },
        _keyEvent: function(keyEvent, event) {
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
                this._move(keyEvent, event);
                event.preventDefault()
            }
        },
        _isContentEditable: function(element) {
            if (!element.length) {
                return false
            }
            var editable = element.prop("contentEditable");
            if (editable === "inherit") {
                return this._isContentEditable(element.parent())
            }
            return editable === "true"
        }
    });
    $.extend($.ui.autocomplete, {
        escapeRegex: function(value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
        },
        filter: function(array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term),"i");
            return $.grep(array, function(value) {
                return matcher.test(value.label || value.value || value)
            })
        }
    });
    $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: {
            messages: {
                noResults: "No search results.",
                results: function(amount) {
                    return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate."
                }
            }
        },
        __response: function(content) {
            var message;
            this._superApply(arguments);
            if (this.options.disabled || this.cancelSearch) {
                return
            }
            if (content && content.length) {
                message = this.options.messages.results(content.length)
            } else {
                message = this.options.messages.noResults
            }
            this.liveRegion.children().hide();
            $("<div>").text(message).appendTo(this.liveRegion)
        }
    });
    var widgetsAutocomplete = $.ui.autocomplete;
    var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g;
    var widgetsControlgroup = $.widget("ui.controlgroup", {
        version: "1.12.0",
        defaultElement: "<div>",
        options: {
            direction: "horizontal",
            disabled: null,
            onlyVisible: true,
            items: {
                button: "input[type=button], input[type=submit], input[type=reset], button, a",
                controlgroupLabel: ".ui-controlgroup-label",
                checkboxradio: "input[type='checkbox'], input[type='radio']",
                selectmenu: "select",
                spinner: ".ui-spinner-input"
            }
        },
        _create: function() {
            this._enhance()
        },
        _enhance: function() {
            this.element.attr("role", "toolbar");
            this.refresh()
        },
        _destroy: function() {
            this._callChildMethod("destroy");
            this.childWidgets.removeData("ui-controlgroup-data");
            this.element.removeAttr("role");
            if (this.options.items.controlgroupLabel) {
                this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap()
            }
        },
        _initWidgets: function() {
            var that = this
              , childWidgets = [];
            $.each(this.options.items, function(widget, selector) {
                var labels;
                var options = {};
                if (!selector) {
                    return
                }
                if (widget === "controlgroupLabel") {
                    labels = that.element.find(selector);
                    labels.each(function() {
                        var element = $(this);
                        if (element.children(".ui-controlgroup-label-contents").length) {
                            return
                        }
                        element.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>")
                    });
                    that._addClass(labels, null, "ui-widget ui-widget-content ui-state-default");
                    childWidgets = childWidgets.concat(labels.get());
                    return
                }
                if (!$.fn[widget]) {
                    return
                }
                if (that["_" + widget + "Options"]) {
                    options = that["_" + widget + "Options"]("middle")
                }
                that.element.find(selector).each(function() {
                    var element = $(this);
                    var instance = element[widget]("instance");
                    var instanceOptions = $.widget.extend({}, options);
                    if (widget === "button" && element.parent(".ui-spinner").length) {
                        return
                    }
                    if (!instance) {
                        instance = element[widget]()[widget]("instance")
                    }
                    if (instance) {
                        instanceOptions.classes = that._resolveClassesValues(instanceOptions.classes, instance)
                    }
                    element[widget](instanceOptions);
                    var widgetElement = element[widget]("widget");
                    $.data(widgetElement[0], "ui-controlgroup-data", instance ? instance : element[widget]("instance"));
                    childWidgets.push(widgetElement[0])
                })
            });
            this.childWidgets = $($.unique(childWidgets));
            this._addClass(this.childWidgets, "ui-controlgroup-item")
        },
        _callChildMethod: function(method) {
            this.childWidgets.each(function() {
                var element = $(this)
                  , data = element.data("ui-controlgroup-data");
                if (data && data[method]) {
                    data[method]()
                }
            })
        },
        _updateCornerClass: function(element, position) {
            var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all";
            var add = this._buildSimpleOptions(position, "label").classes.label;
            this._removeClass(element, null, remove);
            this._addClass(element, null, add)
        },
        _buildSimpleOptions: function(position, key) {
            var direction = this.options.direction === "vertical";
            var result = {
                classes: {}
            };
            result.classes[key] = {
                middle: "",
                first: "ui-corner-" + (direction ? "top" : "left"),
                last: "ui-corner-" + (direction ? "bottom" : "right"),
                only: "ui-corner-all"
            }[position];
            return result
        },
        _spinnerOptions: function(position) {
            var options = this._buildSimpleOptions(position, "ui-spinner");
            options.classes["ui-spinner-up"] = "";
            options.classes["ui-spinner-down"] = "";
            return options
        },
        _buttonOptions: function(position) {
            return this._buildSimpleOptions(position, "ui-button")
        },
        _checkboxradioOptions: function(position) {
            return this._buildSimpleOptions(position, "ui-checkboxradio-label")
        },
        _selectmenuOptions: function(position) {
            var direction = this.options.direction === "vertical";
            return {
                width: direction ? "auto" : false,
                classes: {
                    middle: {
                        "ui-selectmenu-button-open": "",
                        "ui-selectmenu-button-closed": ""
                    },
                    first: {
                        "ui-selectmenu-button-open": "ui-corner-" + (direction ? "top" : "tl"),
                        "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "top" : "left")
                    },
                    last: {
                        "ui-selectmenu-button-open": direction ? "" : "ui-corner-tr",
                        "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "bottom" : "right")
                    },
                    only: {
                        "ui-selectmenu-button-open": "ui-corner-top",
                        "ui-selectmenu-button-closed": "ui-corner-all"
                    }
                }[position]
            }
        },
        _resolveClassesValues: function(classes, instance) {
            var result = {};
            $.each(classes, function(key) {
                var current = instance.options.classes[key] || "";
                current = current.replace(controlgroupCornerRegex, "").trim();
                result[key] = (current + " " + classes[key]).replace(/\s+/g, " ")
            });
            return result
        },
        _setOption: function(key, value) {
            if (key === "direction") {
                this._removeClass("ui-controlgroup-" + this.options.direction)
            }
            this._super(key, value);
            if (key === "disabled") {
                this._callChildMethod(value ? "disable" : "enable");
                return
            }
            this.refresh()
        },
        refresh: function() {
            var children, that = this;
            this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction);
            if (this.options.direction === "horizontal") {
                this._addClass(null, "ui-helper-clearfix")
            }
            this._initWidgets();
            children = this.childWidgets;
            if (this.options.onlyVisible) {
                children = children.filter(":visible")
            }
            if (children.length) {
                $.each(["first", "last"], function(index, value) {
                    var instance = children[value]().data("ui-controlgroup-data");
                    if (instance && that["_" + instance.widgetName + "Options"]) {
                        var options = that["_" + instance.widgetName + "Options"](children.length === 1 ? "only" : value);
                        options.classes = that._resolveClassesValues(options.classes, instance);
                        instance.element[instance.widgetName](options)
                    } else {
                        that._updateCornerClass(children[value](), value)
                    }
                });
                this._callChildMethod("refresh")
            }
        }
    });
    $.widget("ui.checkboxradio", [$.ui.formResetMixin, {
        version: "1.12.0",
        options: {
            disabled: null,
            label: null,
            icon: true,
            classes: {
                "ui-checkboxradio-label": "ui-corner-all",
                "ui-checkboxradio-icon": "ui-corner-all"
            }
        },
        _getCreateOptions: function() {
            var disabled, labels;
            var that = this;
            var options = this._super() || {};
            this._readType();
            labels = this.element.labels();
            this.label = $(labels[labels.length - 1]);
            if (!this.label.length) {
                $.error("No label found for checkboxradio widget")
            }
            this.originalLabel = "";
            this.label.contents().not(this.element).each(function() {
                that.originalLabel += this.nodeType === 3 ? $(this).text() : this.outerHTML
            });
            if (this.originalLabel) {
                options.label = this.originalLabel
            }
            disabled = this.element[0].disabled;
            if (disabled != null) {
                options.disabled = disabled
            }
            return options
        },
        _create: function() {
            var checked = this.element[0].checked;
            this._bindFormResetHandler();
            if (this.options.disabled == null) {
                this.options.disabled = this.element[0].disabled
            }
            this._setOption("disabled", this.options.disabled);
            this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible");
            this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget");
            if (this.type === "radio") {
                this._addClass(this.label, "ui-checkboxradio-radio-label")
            }
            if (this.options.label && this.options.label !== this.originalLabel) {
                this._updateLabel()
            } else if (this.originalLabel) {
                this.options.label = this.originalLabel
            }
            this._enhance();
            if (checked) {
                this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active");
                if (this.icon) {
                    this._addClass(this.icon, null, "ui-state-hover")
                }
            }
            this._on({
                change: "_toggleClasses",
                focus: function() {
                    this._addClass(this.label, null, "ui-state-focus ui-visual-focus")
                },
                blur: function() {
                    this._removeClass(this.label, null, "ui-state-focus ui-visual-focus")
                }
            })
        },
        _readType: function() {
            var nodeName = this.element[0].nodeName.toLowerCase();
            this.type = this.element[0].type;
            if (nodeName !== "input" || !/radio|checkbox/.test(this.type)) {
                $.error("Can't create checkboxradio on element.nodeName=" + nodeName + " and element.type=" + this.type)
            }
        },
        _enhance: function() {
            this._updateIcon(this.element[0].checked)
        },
        widget: function() {
            return this.label
        },
        _getRadioGroup: function() {
            var group;
            var name = this.element[0].name;
            var nameSelector = "input[name='" + $.ui.escapeSelector(name) + "']";
            if (!name) {
                return $([])
            }
            if (this.form.length) {
                group = $(this.form[0].elements).filter(nameSelector)
            } else {
                group = $(nameSelector).filter(function() {
                    return $(this).form().length === 0
                })
            }
            return group.not(this.element)
        },
        _toggleClasses: function() {
            var checked = this.element[0].checked;
            this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
            if (this.options.icon && this.type === "checkbox") {
                this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", checked)._toggleClass(this.icon, null, "ui-icon-blank", !checked)
            }
            if (this.type === "radio") {
                this._getRadioGroup().each(function() {
                    var instance = $(this).checkboxradio("instance");
                    if (instance) {
                        instance._removeClass(instance.label, "ui-checkboxradio-checked", "ui-state-active")
                    }
                })
            }
        },
        _destroy: function() {
            this._unbindFormResetHandler();
            if (this.icon) {
                this.icon.remove();
                this.iconSpace.remove()
            }
        },
        _setOption: function(key, value) {
            if (key === "label" && !value) {
                return
            }
            this._super(key, value);
            if (key === "disabled") {
                this._toggleClass(this.label, null, "ui-state-disabled", value);
                this.element[0].disabled = value;
                return
            }
            this.refresh()
        },
        _updateIcon: function(checked) {
            var toAdd = "ui-icon ui-icon-background ";
            if (this.options.icon) {
                if (!this.icon) {
                    this.icon = $("<span>");
                    this.iconSpace = $("<span> </span>");
                    this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")
                }
                if (this.type === "checkbox") {
                    toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank";
                    this._removeClass(this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check")
                } else {
                    toAdd += "ui-icon-blank"
                }
                this._addClass(this.icon, "ui-checkboxradio-icon", toAdd);
                if (!checked) {
                    this._removeClass(this.icon, null, "ui-icon-check ui-state-checked")
                }
                this.icon.prependTo(this.label).after(this.iconSpace)
            } else if (this.icon !== undefined) {
                this.icon.remove();
                this.iconSpace.remove();
                delete this.icon
            }
        },
        _updateLabel: function() {
            this.label.contents().not(this.element.add(this.icon).add(this.iconSpace)).remove();
            this.label.append(this.options.label)
        },
        refresh: function() {
            var checked = this.element[0].checked
              , isDisabled = this.element[0].disabled;
            this._updateIcon(checked);
            this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked);
            if (this.options.label !== null) {
                this._updateLabel()
            }
            if (isDisabled !== this.options.disabled) {
                this._setOptions({
                    disabled: isDisabled
                })
            }
        }
    }]);
    var widgetsCheckboxradio = $.ui.checkboxradio;
    $.widget("ui.button", {
        version: "1.12.0",
        defaultElement: "<button>",
        options: {
            classes: {
                "ui-button": "ui-corner-all"
            },
            disabled: null,
            icon: null,
            iconPosition: "beginning",
            label: null,
            showLabel: true
        },
        _getCreateOptions: function() {
            var disabled, options = this._super() || {};
            this.isInput = this.element.is("input");
            disabled = this.element[0].disabled;
            if (disabled != null) {
                options.disabled = disabled
            }
            this.originalLabel = this.isInput ? this.element.val() : this.element.html();
            if (this.originalLabel) {
                options.label = this.originalLabel
            }
            return options
        },
        _create: function() {
            if (!this.option.showLabel & !this.options.icon) {
                this.options.showLabel = true
            }
            if (this.options.disabled == null) {
                this.options.disabled = this.element[0].disabled || false
            }
            this.hasTitle = !!this.element.attr("title");
            if (this.options.label && this.options.label !== this.originalLabel) {
                if (this.isInput) {
                    this.element.val(this.options.label)
                } else {
                    this.element.html(this.options.label)
                }
            }
            this._addClass("ui-button", "ui-widget");
            this._setOption("disabled", this.options.disabled);
            this._enhance();
            if (this.element.is("a")) {
                this._on({
                    keyup: function(event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            event.preventDefault();
                            if (this.element[0].click) {
                                this.element[0].click()
                            } else {
                                this.element.trigger("click")
                            }
                        }
                    }
                })
            }
        },
        _enhance: function() {
            if (!this.element.is("button")) {
                this.element.attr("role", "button")
            }
            if (this.options.icon) {
                this._updateIcon("icon", this.options.icon);
                this._updateTooltip()
            }
        },
        _updateTooltip: function() {
            this.title = this.element.attr("title");
            if (!this.options.showLabel && !this.title) {
                this.element.attr("title", this.options.label)
            }
        },
        _updateIcon: function(option, value) {
            var icon = option !== "iconPosition"
              , position = icon ? this.options.iconPosition : value
              , displayBlock = position === "top" || position === "bottom";
            if (!this.icon) {
                this.icon = $("<span>");
                this._addClass(this.icon, "ui-button-icon", "ui-icon");
                if (!this.options.showLabel) {
                    this._addClass("ui-button-icon-only")
                }
            } else if (icon) {
                this._removeClass(this.icon, null, this.options.icon)
            }
            if (icon) {
                this._addClass(this.icon, null, value)
            }
            this._attachIcon(position);
            if (displayBlock) {
                this._addClass(this.icon, null, "ui-widget-icon-block");
                if (this.iconSpace) {
                    this.iconSpace.remove()
                }
            } else {
                if (!this.iconSpace) {
                    this.iconSpace = $("<span> </span>");
                    this._addClass(this.iconSpace, "ui-button-icon-space")
                }
                this._removeClass(this.icon, null, "ui-wiget-icon-block");
                this._attachIconSpace(position)
            }
        },
        _destroy: function() {
            this.element.removeAttr("role");
            if (this.icon) {
                this.icon.remove()
            }
            if (this.iconSpace) {
                this.iconSpace.remove()
            }
            if (!this.hasTitle) {
                this.element.removeAttr("title")
            }
        },
        _attachIconSpace: function(iconPosition) {
            this.icon[/^(?:end|bottom)/.test(iconPosition) ? "before" : "after"](this.iconSpace)
        },
        _attachIcon: function(iconPosition) {
            this.element[/^(?:end|bottom)/.test(iconPosition) ? "append" : "prepend"](this.icon)
        },
        _setOptions: function(options) {
            var newShowLabel = options.showLabel === undefined ? this.options.showLabel : options.showLabel
              , newIcon = options.icon === undefined ? this.options.icon : options.icon;
            if (!newShowLabel && !newIcon) {
                options.showLabel = true
            }
            this._super(options)
        },
        _setOption: function(key, value) {
            if (key === "icon") {
                if (value) {
                    this._updateIcon(key, value)
                } else if (this.icon) {
                    this.icon.remove();
                    if (this.iconSpace) {
                        this.iconSpace.remove()
                    }
                }
            }
            if (key === "iconPosition") {
                this._updateIcon(key, value)
            }
            if (key === "showLabel") {
                this._toggleClass("ui-button-icon-only", null, !value);
                this._updateTooltip()
            }
            if (key === "label") {
                if (this.isInput) {
                    this.element.val(value)
                } else {
                    this.element.html(value);
                    if (this.icon) {
                        this._attachIcon(this.options.iconPosition);
                        this._attachIconSpace(this.options.iconPosition)
                    }
                }
            }
            this._super(key, value);
            if (key === "disabled") {
                this._toggleClass(null, "ui-state-disabled", value);
                this.element[0].disabled = value;
                if (value) {
                    this.element.blur()
                }
            }
        },
        refresh: function() {
            var isDisabled = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");
            if (isDisabled !== this.options.disabled) {
                this._setOptions({
                    disabled: isDisabled
                })
            }
            this._updateTooltip()
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.button", $.ui.button, {
            options: {
                text: true,
                icons: {
                    primary: null,
                    secondary: null
                }
            },
            _create: function() {
                if (this.options.showLabel && !this.options.text) {
                    this.options.showLabel = this.options.text
                }
                if (!this.options.showLabel && this.options.text) {
                    this.options.text = this.options.showLabel
                }
                if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) {
                    if (this.options.icons.primary) {
                        this.options.icon = this.options.icons.primary
                    } else {
                        this.options.icon = this.options.icons.secondary;
                        this.options.iconPosition = "end"
                    }
                } else if (this.options.icon) {
                    this.options.icons.primary = this.options.icon
                }
                this._super()
            },
            _setOption: function(key, value) {
                if (key === "text") {
                    this._super("showLabel", value);
                    return
                }
                if (key === "showLabel") {
                    this.options.text = value
                }
                if (key === "icon") {
                    this.options.icons.primary = value
                }
                if (key === "icons") {
                    if (value.primary) {
                        this._super("icon", value.primary);
                        this._super("iconPosition", "beginning")
                    } else if (value.secondary) {
                        this._super("icon", value.secondary);
                        this._super("iconPosition", "end")
                    }
                }
                this._superApply(arguments)
            }
        });
        $.fn.button = function(orig) {
            return function() {
                if (!this.length || this.length && this[0].tagName !== "INPUT" || this.length && this[0].tagName === "INPUT" && (this.attr("type") !== "checkbox" && this.attr("type") !== "radio")) {
                    return orig.apply(this, arguments)
                }
                if (!$.ui.checkboxradio) {
                    $.error("Checkboxradio widget missing")
                }
                if (arguments.length === 0) {
                    return this.checkboxradio({
                        icon: false
                    })
                }
                return this.checkboxradio.apply(this, arguments)
            }
        }($.fn.button);
        $.fn.buttonset = function() {
            if (!$.ui.controlgroup) {
                $.error("Controlgroup widget missing")
            }
            if (arguments[0] === "option" && arguments[1] === "items" && arguments[2]) {
                return this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]])
            }
            if (arguments[0] === "option" && arguments[1] === "items") {
                return this.controlgroup.apply(this, [arguments[0], "items.button"])
            }
            if (typeof arguments[0] === "object" && arguments[0].items) {
                arguments[0].items = {
                    button: arguments[0].items
                }
            }
            return this.controlgroup.apply(this, arguments)
        }
    }
    var widgetsButton = $.ui.button;
    $.extend($.ui, {
        datepicker: {
            version: "1.12.0"
        }
    });
    var datepicker_instActive;
    function datepicker_getZindex(elem) {
        var position, value;
        while (elem.length && elem[0] !== document) {
            position = elem.css("position");
            if (position === "absolute" || position === "relative" || position === "fixed") {
                value = parseInt(elem.css("zIndex"), 10);
                if (!isNaN(value) && value !== 0) {
                    return value
                }
            }
            elem = elem.parent()
        }
        return 0
    }
    function Datepicker() {
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            yearRange: "c-10:c+10",
            showOtherMonths: false,
            selectOtherMonths: false,
            showWeek: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: true,
            showButtonPanel: false,
            autoSize: false,
            disabled: false
        };
        $.extend(this._defaults, this.regional[""]);
        this.regional.en = $.extend(true, {}, this.regional[""]);
        this.regional["en-US"] = $.extend(true, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
    }
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function() {
            return this.dpDiv
        },
        setDefaults: function(settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this
        },
        _attachDatepicker: function(target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = nodeName === "div" || nodeName === "span";
            if (!target.id) {
                this.uuid += 1;
                target.id = "dp" + this.uuid
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            if (nodeName === "input") {
                this._connectDatepicker(target, inst)
            } else if (inline) {
                this._inlineDatepicker(target, inst)
            }
        },
        _newInst: function(target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: !inline ? this.dpDiv : datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
            }
        },
        _connectDatepicker: function(target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp);
            this._autoSize(inst);
            $.data(target, "datepicker", inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target)
            }
        },
        _attachments: function(input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL");
            if (inst.append) {
                inst.append.remove()
            }
            if (appendText) {
                inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                input[isRTL ? "before" : "after"](inst.append)
            }
            input.off("focus", this._showDatepicker);
            if (inst.trigger) {
                inst.trigger.remove()
            }
            showOn = this._get(inst, "showOn");
            if (showOn === "focus" || showOn === "both") {
                input.on("focus", this._showDatepicker)
            }
            if (showOn === "button" || showOn === "both") {
                buttonText = this._get(inst, "buttonText");
                buttonImage = this._get(inst, "buttonImage");
                inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                })));
                input[isRTL ? "before" : "after"](inst.trigger);
                inst.trigger.on("click", function() {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                        $.datepicker._hideDatepicker()
                    } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0])
                    } else {
                        $.datepicker._showDatepicker(input[0])
                    }
                    return false
                })
            }
        },
        _autoSize: function(inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009,12 - 1,20), dateFormat = this._get(inst, "dateFormat");
                if (dateFormat.match(/[DM]/)) {
                    findMax = function(names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i
                            }
                        }
                        return maxI
                    }
                    ;
                    date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
                    date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay())
                }
                inst.input.attr("size", this._formatDate(inst, date).length)
            }
        },
        _inlineDatepicker: function(target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, "datepicker", inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target)
            }
            inst.dpDiv.css("display", "block")
        },
        _dialogDatepicker: function(input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
            if (!inst) {
                this.uuid += 1;
                id = "dp" + this.uuid;
                this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.on("keydown", this._doKeyDown);
                $("body").append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], "datepicker", inst)
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
            this._dialogInput.val(date);
            this._pos = pos ? pos.length ? pos : [pos.pageX, pos.pageY] : null;
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY]
            }
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv)
            }
            $.data(this._dialogInput[0], "datepicker", inst);
            return this
        },
        _destroyDatepicker: function(target) {
            var nodeName, $target = $(target), inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, "datepicker");
            if (nodeName === "input") {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)
            } else if (nodeName === "div" || nodeName === "span") {
                $target.removeClass(this.markerClassName).empty()
            }
            if (datepicker_instActive === inst) {
                datepicker_instActive = null
            }
        },
        _enableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = false;
                inst.trigger.filter("button").each(function() {
                    this.disabled = false
                }).end().filter("img").css({
                    opacity: "1.0",
                    cursor: ""
                })
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().removeClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false)
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value
            })
        },
        _disableDatepicker: function(target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker");
            if (!$target.hasClass(this.markerClassName)) {
                return
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === "input") {
                target.disabled = true;
                inst.trigger.filter("button").each(function() {
                    this.disabled = true
                }).end().filter("img").css({
                    opacity: "0.5",
                    cursor: "default"
                })
            } else if (nodeName === "div" || nodeName === "span") {
                inline = $target.children("." + this._inlineClass);
                inline.children().addClass("ui-state-disabled");
                inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true)
            }
            this._disabledInputs = $.map(this._disabledInputs, function(value) {
                return value === target ? null : value
            });
            this._disabledInputs[this._disabledInputs.length] = target
        },
        _isDisabledDatepicker: function(target) {
            if (!target) {
                return false
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true
                }
            }
            return false
        },
        _getInst: function(target) {
            try {
                return $.data(target, "datepicker")
            } catch (err) {
                throw "Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function(target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target);
            if (arguments.length === 2 && typeof name === "string") {
                return name === "defaults" ? $.extend({}, $.datepicker._defaults) : inst ? name === "all" ? $.extend({}, inst.settings) : this._get(inst, name) : null
            }
            settings = name || {};
            if (typeof name === "string") {
                settings = {};
                settings[name] = value
            }
            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker()
                }
                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, "min");
                maxDate = this._getMinMaxDate(inst, "max");
                datepicker_extendRemove(inst.settings, settings);
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate)
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate)
                }
                if ("disabled"in settings) {
                    if (settings.disabled) {
                        this._disableDatepicker(target)
                    } else {
                        this._enableDatepicker(target)
                    }
                }
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst)
            }
        },
        _changeDatepicker: function(target, name, value) {
            this._optionDatepicker(target, name, value)
        },
        _refreshDatepicker: function(target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst)
            }
        },
        _setDateDatepicker: function(target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst)
            }
        },
        _getDateDatepicker: function(target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault)
            }
            return inst ? this._getDate(inst) : null
        },
        _doKeyDown: function(event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = true, isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                case 9:
                    $.datepicker._hideDatepicker();
                    handled = false;
                    break;
                case 13:
                    sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
                    if (sel[0]) {
                        $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0])
                    }
                    onSelect = $.datepicker._get(inst, "onSelect");
                    if (onSelect) {
                        dateStr = $.datepicker._formatDate(inst);
                        onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst])
                    } else {
                        $.datepicker._hideDatepicker()
                    }
                    return false;
                case 27:
                    $.datepicker._hideDatepicker();
                    break;
                case 33:
                    $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                    break;
                case 34:
                    $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                    break;
                case 35:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._clearDate(event.target)
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 36:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._gotoToday(event.target)
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 37:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M")
                    }
                    break;
                case 38:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, -7, "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 39:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M")
                    }
                    break;
                case 40:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, +7, "D")
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                default:
                    handled = false
                }
            } else if (event.keyCode === 36 && event.ctrlKey) {
                $.datepicker._showDatepicker(this)
            } else {
                handled = false
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation()
            }
        },
        _doKeyPress: function(event) {
            var chars, chr, inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, "constrainInput")) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1)
            }
        },
        _doKeyUp: function(event) {
            var date, inst = $.datepicker._getInst(event.target);
            if (inst.input.val() !== inst.lastVal) {
                try {
                    date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));
                    if (date) {
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst)
                    }
                } catch (err) {}
            }
            return true
        },
        _showDatepicker: function(input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() !== "input") {
                input = $("input", input.parentNode)[0]
            }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
                return
            }
            var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if (inst && $.datepicker._datepickerShowing) {
                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0])
                }
            }
            beforeShow = $.datepicker._get(inst, "beforeShow");
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
            if (beforeShowSettings === false) {
                return
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) {
                input.value = ""
            }
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight
            }
            isFixed = false;
            $(input).parents().each(function() {
                isFixed |= $(this).css("position") === "fixed";
                return !isFixed
            });
            offset = {
                left: $.datepicker._pos[0],
                top: $.datepicker._pos[1]
            };
            $.datepicker._pos = null;
            inst.dpDiv.empty();
            inst.dpDiv.css({
                position: "absolute",
                display: "block",
                top: "-1000px"
            });
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                display: "none",
                left: offset.left + "px",
                top: offset.top + "px"
            });
            if (!inst.inline) {
                showAnim = $.datepicker._get(inst, "showAnim");
                duration = $.datepicker._get(inst, "duration");
                inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1);
                $.datepicker._datepickerShowing = true;
                if ($.effects && $.effects.effect[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration)
                } else {
                    inst.dpDiv[showAnim || "show"](showAnim ? duration : null)
                }
                if ($.datepicker._shouldFocusInput(inst)) {
                    inst.input.trigger("focus")
                }
                $.datepicker._curInst = inst
            }
        },
        _updateDatepicker: function(inst) {
            this.maxRows = 4;
            datepicker_instActive = inst;
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);
            var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a");
            if (activeCell.length > 0) {
                datepicker_handleMouseover.apply(activeCell.get(0))
            }
            inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            if (cols > 1) {
                inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em")
            }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
                inst.input.trigger("focus")
            }
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml;
                setTimeout(function() {
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml)
                    }
                    origyearshtml = inst.yearshtml = null
                }, 0)
            }
        },
        _shouldFocusInput: function(inst) {
            return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus")
        },
        _checkOffset: function(inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth()
              , dpHeight = inst.dpDiv.outerHeight()
              , inputWidth = inst.input ? inst.input.outerWidth() : 0
              , inputHeight = inst.input ? inst.input.outerHeight() : 0
              , viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft())
              , viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
            offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
            offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
            offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
            return offset
        },
        _findPos: function(obj) {
            var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL");
            while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? "previousSibling" : "nextSibling"]
            }
            position = $(obj).offset();
            return [position.left, position.top]
        },
        _hideDatepicker: function(input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst;
            if (!inst || input && inst !== $.data(input, "datepicker")) {
                return
            }
            if (this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim");
                duration = this._get(inst, "duration");
                postProcess = function() {
                    $.datepicker._tidyDialog(inst)
                }
                ;
                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess)
                } else {
                    inst.dpDiv[showAnim === "slideDown" ? "slideUp" : showAnim === "fadeIn" ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess)
                }
                if (!showAnim) {
                    postProcess()
                }
                this._datepickerShowing = false;
                onClose = this._get(inst, "onClose");
                if (onClose) {
                    onClose.apply(inst.input ? inst.input[0] : null, [inst.input ? inst.input.val() : "", inst])
                }
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: "absolute",
                        left: "0",
                        top: "-100px"
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $("body").append(this.dpDiv)
                    }
                }
                this._inDialog = false
            }
        },
        _tidyDialog: function(inst) {
            inst.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")
        },
        _checkExternalClick: function(event) {
            if (!$.datepicker._curInst) {
                return
            }
            var $target = $(event.target)
              , inst = $.datepicker._getInst($target[0]);
            if ($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {
                $.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function(id, offset, period) {
            var target = $(id)
              , inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return
            }
            this._adjustInstDate(inst, offset + (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), period);
            this._updateDatepicker(inst)
        },
        _gotoToday: function(id) {
            var date, target = $(id), inst = this._getInst(target[0]);
            if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear
            } else {
                date = new Date;
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear()
            }
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _selectMonthYear: function(id, select, period) {
            var target = $(id)
              , inst = this._getInst(target[0]);
            inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target)
        },
        _selectDay: function(id, month, year, td) {
            var inst, target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return
            }
            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $("a", td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear))
        },
        _clearDate: function(id) {
            var target = $(id);
            this._selectDate(target, "")
        },
        _selectDate: function(id, dateStr) {
            var onSelect, target = $(id), inst = this._getInst(target[0]);
            dateStr = dateStr != null ? dateStr : this._formatDate(inst);
            if (inst.input) {
                inst.input.val(dateStr)
            }
            this._updateAlternate(inst);
            onSelect = this._get(inst, "onSelect");
            if (onSelect) {
                onSelect.apply(inst.input ? inst.input[0] : null, [dateStr, inst])
            } else if (inst.input) {
                inst.input.trigger("change")
            }
            if (inst.inline) {
                this._updateDatepicker(inst)
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof inst.input[0] !== "object") {
                    inst.input.trigger("focus")
                }
                this._lastInput = null
            }
        },
        _updateAlternate: function(inst) {
            var altFormat, date, dateStr, altField = this._get(inst, "altField");
            if (altField) {
                altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).val(dateStr)
            }
        },
        noWeekends: function(date) {
            var day = date.getDay();
            return [day > 0 && day < 6, ""]
        },
        iso8601Week: function(date) {
            var time, checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1
        },
        parseDate: function(format, value, settings) {
            if (format == null || value == null) {
                throw "Invalid arguments"
            }
            value = typeof value === "object" ? value.toString() : value + "";
            if (value === "") {
                return null
            }
            var iFormat, dim, extra, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : (new Date).getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                if (matches) {
                    iFormat++
                }
                return matches
            }, getNumber = function(match) {
                var isDoubled = lookAhead(match)
                  , size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2
                  , minSize = match === "y" ? size : 1
                  , digits = new RegExp("^\\d{" + minSize + "," + size + "}")
                  , num = value.substring(iValue).match(digits);
                if (!num) {
                    throw "Missing number at position " + iValue
                }
                iValue += num[0].length;
                return parseInt(num[0], 10)
            }, getName = function(match, shortNames, longNames) {
                var index = -1
                  , names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                    return [[k, v]]
                }).sort(function(a, b) {
                    return -(a[1].length - b[1].length)
                });
                $.each(names, function(i, pair) {
                    var name = pair[1];
                    if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                        index = pair[0];
                        iValue += name.length;
                        return false
                    }
                });
                if (index !== -1) {
                    return index + 1
                } else {
                    throw "Unknown name at position " + iValue
                }
            }, checkLiteral = function() {
                if (value.charAt(iValue) !== format.charAt(iFormat)) {
                    throw "Unexpected literal at position " + iValue
                }
                iValue++
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        checkLiteral()
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                    case "d":
                        day = getNumber("d");
                        break;
                    case "D":
                        getName("D", dayNamesShort, dayNames);
                        break;
                    case "o":
                        doy = getNumber("o");
                        break;
                    case "m":
                        month = getNumber("m");
                        break;
                    case "M":
                        month = getName("M", monthNamesShort, monthNames);
                        break;
                    case "y":
                        year = getNumber("y");
                        break;
                    case "@":
                        date = new Date(getNumber("@"));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "!":
                        date = new Date((getNumber("!") - this._ticksTo1970) / 1e4);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case "'":
                        if (lookAhead("'")) {
                            checkLiteral()
                        } else {
                            literal = true
                        }
                        break;
                    default:
                        checkLiteral()
                    }
                }
            }
            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw "Extra/unparsed characters found in date: " + extra
                }
            }
            if (year === -1) {
                year = (new Date).getFullYear()
            } else if (year < 100) {
                year += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100)
            }
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break
                    }
                    month++;
                    day -= dim
                } while (true)
            }
            date = this._daylightSavingAdjust(new Date(year,month - 1,day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw "Invalid date"
            }
            return date
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 1e7,
        formatDate: function(format, date, settings) {
            if (!date) {
                return ""
            }
            var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                if (matches) {
                    iFormat++
                }
                return matches
            }, formatNumber = function(match, value, len) {
                var num = "" + value;
                if (lookAhead(match)) {
                    while (num.length < len) {
                        num = "0" + num
                    }
                }
                return num
            }, formatName = function(match, value, shortNames, longNames) {
                return lookAhead(match) ? longNames[value] : shortNames[value]
            }, output = "", literal = false;
            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                            literal = false
                        } else {
                            output += format.charAt(iFormat)
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                        case "d":
                            output += formatNumber("d", date.getDate(), 2);
                            break;
                        case "D":
                            output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                            break;
                        case "o":
                            output += formatNumber("o", Math.round((new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime() - new Date(date.getFullYear(),0,0).getTime()) / 864e5), 3);
                            break;
                        case "m":
                            output += formatNumber("m", date.getMonth() + 1, 2);
                            break;
                        case "M":
                            output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                            break;
                        case "y":
                            output += lookAhead("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100;
                            break;
                        case "@":
                            output += date.getTime();
                            break;
                        case "!":
                            output += date.getTime() * 1e4 + this._ticksTo1970;
                            break;
                        case "'":
                            if (lookAhead("'")) {
                                output += "'"
                            } else {
                                literal = true
                            }
                            break;
                        default:
                            output += format.charAt(iFormat)
                        }
                    }
                }
            }
            return output
        },
        _possibleChars: function(format) {
            var iFormat, chars = "", literal = false, lookAhead = function(match) {
                var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                if (matches) {
                    iFormat++
                }
                return matches
            };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                        literal = false
                    } else {
                        chars += format.charAt(iFormat)
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                    case "d":
                    case "m":
                    case "y":
                    case "@":
                        chars += "0123456789";
                        break;
                    case "D":
                    case "M":
                        return null;
                    case "'":
                        if (lookAhead("'")) {
                            chars += "'"
                        } else {
                            literal = true
                        }
                        break;
                    default:
                        chars += format.charAt(iFormat)
                    }
                }
            }
            return chars
        },
        _get: function(inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name]
        },
        _setDateFromField: function(inst, noDefault) {
            if (inst.input.val() === inst.lastVal) {
                return
            }
            var dateFormat = this._get(inst, "dateFormat")
              , dates = inst.lastVal = inst.input ? inst.input.val() : null
              , defaultDate = this._getDefaultDate(inst)
              , date = defaultDate
              , settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate
            } catch (event) {
                dates = noDefault ? "" : dates
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = dates ? date.getDate() : 0;
            inst.currentMonth = dates ? date.getMonth() : 0;
            inst.currentYear = dates ? date.getFullYear() : 0;
            this._adjustInstDate(inst)
        },
        _getDefaultDate: function(inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date))
        },
        _determineDate: function(inst, date, defaultDate) {
            var offsetNumeric = function(offset) {
                var date = new Date;
                date.setDate(date.getDate() + offset);
                return date
            }
              , offsetString = function(offset) {
                try {
                    return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst))
                } catch (e) {}
                var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date
                  , year = date.getFullYear()
                  , month = date.getMonth()
                  , day = date.getDate()
                  , pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g
                  , matches = pattern.exec(offset);
                while (matches) {
                    switch (matches[2] || "d") {
                    case "d":
                    case "D":
                        day += parseInt(matches[1], 10);
                        break;
                    case "w":
                    case "W":
                        day += parseInt(matches[1], 10) * 7;
                        break;
                    case "m":
                    case "M":
                        month += parseInt(matches[1], 10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break;
                    case "y":
                    case "Y":
                        year += parseInt(matches[1], 10);
                        day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                        break
                    }
                    matches = pattern.exec(offset)
                }
                return new Date(year,month,day)
            }
              , newDate = date == null || date === "" ? defaultDate : typeof date === "string" ? offsetString(date) : typeof date === "number" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
            newDate = newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate;
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0)
            }
            return this._daylightSavingAdjust(newDate)
        },
        _daylightSavingAdjust: function(date) {
            if (!date) {
                return null
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date
        },
        _setDate: function(inst, date, noChange) {
            var clear = !date
              , origMonth = inst.selectedMonth
              , origYear = inst.selectedYear
              , newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst)
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? "" : this._formatDate(inst))
            }
        },
        _getDate: function(inst) {
            var startDate = !inst.currentYear || inst.input && inst.input.val() === "" ? null : this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay));
            return startDate
        },
        _attachHandlers: function(inst) {
            var stepMonths = this._get(inst, "stepMonths")
              , id = "#" + inst.id.replace(/\\\\/g, "\\");
            inst.dpDiv.find("[data-handler]").map(function() {
                var handler = {
                    prev: function() {
                        $.datepicker._adjustDate(id, -stepMonths, "M")
                    },
                    next: function() {
                        $.datepicker._adjustDate(id, +stepMonths, "M")
                    },
                    hide: function() {
                        $.datepicker._hideDatepicker()
                    },
                    today: function() {
                        $.datepicker._gotoToday(id)
                    },
                    selectDay: function() {
                        $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return false
                    },
                    selectMonth: function() {
                        $.datepicker._selectMonthYear(id, this, "M");
                        return false
                    },
                    selectYear: function() {
                        $.datepicker._selectMonthYear(id, this, "Y");
                        return false
                    }
                };
                $(this).on(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")])
            })
        },
        _generateHTML: function(inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date, today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(),tempDate.getMonth(),tempDate.getDate())), isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1, currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999,9,9) : new Date(inst.currentYear,inst.currentMonth,inst.currentDay)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),maxDate.getMonth() - numMonths[0] * numMonths[1] + 1,maxDate.getDate()));
                maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
                while (this._daylightSavingAdjust(new Date(drawYear,drawMonth,1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            prevText = this._get(inst, "prevText");
            prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear,drawMonth - stepMonths,1)), this._getFormatConfig(inst));
            prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" + " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";
            nextText = this._get(inst, "nextText");
            nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear,drawMonth + stepMonths,1)), this._getFormatConfig(inst));
            next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" + " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";
            currentText = this._get(inst, "currentText");
            gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
            currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));
            controls = !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>" : "";
            buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" + ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
            firstDay = parseInt(this._get(inst, "firstDay"), 10);
            firstDay = isNaN(firstDay) ? 0 : firstDay;
            showWeek = this._get(inst, "showWeek");
            dayNames = this._get(inst, "dayNames");
            dayNamesMin = this._get(inst, "dayNamesMin");
            monthNames = this._get(inst, "monthNames");
            monthNamesShort = this._get(inst, "monthNamesShort");
            beforeShowDay = this._get(inst, "beforeShowDay");
            showOtherMonths = this._get(inst, "showOtherMonths");
            selectOtherMonths = this._get(inst, "selectOtherMonths");
            defaultDate = this._getDefaultDate(inst);
            html = "";
            for (row = 0; row < numMonths[0]; row++) {
                group = "";
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));
                    cornerClass = " ui-corner-all";
                    calender = "";
                    if (isMultiMonth) {
                        calender += "<div class='ui-datepicker-group";
                        if (numMonths[1] > 1) {
                            switch (col) {
                            case 0:
                                calender += " ui-datepicker-group-first";
                                cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                break;
                            case numMonths[1] - 1:
                                calender += " ui-datepicker-group-last";
                                cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                break;
                            default:
                                calender += " ui-datepicker-group-middle";
                                cornerClass = "";
                                break
                            }
                        }
                        calender += "'>"
                    }
                    calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>";
                    thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
                    for (dow = 0; dow < 7; dow++) {
                        day = (dow + firstDay) % 7;
                        thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>"
                    }
                    calender += thead + "</tr></thead><tbody>";
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth)
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7);
                    numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear,drawMonth,1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) {
                        calender += "<tr>";
                        tbody = !showWeek ? "" : "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>";
                        for (dow = 0; dow < 7; dow++) {
                            daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ""];
                            otherMonth = printDate.getMonth() !== drawMonth;
                            unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
                            tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (otherMonth ? " ui-datepicker-other-month" : "") + (printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? " " + this._dayOverClass : "") + (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (otherMonth && !showOtherMonths ? "&#xa0;" : unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (otherMonth ? " ui-priority-secondary" : "") + "' href='#'>" + printDate.getDate() + "</a>") + "</td>";
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate)
                        }
                        calender += tbody + "</tr>"
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++
                    }
                    calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                    group += calender
                }
                html += group
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html
        },
        _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
            if (secondary || !changeMonth) {
                monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>"
            } else {
                inMinYear = minDate && minDate.getFullYear() === drawYear;
                inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
                monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                for (month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>"
                    }
                }
                monthHtml += "</select>"
            }
            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "")
            }
            if (!inst.yearshtml) {
                inst.yearshtml = "";
                if (secondary || !changeYear) {
                    html += "<span class='ui-datepicker-year'>" + drawYear + "</span>"
                } else {
                    years = this._get(inst, "yearRange").split(":");
                    thisYear = (new Date).getFullYear();
                    determineYear = function(value) {
                        var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                        return isNaN(year) ? thisYear : year
                    }
                    ;
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ""));
                    year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                    endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                    inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                    for (; year <= endYear; year++) {
                        inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>"
                    }
                    inst.yearshtml += "</select>";
                    html += inst.yearshtml;
                    inst.yearshtml = null
                }
            }
            html += this._get(inst, "yearSuffix");
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml
            }
            html += "</div>";
            return html
        },
        _adjustInstDate: function(inst, offset, period) {
            var year = inst.selectedYear + (period === "Y" ? offset : 0)
              , month = inst.selectedMonth + (period === "M" ? offset : 0)
              , day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0)
              , date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year,month,day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === "M" || period === "Y") {
                this._notifyChange(inst)
            }
        },
        _restrictMinMax: function(inst, date) {
            var minDate = this._getMinMaxDate(inst, "min")
              , maxDate = this._getMinMaxDate(inst, "max")
              , newDate = minDate && date < minDate ? minDate : date;
            return maxDate && newDate > maxDate ? maxDate : newDate
        },
        _notifyChange: function(inst) {
            var onChange = this._get(inst, "onChangeMonthYear");
            if (onChange) {
                onChange.apply(inst.input ? inst.input[0] : null, [inst.selectedYear, inst.selectedMonth + 1, inst])
            }
        },
        _getNumberOfMonths: function(inst) {
            var numMonths = this._get(inst, "numberOfMonths");
            return numMonths == null ? [1, 1] : typeof numMonths === "number" ? [1, numMonths] : numMonths
        },
        _getMinMaxDate: function(inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + "Date"), null)
        },
        _getDaysInMonth: function(year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year,month,32)).getDate()
        },
        _getFirstDayOfMonth: function(year, month) {
            return new Date(year,month,1).getDay()
        },
        _canAdjustMonth: function(inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst)
              , date = this._daylightSavingAdjust(new Date(curYear,curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]),1));
            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()))
            }
            return this._isInRange(inst, date)
        },
        _isInRange: function(inst, date) {
            var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
            if (years) {
                yearSplit = years.split(":");
                currentYear = (new Date).getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                if (yearSplit[0].match(/[+\-].*/)) {
                    minYear += currentYear
                }
                if (yearSplit[1].match(/[+\-].*/)) {
                    maxYear += currentYear
                }
            }
            return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear)
        },
        _getFormatConfig: function(inst) {
            var shortYearCutoff = this._get(inst, "shortYearCutoff");
            shortYearCutoff = typeof shortYearCutoff !== "string" ? shortYearCutoff : (new Date).getFullYear() % 100 + parseInt(shortYearCutoff, 10);
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, "dayNamesShort"),
                dayNames: this._get(inst, "dayNames"),
                monthNamesShort: this._get(inst, "monthNamesShort"),
                monthNames: this._get(inst, "monthNames")
            }
        },
        _formatDate: function(inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear
            }
            var date = day ? typeof day === "object" ? day : this._daylightSavingAdjust(new Date(year,month,day)) : this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay));
            return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst))
        }
    });
    function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return dpDiv.on("mouseout", selector, function() {
            $(this).removeClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).removeClass("ui-datepicker-prev-hover")
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).removeClass("ui-datepicker-next-hover")
            }
        }).on("mouseover", selector, datepicker_handleMouseover)
    }
    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            $(this).addClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                $(this).addClass("ui-datepicker-prev-hover")
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                $(this).addClass("ui-datepicker-next-hover")
            }
        }
    }
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name]
            }
        }
        return target
    }
    $.fn.datepicker = function(options) {
        if (!this.length) {
            return this
        }
        if (!$.datepicker.initialized) {
            $(document).on("mousedown", $.datepicker._checkExternalClick);
            $.datepicker.initialized = true
        }
        if ($("#" + $.datepicker._mainDivId).length === 0) {
            $("body").append($.datepicker.dpDiv)
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
            return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs))
        }
        return this.each(function() {
            typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options)
        })
    }
    ;
    $.datepicker = new Datepicker;
    $.datepicker.initialized = false;
    $.datepicker.uuid = (new Date).getTime();
    $.datepicker.version = "1.12.0";
    var widgetsDatepicker = $.datepicker;
    var ie = $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    var mouseHandled = false;
    $(document).on("mouseup", function() {
        mouseHandled = false
    });
    var widgetsMouse = $.widget("ui.mouse", {
        version: "1.12.0",
        options: {
            cancel: "input, textarea, button, select, option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
            this.element.on("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event)
            }).on("click." + this.widgetName, function(event) {
                if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, that.widgetName + ".preventClickEvent");
                    event.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function() {
            this.element.off("." + this.widgetName);
            if (this._mouseMoveDelegate) {
                this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate)
            }
        },
        _mouseDown: function(event) {
            if (mouseHandled) {
                return
            }
            this._mouseMoved = false;
            this._mouseStarted && this._mouseUp(event);
            this._mouseDownEvent = event;
            var that = this
              , btnIsLeft = event.which === 1
              , elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = true
                }, this.options.delay)
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(event) !== false;
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true
                }
            }
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                $.removeData(event.target, this.widgetName + ".preventClickEvent")
            }
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event)
            }
            ;
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event)
            }
            ;
            this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true
        },
        _mouseMove: function(event) {
            if (this._mouseMoved) {
                if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                    return this._mouseUp(event)
                } else if (!event.which) {
                    if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) {
                        this.ignoreMissingWhich = true
                    } else if (!this.ignoreMissingWhich) {
                        return this._mouseUp(event)
                    }
                }
            }
            if (event.which || event.button) {
                this._mouseMoved = true
            }
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault()
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
                this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event)
            }
            return !this._mouseStarted
        },
        _mouseUp: function(event) {
            this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target === this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + ".preventClickEvent", true)
                }
                this._mouseStop(event)
            }
            if (this._mouseDelayTimer) {
                clearTimeout(this._mouseDelayTimer);
                delete this._mouseDelayTimer
            }
            this.ignoreMissingWhich = false;
            mouseHandled = false;
            event.preventDefault()
        },
        _mouseDistanceMet: function(event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return true
        }
    });
    var plugin = $.ui.plugin = {
        add: function(module, option, set) {
            var i, proto = $.ui[module].prototype;
            for (i in set) {
                proto.plugins[i] = proto.plugins[i] || [];
                proto.plugins[i].push([option, set[i]])
            }
        },
        call: function(instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name];
            if (!set) {
                return
            }
            if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
                return
            }
            for (i = 0; i < set.length; i++) {
                if (instance.options[set[i][0]]) {
                    set[i][1].apply(instance.element, args)
                }
            }
        }
    };
    var safeBlur = $.ui.safeBlur = function(element) {
        if (element && element.nodeName.toLowerCase() !== "body") {
            $(element).trigger("blur")
        }
    }
    ;
    $.widget("ui.draggable", $.ui.mouse, {
        version: "1.12.0",
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false,
            drag: null,
            start: null,
            stop: null
        },
        _create: function() {
            if (this.options.helper === "original") {
                this._setPositionRelative()
            }
            if (this.options.addClasses) {
                this._addClass("ui-draggable")
            }
            this._setHandleClassName();
            this._mouseInit()
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "handle") {
                this._removeHandleClassName();
                this._setHandleClassName()
            }
        },
        _destroy: function() {
            if ((this.helper || this.element).is(".ui-draggable-dragging")) {
                this.destroyOnClear = true;
                return
            }
            this._removeHandleClassName();
            this._mouseDestroy()
        },
        _mouseCapture: function(event) {
            var o = this.options;
            this._blurActiveElement(event);
            if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
                return false
            }
            this.handle = this._getHandle(event);
            if (!this.handle) {
                return false
            }
            this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix);
            return true
        },
        _blockFrames: function(selector) {
            this.iframeBlocks = this.document.find(selector).map(function() {
                var iframe = $(this);
                return $("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0]
            })
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks
            }
        },
        _blurActiveElement: function(event) {
            var activeElement = $.ui.safeActiveElement(this.document[0])
              , target = $(event.target);
            if (this._getHandle(event) && target.closest(activeElement).length) {
                return
            }
            $.ui.safeBlur(activeElement)
        },
        _mouseStart: function(event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this._addClass(this.helper, "ui-draggable-dragging");
            this._cacheHelperProportions();
            if ($.ui.ddmanager) {
                $.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent(true);
            this.offsetParent = this.helper.offsetParent();
            this.hasFixedAncestor = this.helper.parents().filter(function() {
                return $(this).css("position") === "fixed"
            }).length > 0;
            this.positionAbs = this.element.offset();
            this._refreshOffsets(event);
            this.originalPosition = this.position = this._generatePosition(event, false);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this._setContainment();
            if (this._trigger("start", event) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event)
            }
            this._mouseDrag(event, true);
            if ($.ui.ddmanager) {
                $.ui.ddmanager.dragStart(this, event)
            }
            return true
        },
        _refreshOffsets: function(event) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: false,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            };
            this.offset.click = {
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            }
        },
        _mouseDrag: function(event, noPropagation) {
            if (this.hasFixedAncestor) {
                this.offset.parent = this._getParentOffset()
            }
            this.position = this._generatePosition(event, true);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!noPropagation) {
                var ui = this._uiHash();
                if (this._trigger("drag", event, ui) === false) {
                    this._mouseUp(new $.Event("mouseup",event));
                    return false
                }
                this.position = ui.position
            }
            this.helper[0].style.left = this.position.left + "px";
            this.helper[0].style.top = this.position.top + "px";
            if ($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event)
            }
            return false
        },
        _mouseStop: function(event) {
            var that = this
              , dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                dropped = $.ui.ddmanager.drop(this, event)
            }
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false
            }
            if (this.options.revert === "invalid" && !dropped || this.options.revert === "valid" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {
                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                    if (that._trigger("stop", event) !== false) {
                        that._clear()
                    }
                })
            } else {
                if (this._trigger("stop", event) !== false) {
                    this._clear()
                }
            }
            return false
        },
        _mouseUp: function(event) {
            this._unblockFrames();
            if ($.ui.ddmanager) {
                $.ui.ddmanager.dragStop(this, event)
            }
            if (this.handleElement.is(event.target)) {
                this.element.trigger("focus")
            }
            return $.ui.mouse.prototype._mouseUp.call(this, event)
        },
        cancel: function() {
            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp(new $.Event("mouseup",{
                    target: this.element[0]
                }))
            } else {
                this._clear()
            }
            return this
        },
        _getHandle: function(event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true
        },
        _setHandleClassName: function() {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
            this._addClass(this.handleElement, "ui-draggable-handle")
        },
        _removeHandleClassName: function() {
            this._removeClass(this.handleElement, "ui-draggable-handle")
        },
        _createHelper: function(event) {
            var o = this.options
              , helperIsFunction = $.isFunction(o.helper)
              , helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;
            if (!helper.parents("body").length) {
                helper.appendTo(o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo)
            }
            if (helperIsFunction && helper[0] === this.element[0]) {
                this._setPositionRelative()
            }
            if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) {
                helper.css("position", "absolute")
            }
            return helper
        },
        _setPositionRelative: function() {
            if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            }
        },
        _adjustOffsetFromHelper: function(obj) {
            if (typeof obj === "string") {
                obj = obj.split(" ")
            }
            if ($.isArray(obj)) {
                obj = {
                    left: +obj[0],
                    top: +obj[1] || 0
                }
            }
            if ("left"in obj) {
                this.offset.click.left = obj.left + this.margins.left
            }
            if ("right"in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left
            }
            if ("top"in obj) {
                this.offset.click.top = obj.top + this.margins.top
            }
            if ("bottom"in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top
            }
        },
        _isRootNode: function(element) {
            return /(html|body)/i.test(element.tagName) || element === this.document[0]
        },
        _getParentOffset: function() {
            var po = this.offsetParent.offset()
              , document = this.document[0];
            if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop()
            }
            if (this._isRootNode(this.offsetParent[0])) {
                po = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition !== "relative") {
                return {
                    top: 0,
                    left: 0
                }
            }
            var p = this.element.position()
              , scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
                left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
            }
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var isUserScrollable, c, ce, o = this.options, document = this.document[0];
            this.relativeContainer = null;
            if (!o.containment) {
                this.containment = null;
                return
            }
            if (o.containment === "window") {
                this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left, $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                return
            }
            if (o.containment === "document") {
                this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                return
            }
            if (o.containment.constructor === Array) {
                this.containment = o.containment;
                return
            }
            if (o.containment === "parent") {
                o.containment = this.helper[0].parentNode
            }
            c = $(o.containment);
            ce = c[0];
            if (!ce) {
                return
            }
            isUserScrollable = /(scroll|auto)/.test(c.css("overflow"));
            this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
            this.relativeContainer = c
        },
        _convertPositionTo: function(d, pos) {
            if (!pos) {
                pos = this.position
            }
            var mod = d === "absolute" ? 1 : -1
              , scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
            }
        },
        _generatePosition: function(event, constrainPosition) {
            var containment, co, top, left, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY;
            if (!scrollIsRootNode || !this.offset.scroll) {
                this.offset.scroll = {
                    top: this.scrollParent.scrollTop(),
                    left: this.scrollParent.scrollLeft()
                }
            }
            if (constrainPosition) {
                if (this.containment) {
                    if (this.relativeContainer) {
                        co = this.relativeContainer.offset();
                        containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top]
                    } else {
                        containment = this.containment
                    }
                    if (event.pageX - this.offset.click.left < containment[0]) {
                        pageX = containment[0] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top < containment[1]) {
                        pageY = containment[1] + this.offset.click.top
                    }
                    if (event.pageX - this.offset.click.left > containment[2]) {
                        pageX = containment[2] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top > containment[3]) {
                        pageY = containment[3] + this.offset.click.top
                    }
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left
                }
                if (o.axis === "y") {
                    pageX = this.originalPageX
                }
                if (o.axis === "x") {
                    pageY = this.originalPageY
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === "fixed" ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === "fixed" ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
            }
        },
        _clear: function() {
            this._removeClass(this.helper, "ui-draggable-dragging");
            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove()
            }
            this.helper = null;
            this.cancelHelperRemoval = false;
            if (this.destroyOnClear) {
                this.destroy()
            }
        },
        _trigger: function(type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [event, ui, this], true);
            if (/^(drag|start|stop)/.test(type)) {
                this.positionAbs = this._convertPositionTo("absolute");
                ui.offset = this.positionAbs
            }
            return $.Widget.prototype._trigger.call(this, type, event, ui)
        },
        plugins: {},
        _uiHash: function() {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    $.ui.plugin.add("draggable", "connectToSortable", {
        start: function(event, ui, draggable) {
            var uiSortable = $.extend({}, ui, {
                item: draggable.element
            });
            draggable.sortables = [];
            $(draggable.options.connectToSortable).each(function() {
                var sortable = $(this).sortable("instance");
                if (sortable && !sortable.options.disabled) {
                    draggable.sortables.push(sortable);
                    sortable.refreshPositions();
                    sortable._trigger("activate", event, uiSortable)
                }
            })
        },
        stop: function(event, ui, draggable) {
            var uiSortable = $.extend({}, ui, {
                item: draggable.element
            });
            draggable.cancelHelperRemoval = false;
            $.each(draggable.sortables, function() {
                var sortable = this;
                if (sortable.isOver) {
                    sortable.isOver = 0;
                    draggable.cancelHelperRemoval = true;
                    sortable.cancelHelperRemoval = false;
                    sortable._storedCSS = {
                        position: sortable.placeholder.css("position"),
                        top: sortable.placeholder.css("top"),
                        left: sortable.placeholder.css("left")
                    };
                    sortable._mouseStop(event);
                    sortable.options.helper = sortable.options._helper
                } else {
                    sortable.cancelHelperRemoval = true;
                    sortable._trigger("deactivate", event, uiSortable)
                }
            })
        },
        drag: function(event, ui, draggable) {
            $.each(draggable.sortables, function() {
                var innermostIntersecting = false
                  , sortable = this;
                sortable.positionAbs = draggable.positionAbs;
                sortable.helperProportions = draggable.helperProportions;
                sortable.offset.click = draggable.offset.click;
                if (sortable._intersectsWith(sortable.containerCache)) {
                    innermostIntersecting = true;
                    $.each(draggable.sortables, function() {
                        this.positionAbs = draggable.positionAbs;
                        this.helperProportions = draggable.helperProportions;
                        this.offset.click = draggable.offset.click;
                        if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {
                            innermostIntersecting = false
                        }
                        return innermostIntersecting
                    })
                }
                if (innermostIntersecting) {
                    if (!sortable.isOver) {
                        sortable.isOver = 1;
                        draggable._parent = ui.helper.parent();
                        sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", true);
                        sortable.options._helper = sortable.options.helper;
                        sortable.options.helper = function() {
                            return ui.helper[0]
                        }
                        ;
                        event.target = sortable.currentItem[0];
                        sortable._mouseCapture(event, true);
                        sortable._mouseStart(event, true, true);
                        sortable.offset.click.top = draggable.offset.click.top;
                        sortable.offset.click.left = draggable.offset.click.left;
                        sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
                        sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;
                        draggable._trigger("toSortable", event);
                        draggable.dropped = sortable.element;
                        $.each(draggable.sortables, function() {
                            this.refreshPositions()
                        });
                        draggable.currentItem = draggable.element;
                        sortable.fromOutside = draggable
                    }
                    if (sortable.currentItem) {
                        sortable._mouseDrag(event);
                        ui.position = sortable.position
                    }
                } else {
                    if (sortable.isOver) {
                        sortable.isOver = 0;
                        sortable.cancelHelperRemoval = true;
                        sortable.options._revert = sortable.options.revert;
                        sortable.options.revert = false;
                        sortable._trigger("out", event, sortable._uiHash(sortable));
                        sortable._mouseStop(event, true);
                        sortable.options.revert = sortable.options._revert;
                        sortable.options.helper = sortable.options._helper;
                        if (sortable.placeholder) {
                            sortable.placeholder.remove()
                        }
                        ui.helper.appendTo(draggable._parent);
                        draggable._refreshOffsets(event);
                        ui.position = draggable._generatePosition(event, true);
                        draggable._trigger("fromSortable", event);
                        draggable.dropped = false;
                        $.each(draggable.sortables, function() {
                            this.refreshPositions()
                        })
                    }
                }
            })
        }
    });
    $.ui.plugin.add("draggable", "cursor", {
        start: function(event, ui, instance) {
            var t = $("body")
              , o = instance.options;
            if (t.css("cursor")) {
                o._cursor = t.css("cursor")
            }
            t.css("cursor", o.cursor)
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            if (o._cursor) {
                $("body").css("cursor", o._cursor)
            }
        }
    });
    $.ui.plugin.add("draggable", "opacity", {
        start: function(event, ui, instance) {
            var t = $(ui.helper)
              , o = instance.options;
            if (t.css("opacity")) {
                o._opacity = t.css("opacity")
            }
            t.css("opacity", o.opacity)
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            if (o._opacity) {
                $(ui.helper).css("opacity", o._opacity)
            }
        }
    });
    $.ui.plugin.add("draggable", "scroll", {
        start: function(event, ui, i) {
            if (!i.scrollParentNotHidden) {
                i.scrollParentNotHidden = i.helper.scrollParent(false)
            }
            if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== "HTML") {
                i.overflowOffset = i.scrollParentNotHidden.offset()
            }
        },
        drag: function(event, ui, i) {
            var o = i.options
              , scrolled = false
              , scrollParent = i.scrollParentNotHidden[0]
              , document = i.document[0];
            if (scrollParent !== document && scrollParent.tagName !== "HTML") {
                if (!o.axis || o.axis !== "x") {
                    if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {
                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed
                    } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed
                    }
                }
                if (!o.axis || o.axis !== "y") {
                    if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {
                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed
                    } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed
                    }
                }
            } else {
                if (!o.axis || o.axis !== "x") {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed)
                    } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed)
                    }
                }
                if (!o.axis || o.axis !== "y") {
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed)
                    } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed)
                    }
                }
            }
            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(i, event)
            }
        }
    });
    $.ui.plugin.add("draggable", "snap", {
        start: function(event, ui, i) {
            var o = i.options;
            i.snapElements = [];
            $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
                var $t = $(this)
                  , $o = $t.offset();
                if (this !== i.element[0]) {
                    i.snapElements.push({
                        item: this,
                        width: $t.outerWidth(),
                        height: $t.outerHeight(),
                        top: $o.top,
                        left: $o.left
                    })
                }
            })
        },
        drag: function(event, ui, inst) {
            var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left - inst.margins.left;
                r = l + inst.snapElements[i].width;
                t = inst.snapElements[i].top - inst.margins.top;
                b = t + inst.snapElements[i].height;
                if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    if (inst.snapElements[i].snapping) {
                        inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                            snapItem: inst.snapElements[i].item
                        }))
                    }
                    inst.snapElements[i].snapping = false;
                    continue
                }
                if (o.snapMode !== "inner") {
                    ts = Math.abs(t - y2) <= d;
                    bs = Math.abs(b - y1) <= d;
                    ls = Math.abs(l - x2) <= d;
                    rs = Math.abs(r - x1) <= d;
                    if (ts) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: t - inst.helperProportions.height,
                            left: 0
                        }).top
                    }
                    if (bs) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: b,
                            left: 0
                        }).top
                    }
                    if (ls) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: l - inst.helperProportions.width
                        }).left
                    }
                    if (rs) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: r
                        }).left
                    }
                }
                first = ts || bs || ls || rs;
                if (o.snapMode !== "outer") {
                    ts = Math.abs(t - y1) <= d;
                    bs = Math.abs(b - y2) <= d;
                    ls = Math.abs(l - x1) <= d;
                    rs = Math.abs(r - x2) <= d;
                    if (ts) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: t,
                            left: 0
                        }).top
                    }
                    if (bs) {
                        ui.position.top = inst._convertPositionTo("relative", {
                            top: b - inst.helperProportions.height,
                            left: 0
                        }).top
                    }
                    if (ls) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: l
                        }).left
                    }
                    if (rs) {
                        ui.position.left = inst._convertPositionTo("relative", {
                            top: 0,
                            left: r - inst.helperProportions.width
                        }).left
                    }
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
                    inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                        snapItem: inst.snapElements[i].item
                    }))
                }
                inst.snapElements[i].snapping = ts || bs || ls || rs || first
            }
        }
    });
    $.ui.plugin.add("draggable", "stack", {
        start: function(event, ui, instance) {
            var min, o = instance.options, group = $.makeArray($(o.stack)).sort(function(a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0)
            });
            if (!group.length) {
                return
            }
            min = parseInt($(group[0]).css("zIndex"), 10) || 0;
            $(group).each(function(i) {
                $(this).css("zIndex", min + i)
            });
            this.css("zIndex", min + group.length)
        }
    });
    $.ui.plugin.add("draggable", "zIndex", {
        start: function(event, ui, instance) {
            var t = $(ui.helper)
              , o = instance.options;
            if (t.css("zIndex")) {
                o._zIndex = t.css("zIndex")
            }
            t.css("zIndex", o.zIndex)
        },
        stop: function(event, ui, instance) {
            var o = instance.options;
            if (o._zIndex) {
                $(ui.helper).css("zIndex", o._zIndex)
            }
        }
    });
    var widgetsDraggable = $.ui.draggable;
    $.widget("ui.resizable", $.ui.mouse, {
        version: "1.12.0",
        widgetEventPrefix: "resize",
        options: {
            alsoResize: false,
            animate: false,
            animateDuration: "slow",
            animateEasing: "swing",
            aspectRatio: false,
            autoHide: false,
            classes: {
                "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se"
            },
            containment: false,
            ghost: false,
            grid: false,
            handles: "e,s,se",
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _num: function(value) {
            return parseFloat(value) || 0
        },
        _isNumber: function(value) {
            return !isNaN(parseFloat(value))
        },
        _hasScroll: function(el, a) {
            if ($(el).css("overflow") === "hidden") {
                return false
            }
            var scroll = a && a === "left" ? "scrollLeft" : "scrollTop"
              , has = false;
            if (el[scroll] > 0) {
                return true
            }
            el[scroll] = 1;
            has = el[scroll] > 0;
            el[scroll] = 0;
            return has
        },
        _create: function() {
            var margins, o = this.options, that = this;
            this._addClass("ui-resizable");
            $.extend(this, {
                _aspectRatio: !!o.aspectRatio,
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
            });
            if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {
                this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                    position: this.element.css("position"),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css("top"),
                    left: this.element.css("left")
                }));
                this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance"));
                this.elementIsWrapper = true;
                margins = {
                    marginTop: this.originalElement.css("marginTop"),
                    marginRight: this.originalElement.css("marginRight"),
                    marginBottom: this.originalElement.css("marginBottom"),
                    marginLeft: this.originalElement.css("marginLeft")
                };
                this.element.css(margins);
                this.originalElement.css("margin", 0);
                this.originalResizeStyle = this.originalElement.css("resize");
                this.originalElement.css("resize", "none");
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: "static",
                    zoom: 1,
                    display: "block"
                }));
                this.originalElement.css(margins);
                this._proportionallyResize()
            }
            this._setupHandles();
            if (o.autoHide) {
                $(this.element).on("mouseenter", function() {
                    if (o.disabled) {
                        return
                    }
                    that._removeClass("ui-resizable-autohide");
                    that._handles.show()
                }).on("mouseleave", function() {
                    if (o.disabled) {
                        return
                    }
                    if (!that.resizing) {
                        that._addClass("ui-resizable-autohide");
                        that._handles.hide()
                    }
                })
            }
            this._mouseInit()
        },
        _destroy: function() {
            this._mouseDestroy();
            var wrapper, _destroy = function(exp) {
                $(exp).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()
            };
            if (this.elementIsWrapper) {
                _destroy(this.element);
                wrapper = this.element;
                this.originalElement.css({
                    position: wrapper.css("position"),
                    width: wrapper.outerWidth(),
                    height: wrapper.outerHeight(),
                    top: wrapper.css("top"),
                    left: wrapper.css("left")
                }).insertAfter(wrapper);
                wrapper.remove()
            }
            this.originalElement.css("resize", this.originalResizeStyle);
            _destroy(this.originalElement);
            return this
        },
        _setOption: function(key, value) {
            this._super(key, value);
            switch (key) {
            case "handles":
                this._removeHandles();
                this._setupHandles();
                break;
            default:
                break
            }
        },
        _setupHandles: function() {
            var o = this.options, handle, i, n, hname, axis, that = this;
            this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                n: ".ui-resizable-n",
                e: ".ui-resizable-e",
                s: ".ui-resizable-s",
                w: ".ui-resizable-w",
                se: ".ui-resizable-se",
                sw: ".ui-resizable-sw",
                ne: ".ui-resizable-ne",
                nw: ".ui-resizable-nw"
            });
            this._handles = $();
            if (this.handles.constructor === String) {
                if (this.handles === "all") {
                    this.handles = "n,e,s,w,se,sw,ne,nw"
                }
                n = this.handles.split(",");
                this.handles = {};
                for (i = 0; i < n.length; i++) {
                    handle = $.trim(n[i]);
                    hname = "ui-resizable-" + handle;
                    axis = $("<div>");
                    this._addClass(axis, "ui-resizable-handle " + hname);
                    axis.css({
                        zIndex: o.zIndex
                    });
                    this.handles[handle] = ".ui-resizable-" + handle;
                    this.element.append(axis)
                }
            }
            this._renderAxis = function(target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) {
                    if (this.handles[i].constructor === String) {
                        this.handles[i] = this.element.children(this.handles[i]).first().show()
                    } else if (this.handles[i].jquery || this.handles[i].nodeType) {
                        this.handles[i] = $(this.handles[i]);
                        this._on(this.handles[i], {
                            mousedown: that._mouseDown
                        })
                    }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
                        axis = $(this.handles[i], this.element);
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                        padPos = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join("");
                        target.css(padPos, padWrapper);
                        this._proportionallyResize()
                    }
                    this._handles = this._handles.add(this.handles[i])
                }
            }
            ;
            this._renderAxis(this.element);
            this._handles = this._handles.add(this.element.find(".ui-resizable-handle"));
            this._handles.disableSelection();
            this._handles.on("mouseover", function() {
                if (!that.resizing) {
                    if (this.className) {
                        axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)
                    }
                    that.axis = axis && axis[1] ? axis[1] : "se"
                }
            });
            if (o.autoHide) {
                this._handles.hide();
                this._addClass("ui-resizable-autohide")
            }
        },
        _removeHandles: function() {
            this._handles.remove()
        },
        _mouseCapture: function(event) {
            var i, handle, capture = false;
            for (i in this.handles) {
                handle = $(this.handles[i])[0];
                if (handle === event.target || $.contains(handle, event.target)) {
                    capture = true
                }
            }
            return !this.options.disabled && capture
        },
        _mouseStart: function(event) {
            var curleft, curtop, cursor, o = this.options, el = this.element;
            this.resizing = true;
            this._renderProxy();
            curleft = this._num(this.helper.css("left"));
            curtop = this._num(this.helper.css("top"));
            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0
            }
            this.offset = this.helper.offset();
            this.position = {
                left: curleft,
                top: curtop
            };
            this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.originalSize = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.sizeDiff = {
                width: el.outerWidth() - el.width(),
                height: el.outerHeight() - el.height()
            };
            this.originalPosition = {
                left: curleft,
                top: curtop
            };
            this.originalMousePosition = {
                left: event.pageX,
                top: event.pageY
            };
            this.aspectRatio = typeof o.aspectRatio === "number" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
            cursor = $(".ui-resizable-" + this.axis).css("cursor");
            $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);
            this._addClass("ui-resizable-resizing");
            this._propagate("start", event);
            return true
        },
        _mouseDrag: function(event) {
            var data, props, smp = this.originalMousePosition, a = this.axis, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
            this._updatePrevProperties();
            if (!trigger) {
                return false
            }
            data = trigger.apply(this, [event, dx, dy]);
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey) {
                data = this._updateRatio(data, event)
            }
            data = this._respectSize(data, event);
            this._updateCache(data);
            this._propagate("resize", event);
            props = this._applyChanges();
            if (!this._helper && this._proportionallyResizeElements.length) {
                this._proportionallyResize()
            }
            if (!$.isEmptyObject(props)) {
                this._updatePrevProperties();
                this._trigger("resize", event, this.ui());
                this._applyChanges()
            }
            return false
        },
        _mouseStop: function(event) {
            this.resizing = false;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
            if (this._helper) {
                pr = this._proportionallyResizeElements;
                ista = pr.length && /textarea/i.test(pr[0].nodeName);
                soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                soffsetw = ista ? 0 : that.sizeDiff.width;
                s = {
                    width: that.helper.width() - soffsetw,
                    height: that.helper.height() - soffseth
                };
                left = parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left) || null;
                top = parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top) || null;
                if (!o.animate) {
                    this.element.css($.extend(s, {
                        top: top,
                        left: left
                    }))
                }
                that.helper.height(that.size.height);
                that.helper.width(that.size.width);
                if (this._helper && !o.animate) {
                    this._proportionallyResize()
                }
            }
            $("body").css("cursor", "auto");
            this._removeClass("ui-resizable-resizing");
            this._propagate("stop", event);
            if (this._helper) {
                this.helper.remove()
            }
            return false
        },
        _updatePrevProperties: function() {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            };
            this.prevSize = {
                width: this.size.width,
                height: this.size.height
            }
        },
        _applyChanges: function() {
            var props = {};
            if (this.position.top !== this.prevPosition.top) {
                props.top = this.position.top + "px"
            }
            if (this.position.left !== this.prevPosition.left) {
                props.left = this.position.left + "px"
            }
            if (this.size.width !== this.prevSize.width) {
                props.width = this.size.width + "px"
            }
            if (this.size.height !== this.prevSize.height) {
                props.height = this.size.height + "px"
            }
            this.helper.css(props);
            return props
        },
        _updateVirtualBoundaries: function(forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
            };
            if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;
                if (pMinWidth > b.minWidth) {
                    b.minWidth = pMinWidth
                }
                if (pMinHeight > b.minHeight) {
                    b.minHeight = pMinHeight
                }
                if (pMaxWidth < b.maxWidth) {
                    b.maxWidth = pMaxWidth
                }
                if (pMaxHeight < b.maxHeight) {
                    b.maxHeight = pMaxHeight
                }
            }
            this._vBoundaries = b
        },
        _updateCache: function(data) {
            this.offset = this.helper.offset();
            if (this._isNumber(data.left)) {
                this.position.left = data.left
            }
            if (this._isNumber(data.top)) {
                this.position.top = data.top
            }
            if (this._isNumber(data.height)) {
                this.size.height = data.height
            }
            if (this._isNumber(data.width)) {
                this.size.width = data.width
            }
        },
        _updateRatio: function(data) {
            var cpos = this.position
              , csize = this.size
              , a = this.axis;
            if (this._isNumber(data.height)) {
                data.width = data.height * this.aspectRatio
            } else if (this._isNumber(data.width)) {
                data.height = data.width / this.aspectRatio
            }
            if (a === "sw") {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null
            }
            if (a === "nw") {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width)
            }
            return data
        },
        _respectSize: function(data) {
            var o = this._vBoundaries
              , a = this.axis
              , ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width
              , ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height
              , isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width
              , isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height
              , dw = this.originalPosition.left + this.originalSize.width
              , dh = this.originalPosition.top + this.originalSize.height
              , cw = /sw|nw|w/.test(a)
              , ch = /nw|ne|n/.test(a);
            if (isminw) {
                data.width = o.minWidth
            }
            if (isminh) {
                data.height = o.minHeight
            }
            if (ismaxw) {
                data.width = o.maxWidth
            }
            if (ismaxh) {
                data.height = o.maxHeight
            }
            if (isminw && cw) {
                data.left = dw - o.minWidth
            }
            if (ismaxw && cw) {
                data.left = dw - o.maxWidth
            }
            if (isminh && ch) {
                data.top = dh - o.minHeight
            }
            if (ismaxh && ch) {
                data.top = dh - o.maxHeight
            }
            if (!data.width && !data.height && !data.left && data.top) {
                data.top = null
            } else if (!data.width && !data.height && !data.top && data.left) {
                data.left = null
            }
            return data
        },
        _getPaddingPlusBorderDimensions: function(element) {
            var i = 0
              , widths = []
              , borders = [element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth")]
              , paddings = [element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft")];
            for (; i < 4; i++) {
                widths[i] = parseFloat(borders[i]) || 0;
                widths[i] += parseFloat(paddings[i]) || 0
            }
            return {
                height: widths[0] + widths[2],
                width: widths[1] + widths[3]
            }
        },
        _proportionallyResize: function() {
            if (!this._proportionallyResizeElements.length) {
                return
            }
            var prel, i = 0, element = this.helper || this.element;
            for (; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i];
                if (!this.outerDimensions) {
                    this.outerDimensions = this._getPaddingPlusBorderDimensions(prel)
                }
                prel.css({
                    height: element.height() - this.outerDimensions.height || 0,
                    width: element.width() - this.outerDimensions.width || 0
                })
            }
        },
        _renderProxy: function() {
            var el = this.element
              , o = this.options;
            this.elementOffset = el.offset();
            if (this._helper) {
                this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
                this._addClass(this.helper, this._helper);
                this.helper.css({
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    position: "absolute",
                    left: this.elementOffset.left + "px",
                    top: this.elementOffset.top + "px",
                    zIndex: ++o.zIndex
                });
                this.helper.appendTo("body").disableSelection()
            } else {
                this.helper = this.element
            }
        },
        _change: {
            e: function(event, dx) {
                return {
                    width: this.originalSize.width + dx
                }
            },
            w: function(event, dx) {
                var cs = this.originalSize
                  , sp = this.originalPosition;
                return {
                    left: sp.left + dx,
                    width: cs.width - dx
                }
            },
            n: function(event, dx, dy) {
                var cs = this.originalSize
                  , sp = this.originalPosition;
                return {
                    top: sp.top + dy,
                    height: cs.height - dy
                }
            },
            s: function(event, dx, dy) {
                return {
                    height: this.originalSize.height + dy
                }
            },
            se: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]))
            },
            sw: function(event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]))
            },
            ne: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]))
            },
            nw: function(event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]))
            }
        },
        _propagate: function(n, event) {
            $.ui.plugin.call(this, n, [event, this.ui()]);
            n !== "resize" && this._trigger(n, event, this.ui())
        },
        plugins: {},
        ui: function() {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            }
        }
    });
    $.ui.plugin.add("resizable", "animate", {
        stop: function(event) {
            var that = $(this).resizable("instance")
              , o = that.options
              , pr = that._proportionallyResizeElements
              , ista = pr.length && /textarea/i.test(pr[0].nodeName)
              , soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height
              , soffsetw = ista ? 0 : that.sizeDiff.width
              , style = {
                width: that.size.width - soffsetw,
                height: that.size.height - soffseth
            }
              , left = parseFloat(that.element.css("left")) + (that.position.left - that.originalPosition.left) || null
              , top = parseFloat(that.element.css("top")) + (that.position.top - that.originalPosition.top) || null;
            that.element.animate($.extend(style, top && left ? {
                top: top,
                left: left
            } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function() {
                    var data = {
                        width: parseFloat(that.element.css("width")),
                        height: parseFloat(that.element.css("height")),
                        top: parseFloat(that.element.css("top")),
                        left: parseFloat(that.element.css("left"))
                    };
                    if (pr && pr.length) {
                        $(pr[0]).css({
                            width: data.width,
                            height: data.height
                        })
                    }
                    that._updateCache(data);
                    that._propagate("resize", event)
                }
            })
        }
    });
    $.ui.plugin.add("resizable", "containment", {
        start: function() {
            var element, p, co, ch, cw, width, height, that = $(this).resizable("instance"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
            if (!ce) {
                return
            }
            that.containerElement = $(ce);
            if (/document/.test(oc) || oc === document) {
                that.containerOffset = {
                    left: 0,
                    top: 0
                };
                that.containerPosition = {
                    left: 0,
                    top: 0
                };
                that.parentData = {
                    element: $(document),
                    left: 0,
                    top: 0,
                    width: $(document).width(),
                    height: $(document).height() || document.body.parentNode.scrollHeight
                }
            } else {
                element = $(ce);
                p = [];
                $(["Top", "Right", "Left", "Bottom"]).each(function(i, name) {
                    p[i] = that._num(element.css("padding" + name))
                });
                that.containerOffset = element.offset();
                that.containerPosition = element.position();
                that.containerSize = {
                    height: element.innerHeight() - p[3],
                    width: element.innerWidth() - p[1]
                };
                co = that.containerOffset;
                ch = that.containerSize.height;
                cw = that.containerSize.width;
                width = that._hasScroll(ce, "left") ? ce.scrollWidth : cw;
                height = that._hasScroll(ce) ? ce.scrollHeight : ch;
                that.parentData = {
                    element: ce,
                    left: co.left,
                    top: co.top,
                    width: width,
                    height: height
                }
            }
        },
        resize: function(event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                top: 0,
                left: 0
            }, ce = that.containerElement, continueResize = true;
            if (ce[0] !== document && /static/.test(ce.css("position"))) {
                cop = co
            }
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = false
                }
                that.position.left = o.helper ? co.left : 0
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = false
                }
                that.position.top = that._helper ? co.top : 0
            }
            isParent = that.containerElement.get(0) === that.element.parent().get(0);
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
            if (isParent && isOffsetRelative) {
                that.offset.left = that.parentData.left + that.position.left;
                that.offset.top = that.parentData.top + that.position.top
            } else {
                that.offset.left = that.element.offset().left;
                that.offset.top = that.element.offset().top
            }
            woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));
            hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));
            if (woset + that.size.width >= that.parentData.width) {
                that.size.width = that.parentData.width - woset;
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = false
                }
            }
            if (hoset + that.size.height >= that.parentData.height) {
                that.size.height = that.parentData.height - hoset;
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = false
                }
            }
            if (!continueResize) {
                that.position.left = that.prevPosition.left;
                that.position.top = that.prevPosition.top;
                that.size.width = that.prevSize.width;
                that.size.height = that.prevSize.height
            }
        },
        stop: function() {
            var that = $(this).resizable("instance")
              , o = that.options
              , co = that.containerOffset
              , cop = that.containerPosition
              , ce = that.containerElement
              , helper = $(that.helper)
              , ho = helper.offset()
              , w = helper.outerWidth() - that.sizeDiff.width
              , h = helper.outerHeight() - that.sizeDiff.height;
            if (that._helper && !o.animate && /relative/.test(ce.css("position"))) {
                $(this).css({
                    left: ho.left - cop.left - co.left,
                    width: w,
                    height: h
                })
            }
            if (that._helper && !o.animate && /static/.test(ce.css("position"))) {
                $(this).css({
                    left: ho.left - cop.left - co.left,
                    width: w,
                    height: h
                })
            }
        }
    });
    $.ui.plugin.add("resizable", "alsoResize", {
        start: function() {
            var that = $(this).resizable("instance")
              , o = that.options;
            $(o.alsoResize).each(function() {
                var el = $(this);
                el.data("ui-resizable-alsoresize", {
                    width: parseFloat(el.width()),
                    height: parseFloat(el.height()),
                    left: parseFloat(el.css("left")),
                    top: parseFloat(el.css("top"))
                })
            })
        },
        resize: function(event, ui) {
            var that = $(this).resizable("instance")
              , o = that.options
              , os = that.originalSize
              , op = that.originalPosition
              , delta = {
                height: that.size.height - os.height || 0,
                width: that.size.width - os.width || 0,
                top: that.position.top - op.top || 0,
                left: that.position.left - op.left || 0
            };
            $(o.alsoResize).each(function() {
                var el = $(this)
                  , start = $(this).data("ui-resizable-alsoresize")
                  , style = {}
                  , css = el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
                $.each(css, function(i, prop) {
                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                    if (sum && sum >= 0) {
                        style[prop] = sum || null
                    }
                });
                el.css(style)
            })
        },
        stop: function() {
            $(this).removeData("ui-resizable-alsoresize")
        }
    });
    $.ui.plugin.add("resizable", "ghost", {
        start: function() {
            var that = $(this).resizable("instance")
              , cs = that.size;
            that.ghost = that.originalElement.clone();
            that.ghost.css({
                opacity: .25,
                display: "block",
                position: "relative",
                height: cs.height,
                width: cs.width,
                margin: 0,
                left: 0,
                top: 0
            });
            that._addClass(that.ghost, "ui-resizable-ghost");
            if ($.uiBackCompat !== false && typeof that.options.ghost === "string") {
                that.ghost.addClass(this.options.ghost)
            }
            that.ghost.appendTo(that.helper)
        },
        resize: function() {
            var that = $(this).resizable("instance");
            if (that.ghost) {
                that.ghost.css({
                    position: "relative",
                    height: that.size.height,
                    width: that.size.width
                })
            }
        },
        stop: function() {
            var that = $(this).resizable("instance");
            if (that.ghost && that.helper) {
                that.helper.get(0).removeChild(that.ghost.get(0))
            }
        }
    });
    $.ui.plugin.add("resizable", "grid", {
        resize: function() {
            var outerDimensions, that = $(this).resizable("instance"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
            o.grid = grid;
            if (isMinWidth) {
                newWidth += gridX
            }
            if (isMinHeight) {
                newHeight += gridY
            }
            if (isMaxWidth) {
                newWidth -= gridX
            }
            if (isMaxHeight) {
                newHeight -= gridY
            }
            if (/^(se|s|e)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight
            } else if (/^(ne)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.top = op.top - oy
            } else if (/^(sw)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.left = op.left - ox
            } else {
                if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {
                    outerDimensions = that._getPaddingPlusBorderDimensions(this)
                }
                if (newHeight - gridY > 0) {
                    that.size.height = newHeight;
                    that.position.top = op.top - oy
                } else {
                    newHeight = gridY - outerDimensions.height;
                    that.size.height = newHeight;
                    that.position.top = op.top + os.height - newHeight
                }
                if (newWidth - gridX > 0) {
                    that.size.width = newWidth;
                    that.position.left = op.left - ox
                } else {
                    newWidth = gridX - outerDimensions.width;
                    that.size.width = newWidth;
                    that.position.left = op.left + os.width - newWidth
                }
            }
        }
    });
    var widgetsResizable = $.ui.resizable;
    $.widget("ui.dialog", {
        version: "1.12.0",
        options: {
            appendTo: "body",
            autoOpen: true,
            buttons: [],
            classes: {
                "ui-dialog": "ui-corner-all",
                "ui-dialog-titlebar": "ui-corner-all"
            },
            closeOnEscape: true,
            closeText: "Close",
            draggable: true,
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                using: function(pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css("top", pos.top - topOffset)
                    }
                }
            },
            resizable: true,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: true,
            height: true,
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true,
            width: true
        },
        resizableRelatedOptions: {
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true
        },
        _create: function() {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr("title");
            if (this.options.title == null && this.originalTitle != null) {
                this.options.title = this.originalTitle
            }
            if (this.options.disabled) {
                this.options.disabled = false
            }
            this._createWrapper();
            this.element.show().removeAttr("title").appendTo(this.uiDialog);
            this._addClass("ui-dialog-content", "ui-widget-content");
            this._createTitlebar();
            this._createButtonPane();
            if (this.options.draggable && $.fn.draggable) {
                this._makeDraggable()
            }
            if (this.options.resizable && $.fn.resizable) {
                this._makeResizable()
            }
            this._isOpen = false;
            this._trackFocus()
        },
        _init: function() {
            if (this.options.autoOpen) {
                this.open()
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element && (element.jquery || element.nodeType)) {
                return $(element)
            }
            return this.document.find(element || "body").eq(0)
        },
        _destroy: function() {
            var next, originalPosition = this.originalPosition;
            this._untrackInstance();
            this._destroyOverlay();
            this.element.removeUniqueId().css(this.originalCss).detach();
            this.uiDialog.remove();
            if (this.originalTitle) {
                this.element.attr("title", this.originalTitle)
            }
            next = originalPosition.parent.children().eq(originalPosition.index);
            if (next.length && next[0] !== this.element[0]) {
                next.before(this.element)
            } else {
                originalPosition.parent.append(this.element)
            }
        },
        widget: function() {
            return this.uiDialog
        },
        disable: $.noop,
        enable: $.noop,
        close: function(event) {
            var that = this;
            if (!this._isOpen || this._trigger("beforeClose", event) === false) {
                return
            }
            this._isOpen = false;
            this._focusedElement = null;
            this._destroyOverlay();
            this._untrackInstance();
            if (!this.opener.filter(":focusable").trigger("focus").length) {
                $.ui.safeBlur($.ui.safeActiveElement(this.document[0]))
            }
            this._hide(this.uiDialog, this.options.hide, function() {
                that._trigger("close", event)
            })
        },
        isOpen: function() {
            return this._isOpen
        },
        moveToTop: function() {
            this._moveToTop()
        },
        _moveToTop: function(event, silent) {
            var moved = false
              , zIndices = this.uiDialog.siblings(".ui-front:visible").map(function() {
                return +$(this).css("z-index")
            }).get()
              , zIndexMax = Math.max.apply(null, zIndices);
            if (zIndexMax >= +this.uiDialog.css("z-index")) {
                this.uiDialog.css("z-index", zIndexMax + 1);
                moved = true
            }
            if (moved && !silent) {
                this._trigger("focus", event)
            }
            return moved
        },
        open: function() {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) {
                    this._focusTabbable()
                }
                return
            }
            this._isOpen = true;
            this.opener = $($.ui.safeActiveElement(this.document[0]));
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, true);
            if (this.overlay) {
                this.overlay.css("z-index", this.uiDialog.css("z-index") - 1)
            }
            this._show(this.uiDialog, this.options.show, function() {
                that._focusTabbable();
                that._trigger("focus")
            });
            this._makeFocusTarget();
            this._trigger("open")
        },
        _focusTabbable: function() {
            var hasFocus = this._focusedElement;
            if (!hasFocus) {
                hasFocus = this.element.find("[autofocus]")
            }
            if (!hasFocus.length) {
                hasFocus = this.element.find(":tabbable")
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogButtonPane.find(":tabbable")
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogTitlebarClose.filter(":tabbable")
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialog
            }
            hasFocus.eq(0).trigger("focus")
        },
        _keepFocus: function(event) {
            function checkFocus() {
                var activeElement = $.ui.safeActiveElement(this.document[0])
                  , isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                if (!isActive) {
                    this._focusTabbable()
                }
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus)
        },
        _createWrapper: function() {
            this.uiDialog = $("<div>").hide().attr({
                tabIndex: -1,
                role: "dialog"
            }).appendTo(this._appendTo());
            this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front");
            this._on(this.uiDialog, {
                keydown: function(event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return
                    }
                    if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
                        return
                    }
                    var tabbables = this.uiDialog.find(":tabbable")
                      , first = tabbables.filter(":first")
                      , last = tabbables.filter(":last");
                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                        this._delay(function() {
                            first.trigger("focus")
                        });
                        event.preventDefault()
                    } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                        this._delay(function() {
                            last.trigger("focus")
                        });
                        event.preventDefault()
                    }
                },
                mousedown: function(event) {
                    if (this._moveToTop(event)) {
                        this._focusTabbable()
                    }
                }
            });
            if (!this.element.find("[aria-describedby]").length) {
                this.uiDialog.attr({
                    "aria-describedby": this.element.uniqueId().attr("id")
                })
            }
        },
        _createTitlebar: function() {
            var uiDialogTitle;
            this.uiDialogTitlebar = $("<div>");
            this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix");
            this._on(this.uiDialogTitlebar, {
                mousedown: function(event) {
                    if (!$(event.target).closest(".ui-dialog-titlebar-close")) {
                        this.uiDialog.trigger("focus")
                    }
                }
            });
            this.uiDialogTitlebarClose = $("<button type='button'></button>").button({
                label: $("<a>").text(this.options.closeText).html(),
                icon: "ui-icon-closethick",
                showLabel: false
            }).appendTo(this.uiDialogTitlebar);
            this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close");
            this._on(this.uiDialogTitlebarClose, {
                click: function(event) {
                    event.preventDefault();
                    this.close(event)
                }
            });
            uiDialogTitle = $("<span>").uniqueId().prependTo(this.uiDialogTitlebar);
            this._addClass(uiDialogTitle, "ui-dialog-title");
            this._title(uiDialogTitle);
            this.uiDialogTitlebar.prependTo(this.uiDialog);
            this.uiDialog.attr({
                "aria-labelledby": uiDialogTitle.attr("id")
            })
        },
        _title: function(title) {
            if (this.options.title) {
                title.text(this.options.title)
            } else {
                title.html("&#160;")
            }
        },
        _createButtonPane: function() {
            this.uiDialogButtonPane = $("<div>");
            this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix");
            this.uiButtonSet = $("<div>").appendTo(this.uiDialogButtonPane);
            this._addClass(this.uiButtonSet, "ui-dialog-buttonset");
            this._createButtons()
        },
        _createButtons: function() {
            var that = this
              , buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                this._removeClass(this.uiDialog, "ui-dialog-buttons");
                return
            }
            $.each(buttons, function(name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props;
                props = $.extend({
                    type: "button"
                }, props);
                click = props.click;
                buttonOptions = {
                    icon: props.icon,
                    iconPosition: props.iconPosition,
                    showLabel: props.showLabel
                };
                delete props.click;
                delete props.icon;
                delete props.iconPosition;
                delete props.showLabel;
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet).on("click", function() {
                    click.apply(that.element[0], arguments)
                })
            });
            this._addClass(this.uiDialog, "ui-dialog-buttons");
            this.uiDialogButtonPane.appendTo(this.uiDialog)
        },
        _makeDraggable: function() {
            var that = this
              , options = this.options;
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                }
            }
            this.uiDialog.draggable({
                cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                handle: ".ui-dialog-titlebar",
                containment: "document",
                start: function(event, ui) {
                    that._addClass($(this), "ui-dialog-dragging");
                    that._blockFrames();
                    that._trigger("dragStart", event, filteredUi(ui))
                },
                drag: function(event, ui) {
                    that._trigger("drag", event, filteredUi(ui))
                },
                stop: function(event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft()
                      , top = ui.offset.top - that.document.scrollTop();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    that._removeClass($(this), "ui-dialog-dragging");
                    that._unblockFrames();
                    that._trigger("dragStop", event, filteredUi(ui))
                }
            })
        },
        _makeResizable: function() {
            var that = this
              , options = this.options
              , handles = options.resizable
              , position = this.uiDialog.css("position")
              , resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                }
            }
            this.uiDialog.resizable({
                cancel: ".ui-dialog-content",
                containment: "document",
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function(event, ui) {
                    that._addClass($(this), "ui-dialog-resizing");
                    that._blockFrames();
                    that._trigger("resizeStart", event, filteredUi(ui))
                },
                resize: function(event, ui) {
                    that._trigger("resize", event, filteredUi(ui))
                },
                stop: function(event, ui) {
                    var offset = that.uiDialog.offset()
                      , left = offset.left - that.document.scrollLeft()
                      , top = offset.top - that.document.scrollTop();
                    options.height = that.uiDialog.height();
                    options.width = that.uiDialog.width();
                    options.position = {
                        my: "left top",
                        at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top,
                        of: that.window
                    };
                    that._removeClass($(this), "ui-dialog-resizing");
                    that._unblockFrames();
                    that._trigger("resizeStop", event, filteredUi(ui))
                }
            }).css("position", position)
        },
        _trackFocus: function() {
            this._on(this.widget(), {
                focusin: function(event) {
                    this._makeFocusTarget();
                    this._focusedElement = $(event.target)
                }
            })
        },
        _makeFocusTarget: function() {
            this._untrackInstance();
            this._trackingInstances().unshift(this)
        },
        _untrackInstance: function() {
            var instances = this._trackingInstances()
              , exists = $.inArray(this, instances);
            if (exists !== -1) {
                instances.splice(exists, 1)
            }
        },
        _trackingInstances: function() {
            var instances = this.document.data("ui-dialog-instances");
            if (!instances) {
                instances = [];
                this.document.data("ui-dialog-instances", instances)
            }
            return instances
        },
        _minHeight: function() {
            var options = this.options;
            return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height)
        },
        _position: function() {
            var isVisible = this.uiDialog.is(":visible");
            if (!isVisible) {
                this.uiDialog.show()
            }
            this.uiDialog.position(this.options.position);
            if (!isVisible) {
                this.uiDialog.hide()
            }
        },
        _setOptions: function(options) {
            var that = this
              , resize = false
              , resizableOptions = {};
            $.each(options, function(key, value) {
                that._setOption(key, value);
                if (key in that.sizeRelatedOptions) {
                    resize = true
                }
                if (key in that.resizableRelatedOptions) {
                    resizableOptions[key] = value
                }
            });
            if (resize) {
                this._size();
                this._position()
            }
            if (this.uiDialog.is(":data(ui-resizable)")) {
                this.uiDialog.resizable("option", resizableOptions)
            }
        },
        _setOption: function(key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            if (key === "disabled") {
                return
            }
            this._super(key, value);
            if (key === "appendTo") {
                this.uiDialog.appendTo(this._appendTo())
            }
            if (key === "buttons") {
                this._createButtons()
            }
            if (key === "closeText") {
                this.uiDialogTitlebarClose.button({
                    label: $("<a>").text("" + this.options.closeText).html()
                })
            }
            if (key === "draggable") {
                isDraggable = uiDialog.is(":data(ui-draggable)");
                if (isDraggable && !value) {
                    uiDialog.draggable("destroy")
                }
                if (!isDraggable && value) {
                    this._makeDraggable()
                }
            }
            if (key === "position") {
                this._position()
            }
            if (key === "resizable") {
                isResizable = uiDialog.is(":data(ui-resizable)");
                if (isResizable && !value) {
                    uiDialog.resizable("destroy")
                }
                if (isResizable && typeof value === "string") {
                    uiDialog.resizable("option", "handles", value)
                }
                if (!isResizable && value !== false) {
                    this._makeResizable()
                }
            }
            if (key === "title") {
                this._title(this.uiDialogTitlebar.find(".ui-dialog-title"))
            }
        },
        _size: function() {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                width: "auto",
                minHeight: 0,
                maxHeight: "none",
                height: 0
            });
            if (options.minWidth > options.width) {
                options.width = options.minWidth
            }
            nonContentHeight = this.uiDialog.css({
                height: "auto",
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
            if (options.height === "auto") {
                this.element.css({
                    minHeight: minContentHeight,
                    maxHeight: maxContentHeight,
                    height: "auto"
                })
            } else {
                this.element.height(Math.max(0, options.height - nonContentHeight))
            }
            if (this.uiDialog.is(":data(ui-resizable)")) {
                this.uiDialog.resizable("option", "minHeight", this._minHeight())
            }
        },
        _blockFrames: function() {
            this.iframeBlocks = this.document.find("iframe").map(function() {
                var iframe = $(this);
                return $("<div>").css({
                    position: "absolute",
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0]
            })
        },
        _unblockFrames: function() {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks
            }
        },
        _allowInteraction: function(event) {
            if ($(event.target).closest(".ui-dialog").length) {
                return true
            }
            return !!$(event.target).closest(".ui-datepicker").length
        },
        _createOverlay: function() {
            if (!this.options.modal) {
                return
            }
            var isOpening = true;
            this._delay(function() {
                isOpening = false
            });
            if (!this.document.data("ui-dialog-overlays")) {
                this._on(this.document, {
                    focusin: function(event) {
                        if (isOpening) {
                            return
                        }
                        if (!this._allowInteraction(event)) {
                            event.preventDefault();
                            this._trackingInstances()[0]._focusTabbable()
                        }
                    }
                })
            }
            this.overlay = $("<div>").appendTo(this._appendTo());
            this._addClass(this.overlay, null, "ui-widget-overlay ui-front");
            this._on(this.overlay, {
                mousedown: "_keepFocus"
            });
            this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1)
        },
        _destroyOverlay: function() {
            if (!this.options.modal) {
                return
            }
            if (this.overlay) {
                var overlays = this.document.data("ui-dialog-overlays") - 1;
                if (!overlays) {
                    this._off(this.document, "focusin");
                    this.document.removeData("ui-dialog-overlays")
                } else {
                    this.document.data("ui-dialog-overlays", overlays)
                }
                this.overlay.remove();
                this.overlay = null
            }
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.dialog", $.ui.dialog, {
            options: {
                dialogClass: ""
            },
            _createWrapper: function() {
                this._super();
                this.uiDialog.addClass(this.options.dialogClass)
            },
            _setOption: function(key, value) {
                if (key === "dialogClass") {
                    this.uiDialog.removeClass(this.options.dialogClass).addClass(value)
                }
                this._superApply(arguments)
            }
        })
    }
    var widgetsDialog = $.ui.dialog;
    $.widget("ui.droppable", {
        version: "1.12.0",
        widgetEventPrefix: "drop",
        options: {
            accept: "*",
            addClasses: true,
            greedy: false,
            scope: "default",
            tolerance: "intersect",
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function() {
            var proportions, o = this.options, accept = o.accept;
            this.isover = false;
            this.isout = true;
            this.accept = $.isFunction(accept) ? accept : function(d) {
                return d.is(accept)
            }
            ;
            this.proportions = function() {
                if (arguments.length) {
                    proportions = arguments[0]
                } else {
                    return proportions ? proportions : proportions = {
                        width: this.element[0].offsetWidth,
                        height: this.element[0].offsetHeight
                    }
                }
            }
            ;
            this._addToManager(o.scope);
            o.addClasses && this._addClass("ui-droppable")
        },
        _addToManager: function(scope) {
            $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];
            $.ui.ddmanager.droppables[scope].push(this)
        },
        _splice: function(drop) {
            var i = 0;
            for (; i < drop.length; i++) {
                if (drop[i] === this) {
                    drop.splice(i, 1)
                }
            }
        },
        _destroy: function() {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            this._splice(drop)
        },
        _setOption: function(key, value) {
            if (key === "accept") {
                this.accept = $.isFunction(value) ? value : function(d) {
                    return d.is(value)
                }
            } else if (key === "scope") {
                var drop = $.ui.ddmanager.droppables[this.options.scope];
                this._splice(drop);
                this._addToManager(value)
            }
            this._super(key, value)
        },
        _activate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this._addActiveClass();
            if (draggable) {
                this._trigger("activate", event, this.ui(draggable))
            }
        },
        _deactivate: function(event) {
            var draggable = $.ui.ddmanager.current;
            this._removeActiveClass();
            if (draggable) {
                this._trigger("deactivate", event, this.ui(draggable))
            }
        },
        _over: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return
            }
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                this._addHoverClass();
                this._trigger("over", event, this.ui(draggable))
            }
        },
        _out: function(event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return
            }
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                this._removeHoverClass();
                this._trigger("out", event, this.ui(draggable))
            }
        },
        _drop: function(event, custom) {
            var draggable = custom || $.ui.ddmanager.current
              , childrenIntersection = false;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return false
            }
            this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                var inst = $(this).droppable("instance");
                if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && intersect(draggable, $.extend(inst, {
                    offset: inst.element.offset()
                }), inst.options.tolerance, event)) {
                    childrenIntersection = true;
                    return false
                }
            });
            if (childrenIntersection) {
                return false
            }
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                this._removeActiveClass();
                this._removeHoverClass();
                this._trigger("drop", event, this.ui(draggable));
                return this.element
            }
            return false
        },
        ui: function(c) {
            return {
                draggable: c.currentItem || c.element,
                helper: c.helper,
                position: c.position,
                offset: c.positionAbs
            }
        },
        _addHoverClass: function() {
            this._addClass("ui-droppable-hover")
        },
        _removeHoverClass: function() {
            this._removeClass("ui-droppable-hover")
        },
        _addActiveClass: function() {
            this._addClass("ui-droppable-active")
        },
        _removeActiveClass: function() {
            this._removeClass("ui-droppable-active")
        }
    });
    var intersect = $.ui.intersect = function() {
        function isOverAxis(x, reference, size) {
            return x >= reference && x < reference + size
        }
        return function(draggable, droppable, toleranceMode, event) {
            if (!droppable.offset) {
                return false
            }
            var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left
              , y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top
              , x2 = x1 + draggable.helperProportions.width
              , y2 = y1 + draggable.helperProportions.height
              , l = droppable.offset.left
              , t = droppable.offset.top
              , r = l + droppable.proportions().width
              , b = t + droppable.proportions().height;
            switch (toleranceMode) {
            case "fit":
                return l <= x1 && x2 <= r && t <= y1 && y2 <= b;
            case "intersect":
                return l < x1 + draggable.helperProportions.width / 2 && x2 - draggable.helperProportions.width / 2 < r && t < y1 + draggable.helperProportions.height / 2 && y2 - draggable.helperProportions.height / 2 < b;
            case "pointer":
                return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);
            case "touch":
                return (y1 >= t && y1 <= b || y2 >= t && y2 <= b || y1 < t && y2 > b) && (x1 >= l && x1 <= r || x2 >= l && x2 <= r || x1 < l && x2 > r);
            default:
                return false
            }
        }
    }();
    $.ui.ddmanager = {
        current: null,
        droppables: {
            "default": []
        },
        prepareOffsets: function(t, event) {
            var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
            droppablesLoop: for (i = 0; i < m.length; i++) {
                if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {
                    continue
                }
                for (j = 0; j < list.length; j++) {
                    if (list[j] === m[i].element[0]) {
                        m[i].proportions().height = 0;
                        continue droppablesLoop
                    }
                }
                m[i].visible = m[i].element.css("display") !== "none";
                if (!m[i].visible) {
                    continue
                }
                if (type === "mousedown") {
                    m[i]._activate.call(m[i], event)
                }
                m[i].offset = m[i].element.offset();
                m[i].proportions({
                    width: m[i].element[0].offsetWidth,
                    height: m[i].element[0].offsetHeight
                })
            }
        },
        drop: function(draggable, event) {
            var dropped = false;
            $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
                if (!this.options) {
                    return
                }
                if (!this.options.disabled && this.visible && intersect(draggable, this, this.options.tolerance, event)) {
                    dropped = this._drop.call(this, event) || dropped
                }
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                    this.isout = true;
                    this.isover = false;
                    this._deactivate.call(this, event)
                }
            });
            return dropped
        },
        dragStart: function(draggable, event) {
            draggable.element.parentsUntil("body").on("scroll.droppable", function() {
                if (!draggable.options.refreshPositions) {
                    $.ui.ddmanager.prepareOffsets(draggable, event)
                }
            })
        },
        drag: function(draggable, event) {
            if (draggable.options.refreshPositions) {
                $.ui.ddmanager.prepareOffsets(draggable, event)
            }
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                if (this.options.disabled || this.greedyChild || !this.visible) {
                    return
                }
                var parentInstance, scope, parent, intersects = intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
                if (!c) {
                    return
                }
                if (this.options.greedy) {
                    scope = this.options.scope;
                    parent = this.element.parents(":data(ui-droppable)").filter(function() {
                        return $(this).droppable("instance").options.scope === scope
                    });
                    if (parent.length) {
                        parentInstance = $(parent[0]).droppable("instance");
                        parentInstance.greedyChild = c === "isover"
                    }
                }
                if (parentInstance && c === "isover") {
                    parentInstance.isover = false;
                    parentInstance.isout = true;
                    parentInstance._out.call(parentInstance, event)
                }
                this[c] = true;
                this[c === "isout" ? "isover" : "isout"] = false;
                this[c === "isover" ? "_over" : "_out"].call(this, event);
                if (parentInstance && c === "isout") {
                    parentInstance.isout = false;
                    parentInstance.isover = true;
                    parentInstance._over.call(parentInstance, event)
                }
            })
        },
        dragStop: function(draggable, event) {
            draggable.element.parentsUntil("body").off("scroll.droppable");
            if (!draggable.options.refreshPositions) {
                $.ui.ddmanager.prepareOffsets(draggable, event)
            }
        }
    };
    if ($.uiBackCompat !== false) {
        $.widget("ui.droppable", $.ui.droppable, {
            options: {
                hoverClass: false,
                activeClass: false
            },
            _addActiveClass: function() {
                this._super();
                if (this.options.activeClass) {
                    this.element.addClass(this.options.activeClass)
                }
            },
            _removeActiveClass: function() {
                this._super();
                if (this.options.activeClass) {
                    this.element.removeClass(this.options.activeClass)
                }
            },
            _addHoverClass: function() {
                this._super();
                if (this.options.hoverClass) {
                    this.element.addClass(this.options.hoverClass)
                }
            },
            _removeHoverClass: function() {
                this._super();
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass)
                }
            }
        })
    }
    var widgetsDroppable = $.ui.droppable;
    var widgetsProgressbar = $.widget("ui.progressbar", {
        version: "1.12.0",
        options: {
            classes: {
                "ui-progressbar": "ui-corner-all",
                "ui-progressbar-value": "ui-corner-left",
                "ui-progressbar-complete": "ui-corner-right"
            },
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function() {
            this.oldValue = this.options.value = this._constrainedValue();
            this.element.attr({
                role: "progressbar",
                "aria-valuemin": this.min
            });
            this._addClass("ui-progressbar", "ui-widget ui-widget-content");
            this.valueDiv = $("<div>").appendTo(this.element);
            this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header");
            this._refreshValue()
        },
        _destroy: function() {
            this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow");
            this.valueDiv.remove()
        },
        value: function(newValue) {
            if (newValue === undefined) {
                return this.options.value
            }
            this.options.value = this._constrainedValue(newValue);
            this._refreshValue()
        },
        _constrainedValue: function(newValue) {
            if (newValue === undefined) {
                newValue = this.options.value
            }
            this.indeterminate = newValue === false;
            if (typeof newValue !== "number") {
                newValue = 0
            }
            return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue))
        },
        _setOptions: function(options) {
            var value = options.value;
            delete options.value;
            this._super(options);
            this.options.value = this._constrainedValue(value);
            this._refreshValue()
        },
        _setOption: function(key, value) {
            if (key === "max") {
                value = Math.max(this.min, value)
            }
            this._super(key, value)
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.element.attr("aria-disabled", value);
            this._toggleClass(null, "ui-state-disabled", !!value)
        },
        _percentage: function() {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min)
        },
        _refreshValue: function() {
            var value = this.options.value
              , percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + "%");
            this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, value === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate);
            if (this.indeterminate) {
                this.element.removeAttr("aria-valuenow");
                if (!this.overlayDiv) {
                    this.overlayDiv = $("<div>").appendTo(this.valueDiv);
                    this._addClass(this.overlayDiv, "ui-progressbar-overlay")
                }
            } else {
                this.element.attr({
                    "aria-valuemax": this.options.max,
                    "aria-valuenow": value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null
                }
            }
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger("change")
            }
            if (value === this.options.max) {
                this._trigger("complete")
            }
        }
    });
    var widgetsSelectable = $.widget("ui.selectable", $.ui.mouse, {
        version: "1.12.0",
        options: {
            appendTo: "body",
            autoRefresh: true,
            distance: 0,
            filter: "*",
            tolerance: "touch",
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function() {
            var that = this;
            this._addClass("ui-selectable");
            this.dragged = false;
            this.refresh = function() {
                that.elementPos = $(that.element[0]).offset();
                that.selectees = $(that.options.filter, that.element[0]);
                that._addClass(that.selectees, "ui-selectee");
                that.selectees.each(function() {
                    var $this = $(this)
                      , selecteeOffset = $this.offset()
                      , pos = {
                        left: selecteeOffset.left - that.elementPos.left,
                        top: selecteeOffset.top - that.elementPos.top
                    };
                    $.data(this, "selectable-item", {
                        element: this,
                        $element: $this,
                        left: pos.left,
                        top: pos.top,
                        right: pos.left + $this.outerWidth(),
                        bottom: pos.top + $this.outerHeight(),
                        startselected: false,
                        selected: $this.hasClass("ui-selected"),
                        selecting: $this.hasClass("ui-selecting"),
                        unselecting: $this.hasClass("ui-unselecting")
                    })
                })
            }
            ;
            this.refresh();
            this._mouseInit();
            this.helper = $("<div>");
            this._addClass(this.helper, "ui-selectable-helper")
        },
        _destroy: function() {
            this.selectees.removeData("selectable-item");
            this._mouseDestroy()
        },
        _mouseStart: function(event) {
            var that = this
              , options = this.options;
            this.opos = [event.pageX, event.pageY];
            this.elementPos = $(this.element[0]).offset();
            if (this.options.disabled) {
                return
            }
            this.selectees = $(options.filter, this.element[0]);
            this._trigger("start", event);
            $(options.appendTo).append(this.helper);
            this.helper.css({
                left: event.pageX,
                top: event.pageY,
                width: 0,
                height: 0
            });
            if (options.autoRefresh) {
                this.refresh()
            }
            this.selectees.filter(".ui-selected").each(function() {
                var selectee = $.data(this, "selectable-item");
                selectee.startselected = true;
                if (!event.metaKey && !event.ctrlKey) {
                    that._removeClass(selectee.$element, "ui-selected");
                    selectee.selected = false;
                    that._addClass(selectee.$element, "ui-unselecting");
                    selectee.unselecting = true;
                    that._trigger("unselecting", event, {
                        unselecting: selectee.element
                    })
                }
            });
            $(event.target).parents().addBack().each(function() {
                var doSelect, selectee = $.data(this, "selectable-item");
                if (selectee) {
                    doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected");
                    that._removeClass(selectee.$element, doSelect ? "ui-unselecting" : "ui-selected")._addClass(selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting");
                    selectee.unselecting = !doSelect;
                    selectee.selecting = doSelect;
                    selectee.selected = doSelect;
                    if (doSelect) {
                        that._trigger("selecting", event, {
                            selecting: selectee.element
                        })
                    } else {
                        that._trigger("unselecting", event, {
                            unselecting: selectee.element
                        })
                    }
                    return false
                }
            })
        },
        _mouseDrag: function(event) {
            this.dragged = true;
            if (this.options.disabled) {
                return
            }
            var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
            if (x1 > x2) {
                tmp = x2;
                x2 = x1;
                x1 = tmp
            }
            if (y1 > y2) {
                tmp = y2;
                y2 = y1;
                y1 = tmp
            }
            this.helper.css({
                left: x1,
                top: y1,
                width: x2 - x1,
                height: y2 - y1
            });
            this.selectees.each(function() {
                var selectee = $.data(this, "selectable-item")
                  , hit = false
                  , offset = {};
                if (!selectee || selectee.element === that.element[0]) {
                    return
                }
                offset.left = selectee.left + that.elementPos.left;
                offset.right = selectee.right + that.elementPos.left;
                offset.top = selectee.top + that.elementPos.top;
                offset.bottom = selectee.bottom + that.elementPos.top;
                if (options.tolerance === "touch") {
                    hit = !(offset.left > x2 || offset.right < x1 || offset.top > y2 || offset.bottom < y1)
                } else if (options.tolerance === "fit") {
                    hit = offset.left > x1 && offset.right < x2 && offset.top > y1 && offset.bottom < y2
                }
                if (hit) {
                    if (selectee.selected) {
                        that._removeClass(selectee.$element, "ui-selected");
                        selectee.selected = false
                    }
                    if (selectee.unselecting) {
                        that._removeClass(selectee.$element, "ui-unselecting");
                        selectee.unselecting = false
                    }
                    if (!selectee.selecting) {
                        that._addClass(selectee.$element, "ui-selecting");
                        selectee.selecting = true;
                        that._trigger("selecting", event, {
                            selecting: selectee.element
                        })
                    }
                } else {
                    if (selectee.selecting) {
                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                            that._removeClass(selectee.$element, "ui-selecting");
                            selectee.selecting = false;
                            that._addClass(selectee.$element, "ui-selected");
                            selectee.selected = true
                        } else {
                            that._removeClass(selectee.$element, "ui-selecting");
                            selectee.selecting = false;
                            if (selectee.startselected) {
                                that._addClass(selectee.$element, "ui-unselecting");
                                selectee.unselecting = true
                            }
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            })
                        }
                    }
                    if (selectee.selected) {
                        if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                            that._removeClass(selectee.$element, "ui-selected");
                            selectee.selected = false;
                            that._addClass(selectee.$element, "ui-unselecting");
                            selectee.unselecting = true;
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            })
                        }
                    }
                }
            });
            return false
        },
        _mouseStop: function(event) {
            var that = this;
            this.dragged = false;
            $(".ui-unselecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                that._removeClass(selectee.$element, "ui-unselecting");
                selectee.unselecting = false;
                selectee.startselected = false;
                that._trigger("unselected", event, {
                    unselected: selectee.element
                })
            });
            $(".ui-selecting", this.element[0]).each(function() {
                var selectee = $.data(this, "selectable-item");
                that._removeClass(selectee.$element, "ui-selecting")._addClass(selectee.$element, "ui-selected");
                selectee.selecting = false;
                selectee.selected = true;
                selectee.startselected = true;
                that._trigger("selected", event, {
                    selected: selectee.element
                })
            });
            this._trigger("stop", event);
            this.helper.remove();
            return false
        }
    });
    var widgetsSelectmenu = $.widget("ui.selectmenu", [$.ui.formResetMixin, {
        version: "1.12.0",
        defaultElement: "<select>",
        options: {
            appendTo: null,
            classes: {
                "ui-selectmenu-button-open": "ui-corner-top",
                "ui-selectmenu-button-closed": "ui-corner-all"
            },
            disabled: null,
            icons: {
                button: "ui-icon-triangle-1-s"
            },
            position: {
                my: "left top",
                at: "left bottom",
                collision: "none"
            },
            width: false,
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function() {
            var selectmenuId = this.element.uniqueId().attr("id");
            this.ids = {
                element: selectmenuId,
                button: selectmenuId + "-button",
                menu: selectmenuId + "-menu"
            };
            this._drawButton();
            this._drawMenu();
            this._bindFormResetHandler();
            this._rendered = false;
            this.menuItems = $()
        },
        _drawButton: function() {
            var icon, that = this, item = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);
            this.labels = this.element.labels().attr("for", this.ids.button);
            this._on(this.labels, {
                click: function(event) {
                    this.button.focus();
                    event.preventDefault()
                }
            });
            this.element.hide();
            this.button = $("<span>", {
                tabindex: this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: "combobox",
                "aria-expanded": "false",
                "aria-autocomplete": "list",
                "aria-owns": this.ids.menu,
                "aria-haspopup": "true",
                title: this.element.attr("title")
            }).insertAfter(this.element);
            this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget");
            icon = $("<span>").appendTo(this.button);
            this._addClass(icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button);
            this.buttonItem = this._renderButtonItem(item).appendTo(this.button);
            if (this.options.width !== false) {
                this._resizeButton()
            }
            this._on(this.button, this._buttonEvents);
            this.button.one("focusin", function() {
                if (!that._rendered) {
                    that._refreshMenu()
                }
            })
        },
        _drawMenu: function() {
            var that = this;
            this.menu = $("<ul>", {
                "aria-hidden": "true",
                "aria-labelledby": this.ids.button,
                id: this.ids.menu
            });
            this.menuWrap = $("<div>").append(this.menu);
            this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front");
            this.menuWrap.appendTo(this._appendTo());
            this.menuInstance = this.menu.menu({
                classes: {
                    "ui-menu": "ui-corner-bottom"
                },
                role: "listbox",
                select: function(event, ui) {
                    event.preventDefault();
                    that._setSelection();
                    that._select(ui.item.data("ui-selectmenu-item"), event)
                },
                focus: function(event, ui) {
                    var item = ui.item.data("ui-selectmenu-item");
                    if (that.focusIndex != null && item.index !== that.focusIndex) {
                        that._trigger("focus", event, {
                            item: item
                        });
                        if (!that.isOpen) {
                            that._select(item, event)
                        }
                    }
                    that.focusIndex = item.index;
                    that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"))
                }
            }).menu("instance");
            this.menuInstance._off(this.menu, "mouseleave");
            this.menuInstance._closeOnDocumentClick = function() {
                return false
            }
            ;
            this.menuInstance._isDivider = function() {
                return false
            }
        },
        refresh: function() {
            this._refreshMenu();
            this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {}));
            if (this.options.width === null) {
                this._resizeButton()
            }
        },
        _refreshMenu: function() {
            var item, options = this.element.find("option");
            this.menu.empty();
            this._parseOptions(options);
            this._renderMenu(this.menu, this.items);
            this.menuInstance.refresh();
            this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper");
            this._rendered = true;
            if (!options.length) {
                return
            }
            item = this._getSelectedItem();
            this.menuInstance.focus(null, item);
            this._setAria(item.data("ui-selectmenu-item"));
            this._setOption("disabled", this.element.prop("disabled"))
        },
        open: function(event) {
            if (this.options.disabled) {
                return
            }
            if (!this._rendered) {
                this._refreshMenu()
            } else {
                this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active");
                this.menuInstance.focus(null, this._getSelectedItem())
            }
            if (!this.menuItems.length) {
                return
            }
            this.isOpen = true;
            this._toggleAttr();
            this._resizeMenu();
            this._position();
            this._on(this.document, this._documentClick);
            this._trigger("open", event)
        },
        _position: function() {
            this.menuWrap.position($.extend({
                of: this.button
            }, this.options.position))
        },
        close: function(event) {
            if (!this.isOpen) {
                return
            }
            this.isOpen = false;
            this._toggleAttr();
            this.range = null;
            this._off(this.document);
            this._trigger("close", event)
        },
        widget: function() {
            return this.button
        },
        menuWidget: function() {
            return this.menu
        },
        _renderButtonItem: function(item) {
            var buttonItem = $("<span>");
            this._setText(buttonItem, item.label);
            this._addClass(buttonItem, "ui-selectmenu-text");
            return buttonItem
        },
        _renderMenu: function(ul, items) {
            var that = this
              , currentOptgroup = "";
            $.each(items, function(index, item) {
                var li;
                if (item.optgroup !== currentOptgroup) {
                    li = $("<li>", {
                        text: item.optgroup
                    });
                    that._addClass(li, "ui-selectmenu-optgroup", "ui-menu-divider" + (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""));
                    li.appendTo(ul);
                    currentOptgroup = item.optgroup
                }
                that._renderItemData(ul, item)
            })
        },
        _renderItemData: function(ul, item) {
            return this._renderItem(ul, item).data("ui-selectmenu-item", item)
        },
        _renderItem: function(ul, item) {
            var li = $("<li>")
              , wrapper = $("<div>", {
                title: item.element.attr("title")
            });
            if (item.disabled) {
                this._addClass(li, null, "ui-state-disabled")
            }
            this._setText(wrapper, item.label);
            return li.append(wrapper).appendTo(ul)
        },
        _setText: function(element, value) {
            if (value) {
                element.text(value)
            } else {
                element.html("&#160;")
            }
        },
        _move: function(direction, event) {
            var item, next, filter = ".ui-menu-item";
            if (this.isOpen) {
                item = this.menuItems.eq(this.focusIndex).parent("li")
            } else {
                item = this.menuItems.eq(this.element[0].selectedIndex).parent("li");
                filter += ":not(.ui-state-disabled)"
            }
            if (direction === "first" || direction === "last") {
                next = item[direction === "first" ? "prevAll" : "nextAll"](filter).eq(-1)
            } else {
                next = item[direction + "All"](filter).eq(0)
            }
            if (next.length) {
                this.menuInstance.focus(event, next)
            }
        },
        _getSelectedItem: function() {
            return this.menuItems.eq(this.element[0].selectedIndex).parent("li")
        },
        _toggle: function(event) {
            this[this.isOpen ? "close" : "open"](event)
        },
        _setSelection: function() {
            var selection;
            if (!this.range) {
                return
            }
            if (window.getSelection) {
                selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(this.range)
            } else {
                this.range.select()
            }
            this.button.focus()
        },
        _documentClick: {
            mousedown: function(event) {
                if (!this.isOpen) {
                    return
                }
                if (!$(event.target).closest(".ui-selectmenu-menu, #" + $.ui.escapeSelector(this.ids.button)).length) {
                    this.close(event)
                }
            }
        },
        _buttonEvents: {
            mousedown: function() {
                var selection;
                if (window.getSelection) {
                    selection = window.getSelection();
                    if (selection.rangeCount) {
                        this.range = selection.getRangeAt(0)
                    }
                } else {
                    this.range = document.selection.createRange()
                }
            },
            click: function(event) {
                this._setSelection();
                this._toggle(event)
            },
            keydown: function(event) {
                var preventDefault = true;
                switch (event.keyCode) {
                case $.ui.keyCode.TAB:
                case $.ui.keyCode.ESCAPE:
                    this.close(event);
                    preventDefault = false;
                    break;
                case $.ui.keyCode.ENTER:
                    if (this.isOpen) {
                        this._selectFocusedItem(event)
                    }
                    break;
                case $.ui.keyCode.UP:
                    if (event.altKey) {
                        this._toggle(event)
                    } else {
                        this._move("prev", event)
                    }
                    break;
                case $.ui.keyCode.DOWN:
                    if (event.altKey) {
                        this._toggle(event)
                    } else {
                        this._move("next", event)
                    }
                    break;
                case $.ui.keyCode.SPACE:
                    if (this.isOpen) {
                        this._selectFocusedItem(event)
                    } else {
                        this._toggle(event)
                    }
                    break;
                case $.ui.keyCode.LEFT:
                    this._move("prev", event);
                    break;
                case $.ui.keyCode.RIGHT:
                    this._move("next", event);
                    break;
                case $.ui.keyCode.HOME:
                case $.ui.keyCode.PAGE_UP:
                    this._move("first", event);
                    break;
                case $.ui.keyCode.END:
                case $.ui.keyCode.PAGE_DOWN:
                    this._move("last", event);
                    break;
                default:
                    this.menu.trigger(event);
                    preventDefault = false
                }
                if (preventDefault) {
                    event.preventDefault()
                }
            }
        },
        _selectFocusedItem: function(event) {
            var item = this.menuItems.eq(this.focusIndex).parent("li");
            if (!item.hasClass("ui-state-disabled")) {
                this._select(item.data("ui-selectmenu-item"), event)
            }
        },
        _select: function(item, event) {
            var oldIndex = this.element[0].selectedIndex;
            this.element[0].selectedIndex = item.index;
            this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item));
            this._setAria(item);
            this._trigger("select", event, {
                item: item
            });
            if (item.index !== oldIndex) {
                this._trigger("change", event, {
                    item: item
                })
            }
            this.close(event)
        },
        _setAria: function(item) {
            var id = this.menuItems.eq(item.index).attr("id");
            this.button.attr({
                "aria-labelledby": id,
                "aria-activedescendant": id
            });
            this.menu.attr("aria-activedescendant", id)
        },
        _setOption: function(key, value) {
            if (key === "icons") {
                var icon = this.button.find("span.ui-icon");
                this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button)
            }
            this._super(key, value);
            if (key === "appendTo") {
                this.menuWrap.appendTo(this._appendTo())
            }
            if (key === "width") {
                this._resizeButton()
            }
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this.menuInstance.option("disabled", value);
            this.button.attr("aria-disabled", value);
            this._toggleClass(this.button, null, "ui-state-disabled", value);
            this.element.prop("disabled", value);
            if (value) {
                this.button.attr("tabindex", -1);
                this.close()
            } else {
                this.button.attr("tabindex", 0)
            }
        },
        _appendTo: function() {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0)
            }
            if (!element || !element[0]) {
                element = this.element.closest(".ui-front, dialog")
            }
            if (!element.length) {
                element = this.document[0].body
            }
            return element
        },
        _toggleAttr: function() {
            this.button.attr("aria-expanded", this.isOpen);
            this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen);
            this.menu.attr("aria-hidden", !this.isOpen)
        },
        _resizeButton: function() {
            var width = this.options.width;
            if (width === false) {
                this.button.css("width", "");
                return
            }
            if (width === null) {
                width = this.element.show().outerWidth();
                this.element.hide()
            }
            this.button.outerWidth(width)
        },
        _resizeMenu: function() {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1))
        },
        _getCreateOptions: function() {
            var options = this._super();
            options.disabled = this.element.prop("disabled");
            return options
        },
        _parseOptions: function(options) {
            var that = this
              , data = [];
            options.each(function(index, item) {
                data.push(that._parseOption($(item), index))
            });
            this.items = data
        },
        _parseOption: function(option, index) {
            var optgroup = option.parent("optgroup");
            return {
                element: option,
                index: index,
                value: option.val(),
                label: option.text(),
                optgroup: optgroup.attr("label") || "",
                disabled: optgroup.prop("disabled") || option.prop("disabled")
            }
        },
        _destroy: function() {
            this._unbindFormResetHandler();
            this.menuWrap.remove();
            this.button.remove();
            this.element.show();
            this.element.removeUniqueId();
            this.labels.attr("for", this.ids.element)
        }
    }]);
    var widgetsSlider = $.widget("ui.slider", $.ui.mouse, {
        version: "1.12.0",
        widgetEventPrefix: "slide",
        options: {
            animate: false,
            classes: {
                "ui-slider": "ui-corner-all",
                "ui-slider-handle": "ui-corner-all",
                "ui-slider-range": "ui-corner-all ui-widget-header"
            },
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        numPages: 5,
        _create: function() {
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this._calculateNewMax();
            this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content");
            this._refresh();
            this._animateOff = false
        },
        _refresh: function() {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue()
        },
        _createHandles: function() {
            var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle"), handle = "<span tabindex='0'></span>", handles = [];
            handleCount = options.values && options.values.length || 1;
            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount)
            }
            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push(handle)
            }
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
            this._addClass(this.handles, "ui-slider-handle", "ui-state-default");
            this.handle = this.handles.eq(0);
            this.handles.each(function(i) {
                $(this).data("ui-slider-handle-index", i)
            })
        },
        _createRange: function() {
            var options = this.options;
            if (options.range) {
                if (options.range === true) {
                    if (!options.values) {
                        options.values = [this._valueMin(), this._valueMin()]
                    } else if (options.values.length && options.values.length !== 2) {
                        options.values = [options.values[0], options.values[0]]
                    } else if ($.isArray(options.values)) {
                        options.values = options.values.slice(0)
                    }
                }
                if (!this.range || !this.range.length) {
                    this.range = $("<div>").appendTo(this.element);
                    this._addClass(this.range, "ui-slider-range")
                } else {
                    this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max");
                    this.range.css({
                        left: "",
                        bottom: ""
                    })
                }
                if (options.range === "min" || options.range === "max") {
                    this._addClass(this.range, "ui-slider-range-" + options.range)
                }
            } else {
                if (this.range) {
                    this.range.remove()
                }
                this.range = null
            }
        },
        _setupEvents: function() {
            this._off(this.handles);
            this._on(this.handles, this._handleEvents);
            this._hoverable(this.handles);
            this._focusable(this.handles)
        },
        _destroy: function() {
            this.handles.remove();
            if (this.range) {
                this.range.remove()
            }
            this._mouseDestroy()
        },
        _mouseCapture: function(event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
            if (o.disabled) {
                return false
            }
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function(i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i
                }
            });
            allowed = this._start(event, index);
            if (allowed === false) {
                return false
            }
            this._mouseSliding = true;
            this._handleIndex = index;
            this._addClass(closestHandle, null, "ui-state-active");
            closestHandle.trigger("focus");
            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - closestHandle.width() / 2,
                top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            };
            if (!this.handles.hasClass("ui-state-hover")) {
                this._slide(event, index, normValue)
            }
            this._animateOff = true;
            return true
        },
        _mouseStart: function() {
            return true
        },
        _mouseDrag: function(event) {
            var position = {
                x: event.pageX,
                y: event.pageY
            }
              , normValue = this._normValueFromMouse(position);
            this._slide(event, this._handleIndex, normValue);
            return false
        },
        _mouseStop: function(event) {
            this._removeClass(this.handles, null, "ui-state-active");
            this._mouseSliding = false;
            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;
            return false
        },
        _detectOrientation: function() {
            this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal"
        },
        _normValueFromMouse: function(position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)
            }
            percentMouse = pixelMouse / pixelTotal;
            if (percentMouse > 1) {
                percentMouse = 1
            }
            if (percentMouse < 0) {
                percentMouse = 0
            }
            if (this.orientation === "vertical") {
                percentMouse = 1 - percentMouse
            }
            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;
            return this._trimAlignValue(valueMouse)
        },
        _uiHash: function(index, value, values) {
            var uiHash = {
                handle: this.handles[index],
                handleIndex: index,
                value: value !== undefined ? value : this.value()
            };
            if (this._hasMultipleValues()) {
                uiHash.value = value !== undefined ? value : this.values(index);
                uiHash.values = values || this.values()
            }
            return uiHash
        },
        _hasMultipleValues: function() {
            return this.options.values && this.options.values.length
        },
        _start: function(event, index) {
            return this._trigger("start", event, this._uiHash(index))
        },
        _slide: function(event, index, newVal) {
            var allowed, otherVal, currentValue = this.value(), newValues = this.values();
            if (this._hasMultipleValues()) {
                otherVal = this.values(index ? 0 : 1);
                currentValue = this.values(index);
                if (this.options.values.length === 2 && this.options.range === true) {
                    newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal)
                }
                newValues[index] = newVal
            }
            if (newVal === currentValue) {
                return
            }
            allowed = this._trigger("slide", event, this._uiHash(index, newVal, newValues));
            if (allowed === false) {
                return
            }
            if (this._hasMultipleValues()) {
                this.values(index, newVal)
            } else {
                this.value(newVal)
            }
        },
        _stop: function(event, index) {
            this._trigger("stop", event, this._uiHash(index))
        },
        _change: function(event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                this._lastChangedValue = index;
                this._trigger("change", event, this._uiHash(index))
            }
        },
        value: function(newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return
            }
            return this._value()
        },
        values: function(index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return
            }
            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values;
                    newValues = arguments[0];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(newValues[i]);
                        this._change(null, i)
                    }
                    this._refreshValue()
                } else {
                    if (this._hasMultipleValues()) {
                        return this._values(index)
                    } else {
                        return this.value()
                    }
                }
            } else {
                return this._values()
            }
        },
        _setOption: function(key, value) {
            var i, valsLength = 0;
            if (key === "range" && this.options.range === true) {
                if (value === "min") {
                    this.options.value = this._values(0);
                    this.options.values = null
                } else if (value === "max") {
                    this.options.value = this._values(this.options.values.length - 1);
                    this.options.values = null
                }
            }
            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length
            }
            this._super(key, value);
            switch (key) {
            case "orientation":
                this._detectOrientation();
                this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation);
                this._refreshValue();
                if (this.options.range) {
                    this._refreshRange(value)
                }
                this.handles.css(value === "horizontal" ? "bottom" : "left", "");
                break;
            case "value":
                this._animateOff = true;
                this._refreshValue();
                this._change(null, 0);
                this._animateOff = false;
                break;
            case "values":
                this._animateOff = true;
                this._refreshValue();
                for (i = valsLength - 1; i >= 0; i--) {
                    this._change(null, i)
                }
                this._animateOff = false;
                break;
            case "step":
            case "min":
            case "max":
                this._animateOff = true;
                this._calculateNewMax();
                this._refreshValue();
                this._animateOff = false;
                break;
            case "range":
                this._animateOff = true;
                this._refresh();
                this._animateOff = false;
                break
            }
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this._toggleClass(null, "ui-state-disabled", !!value)
        },
        _value: function() {
            var val = this.options.value;
            val = this._trimAlignValue(val);
            return val
        },
        _values: function(index) {
            var val, vals, i;
            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);
                return val
            } else if (this._hasMultipleValues()) {
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) {
                    vals[i] = this._trimAlignValue(vals[i])
                }
                return vals
            } else {
                return []
            }
        },
        _trimAlignValue: function(val) {
            if (val <= this._valueMin()) {
                return this._valueMin()
            }
            if (val >= this._valueMax()) {
                return this._valueMax()
            }
            var step = this.options.step > 0 ? this.options.step : 1
              , valModStep = (val - this._valueMin()) % step
              , alignValue = val - valModStep;
            if (Math.abs(valModStep) * 2 >= step) {
                alignValue += valModStep > 0 ? step : -step
            }
            return parseFloat(alignValue.toFixed(5))
        },
        _calculateNewMax: function() {
            var max = this.options.max
              , min = this._valueMin()
              , step = this.options.step
              , aboveMin = Math.round((max - min) / step) * step;
            max = aboveMin + min;
            if (max > this.options.max) {
                max -= step
            }
            this.max = parseFloat(max.toFixed(this._precision()))
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min))
            }
            return precision
        },
        _precisionOf: function(num) {
            var str = num.toString()
              , decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1
        },
        _valueMin: function() {
            return this.options.min
        },
        _valueMax: function() {
            return this.max
        },
        _refreshRange: function(orientation) {
            if (orientation === "vertical") {
                this.range.css({
                    width: "",
                    left: ""
                })
            }
            if (orientation === "horizontal") {
                this.range.css({
                    height: "",
                    bottom: ""
                })
            }
        },
        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = !this._animateOff ? o.animate : false, _set = {};
            if (this._hasMultipleValues()) {
                this.handles.each(function(i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                    _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                    $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                    if (that.options.range === true) {
                        if (that.orientation === "horizontal") {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    left: valPercent + "%"
                                }, o.animate)
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    width: valPercent - lastValPercent + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                })
                            }
                        } else {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    bottom: valPercent + "%"
                                }, o.animate)
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    height: valPercent - lastValPercent + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                })
                            }
                        }
                    }
                    lastValPercent = valPercent
                })
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                if (oRange === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: valPercent + "%"
                    }, o.animate)
                }
                if (oRange === "max" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: 100 - valPercent + "%"
                    }, o.animate)
                }
                if (oRange === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: valPercent + "%"
                    }, o.animate)
                }
                if (oRange === "max" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: 100 - valPercent + "%"
                    }, o.animate)
                }
            }
        },
        _handleEvents: {
            keydown: function(event) {
                var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                switch (event.keyCode) {
                case $.ui.keyCode.HOME:
                case $.ui.keyCode.END:
                case $.ui.keyCode.PAGE_UP:
                case $.ui.keyCode.PAGE_DOWN:
                case $.ui.keyCode.UP:
                case $.ui.keyCode.RIGHT:
                case $.ui.keyCode.DOWN:
                case $.ui.keyCode.LEFT:
                    event.preventDefault();
                    if (!this._keySliding) {
                        this._keySliding = true;
                        this._addClass($(event.target), null, "ui-state-active");
                        allowed = this._start(event, index);
                        if (allowed === false) {
                            return
                        }
                    }
                    break
                }
                step = this.options.step;
                if (this._hasMultipleValues()) {
                    curVal = newVal = this.values(index)
                } else {
                    curVal = newVal = this.value()
                }
                switch (event.keyCode) {
                case $.ui.keyCode.HOME:
                    newVal = this._valueMin();
                    break;
                case $.ui.keyCode.END:
                    newVal = this._valueMax();
                    break;
                case $.ui.keyCode.PAGE_UP:
                    newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
                    break;
                case $.ui.keyCode.PAGE_DOWN:
                    newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
                    break;
                case $.ui.keyCode.UP:
                case $.ui.keyCode.RIGHT:
                    if (curVal === this._valueMax()) {
                        return
                    }
                    newVal = this._trimAlignValue(curVal + step);
                    break;
                case $.ui.keyCode.DOWN:
                case $.ui.keyCode.LEFT:
                    if (curVal === this._valueMin()) {
                        return
                    }
                    newVal = this._trimAlignValue(curVal - step);
                    break
                }
                this._slide(event, index, newVal)
            },
            keyup: function(event) {
                var index = $(event.target).data("ui-slider-handle-index");
                if (this._keySliding) {
                    this._keySliding = false;
                    this._stop(event, index);
                    this._change(event, index);
                    this._removeClass($(event.target), null, "ui-state-active")
                }
            }
        }
    });
    var widgetsSortable = $.widget("ui.sortable", $.ui.mouse, {
        version: "1.12.0",
        widgetEventPrefix: "sort",
        ready: false,
        options: {
            appendTo: "parent",
            axis: false,
            connectWith: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: "original",
            items: "> *",
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: "default",
            tolerance: "intersect",
            zIndex: 1e3,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function(x, reference, size) {
            return x >= reference && x < reference + size
        },
        _isFloating: function(item) {
            return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"))
        },
        _create: function() {
            this.containerCache = {};
            this._addClass("ui-sortable");
            this.refresh();
            this.offset = this.element.offset();
            this._mouseInit();
            this._setHandleClassName();
            this.ready = true
        },
        _setOption: function(key, value) {
            this._super(key, value);
            if (key === "handle") {
                this._setHandleClassName()
            }
        },
        _setHandleClassName: function() {
            var that = this;
            this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle");
            $.each(this.items, function() {
                that._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle")
            })
        },
        _destroy: function() {
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) {
                this.items[i].item.removeData(this.widgetName + "-item")
            }
            return this
        },
        _mouseCapture: function(event, overrideHandle) {
            var currentItem = null
              , validHandle = false
              , that = this;
            if (this.reverting) {
                return false
            }
            if (this.options.disabled || this.options.type === "static") {
                return false
            }
            this._refreshItems(event);
            $(event.target).parents().each(function() {
                if ($.data(this, that.widgetName + "-item") === that) {
                    currentItem = $(this);
                    return false
                }
            });
            if ($.data(event.target, that.widgetName + "-item") === that) {
                currentItem = $(event.target)
            }
            if (!currentItem) {
                return false
            }
            if (this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find("*").addBack().each(function() {
                    if (this === event.target) {
                        validHandle = true
                    }
                });
                if (!validHandle) {
                    return false
                }
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true
        },
        _mouseStart: function(event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.helper.css("position", "absolute");
            this.cssPosition = this.helper.css("position");
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            if (this.helper[0] !== this.currentItem[0]) {
                this.currentItem.hide()
            }
            this._createPlaceholder();
            if (o.containment) {
                this._setContainment()
            }
            if (o.cursor && o.cursor !== "auto") {
                body = this.document.find("body");
                this.storedCursor = body.css("cursor");
                body.css("cursor", o.cursor);
                this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body)
            }
            if (o.opacity) {
                if (this.helper.css("opacity")) {
                    this._storedOpacity = this.helper.css("opacity")
                }
                this.helper.css("opacity", o.opacity)
            }
            if (o.zIndex) {
                if (this.helper.css("zIndex")) {
                    this._storedZIndex = this.helper.css("zIndex")
                }
                this.helper.css("zIndex", o.zIndex)
            }
            if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                this.overflowOffset = this.scrollParent.offset()
            }
            this._trigger("start", event, this._uiHash());
            if (!this._preserveHelperProportions) {
                this._cacheHelperProportions()
            }
            if (!noActivation) {
                for (i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("activate", event, this._uiHash(this))
                }
            }
            if ($.ui.ddmanager) {
                $.ui.ddmanager.current = this
            }
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event)
            }
            this.dragging = true;
            this._addClass(this.helper, "ui-sortable-helper");
            this._mouseDrag(event);
            return true
        },
        _mouseDrag: function(event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = false;
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs
            }
            if (this.options.scroll) {
                if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed
                    } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed
                    }
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed
                    } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed
                    }
                } else {
                    if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed)
                    } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed)
                    }
                    if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed)
                    } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed)
                    }
                }
                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(this, event)
                }
            }
            this.positionAbs = this._convertPositionTo("absolute");
            if (!this.options.axis || this.options.axis !== "y") {
                this.helper[0].style.left = this.position.left + "px"
            }
            if (!this.options.axis || this.options.axis !== "x") {
                this.helper[0].style.top = this.position.top + "px"
            }
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) {
                    continue
                }
                if (item.instance !== this.currentContainer) {
                    continue
                }
                if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)) {
                    this.direction = intersection === 1 ? "down" : "up";
                    if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
                        this._rearrange(event, item)
                    } else {
                        break
                    }
                    this._trigger("change", event, this._uiHash());
                    break
                }
            }
            this._contactContainers(event);
            if ($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event)
            }
            this._trigger("sort", event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false
        },
        _mouseStop: function(event, noPropagation) {
            if (!event) {
                return
            }
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                $.ui.ddmanager.drop(this, event)
            }
            if (this.options.revert) {
                var that = this
                  , cur = this.placeholder.offset()
                  , axis = this.options.axis
                  , animation = {};
                if (!axis || axis === "x") {
                    animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)
                }
                if (!axis || axis === "y") {
                    animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)
                }
                this.reverting = true;
                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                    that._clear(event)
                })
            } else {
                this._clear(event, noPropagation)
            }
            return false
        },
        cancel: function() {
            if (this.dragging) {
                this._mouseUp({
                    target: null
                });
                if (this.options.helper === "original") {
                    this.currentItem.css(this._storedCSS);
                    this._removeClass(this.currentItem, "ui-sortable-helper")
                } else {
                    this.currentItem.show()
                }
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0
                    }
                }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode) {
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0])
                }
                if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
                    this.helper.remove()
                }
                $.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.currentItem)
                } else {
                    $(this.domPosition.parent).prepend(this.currentItem)
                }
            }
            return this
        },
        serialize: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected)
              , str = [];
            o = o || {};
            $(items).each(function() {
                var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                if (res) {
                    str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]))
                }
            });
            if (!str.length && o.key) {
                str.push(o.key + "=")
            }
            return str.join("&")
        },
        toArray: function(o) {
            var items = this._getItemsAsjQuery(o && o.connected)
              , ret = [];
            o = o || {};
            items.each(function() {
                ret.push($(o.item || this).attr(o.attribute || "id") || "")
            });
            return ret
        },
        _intersectsWith: function(item) {
            var x1 = this.positionAbs.left
              , x2 = x1 + this.helperProportions.width
              , y1 = this.positionAbs.top
              , y2 = y1 + this.helperProportions.height
              , l = item.left
              , r = l + item.width
              , t = item.top
              , b = t + item.height
              , dyClick = this.offset.click.top
              , dxClick = this.offset.click.left
              , isOverElementHeight = this.options.axis === "x" || y1 + dyClick > t && y1 + dyClick < b
              , isOverElementWidth = this.options.axis === "y" || x1 + dxClick > l && x1 + dxClick < r
              , isOverElement = isOverElementHeight && isOverElementWidth;
            if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"]) {
                return isOverElement
            } else {
                return l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b
            }
        },
        _intersectsWithPointer: function(item) {
            var verticalDirection, horizontalDirection, isOverElementHeight = this.options.axis === "x" || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = this.options.axis === "y" || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth;
            if (!isOverElement) {
                return false
            }
            verticalDirection = this._getDragVerticalDirection();
            horizontalDirection = this._getDragHorizontalDirection();
            return this.floating ? horizontalDirection === "right" || verticalDirection === "down" ? 2 : 1 : verticalDirection && (verticalDirection === "down" ? 2 : 1)
        },
        _intersectsWithSides: function(item) {
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height)
              , isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width)
              , verticalDirection = this._getDragVerticalDirection()
              , horizontalDirection = this._getDragHorizontalDirection();
            if (this.floating && horizontalDirection) {
                return horizontalDirection === "right" && isOverRightHalf || horizontalDirection === "left" && !isOverRightHalf
            } else {
                return verticalDirection && (verticalDirection === "down" && isOverBottomHalf || verticalDirection === "up" && !isOverBottomHalf)
            }
        },
        _getDragVerticalDirection: function() {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta !== 0 && (delta > 0 ? "down" : "up")
        },
        _getDragHorizontalDirection: function() {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta !== 0 && (delta > 0 ? "right" : "left")
        },
        refresh: function(event) {
            this._refreshItems(event);
            this._setHandleClassName();
            this.refreshPositions();
            return this
        },
        _connectWith: function() {
            var options = this.options;
            return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith
        },
        _getItemsAsjQuery: function(connected) {
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
            if (connectWith && connected) {
                for (i = connectWith.length - 1; i >= 0; i--) {
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--) {
                        inst = $.data(cur[j], this.widgetFullName);
                        if (inst && inst !== this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst])
                        }
                    }
                }
            }
            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                options: this.options,
                item: this.currentItem
            }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
            function addItems() {
                items.push(this)
            }
            for (i = queries.length - 1; i >= 0; i--) {
                queries[i][0].each(addItems)
            }
            return $(items)
        },
        _removeCurrentsFromItems: function() {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
            this.items = $.grep(this.items, function(item) {
                for (var j = 0; j < list.length; j++) {
                    if (list[j] === item.item[0]) {
                        return false
                    }
                }
                return true
            })
        },
        _refreshItems: function(event) {
            this.items = [];
            this.containers = [this];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                item: this.currentItem
            }) : $(this.options.items, this.element), this]], connectWith = this._connectWith();
            if (connectWith && this.ready) {
                for (i = connectWith.length - 1; i >= 0; i--) {
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--) {
                        inst = $.data(cur[j], this.widgetFullName);
                        if (inst && inst !== this && !inst.options.disabled) {
                            queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                                item: this.currentItem
                            }) : $(inst.options.items, inst.element), inst]);
                            this.containers.push(inst)
                        }
                    }
                }
            }
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
                for (j = 0,
                queriesLength = _queries.length; j < queriesLength; j++) {
                    item = $(_queries[j]);
                    item.data(this.widgetName + "-item", targetData);
                    items.push({
                        item: item,
                        instance: targetData,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    })
                }
            }
        },
        refreshPositions: function(fast) {
            this.floating = this.items.length ? this.options.axis === "x" || this._isFloating(this.items[0].item) : false;
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset()
            }
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
                    continue
                }
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight()
                }
                p = t.offset();
                item.left = p.left;
                item.top = p.top
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this)
            } else {
                for (i = this.containers.length - 1; i >= 0; i--) {
                    p = this.containers[i].element.offset();
                    this.containers[i].containerCache.left = p.left;
                    this.containers[i].containerCache.top = p.top;
                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight()
                }
            }
            return this
        },
        _createPlaceholder: function(that) {
            that = that || this;
            var className, o = that.options;
            if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    element: function() {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase()
                          , element = $("<" + nodeName + ">", that.document[0]);
                        that._addClass(element, "ui-sortable-placeholder", className || that.currentItem[0].className)._removeClass(element, "ui-sortable-helper");
                        if (nodeName === "tbody") {
                            that._createTrPlaceholder(that.currentItem.find("tr").eq(0), $("<tr>", that.document[0]).appendTo(element))
                        } else if (nodeName === "tr") {
                            that._createTrPlaceholder(that.currentItem, element)
                        } else if (nodeName === "img") {
                            element.attr("src", that.currentItem.attr("src"))
                        }
                        if (!className) {
                            element.css("visibility", "hidden")
                        }
                        return element
                    },
                    update: function(container, p) {
                        if (className && !o.forcePlaceholderSize) {
                            return
                        }
                        if (!p.height()) {
                            p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10))
                        }
                        if (!p.width()) {
                            p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10))
                        }
                    }
                }
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
            that.currentItem.after(that.placeholder);
            o.placeholder.update(that, that.placeholder)
        },
        _createTrPlaceholder: function(sourceTr, targetTr) {
            var that = this;
            sourceTr.children().each(function() {
                $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(targetTr)
            })
        },
        _contactContainers: function(event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null;
            for (i = this.containers.length - 1; i >= 0; i--) {
                if ($.contains(this.currentItem[0], this.containers[i].element[0])) {
                    continue
                }
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
                        continue
                    }
                    innermostContainer = this.containers[i];
                    innermostIndex = i
                } else {
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger("out", event, this._uiHash(this));
                        this.containers[i].containerCache.over = 0
                    }
                }
            }
            if (!innermostContainer) {
                return
            }
            if (this.containers.length === 1) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1
                }
            } else {
                dist = 1e4;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || this._isFloating(this.currentItem);
                posProperty = floating ? "left" : "top";
                sizeProperty = floating ? "width" : "height";
                axis = floating ? "pageX" : "pageY";
                for (j = this.items.length - 1; j >= 0; j--) {
                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
                        continue
                    }
                    if (this.items[j].item[0] === this.currentItem[0]) {
                        continue
                    }
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = false;
                    if (event[axis] - cur > this.items[j][sizeProperty] / 2) {
                        nearBottom = true
                    }
                    if (Math.abs(event[axis] - cur) < dist) {
                        dist = Math.abs(event[axis] - cur);
                        itemWithLeastDistance = this.items[j];
                        this.direction = nearBottom ? "up" : "down"
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) {
                    return
                }
                if (this.currentContainer === this.containers[innermostIndex]) {
                    if (!this.currentContainer.containerCache.over) {
                        this.containers[innermostIndex]._trigger("over", event, this._uiHash());
                        this.currentContainer.containerCache.over = 1
                    }
                    return
                }
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger("change", event, this._uiHash());
                this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1
            }
        },
        _createHelper: function(event) {
            var o = this.options
              , helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : o.helper === "clone" ? this.currentItem.clone() : this.currentItem;
            if (!helper.parents("body").length) {
                $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0])
            }
            if (helper[0] === this.currentItem[0]) {
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css("position"),
                    top: this.currentItem.css("top"),
                    left: this.currentItem.css("left")
                }
            }
            if (!helper[0].style.width || o.forceHelperSize) {
                helper.width(this.currentItem.width())
            }
            if (!helper[0].style.height || o.forceHelperSize) {
                helper.height(this.currentItem.height())
            }
            return helper
        },
        _adjustOffsetFromHelper: function(obj) {
            if (typeof obj === "string") {
                obj = obj.split(" ")
            }
            if ($.isArray(obj)) {
                obj = {
                    left: +obj[0],
                    top: +obj[1] || 0
                }
            }
            if ("left"in obj) {
                this.offset.click.left = obj.left + this.margins.left
            }
            if ("right"in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left
            }
            if ("top"in obj) {
                this.offset.click.top = obj.top + this.margins.top
            }
            if ("bottom"in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top
            }
        },
        _getParentOffset: function() {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if (this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop()
            }
            if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie) {
                po = {
                    top: 0,
                    left: 0
                }
            }
            return {
                top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function() {
            if (this.cssPosition === "relative") {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                }
            } else {
                return {
                    top: 0,
                    left: 0
                }
            }
        },
        _cacheMargins: function() {
            this.margins = {
                left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                top: parseInt(this.currentItem.css("marginTop"), 10) || 0
            }
        },
        _cacheHelperProportions: function() {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            }
        },
        _setContainment: function() {
            var ce, co, over, o = this.options;
            if (o.containment === "parent") {
                o.containment = this.helper[0].parentNode
            }
            if (o.containment === "document" || o.containment === "window") {
                this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === "document" ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]
            }
            if (!/^(document|window|parent)$/.test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = $(ce).css("overflow") !== "hidden";
                this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]
            }
        },
        _convertPositionTo: function(d, pos) {
            if (!pos) {
                pos = this.position
            }
            var mod = d === "absolute" ? 1 : -1
              , scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent
              , scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
            }
        },
        _generatePosition: function(event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            if (this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset()
            }
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) {
                        pageX = this.containment[0] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top < this.containment[1]) {
                        pageY = this.containment[1] + this.offset.click.top
                    }
                    if (event.pageX - this.offset.click.left > this.containment[2]) {
                        pageX = this.containment[2] + this.offset.click.left
                    }
                    if (event.pageY - this.offset.click.top > this.containment[3]) {
                        pageY = this.containment[3] + this.offset.click.top
                    }
                }
                if (o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
            }
        },
        _rearrange: function(event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === "down" ? i.item[0] : i.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function() {
                if (counter === this.counter) {
                    this.refreshPositions(!hardRefresh)
                }
            })
        },
        _clear: function(event, noPropagation) {
            this.reverting = false;
            var i, delayedTriggers = [];
            if (!this._noFinalSort && this.currentItem.parent().length) {
                this.placeholder.before(this.currentItem)
            }
            this._noFinalSort = null;
            if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) {
                    if (this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
                        this._storedCSS[i] = ""
                    }
                }
                this.currentItem.css(this._storedCSS);
                this._removeClass(this.currentItem, "ui-sortable-helper")
            } else {
                this.currentItem.show()
            }
            if (this.fromOutside && !noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("receive", event, this._uiHash(this.fromOutside))
                })
            }
            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
                delayedTriggers.push(function(event) {
                    this._trigger("update", event, this._uiHash())
                })
            }
            if (this !== this.currentContainer) {
                if (!noPropagation) {
                    delayedTriggers.push(function(event) {
                        this._trigger("remove", event, this._uiHash())
                    });
                    delayedTriggers.push(function(c) {
                        return function(event) {
                            c._trigger("receive", event, this._uiHash(this))
                        }
                    }
                    .call(this, this.currentContainer));
                    delayedTriggers.push(function(c) {
                        return function(event) {
                            c._trigger("update", event, this._uiHash(this))
                        }
                    }
                    .call(this, this.currentContainer))
                }
            }
            function delayEvent(type, instance, container) {
                return function(event) {
                    container._trigger(type, event, instance._uiHash(instance))
                }
            }
            for (i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) {
                    delayedTriggers.push(delayEvent("deactivate", this, this.containers[i]))
                }
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push(delayEvent("out", this, this.containers[i]));
                    this.containers[i].containerCache.over = 0
                }
            }
            if (this.storedCursor) {
                this.document.find("body").css("cursor", this.storedCursor);
                this.storedStylesheet.remove()
            }
            if (this._storedOpacity) {
                this.helper.css("opacity", this._storedOpacity)
            }
            if (this._storedZIndex) {
                this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex)
            }
            this.dragging = false;
            if (!noPropagation) {
                this._trigger("beforeStop", event, this._uiHash())
            }
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (!this.cancelHelperRemoval) {
                if (this.helper[0] !== this.currentItem[0]) {
                    this.helper.remove()
                }
                this.helper = null
            }
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) {
                    delayedTriggers[i].call(this, event)
                }
                this._trigger("stop", event, this._uiHash())
            }
            this.fromOutside = false;
            return !this.cancelHelperRemoval
        },
        _trigger: function() {
            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel()
            }
        },
        _uiHash: function(_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            }
        }
    });
    function spinnerModifer(fn) {
        return function() {
            var previous = this.element.val();
            fn.apply(this, arguments);
            this._refresh();
            if (previous !== this.element.val()) {
                this._trigger("change")
            }
        }
    }
    $.widget("ui.spinner", {
        version: "1.12.0",
        defaultElement: "<input>",
        widgetEventPrefix: "spin",
        options: {
            classes: {
                "ui-spinner": "ui-corner-all",
                "ui-spinner-down": "ui-corner-br",
                "ui-spinner-up": "ui-corner-tr"
            },
            culture: null,
            icons: {
                down: "ui-icon-triangle-1-s",
                up: "ui-icon-triangle-1-n"
            },
            incremental: true,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function() {
            this._setOption("max", this.options.max);
            this._setOption("min", this.options.min);
            this._setOption("step", this.options.step);
            if (this.value() !== "") {
                this._value(this.element.val(), true)
            }
            this._draw();
            this._on(this._events);
            this._refresh();
            this._on(this.window, {
                beforeunload: function() {
                    this.element.removeAttr("autocomplete")
                }
            })
        },
        _getCreateOptions: function() {
            var options = this._super();
            var element = this.element;
            $.each(["min", "max", "step"], function(i, option) {
                var value = element.attr(option);
                if (value != null && value.length) {
                    options[option] = value
                }
            });
            return options
        },
        _events: {
            keydown: function(event) {
                if (this._start(event) && this._keydown(event)) {
                    event.preventDefault()
                }
            },
            keyup: "_stop",
            focus: function() {
                this.previous = this.element.val()
            },
            blur: function(event) {
                if (this.cancelBlur) {
                    delete this.cancelBlur;
                    return
                }
                this._stop();
                this._refresh();
                if (this.previous !== this.element.val()) {
                    this._trigger("change", event)
                }
            },
            mousewheel: function(event, delta) {
                if (!delta) {
                    return
                }
                if (!this.spinning && !this._start(event)) {
                    return false
                }
                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                clearTimeout(this.mousewheelTimer);
                this.mousewheelTimer = this._delay(function() {
                    if (this.spinning) {
                        this._stop(event)
                    }
                }, 100);
                event.preventDefault()
            },
            "mousedown .ui-spinner-button": function(event) {
                var previous;
                previous = this.element[0] === $.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val();
                function checkFocus() {
                    var isActive = this.element[0] === $.ui.safeActiveElement(this.document[0]);
                    if (!isActive) {
                        this.element.trigger("focus");
                        this.previous = previous;
                        this._delay(function() {
                            this.previous = previous
                        })
                    }
                }
                event.preventDefault();
                checkFocus.call(this);
                this.cancelBlur = true;
                this._delay(function() {
                    delete this.cancelBlur;
                    checkFocus.call(this)
                });
                if (this._start(event) === false) {
                    return
                }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event)
            },
            "mouseup .ui-spinner-button": "_stop",
            "mouseenter .ui-spinner-button": function(event) {
                if (!$(event.currentTarget).hasClass("ui-state-active")) {
                    return
                }
                if (this._start(event) === false) {
                    return false
                }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event)
            },
            "mouseleave .ui-spinner-button": "_stop"
        },
        _enhance: function() {
            this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>")
        },
        _draw: function() {
            this._enhance();
            this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content");
            this._addClass("ui-spinner-input");
            this.element.attr("role", "spinbutton");
            this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", true).button({
                classes: {
                    "ui-button": ""
                }
            });
            this._removeClass(this.buttons, "ui-corner-all");
            this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up");
            this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down");
            this.buttons.first().button({
                icon: this.options.icons.up,
                showLabel: false
            });
            this.buttons.last().button({
                icon: this.options.icons.down,
                showLabel: false
            });
            if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * .5) && this.uiSpinner.height() > 0) {
                this.uiSpinner.height(this.uiSpinner.height())
            }
        },
        _keydown: function(event) {
            var options = this.options
              , keyCode = $.ui.keyCode;
            switch (event.keyCode) {
            case keyCode.UP:
                this._repeat(null, 1, event);
                return true;
            case keyCode.DOWN:
                this._repeat(null, -1, event);
                return true;
            case keyCode.PAGE_UP:
                this._repeat(null, options.page, event);
                return true;
            case keyCode.PAGE_DOWN:
                this._repeat(null, -options.page, event);
                return true
            }
            return false
        },
        _start: function(event) {
            if (!this.spinning && this._trigger("start", event) === false) {
                return false
            }
            if (!this.counter) {
                this.counter = 1
            }
            this.spinning = true;
            return true
        },
        _repeat: function(i, steps, event) {
            i = i || 500;
            clearTimeout(this.timer);
            this.timer = this._delay(function() {
                this._repeat(40, steps, event)
            }, i);
            this._spin(steps * this.options.step, event)
        },
        _spin: function(step, event) {
            var value = this.value() || 0;
            if (!this.counter) {
                this.counter = 1
            }
            value = this._adjustValue(value + step * this._increment(this.counter));
            if (!this.spinning || this._trigger("spin", event, {
                value: value
            }) !== false) {
                this._value(value);
                this.counter++
            }
        },
        _increment: function(i) {
            var incremental = this.options.incremental;
            if (incremental) {
                return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 5e4 - i * i / 500 + 17 * i / 200 + 1)
            }
            return 1
        },
        _precision: function() {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min))
            }
            return precision
        },
        _precisionOf: function(num) {
            var str = num.toString()
              , decimal = str.indexOf(".");
            return decimal === -1 ? 0 : str.length - decimal - 1
        },
        _adjustValue: function(value) {
            var base, aboveMin, options = this.options;
            base = options.min !== null ? options.min : 0;
            aboveMin = value - base;
            aboveMin = Math.round(aboveMin / options.step) * options.step;
            value = base + aboveMin;
            value = parseFloat(value.toFixed(this._precision()));
            if (options.max !== null && value > options.max) {
                return options.max
            }
            if (options.min !== null && value < options.min) {
                return options.min
            }
            return value
        },
        _stop: function(event) {
            if (!this.spinning) {
                return
            }
            clearTimeout(this.timer);
            clearTimeout(this.mousewheelTimer);
            this.counter = 0;
            this.spinning = false;
            this._trigger("stop", event)
        },
        _setOption: function(key, value) {
            var prevValue, first, last;
            if (key === "culture" || key === "numberFormat") {
                prevValue = this._parse(this.element.val());
                this.options[key] = value;
                this.element.val(this._format(prevValue));
                return
            }
            if (key === "max" || key === "min" || key === "step") {
                if (typeof value === "string") {
                    value = this._parse(value)
                }
            }
            if (key === "icons") {
                first = this.buttons.first().find(".ui-icon");
                this._removeClass(first, null, this.options.icons.up);
                this._addClass(first, null, value.up);
                last = this.buttons.last().find(".ui-icon");
                this._removeClass(last, null, this.options.icons.down);
                this._addClass(last, null, value.down)
            }
            this._super(key, value)
        },
        _setOptionDisabled: function(value) {
            this._super(value);
            this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!value);
            this.element.prop("disabled", !!value);
            this.buttons.button(value ? "disable" : "enable")
        },
        _setOptions: spinnerModifer(function(options) {
            this._super(options)
        }),
        _parse: function(val) {
            if (typeof val === "string" && val !== "") {
                val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val
            }
            return val === "" || isNaN(val) ? null : val
        },
        _format: function(value) {
            if (value === "") {
                return ""
            }
            return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value
        },
        _refresh: function() {
            this.element.attr({
                "aria-valuemin": this.options.min,
                "aria-valuemax": this.options.max,
                "aria-valuenow": this._parse(this.element.val())
            })
        },
        isValid: function() {
            var value = this.value();
            if (value === null) {
                return false
            }
            return value === this._adjustValue(value)
        },
        _value: function(value, allowAny) {
            var parsed;
            if (value !== "") {
                parsed = this._parse(value);
                if (parsed !== null) {
                    if (!allowAny) {
                        parsed = this._adjustValue(parsed)
                    }
                    value = this._format(parsed)
                }
            }
            this.element.val(value);
            this._refresh()
        },
        _destroy: function() {
            this.element.prop("disabled", false).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow");
            this.uiSpinner.replaceWith(this.element)
        },
        stepUp: spinnerModifer(function(steps) {
            this._stepUp(steps)
        }),
        _stepUp: function(steps) {
            if (this._start()) {
                this._spin((steps || 1) * this.options.step);
                this._stop()
            }
        },
        stepDown: spinnerModifer(function(steps) {
            this._stepDown(steps)
        }),
        _stepDown: function(steps) {
            if (this._start()) {
                this._spin((steps || 1) * -this.options.step);
                this._stop()
            }
        },
        pageUp: spinnerModifer(function(pages) {
            this._stepUp((pages || 1) * this.options.page)
        }),
        pageDown: spinnerModifer(function(pages) {
            this._stepDown((pages || 1) * this.options.page)
        }),
        value: function(newVal) {
            if (!arguments.length) {
                return this._parse(this.element.val())
            }
            spinnerModifer(this._value).call(this, newVal)
        },
        widget: function() {
            return this.uiSpinner
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.spinner", $.ui.spinner, {
            _enhance: function() {
                this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml())
            },
            _uiSpinnerHtml: function() {
                return "<span>"
            },
            _buttonHtml: function() {
                return "<a></a><a></a>"
            }
        })
    }
    var widgetsSpinner = $.ui.spinner;
    $.widget("ui.tabs", {
        version: "1.12.0",
        delay: 300,
        options: {
            active: null,
            classes: {
                "ui-tabs": "ui-corner-all",
                "ui-tabs-nav": "ui-corner-all",
                "ui-tabs-panel": "ui-corner-bottom",
                "ui-tabs-tab": "ui-corner-top"
            },
            collapsible: false,
            event: "click",
            heightStyle: "content",
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: function() {
            var rhash = /#.*$/;
            return function(anchor) {
                var anchorUrl, locationUrl;
                anchorUrl = anchor.href.replace(rhash, "");
                locationUrl = location.href.replace(rhash, "");
                try {
                    anchorUrl = decodeURIComponent(anchorUrl)
                } catch (error) {}
                try {
                    locationUrl = decodeURIComponent(locationUrl)
                } catch (error) {}
                return anchor.hash.length > 1 && anchorUrl === locationUrl
            }
        }(),
        _create: function() {
            var that = this
              , options = this.options;
            this.running = false;
            this._addClass("ui-tabs", "ui-widget ui-widget-content");
            this._toggleClass("ui-tabs-collapsible", null, options.collapsible);
            this._processTabs();
            options.active = this._initialActive();
            if ($.isArray(options.disabled)) {
                options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                    return that.tabs.index(li)
                }))).sort()
            }
            if (this.options.active !== false && this.anchors.length) {
                this.active = this._findActive(options.active)
            } else {
                this.active = $()
            }
            this._refresh();
            if (this.active.length) {
                this.load(options.active)
            }
        },
        _initialActive: function() {
            var active = this.options.active
              , collapsible = this.options.collapsible
              , locationHash = location.hash.substring(1);
            if (active === null) {
                if (locationHash) {
                    this.tabs.each(function(i, tab) {
                        if ($(tab).attr("aria-controls") === locationHash) {
                            active = i;
                            return false
                        }
                    })
                }
                if (active === null) {
                    active = this.tabs.index(this.tabs.filter(".ui-tabs-active"))
                }
                if (active === null || active === -1) {
                    active = this.tabs.length ? 0 : false
                }
            }
            if (active !== false) {
                active = this.tabs.index(this.tabs.eq(active));
                if (active === -1) {
                    active = collapsible ? false : 0
                }
            }
            if (!collapsible && active === false && this.anchors.length) {
                active = 0
            }
            return active
        },
        _getCreateEventData: function() {
            return {
                tab: this.active,
                panel: !this.active.length ? $() : this._getPanelForTab(this.active)
            }
        },
        _tabKeydown: function(event) {
            var focusedTab = $($.ui.safeActiveElement(this.document[0])).closest("li")
              , selectedIndex = this.tabs.index(focusedTab)
              , goingForward = true;
            if (this._handlePageNav(event)) {
                return
            }
            switch (event.keyCode) {
            case $.ui.keyCode.RIGHT:
            case $.ui.keyCode.DOWN:
                selectedIndex++;
                break;
            case $.ui.keyCode.UP:
            case $.ui.keyCode.LEFT:
                goingForward = false;
                selectedIndex--;
                break;
            case $.ui.keyCode.END:
                selectedIndex = this.anchors.length - 1;
                break;
            case $.ui.keyCode.HOME:
                selectedIndex = 0;
                break;
            case $.ui.keyCode.SPACE:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex);
                return;
            case $.ui.keyCode.ENTER:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                return;
            default:
                return
            }
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);
            if (!event.ctrlKey && !event.metaKey) {
                focusedTab.attr("aria-selected", "false");
                this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                this.activating = this._delay(function() {
                    this.option("active", selectedIndex)
                }, this.delay)
            }
        },
        _panelKeydown: function(event) {
            if (this._handlePageNav(event)) {
                return
            }
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.trigger("focus")
            }
        },
        _handlePageNav: function(event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, false));
                return true
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, true));
                return true
            }
        },
        _findNextTab: function(index, goingForward) {
            var lastTabIndex = this.tabs.length - 1;
            function constrain() {
                if (index > lastTabIndex) {
                    index = 0
                }
                if (index < 0) {
                    index = lastTabIndex
                }
                return index
            }
            while ($.inArray(constrain(), this.options.disabled) !== -1) {
                index = goingForward ? index + 1 : index - 1
            }
            return index
        },
        _focusNextTab: function(index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).trigger("focus");
            return index
        },
        _setOption: function(key, value) {
            if (key === "active") {
                this._activate(value);
                return
            }
            this._super(key, value);
            if (key === "collapsible") {
                this._toggleClass("ui-tabs-collapsible", null, value);
                if (!value && this.options.active === false) {
                    this._activate(0)
                }
            }
            if (key === "event") {
                this._setupEvents(value)
            }
            if (key === "heightStyle") {
                this._setupHeightStyle(value)
            }
        },
        _sanitizeSelector: function(hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : ""
        },
        refresh: function() {
            var options = this.options
              , lis = this.tablist.children(":has(a[href])");
            options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                return lis.index(tab)
            });
            this._processTabs();
            if (options.active === false || !this.anchors.length) {
                options.active = false;
                this.active = $()
            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                if (this.tabs.length === options.disabled.length) {
                    options.active = false;
                    this.active = $()
                } else {
                    this._activate(this._findNextTab(Math.max(0, options.active - 1), false))
                }
            } else {
                options.active = this.tabs.index(this.active)
            }
            this._refresh()
        },
        _refresh: function() {
            this._setOptionDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);
            this.tabs.not(this.active).attr({
                "aria-selected": "false",
                "aria-expanded": "false",
                tabIndex: -1
            });
            this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                "aria-hidden": "true"
            });
            if (!this.active.length) {
                this.tabs.eq(0).attr("tabIndex", 0)
            } else {
                this.active.attr({
                    "aria-selected": "true",
                    "aria-expanded": "true",
                    tabIndex: 0
                });
                this._addClass(this.active, "ui-tabs-active", "ui-state-active");
                this._getPanelForTab(this.active).show().attr({
                    "aria-hidden": "false"
                })
            }
        },
        _processTabs: function() {
            var that = this
              , prevTabs = this.tabs
              , prevAnchors = this.anchors
              , prevPanels = this.panels;
            this.tablist = this._getList().attr("role", "tablist");
            this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header");
            this.tablist.on("mousedown" + this.eventNamespace, "> li", function(event) {
                if ($(this).is(".ui-state-disabled")) {
                    event.preventDefault()
                }
            }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function() {
                if ($(this).closest("li").is(".ui-state-disabled")) {
                    this.blur()
                }
            });
            this.tabs = this.tablist.find("> li:has(a[href])").attr({
                role: "tab",
                tabIndex: -1
            });
            this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default");
            this.anchors = this.tabs.map(function() {
                return $("a", this)[0]
            }).attr({
                role: "presentation",
                tabIndex: -1
            });
            this._addClass(this.anchors, "ui-tabs-anchor");
            this.panels = $();
            this.anchors.each(function(i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                if (that._isLocal(anchor)) {
                    selector = anchor.hash;
                    panelId = selector.substring(1);
                    panel = that.element.find(that._sanitizeSelector(selector))
                } else {
                    panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id;
                    selector = "#" + panelId;
                    panel = that.element.find(selector);
                    if (!panel.length) {
                        panel = that._createPanel(panelId);
                        panel.insertAfter(that.panels[i - 1] || that.tablist)
                    }
                    panel.attr("aria-live", "polite")
                }
                if (panel.length) {
                    that.panels = that.panels.add(panel)
                }
                if (originalAriaControls) {
                    tab.data("ui-tabs-aria-controls", originalAriaControls)
                }
                tab.attr({
                    "aria-controls": panelId,
                    "aria-labelledby": anchorId
                });
                panel.attr("aria-labelledby", anchorId)
            });
            this.panels.attr("role", "tabpanel");
            this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content");
            if (prevTabs) {
                this._off(prevTabs.not(this.tabs));
                this._off(prevAnchors.not(this.anchors));
                this._off(prevPanels.not(this.panels))
            }
        },
        _getList: function() {
            return this.tablist || this.element.find("ol, ul").eq(0)
        },
        _createPanel: function(id) {
            return $("<div>").attr("id", id).data("ui-tabs-destroy", true)
        },
        _setOptionDisabled: function(disabled) {
            var currentItem, li, i;
            if ($.isArray(disabled)) {
                if (!disabled.length) {
                    disabled = false
                } else if (disabled.length === this.anchors.length) {
                    disabled = true
                }
            }
            for (i = 0; li = this.tabs[i]; i++) {
                currentItem = $(li);
                if (disabled === true || $.inArray(i, disabled) !== -1) {
                    currentItem.attr("aria-disabled", "true");
                    this._addClass(currentItem, null, "ui-state-disabled")
                } else {
                    currentItem.removeAttr("aria-disabled");
                    this._removeClass(currentItem, null, "ui-state-disabled")
                }
            }
            this.options.disabled = disabled;
            this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, disabled === true)
        },
        _setupEvents: function(event) {
            var events = {};
            if (event) {
                $.each(event.split(" "), function(index, eventName) {
                    events[eventName] = "_eventHandler"
                })
            }
            this._off(this.anchors.add(this.tabs).add(this.panels));
            this._on(true, this.anchors, {
                click: function(event) {
                    event.preventDefault()
                }
            });
            this._on(this.anchors, events);
            this._on(this.tabs, {
                keydown: "_tabKeydown"
            });
            this._on(this.panels, {
                keydown: "_panelKeydown"
            });
            this._focusable(this.tabs);
            this._hoverable(this.tabs)
        },
        _setupHeightStyle: function(heightStyle) {
            var maxHeight, parent = this.element.parent();
            if (heightStyle === "fill") {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();
                this.element.siblings(":visible").each(function() {
                    var elem = $(this)
                      , position = elem.css("position");
                    if (position === "absolute" || position === "fixed") {
                        return
                    }
                    maxHeight -= elem.outerHeight(true)
                });
                this.element.children().not(this.panels).each(function() {
                    maxHeight -= $(this).outerHeight(true)
                });
                this.panels.each(function() {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()))
                }).css("overflow", "auto")
            } else if (heightStyle === "auto") {
                maxHeight = 0;
                this.panels.each(function() {
                    maxHeight = Math.max(maxHeight, $(this).height("").height())
                }).height(maxHeight)
            }
        },
        _eventHandler: function(event) {
            var options = this.options
              , active = this.active
              , anchor = $(event.currentTarget)
              , tab = anchor.closest("li")
              , clickedIsActive = tab[0] === active[0]
              , collapsing = clickedIsActive && options.collapsible
              , toShow = collapsing ? $() : this._getPanelForTab(tab)
              , toHide = !active.length ? $() : this._getPanelForTab(active)
              , eventData = {
                oldTab: active,
                oldPanel: toHide,
                newTab: collapsing ? $() : tab,
                newPanel: toShow
            };
            event.preventDefault();
            if (tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || clickedIsActive && !options.collapsible || this._trigger("beforeActivate", event, eventData) === false) {
                return
            }
            options.active = collapsing ? false : this.tabs.index(tab);
            this.active = clickedIsActive ? $() : tab;
            if (this.xhr) {
                this.xhr.abort()
            }
            if (!toHide.length && !toShow.length) {
                $.error("jQuery UI Tabs: Mismatching fragment identifier.")
            }
            if (toShow.length) {
                this.load(this.tabs.index(tab), event)
            }
            this._toggle(event, eventData)
        },
        _toggle: function(event, eventData) {
            var that = this
              , toShow = eventData.newPanel
              , toHide = eventData.oldPanel;
            this.running = true;
            function complete() {
                that.running = false;
                that._trigger("activate", event, eventData)
            }
            function show() {
                that._addClass(eventData.newTab.closest("li"), "ui-tabs-active", "ui-state-active");
                if (toShow.length && that.options.show) {
                    that._show(toShow, that.options.show, complete)
                } else {
                    toShow.show();
                    complete()
                }
            }
            if (toHide.length && this.options.hide) {
                this._hide(toHide, this.options.hide, function() {
                    that._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active");
                    show()
                })
            } else {
                this._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active");
                toHide.hide();
                show()
            }
            toHide.attr("aria-hidden", "true");
            eventData.oldTab.attr({
                "aria-selected": "false",
                "aria-expanded": "false"
            });
            if (toShow.length && toHide.length) {
                eventData.oldTab.attr("tabIndex", -1)
            } else if (toShow.length) {
                this.tabs.filter(function() {
                    return $(this).attr("tabIndex") === 0
                }).attr("tabIndex", -1)
            }
            toShow.attr("aria-hidden", "false");
            eventData.newTab.attr({
                "aria-selected": "true",
                "aria-expanded": "true",
                tabIndex: 0
            })
        },
        _activate: function(index) {
            var anchor, active = this._findActive(index);
            if (active[0] === this.active[0]) {
                return
            }
            if (!active.length) {
                active = this.active
            }
            anchor = active.find(".ui-tabs-anchor")[0];
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            })
        },
        _findActive: function(index) {
            return index === false ? $() : this.tabs.eq(index)
        },
        _getIndex: function(index) {
            if (typeof index === "string") {
                index = this.anchors.index(this.anchors.filter("[href$='" + $.ui.escapeSelector(index) + "']"))
            }
            return index
        },
        _destroy: function() {
            if (this.xhr) {
                this.xhr.abort()
            }
            this.tablist.removeAttr("role").off(this.eventNamespace);
            this.anchors.removeAttr("role tabIndex").removeUniqueId();
            this.tabs.add(this.panels).each(function() {
                if ($.data(this, "ui-tabs-destroy")) {
                    $(this).remove()
                } else {
                    $(this).removeAttr("role tabIndex " + "aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded")
                }
            });
            this.tabs.each(function() {
                var li = $(this)
                  , prev = li.data("ui-tabs-aria-controls");
                if (prev) {
                    li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls")
                } else {
                    li.removeAttr("aria-controls")
                }
            });
            this.panels.show();
            if (this.options.heightStyle !== "content") {
                this.panels.css("height", "")
            }
        },
        enable: function(index) {
            var disabled = this.options.disabled;
            if (disabled === false) {
                return
            }
            if (index === undefined) {
                disabled = false
            } else {
                index = this._getIndex(index);
                if ($.isArray(disabled)) {
                    disabled = $.map(disabled, function(num) {
                        return num !== index ? num : null
                    })
                } else {
                    disabled = $.map(this.tabs, function(li, num) {
                        return num !== index ? num : null
                    })
                }
            }
            this._setOptionDisabled(disabled)
        },
        disable: function(index) {
            var disabled = this.options.disabled;
            if (disabled === true) {
                return
            }
            if (index === undefined) {
                disabled = true
            } else {
                index = this._getIndex(index);
                if ($.inArray(index, disabled) !== -1) {
                    return
                }
                if ($.isArray(disabled)) {
                    disabled = $.merge([index], disabled).sort()
                } else {
                    disabled = [index]
                }
            }
            this._setOptionDisabled(disabled)
        },
        load: function(index, event) {
            index = this._getIndex(index);
            var that = this
              , tab = this.tabs.eq(index)
              , anchor = tab.find(".ui-tabs-anchor")
              , panel = this._getPanelForTab(tab)
              , eventData = {
                tab: tab,
                panel: panel
            }
              , complete = function(jqXHR, status) {
                if (status === "abort") {
                    that.panels.stop(false, true)
                }
                that._removeClass(tab, "ui-tabs-loading");
                panel.removeAttr("aria-busy");
                if (jqXHR === that.xhr) {
                    delete that.xhr
                }
            };
            if (this._isLocal(anchor[0])) {
                return
            }
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
            if (this.xhr && this.xhr.statusText !== "canceled") {
                this._addClass(tab, "ui-tabs-loading");
                panel.attr("aria-busy", "true");
                this.xhr.done(function(response, status, jqXHR) {
                    setTimeout(function() {
                        panel.html(response);
                        that._trigger("load", event, eventData);
                        complete(jqXHR, status)
                    }, 1)
                }).fail(function(jqXHR, status) {
                    setTimeout(function() {
                        complete(jqXHR, status)
                    }, 1)
                })
            }
        },
        _ajaxSettings: function(anchor, event, eventData) {
            var that = this;
            return {
                url: anchor.attr("href"),
                beforeSend: function(jqXHR, settings) {
                    return that._trigger("beforeLoad", event, $.extend({
                        jqXHR: jqXHR,
                        ajaxSettings: settings
                    }, eventData))
                }
            }
        },
        _getPanelForTab: function(tab) {
            var id = $(tab).attr("aria-controls");
            return this.element.find(this._sanitizeSelector("#" + id))
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.tabs", $.ui.tabs, {
            _processTabs: function() {
                this._superApply(arguments);
                this._addClass(this.tabs, "ui-tab")
            }
        })
    }
    var widgetsTabs = $.ui.tabs;
    $.widget("ui.tooltip", {
        version: "1.12.0",
        options: {
            classes: {
                "ui-tooltip": "ui-corner-all ui-widget-shadow"
            },
            content: function() {
                var title = $(this).attr("title") || "";
                return $("<a>").text(title).html()
            },
            hide: true,
            items: "[title]:not([disabled])",
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            show: true,
            track: false,
            close: null,
            open: null
        },
        _addDescribedBy: function(elem, id) {
            var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
            describedby.push(id);
            elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")))
        },
        _removeDescribedBy: function(elem) {
            var id = elem.data("ui-tooltip-id")
              , describedby = (elem.attr("aria-describedby") || "").split(/\s+/)
              , index = $.inArray(id, describedby);
            if (index !== -1) {
                describedby.splice(index, 1)
            }
            elem.removeData("ui-tooltip-id");
            describedby = $.trim(describedby.join(" "));
            if (describedby) {
                elem.attr("aria-describedby", describedby)
            } else {
                elem.removeAttr("aria-describedby")
            }
        },
        _create: function() {
            this._on({
                mouseover: "open",
                focusin: "open"
            });
            this.tooltips = {};
            this.parents = {};
            this.liveRegion = $("<div>").attr({
                role: "log",
                "aria-live": "assertive",
                "aria-relevant": "additions"
            }).appendTo(this.document[0].body);
            this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible");
            this.disabledTitles = $([])
        },
        _setOption: function(key, value) {
            var that = this;
            this._super(key, value);
            if (key === "content") {
                $.each(this.tooltips, function(id, tooltipData) {
                    that._updateContent(tooltipData.element)
                })
            }
        },
        _setOptionDisabled: function(value) {
            this[value ? "_disable" : "_enable"]()
        },
        _disable: function() {
            var that = this;
            $.each(this.tooltips, function(id, tooltipData) {
                var event = $.Event("blur");
                event.target = event.currentTarget = tooltipData.element[0];
                that.close(event, true)
            });
            this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function() {
                var element = $(this);
                if (element.is("[title]")) {
                    return element.data("ui-tooltip-title", element.attr("title")).removeAttr("title")
                }
            }))
        },
        _enable: function() {
            this.disabledTitles.each(function() {
                var element = $(this);
                if (element.data("ui-tooltip-title")) {
                    element.attr("title", element.data("ui-tooltip-title"))
                }
            });
            this.disabledTitles = $([])
        },
        open: function(event) {
            var that = this
              , target = $(event ? event.target : this.element).closest(this.options.items);
            if (!target.length || target.data("ui-tooltip-id")) {
                return
            }
            if (target.attr("title")) {
                target.data("ui-tooltip-title", target.attr("title"))
            }
            target.data("ui-tooltip-open", true);
            if (event && event.type === "mouseover") {
                target.parents().each(function() {
                    var parent = $(this), blurEvent;
                    if (parent.data("ui-tooltip-open")) {
                        blurEvent = $.Event("blur");
                        blurEvent.target = blurEvent.currentTarget = this;
                        that.close(blurEvent, true)
                    }
                    if (parent.attr("title")) {
                        parent.uniqueId();
                        that.parents[this.id] = {
                            element: this,
                            title: parent.attr("title")
                        };
                        parent.attr("title", "")
                    }
                })
            }
            this._registerCloseHandlers(event, target);
            this._updateContent(target, event)
        },
        _updateContent: function(target, event) {
            var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
            if (typeof contentOption === "string" || contentOption.nodeType || contentOption.jquery) {
                return this._open(event, target, contentOption)
            }
            content = contentOption.call(target[0], function(response) {
                that._delay(function() {
                    if (!target.data("ui-tooltip-open")) {
                        return
                    }
                    if (event) {
                        event.type = eventType
                    }
                    this._open(event, target, response)
                })
            });
            if (content) {
                this._open(event, target, content)
            }
        },
        _open: function(event, target, content) {
            var tooltipData, tooltip, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position);
            if (!content) {
                return
            }
            tooltipData = this._find(target);
            if (tooltipData) {
                tooltipData.tooltip.find(".ui-tooltip-content").html(content);
                return
            }
            if (target.is("[title]")) {
                if (event && event.type === "mouseover") {
                    target.attr("title", "")
                } else {
                    target.removeAttr("title")
                }
            }
            tooltipData = this._tooltip(target);
            tooltip = tooltipData.tooltip;
            this._addDescribedBy(target, tooltip.attr("id"));
            tooltip.find(".ui-tooltip-content").html(content);
            this.liveRegion.children().hide();
            a11yContent = $("<div>").html(tooltip.find(".ui-tooltip-content").html());
            a11yContent.removeAttr("name").find("[name]").removeAttr("name");
            a11yContent.removeAttr("id").find("[id]").removeAttr("id");
            a11yContent.appendTo(this.liveRegion);
            function position(event) {
                positionOption.of = event;
                if (tooltip.is(":hidden")) {
                    return
                }
                tooltip.position(positionOption)
            }
            if (this.options.track && event && /^mouse/.test(event.type)) {
                this._on(this.document, {
                    mousemove: position
                });
                position(event)
            } else {
                tooltip.position($.extend({
                    of: target
                }, this.options.position))
            }
            tooltip.hide();
            this._show(tooltip, this.options.show);
            if (this.options.track && this.options.show && this.options.show.delay) {
                delayedShow = this.delayedShow = setInterval(function() {
                    if (tooltip.is(":visible")) {
                        position(positionOption.of);
                        clearInterval(delayedShow)
                    }
                }, $.fx.interval)
            }
            this._trigger("open", event, {
                tooltip: tooltip
            })
        },
        _registerCloseHandlers: function(event, target) {
            var events = {
                keyup: function(event) {
                    if (event.keyCode === $.ui.keyCode.ESCAPE) {
                        var fakeEvent = $.Event(event);
                        fakeEvent.currentTarget = target[0];
                        this.close(fakeEvent, true)
                    }
                }
            };
            if (target[0] !== this.element[0]) {
                events.remove = function() {
                    this._removeTooltip(this._find(target).tooltip)
                }
            }
            if (!event || event.type === "mouseover") {
                events.mouseleave = "close"
            }
            if (!event || event.type === "focusin") {
                events.focusout = "close"
            }
            this._on(true, target, events)
        },
        close: function(event) {
            var tooltip, that = this, target = $(event ? event.currentTarget : this.element), tooltipData = this._find(target);
            if (!tooltipData) {
                target.removeData("ui-tooltip-open");
                return
            }
            tooltip = tooltipData.tooltip;
            if (tooltipData.closing) {
                return
            }
            clearInterval(this.delayedShow);
            if (target.data("ui-tooltip-title") && !target.attr("title")) {
                target.attr("title", target.data("ui-tooltip-title"))
            }
            this._removeDescribedBy(target);
            tooltipData.hiding = true;
            tooltip.stop(true);
            this._hide(tooltip, this.options.hide, function() {
                that._removeTooltip($(this))
            });
            target.removeData("ui-tooltip-open");
            this._off(target, "mouseleave focusout keyup");
            if (target[0] !== this.element[0]) {
                this._off(target, "remove")
            }
            this._off(this.document, "mousemove");
            if (event && event.type === "mouseleave") {
                $.each(this.parents, function(id, parent) {
                    $(parent.element).attr("title", parent.title);
                    delete that.parents[id]
                })
            }
            tooltipData.closing = true;
            this._trigger("close", event, {
                tooltip: tooltip
            });
            if (!tooltipData.hiding) {
                tooltipData.closing = false
            }
        },
        _tooltip: function(element) {
            var tooltip = $("<div>").attr("role", "tooltip")
              , content = $("<div>").appendTo(tooltip)
              , id = tooltip.uniqueId().attr("id");
            this._addClass(content, "ui-tooltip-content");
            this._addClass(tooltip, "ui-tooltip", "ui-widget ui-widget-content");
            tooltip.appendTo(this._appendTo(element));
            return this.tooltips[id] = {
                element: element,
                tooltip: tooltip
            }
        },
        _find: function(target) {
            var id = target.data("ui-tooltip-id");
            return id ? this.tooltips[id] : null
        },
        _removeTooltip: function(tooltip) {
            tooltip.remove();
            delete this.tooltips[tooltip.attr("id")]
        },
        _appendTo: function(target) {
            var element = target.closest(".ui-front, dialog");
            if (!element.length) {
                element = this.document[0].body
            }
            return element
        },
        _destroy: function() {
            var that = this;
            $.each(this.tooltips, function(id, tooltipData) {
                var event = $.Event("blur")
                  , element = tooltipData.element;
                event.target = event.currentTarget = element[0];
                that.close(event, true);
                $("#" + id).remove();
                if (element.data("ui-tooltip-title")) {
                    if (!element.attr("title")) {
                        element.attr("title", element.data("ui-tooltip-title"))
                    }
                    element.removeData("ui-tooltip-title")
                }
            });
            this.liveRegion.remove()
        }
    });
    if ($.uiBackCompat !== false) {
        $.widget("ui.tooltip", $.ui.tooltip, {
            options: {
                tooltipClass: null
            },
            _tooltip: function() {
                var tooltipData = this._superApply(arguments);
                if (this.options.tooltipClass) {
                    tooltipData.tooltip.addClass(this.options.tooltipClass)
                }
                return tooltipData
            }
        })
    }
    var widgetsTooltip = $.ui.tooltip
});
if (typeof jQuery === "undefined") {
    throw new Error("Bootstrap's JavaScript requires jQuery")
}
+function($) {
    "use strict";
    var version = $.fn.jquery.split(" ")[0].split(".");
    if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {
        throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")
    }
}(jQuery);
+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                }
            }
        }
        return false
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false;
        var $el = this;
        $(this).one("bsTransitionEnd", function() {
            called = true
        });
        var callback = function() {
            if (!called)
                $($el).trigger($.support.transition.end)
        };
        setTimeout(callback, duration);
        return this
    }
    ;
    $(function() {
        $.support.transition = transitionEnd();
        if (!$.support.transition)
            return;
        $.event.special.bsTransitionEnd = {
            bindType: $.support.transition.end,
            delegateType: $.support.transition.end,
            handle: function(e) {
                if ($(e.target).is(this))
                    return e.handleObj.handler.apply(this, arguments)
            }
        }
    })
}(jQuery);
+function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function(el) {
        $(el).on("click", dismiss, this.close)
    };
    Alert.VERSION = "3.3.7";
    Alert.TRANSITION_DURATION = 150;
    Alert.prototype.close = function(e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "")
        }
        var $parent = $(selector === "#" ? [] : selector);
        if (e)
            e.preventDefault();
        if (!$parent.length) {
            $parent = $this.closest(".alert")
        }
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented())
            return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.detach().trigger("closed.bs.alert").remove()
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.one("bsTransitionEnd", removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement()
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data)
                $this.data("bs.alert", data = new Alert(this));
            if (typeof option == "string")
                data[option].call($this)
        })
    }
    var old = $.fn.alert;
    $.fn.alert = Plugin;
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this
    }
    ;
    $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close)
}(jQuery);
+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false
    };
    Button.VERSION = "3.3.7";
    Button.DEFAULTS = {
        loadingText: "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state += "Text";
        if (data.resetText == null)
            $el.data("resetText", $el[val]());
        setTimeout($.proxy(function() {
            $el[val](data[state] == null ? this.options[state] : data[state]);
            if (state == "loadingText") {
                this.isLoading = true;
                $el.addClass(d).attr(d, d).prop(d, true)
            } else if (this.isLoading) {
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d).prop(d, false)
            }
        }, this), 0)
    }
    ;
    Button.prototype.toggle = function() {
        var changed = true;
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ($input.prop("type") == "radio") {
                if ($input.prop("checked"))
                    changed = false;
                $parent.find(".active").removeClass("active");
                this.$element.addClass("active")
            } else if ($input.prop("type") == "checkbox") {
                if ($input.prop("checked") !== this.$element.hasClass("active"))
                    changed = false;
                this.$element.toggleClass("active")
            }
            $input.prop("checked", this.$element.hasClass("active"));
            if (changed)
                $input.trigger("change")
        } else {
            this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
            this.$element.toggleClass("active")
        }
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data)
                $this.data("bs.button", data = new Button(this,options));
            if (option == "toggle")
                data.toggle();
            else if (option)
                data.setState(option)
        })
    }
    var old = $.fn.button;
    $.fn.button = Plugin;
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this
    }
    ;
    $(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function(e) {
        var $btn = $(e.target).closest(".btn");
        Plugin.call($btn, "toggle");
        if (!$(e.target).is('input[type="radio"], input[type="checkbox"]')) {
            e.preventDefault();
            if ($btn.is("input,button"))
                $btn.trigger("focus");
            else
                $btn.find("input:visible,button:visible").first().trigger("focus")
        }
    }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function(e) {
        $(e.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(e.type))
    })
}(jQuery);
+function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = null;
        this.sliding = null;
        this.interval = null;
        this.$active = null;
        this.$items = null;
        this.options.keyboard && this.$element.on("keydown.bs.carousel", $.proxy(this.keydown, this));
        this.options.pause == "hover" && !("ontouchstart"in document.documentElement) && this.$element.on("mouseenter.bs.carousel", $.proxy(this.pause, this)).on("mouseleave.bs.carousel", $.proxy(this.cycle, this))
    };
    Carousel.VERSION = "3.3.7";
    Carousel.TRANSITION_DURATION = 600;
    Carousel.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: true,
        keyboard: true
    };
    Carousel.prototype.keydown = function(e) {
        if (/input|textarea/i.test(e.target.tagName))
            return;
        switch (e.which) {
        case 37:
            this.prev();
            break;
        case 39:
            this.next();
            break;
        default:
            return
        }
        e.preventDefault()
    }
    ;
    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this
    }
    ;
    Carousel.prototype.getItemIndex = function(item) {
        this.$items = item.parent().children(".item");
        return this.$items.index(item || this.$active)
    }
    ;
    Carousel.prototype.getItemForDirection = function(direction, active) {
        var activeIndex = this.getItemIndex(active);
        var willWrap = direction == "prev" && activeIndex === 0 || direction == "next" && activeIndex == this.$items.length - 1;
        if (willWrap && !this.options.wrap)
            return active;
        var delta = direction == "prev" ? -1 : 1;
        var itemIndex = (activeIndex + delta) % this.$items.length;
        return this.$items.eq(itemIndex)
    }
    ;
    Carousel.prototype.to = function(pos) {
        var that = this;
        var activeIndex = this.getItemIndex(this.$active = this.$element.find(".item.active"));
        if (pos > this.$items.length - 1 || pos < 0)
            return;
        if (this.sliding)
            return this.$element.one("slid.bs.carousel", function() {
                that.to(pos)
            });
        if (activeIndex == pos)
            return this.pause().cycle();
        return this.slide(pos > activeIndex ? "next" : "prev", this.$items.eq(pos))
    }
    ;
    Carousel.prototype.pause = function(e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true)
        }
        this.interval = clearInterval(this.interval);
        return this
    }
    ;
    Carousel.prototype.next = function() {
        if (this.sliding)
            return;
        return this.slide("next")
    }
    ;
    Carousel.prototype.prev = function() {
        if (this.sliding)
            return;
        return this.slide("prev")
    }
    ;
    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || this.getItemForDirection(type, $active);
        var isCycling = this.interval;
        var direction = type == "next" ? "left" : "right";
        var that = this;
        if ($next.hasClass("active"))
            return this.sliding = false;
        var relatedTarget = $next[0];
        var slideEvent = $.Event("slide.bs.carousel", {
            relatedTarget: relatedTarget,
            direction: direction
        });
        this.$element.trigger(slideEvent);
        if (slideEvent.isDefaultPrevented())
            return;
        this.sliding = true;
        isCycling && this.pause();
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
            $nextIndicator && $nextIndicator.addClass("active")
        }
        var slidEvent = $.Event("slid.bs.carousel", {
            relatedTarget: relatedTarget,
            direction: direction
        });
        if ($.support.transition && this.$element.hasClass("slide")) {
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one("bsTransitionEnd", function() {
                $next.removeClass([type, direction].join(" ")).addClass("active");
                $active.removeClass(["active", direction].join(" "));
                that.sliding = false;
                setTimeout(function() {
                    that.$element.trigger(slidEvent)
                }, 0)
            }).emulateTransitionEnd(Carousel.TRANSITION_DURATION)
        } else {
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger(slidEvent)
        }
        isCycling && this.cycle();
        return this
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == "object" && option);
            var action = typeof option == "string" ? option : options.slide;
            if (!data)
                $this.data("bs.carousel", data = new Carousel(this,options));
            if (typeof option == "number")
                data.to(option);
            else if (action)
                data[action]();
            else if (options.interval)
                data.pause().cycle()
        })
    }
    var old = $.fn.carousel;
    $.fn.carousel = Plugin;
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this
    }
    ;
    var clickHandler = function(e) {
        var href;
        var $this = $(this);
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        if (!$target.hasClass("carousel"))
            return;
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex)
            options.interval = false;
        Plugin.call($target, options);
        if (slideIndex) {
            $target.data("bs.carousel").to(slideIndex)
        }
        e.preventDefault()
    };
    $(document).on("click.bs.carousel.data-api", "[data-slide]", clickHandler).on("click.bs.carousel.data-api", "[data-slide-to]", clickHandler);
    $(window).on("load", function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this);
            Plugin.call($carousel, $carousel.data())
        })
    })
}(jQuery);
+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.$trigger = $('[data-toggle="collapse"][href="#' + element.id + '"],' + '[data-toggle="collapse"][data-target="#' + element.id + '"]');
        this.transitioning = null;
        if (this.options.parent) {
            this.$parent = this.getParent()
        } else {
            this.addAriaAndCollapsedClass(this.$element, this.$trigger)
        }
        if (this.options.toggle)
            this.toggle()
    };
    Collapse.VERSION = "3.3.7";
    Collapse.TRANSITION_DURATION = 350;
    Collapse.DEFAULTS = {
        toggle: true
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height"
    }
    ;
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in"))
            return;
        var activesData;
        var actives = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");
        if (actives && actives.length) {
            activesData = actives.data("bs.collapse");
            if (activesData && activesData.transitioning)
                return
        }
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented())
            return;
        if (actives && actives.length) {
            Plugin.call(actives, "hide");
            activesData || actives.data("bs.collapse", null)
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0).attr("aria-expanded", true);
        this.$trigger.removeClass("collapsed").attr("aria-expanded", true);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse")
        };
        if (!$.support.transition)
            return complete.call(this);
        var scrollSize = $.camelCase(["scroll", dimension].join("-"));
        this.$element.one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
    }
    ;
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in"))
            return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented())
            return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", false);
        this.$trigger.addClass("collapsed").attr("aria-expanded", false);
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")
        };
        if (!$.support.transition)
            return complete.call(this);
        this.$element[dimension](0).one("bsTransitionEnd", $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)
    }
    ;
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]()
    }
    ;
    Collapse.prototype.getParent = function() {
        return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function(i, element) {
            var $element = $(element);
            this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
        }, this)).end()
    }
    ;
    Collapse.prototype.addAriaAndCollapsedClass = function($element, $trigger) {
        var isOpen = $element.hasClass("in");
        $element.attr("aria-expanded", isOpen);
        $trigger.toggleClass("collapsed", !isOpen).attr("aria-expanded", isOpen)
    }
    ;
    function getTargetFromTrigger($trigger) {
        var href;
        var target = $trigger.attr("data-target") || (href = $trigger.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        return $(target)
    }
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data && options.toggle && /show|hide/.test(option))
                options.toggle = false;
            if (!data)
                $this.data("bs.collapse", data = new Collapse(this,options));
            if (typeof option == "string")
                data[option]()
        })
    }
    var old = $.fn.collapse;
    $.fn.collapse = Plugin;
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this
    }
    ;
    $(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(e) {
        var $this = $(this);
        if (!$this.attr("data-target"))
            e.preventDefault();
        var $target = getTargetFromTrigger($this);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        Plugin.call($target, option)
    })
}(jQuery);
+function($) {
    "use strict";
    var backdrop = ".dropdown-backdrop";
    var toggle = '[data-toggle="dropdown"]';
    var Dropdown = function(element) {
        $(element).on("click.bs.dropdown", this.toggle)
    };
    Dropdown.VERSION = "3.3.7";
    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "")
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent()
    }
    function clearMenus(e) {
        if (e && e.which === 3)
            return;
        $(backdrop).remove();
        $(toggle).each(function() {
            var $this = $(this);
            var $parent = getParent($this);
            var relatedTarget = {
                relatedTarget: this
            };
            if (!$parent.hasClass("open"))
                return;
            if (e && e.type == "click" && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target))
                return;
            $parent.trigger(e = $.Event("hide.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented())
                return;
            $this.attr("aria-expanded", "false");
            $parent.removeClass("open").trigger($.Event("hidden.bs.dropdown", relatedTarget))
        })
    }
    Dropdown.prototype.toggle = function(e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled"))
            return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart"in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $(document.createElement("div")).addClass("dropdown-backdrop").insertAfter($(this)).on("click", clearMenus)
            }
            var relatedTarget = {
                relatedTarget: this
            };
            $parent.trigger(e = $.Event("show.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented())
                return;
            $this.trigger("focus").attr("aria-expanded", "true");
            $parent.toggleClass("open").trigger($.Event("shown.bs.dropdown", relatedTarget))
        }
        return false
    }
    ;
    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName))
            return;
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled"))
            return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive && e.which != 27 || isActive && e.which == 27) {
            if (e.which == 27)
                $parent.find(toggle).trigger("focus");
            return $this.trigger("click")
        }
        var desc = " li:not(.disabled):visible a";
        var $items = $parent.find(".dropdown-menu" + desc);
        if (!$items.length)
            return;
        var index = $items.index(e.target);
        if (e.which == 38 && index > 0)
            index--;
        if (e.which == 40 && index < $items.length - 1)
            index++;
        if (!~index)
            index = 0;
        $items.eq(index).trigger("focus")
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.dropdown");
            if (!data)
                $this.data("bs.dropdown", data = new Dropdown(this));
            if (typeof option == "string")
                data[option].call($this)
        })
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = Plugin;
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this
    }
    ;
    $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation()
    }).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle, Dropdown.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", Dropdown.prototype.keydown)
}(jQuery);
+function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$body = $(document.body);
        this.$element = $(element);
        this.$dialog = this.$element.find(".modal-dialog");
        this.$backdrop = null;
        this.isShown = null;
        this.originalBodyPad = null;
        this.scrollbarWidth = 0;
        this.ignoreBackdropClick = false;
        if (this.options.remote) {
            this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
                this.$element.trigger("loaded.bs.modal")
            }, this))
        }
    };
    Modal.VERSION = "3.3.7";
    Modal.TRANSITION_DURATION = 300;
    Modal.BACKDROP_TRANSITION_DURATION = 150;
    Modal.DEFAULTS = {
        backdrop: true,
        keyboard: true,
        show: true
    };
    Modal.prototype.toggle = function(_relatedTarget) {
        return this.isShown ? this.hide() : this.show(_relatedTarget)
    }
    ;
    Modal.prototype.show = function(_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {
            relatedTarget: _relatedTarget
        });
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented())
            return;
        this.isShown = true;
        this.checkScrollbar();
        this.setScrollbar();
        this.$body.addClass("modal-open");
        this.escape();
        this.resize();
        this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.$dialog.on("mousedown.dismiss.bs.modal", function() {
            that.$element.one("mouseup.dismiss.bs.modal", function(e) {
                if ($(e.target).is(that.$element))
                    that.ignoreBackdropClick = true
            })
        });
        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
                that.$element.appendTo(that.$body)
            }
            that.$element.show().scrollTop(0);
            that.adjustDialog();
            if (transition) {
                that.$element[0].offsetWidth
            }
            that.$element.addClass("in");
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {
                relatedTarget: _relatedTarget
            });
            transition ? that.$dialog.one("bsTransitionEnd", function() {
                that.$element.trigger("focus").trigger(e)
            }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger("focus").trigger(e)
        })
    }
    ;
    Modal.prototype.hide = function(e) {
        if (e)
            e.preventDefault();
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented())
            return;
        this.isShown = false;
        this.escape();
        this.resize();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal");
        this.$dialog.off("mousedown.dismiss.bs.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal()
    }
    ;
    Modal.prototype.enforceFocus = function() {
        $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
            if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.trigger("focus")
            }
        }, this))
    }
    ;
    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) {
            this.$element.on("keydown.dismiss.bs.modal", $.proxy(function(e) {
                e.which == 27 && this.hide()
            }, this))
        } else if (!this.isShown) {
            this.$element.off("keydown.dismiss.bs.modal")
        }
    }
    ;
    Modal.prototype.resize = function() {
        if (this.isShown) {
            $(window).on("resize.bs.modal", $.proxy(this.handleUpdate, this))
        } else {
            $(window).off("resize.bs.modal")
        }
    }
    ;
    Modal.prototype.hideModal = function() {
        var that = this;
        this.$element.hide();
        this.backdrop(function() {
            that.$body.removeClass("modal-open");
            that.resetAdjustments();
            that.resetScrollbar();
            that.$element.trigger("hidden.bs.modal")
        })
    }
    ;
    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null
    }
    ;
    Modal.prototype.backdrop = function(callback) {
        var that = this;
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $(document.createElement("div")).addClass("modal-backdrop " + animate).appendTo(this.$body);
            this.$element.on("click.dismiss.bs.modal", $.proxy(function(e) {
                if (this.ignoreBackdropClick) {
                    this.ignoreBackdropClick = false;
                    return
                }
                if (e.target !== e.currentTarget)
                    return;
                this.options.backdrop == "static" ? this.$element[0].focus() : this.hide()
            }, this));
            if (doAnimate)
                this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            if (!callback)
                return;
            doAnimate ? this.$backdrop.one("bsTransitionEnd", callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback()
        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass("in");
            var callbackRemove = function() {
                that.removeBackdrop();
                callback && callback()
            };
            $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove()
        } else if (callback) {
            callback()
        }
    }
    ;
    Modal.prototype.handleUpdate = function() {
        this.adjustDialog()
    }
    ;
    Modal.prototype.adjustDialog = function() {
        var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
        this.$element.css({
            paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : "",
            paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ""
        })
    }
    ;
    Modal.prototype.resetAdjustments = function() {
        this.$element.css({
            paddingLeft: "",
            paddingRight: ""
        })
    }
    ;
    Modal.prototype.checkScrollbar = function() {
        var fullWindowWidth = window.innerWidth;
        if (!fullWindowWidth) {
            var documentElementRect = document.documentElement.getBoundingClientRect();
            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
        }
        this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;
        this.scrollbarWidth = this.measureScrollbar()
    }
    ;
    Modal.prototype.setScrollbar = function() {
        var bodyPad = parseInt(this.$body.css("padding-right") || 0, 10);
        this.originalBodyPad = document.body.style.paddingRight || "";
        if (this.bodyIsOverflowing)
            this.$body.css("padding-right", bodyPad + this.scrollbarWidth)
    }
    ;
    Modal.prototype.resetScrollbar = function() {
        this.$body.css("padding-right", this.originalBodyPad)
    }
    ;
    Modal.prototype.measureScrollbar = function() {
        var scrollDiv = document.createElement("div");
        scrollDiv.className = "modal-scrollbar-measure";
        this.$body.append(scrollDiv);
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this.$body[0].removeChild(scrollDiv);
        return scrollbarWidth
    }
    ;
    function Plugin(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data)
                $this.data("bs.modal", data = new Modal(this,options));
            if (typeof option == "string")
                data[option](_relatedTarget);
            else if (options.show)
                data.show(_relatedTarget)
        })
    }
    var old = $.fn.modal;
    $.fn.modal = Plugin;
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this
    }
    ;
    $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
        var option = $target.data("bs.modal") ? "toggle" : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data());
        if ($this.is("a"))
            e.preventDefault();
        $target.one("show.bs.modal", function(showEvent) {
            if (showEvent.isDefaultPrevented())
                return;
            $target.one("hidden.bs.modal", function() {
                $this.is(":visible") && $this.trigger("focus")
            })
        });
        Plugin.call($target, option, this)
    })
}(jQuery);
+function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.type = null;
        this.options = null;
        this.enabled = null;
        this.timeout = null;
        this.hoverState = null;
        this.$element = null;
        this.inState = null;
        this.init("tooltip", element, options)
    };
    Tooltip.VERSION = "3.3.7";
    Tooltip.TRANSITION_DURATION = 150;
    Tooltip.DEFAULTS = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false,
        viewport: {
            selector: "body",
            padding: 0
        }
    };
    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);
        this.inState = {
            click: false,
            hover: false,
            focus: false
        };
        if (this.$element[0]instanceof document.constructor && !this.options.selector) {
            throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!")
        }
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];
            if (trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this))
            } else if (trigger != "manual") {
                var eventIn = trigger == "hover" ? "mouseenter" : "focusin";
                var eventOut = trigger == "hover" ? "mouseleave" : "focusout";
                this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this))
            }
        }
        this.options.selector ? this._options = $.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle()
    }
    ;
    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS
    }
    ;
    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && typeof options.delay == "number") {
            options.delay = {
                show: options.delay,
                hide: options.delay
            }
        }
        return options
    }
    ;
    Tooltip.prototype.getDelegateOptions = function() {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value)
                options[key] = value
        });
        return options
    }
    ;
    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
        if (!self) {
            self = new this.constructor(obj.currentTarget,this.getDelegateOptions());
            $(obj.currentTarget).data("bs." + this.type, self)
        }
        if (obj instanceof $.Event) {
            self.inState[obj.type == "focusin" ? "focus" : "hover"] = true
        }
        if (self.tip().hasClass("in") || self.hoverState == "in") {
            self.hoverState = "in";
            return
        }
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show)
            return self.show();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "in")
                self.show()
        }, self.options.delay.show)
    }
    ;
    Tooltip.prototype.isInStateTrue = function() {
        for (var key in this.inState) {
            if (this.inState[key])
                return true
        }
        return false
    }
    ;
    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data("bs." + this.type);
        if (!self) {
            self = new this.constructor(obj.currentTarget,this.getDelegateOptions());
            $(obj.currentTarget).data("bs." + this.type, self)
        }
        if (obj instanceof $.Event) {
            self.inState[obj.type == "focusout" ? "focus" : "hover"] = false
        }
        if (self.isInStateTrue())
            return;
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide)
            return self.hide();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "out")
                self.hide()
        }, self.options.delay.hide)
    }
    ;
    Tooltip.prototype.show = function() {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
            if (e.isDefaultPrevented() || !inDom)
                return;
            var that = this;
            var $tip = this.tip();
            var tipId = this.getUID(this.type);
            this.setContent();
            $tip.attr("id", tipId);
            this.$element.attr("aria-describedby", tipId);
            if (this.options.animation)
                $tip.addClass("fade");
            var placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace)
                placement = placement.replace(autoToken, "") || "top";
            $tip.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(placement).data("bs." + this.type, this);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            this.$element.trigger("inserted.bs." + this.type);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var orgPlacement = placement;
                var viewportDim = this.getPosition(this.$viewport);
                placement = placement == "bottom" && pos.bottom + actualHeight > viewportDim.bottom ? "top" : placement == "top" && pos.top - actualHeight < viewportDim.top ? "bottom" : placement == "right" && pos.right + actualWidth > viewportDim.width ? "left" : placement == "left" && pos.left - actualWidth < viewportDim.left ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement)
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            var complete = function() {
                var prevHoverState = that.hoverState;
                that.$element.trigger("shown.bs." + that.type);
                that.hoverState = null;
                if (prevHoverState == "out")
                    that.leave(that)
            };
            $.support.transition && this.$tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete()
        }
    }
    ;
    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop))
            marginTop = 0;
        if (isNaN(marginLeft))
            marginLeft = 0;
        offset.top += marginTop;
        offset.left += marginLeft;
        $.offset.setOffset($tip[0], $.extend({
            using: function(props) {
                $tip.css({
                    top: Math.round(props.top),
                    left: Math.round(props.left)
                })
            }
        }, offset), 0);
        $tip.addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if (placement == "top" && actualHeight != height) {
            offset.top = offset.top + height - actualHeight
        }
        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
        if (delta.left)
            offset.left += delta.left;
        else
            offset.top += delta.top;
        var isVertical = /top|bottom/.test(placement);
        var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
        var arrowOffsetPosition = isVertical ? "offsetWidth" : "offsetHeight";
        $tip.offset(offset);
        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
    }
    ;
    Tooltip.prototype.replaceArrow = function(delta, dimension, isVertical) {
        this.arrow().css(isVertical ? "left" : "top", 50 * (1 - delta / dimension) + "%").css(isVertical ? "top" : "left", "")
    }
    ;
    Tooltip.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right")
    }
    ;
    Tooltip.prototype.hide = function(callback) {
        var that = this;
        var $tip = $(this.$tip);
        var e = $.Event("hide.bs." + this.type);
        function complete() {
            if (that.hoverState != "in")
                $tip.detach();
            if (that.$element) {
                that.$element.removeAttr("aria-describedby").trigger("hidden.bs." + that.type)
            }
            callback && callback()
        }
        this.$element.trigger(e);
        if (e.isDefaultPrevented())
            return;
        $tip.removeClass("in");
        $.support.transition && $tip.hasClass("fade") ? $tip.one("bsTransitionEnd", complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
        this.hoverState = null;
        return this
    }
    ;
    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element;
        if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "")
        }
    }
    ;
    Tooltip.prototype.hasContent = function() {
        return this.getTitle()
    }
    ;
    Tooltip.prototype.getPosition = function($element) {
        $element = $element || this.$element;
        var el = $element[0];
        var isBody = el.tagName == "BODY";
        var elRect = el.getBoundingClientRect();
        if (elRect.width == null) {
            elRect = $.extend({}, elRect, {
                width: elRect.right - elRect.left,
                height: elRect.bottom - elRect.top
            })
        }
        var isSvg = window.SVGElement && el instanceof window.SVGElement;
        var elOffset = isBody ? {
            top: 0,
            left: 0
        } : isSvg ? null : $element.offset();
        var scroll = {
            scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()
        };
        var outerDims = isBody ? {
            width: $(window).width(),
            height: $(window).height()
        } : null;
        return $.extend({}, elRect, scroll, outerDims, elOffset)
    }
    ;
    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return placement == "bottom" ? {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "top" ? {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "left" ? {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
        } : {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
        }
    }
    ;
    Tooltip.prototype.getViewportAdjustedDelta = function(placement, pos, actualWidth, actualHeight) {
        var delta = {
            top: 0,
            left: 0
        };
        if (!this.$viewport)
            return delta;
        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
        var viewportDimensions = this.getPosition(this.$viewport);
        if (/right|left/.test(placement)) {
            var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
            if (topEdgeOffset < viewportDimensions.top) {
                delta.top = viewportDimensions.top - topEdgeOffset
            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
            }
        } else {
            var leftEdgeOffset = pos.left - viewportPadding;
            var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
            if (leftEdgeOffset < viewportDimensions.left) {
                delta.left = viewportDimensions.left - leftEdgeOffset
            } else if (rightEdgeOffset > viewportDimensions.right) {
                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
            }
        }
        return delta
    }
    ;
    Tooltip.prototype.getTitle = function() {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
        return title
    }
    ;
    Tooltip.prototype.getUID = function(prefix) {
        do {
            prefix += ~~(Math.random() * 1e6)
        } while (document.getElementById(prefix));
        return prefix
    }
    ;
    Tooltip.prototype.tip = function() {
        if (!this.$tip) {
            this.$tip = $(this.options.template);
            if (this.$tip.length != 1) {
                throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!")
            }
        }
        return this.$tip
    }
    ;
    Tooltip.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    }
    ;
    Tooltip.prototype.enable = function() {
        this.enabled = true
    }
    ;
    Tooltip.prototype.disable = function() {
        this.enabled = false
    }
    ;
    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled
    }
    ;
    Tooltip.prototype.toggle = function(e) {
        var self = this;
        if (e) {
            self = $(e.currentTarget).data("bs." + this.type);
            if (!self) {
                self = new this.constructor(e.currentTarget,this.getDelegateOptions());
                $(e.currentTarget).data("bs." + this.type, self)
            }
        }
        if (e) {
            self.inState.click = !self.inState.click;
            if (self.isInStateTrue())
                self.enter(self);
            else
                self.leave(self)
        } else {
            self.tip().hasClass("in") ? self.leave(self) : self.enter(self)
        }
    }
    ;
    Tooltip.prototype.destroy = function() {
        var that = this;
        clearTimeout(this.timeout);
        this.hide(function() {
            that.$element.off("." + that.type).removeData("bs." + that.type);
            if (that.$tip) {
                that.$tip.detach()
            }
            that.$tip = null;
            that.$arrow = null;
            that.$viewport = null;
            that.$element = null
        })
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = typeof option == "object" && option;
            if (!data && /destroy|hide/.test(option))
                return;
            if (!data)
                $this.data("bs.tooltip", data = new Tooltip(this,options));
            if (typeof option == "string")
                data[option]()
        })
    }
    var old = $.fn.tooltip;
    $.fn.tooltip = Plugin;
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this
    }
}(jQuery);
+function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options)
    };
    if (!$.fn.tooltip)
        throw new Error("Popover requires tooltip.js");
    Popover.VERSION = "3.3.7";
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS
    }
    ;
    Popover.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content").children().detach().end()[this.options.html ? typeof content == "string" ? "html" : "append" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html())
            $tip.find(".popover-title").hide()
    }
    ;
    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent()
    }
    ;
    Popover.prototype.getContent = function() {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content)
    }
    ;
    Popover.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow")
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = typeof option == "object" && option;
            if (!data && /destroy|hide/.test(option))
                return;
            if (!data)
                $this.data("bs.popover", data = new Popover(this,options));
            if (typeof option == "string")
                data[option]()
        })
    }
    var old = $.fn.popover;
    $.fn.popover = Plugin;
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this
    }
}(jQuery);
+function($) {
    "use strict";
    function ScrollSpy(element, options) {
        this.$body = $(document.body);
        this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || "") + " .nav li > a";
        this.offsets = [];
        this.targets = [];
        this.activeTarget = null;
        this.scrollHeight = 0;
        this.$scrollElement.on("scroll.bs.scrollspy", $.proxy(this.process, this));
        this.refresh();
        this.process()
    }
    ScrollSpy.VERSION = "3.3.7";
    ScrollSpy.DEFAULTS = {
        offset: 10
    };
    ScrollSpy.prototype.getScrollHeight = function() {
        return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
    }
    ;
    ScrollSpy.prototype.refresh = function() {
        var that = this;
        var offsetMethod = "offset";
        var offsetBase = 0;
        this.offsets = [];
        this.targets = [];
        this.scrollHeight = this.getScrollHeight();
        if (!$.isWindow(this.$scrollElement[0])) {
            offsetMethod = "position";
            offsetBase = this.$scrollElement.scrollTop()
        }
        this.$body.find(this.selector).map(function() {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#./.test(href) && $(href);
            return $href && $href.length && $href.is(":visible") && [[$href[offsetMethod]().top + offsetBase, href]] || null
        }).sort(function(a, b) {
            return a[0] - b[0]
        }).each(function() {
            that.offsets.push(this[0]);
            that.targets.push(this[1])
        })
    }
    ;
    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.getScrollHeight();
        var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (this.scrollHeight != scrollHeight) {
            this.refresh()
        }
        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
        }
        if (activeTarget && scrollTop < offsets[0]) {
            this.activeTarget = null;
            return this.clear()
        }
        for (i = offsets.length; i--; ) {
            activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i])
        }
    }
    ;
    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target;
        this.clear();
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active")
        }
        active.trigger("activate.bs.scrollspy")
    }
    ;
    ScrollSpy.prototype.clear = function() {
        $(this.selector).parentsUntil(this.options.target, ".active").removeClass("active")
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = typeof option == "object" && option;
            if (!data)
                $this.data("bs.scrollspy", data = new ScrollSpy(this,options));
            if (typeof option == "string")
                data[option]()
        })
    }
    var old = $.fn.scrollspy;
    $.fn.scrollspy = Plugin;
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this
    }
    ;
    $(window).on("load.bs.scrollspy.data-api", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            Plugin.call($spy, $spy.data())
        })
    })
}(jQuery);
+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element)
    };
    Tab.VERSION = "3.3.7";
    Tab.TRANSITION_DURATION = 150;
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "")
        }
        if ($this.parent("li").hasClass("active"))
            return;
        var $previous = $ul.find(".active:last a");
        var hideEvent = $.Event("hide.bs.tab", {
            relatedTarget: $this[0]
        });
        var showEvent = $.Event("show.bs.tab", {
            relatedTarget: $previous[0]
        });
        $previous.trigger(hideEvent);
        $this.trigger(showEvent);
        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented())
            return;
        var $target = $(selector);
        this.activate($this.closest("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $previous.trigger({
                type: "hidden.bs.tab",
                relatedTarget: $this[0]
            });
            $this.trigger({
                type: "shown.bs.tab",
                relatedTarget: $previous[0]
            })
        })
    }
    ;
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && ($active.length && $active.hasClass("fade") || !!container.find("> .fade").length);
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", false);
            element.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", true);
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in")
            } else {
                element.removeClass("fade")
            }
            if (element.parent(".dropdown-menu").length) {
                element.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", true)
            }
            callback && callback()
        }
        $active.length && transition ? $active.one("bsTransitionEnd", next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
        $active.removeClass("in")
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data)
                $this.data("bs.tab", data = new Tab(this));
            if (typeof option == "string")
                data[option]()
        })
    }
    var old = $.fn.tab;
    $.fn.tab = Plugin;
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this
    }
    ;
    var clickHandler = function(e) {
        e.preventDefault();
        Plugin.call($(this), "show")
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', clickHandler).on("click.bs.tab.data-api", '[data-toggle="pill"]', clickHandler)
}(jQuery);
+function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$target = $(this.options.target).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = null;
        this.unpin = null;
        this.pinnedOffset = null;
        this.checkPosition()
    };
    Affix.VERSION = "3.3.7";
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {
        offset: 0,
        target: window
    };
    Affix.prototype.getState = function(scrollHeight, height, offsetTop, offsetBottom) {
        var scrollTop = this.$target.scrollTop();
        var position = this.$element.offset();
        var targetHeight = this.$target.height();
        if (offsetTop != null && this.affixed == "top")
            return scrollTop < offsetTop ? "top" : false;
        if (this.affixed == "bottom") {
            if (offsetTop != null)
                return scrollTop + this.unpin <= position.top ? false : "bottom";
            return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : "bottom"
        }
        var initializing = this.affixed == null;
        var colliderTop = initializing ? scrollTop : position.top;
        var colliderHeight = initializing ? targetHeight : height;
        if (offsetTop != null && scrollTop <= offsetTop)
            return "top";
        if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom)
            return "bottom";
        return false
    }
    ;
    Affix.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset)
            return this.pinnedOffset;
        this.$element.removeClass(Affix.RESET).addClass("affix");
        var scrollTop = this.$target.scrollTop();
        var position = this.$element.offset();
        return this.pinnedOffset = position.top - scrollTop
    }
    ;
    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1)
    }
    ;
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible"))
            return;
        var height = this.$element.height();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        var scrollHeight = Math.max($(document).height(), $(document.body).height());
        if (typeof offset != "object")
            offsetBottom = offsetTop = offset;
        if (typeof offsetTop == "function")
            offsetTop = offset.top(this.$element);
        if (typeof offsetBottom == "function")
            offsetBottom = offset.bottom(this.$element);
        var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);
        if (this.affixed != affix) {
            if (this.unpin != null)
                this.$element.css("top", "");
            var affixType = "affix" + (affix ? "-" + affix : "");
            var e = $.Event(affixType + ".bs.affix");
            this.$element.trigger(e);
            if (e.isDefaultPrevented())
                return;
            this.affixed = affix;
            this.unpin = affix == "bottom" ? this.getPinnedOffset() : null;
            this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace("affix", "affixed") + ".bs.affix")
        }
        if (affix == "bottom") {
            this.$element.offset({
                top: scrollHeight - height - offsetBottom
            })
        }
    }
    ;
    function Plugin(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = typeof option == "object" && option;
            if (!data)
                $this.data("bs.affix", data = new Affix(this,options));
            if (typeof option == "string")
                data[option]()
        })
    }
    var old = $.fn.affix;
    $.fn.affix = Plugin;
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this
    }
    ;
    $(window).on("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom != null)
                data.offset.bottom = data.offsetBottom;
            if (data.offsetTop != null)
                data.offset.top = data.offsetTop;
            Plugin.call($spy, data)
        })
    })
}(jQuery);
(function() {
    var MutationObserver, Util, WeakMap, getComputedStyle, getComputedStyleRX, bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments)
        }
    }, indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item)
                return i
        }
        return -1
    }
    ;
    Util = function() {
        function Util() {}
        Util.prototype.extend = function(custom, defaults) {
            var key, value;
            for (key in defaults) {
                value = defaults[key];
                if (custom[key] == null) {
                    custom[key] = value
                }
            }
            return custom
        }
        ;
        Util.prototype.isMobile = function(agent) {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent)
        }
        ;
        Util.prototype.createEvent = function(event, bubble, cancel, detail) {
            var customEvent;
            if (bubble == null) {
                bubble = false
            }
            if (cancel == null) {
                cancel = false
            }
            if (detail == null) {
                detail = null
            }
            if (document.createEvent != null) {
                customEvent = document.createEvent("CustomEvent");
                customEvent.initCustomEvent(event, bubble, cancel, detail)
            } else if (document.createEventObject != null) {
                customEvent = document.createEventObject();
                customEvent.eventType = event
            } else {
                customEvent.eventName = event
            }
            return customEvent
        }
        ;
        Util.prototype.emitEvent = function(elem, event) {
            if (elem.dispatchEvent != null) {
                return elem.dispatchEvent(event)
            } else if (event in (elem != null)) {
                return elem[event]()
            } else if ("on" + event in (elem != null)) {
                return elem["on" + event]()
            }
        }
        ;
        Util.prototype.addEvent = function(elem, event, fn) {
            if (elem.addEventListener != null) {
                return elem.addEventListener(event, fn, false)
            } else if (elem.attachEvent != null) {
                return elem.attachEvent("on" + event, fn)
            } else {
                return elem[event] = fn
            }
        }
        ;
        Util.prototype.removeEvent = function(elem, event, fn) {
            if (elem.removeEventListener != null) {
                return elem.removeEventListener(event, fn, false)
            } else if (elem.detachEvent != null) {
                return elem.detachEvent("on" + event, fn)
            } else {
                return delete elem[event]
            }
        }
        ;
        Util.prototype.innerHeight = function() {
            if ("innerHeight"in window) {
                return window.innerHeight
            } else {
                return document.documentElement.clientHeight
            }
        }
        ;
        return Util
    }();
    WeakMap = this.WeakMap || this.MozWeakMap || (WeakMap = function() {
        function WeakMap() {
            this.keys = [];
            this.values = []
        }
        WeakMap.prototype.get = function(key) {
            var i, item, j, len, ref;
            ref = this.keys;
            for (i = j = 0,
            len = ref.length; j < len; i = ++j) {
                item = ref[i];
                if (item === key) {
                    return this.values[i]
                }
            }
        }
        ;
        WeakMap.prototype.set = function(key, value) {
            var i, item, j, len, ref;
            ref = this.keys;
            for (i = j = 0,
            len = ref.length; j < len; i = ++j) {
                item = ref[i];
                if (item === key) {
                    this.values[i] = value;
                    return
                }
            }
            this.keys.push(key);
            return this.values.push(value)
        }
        ;
        return WeakMap
    }());
    MutationObserver = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (MutationObserver = function() {
        function MutationObserver() {
            if (typeof console !== "undefined" && console !== null) {
                console.warn("MutationObserver is not supported by your browser.")
            }
            if (typeof console !== "undefined" && console !== null) {
                console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")
            }
        }
        MutationObserver.notSupported = true;
        MutationObserver.prototype.observe = function() {}
        ;
        return MutationObserver
    }());
    getComputedStyle = this.getComputedStyle || function(el, pseudo) {
        this.getPropertyValue = function(prop) {
            var ref;
            if (prop === "float") {
                prop = "styleFloat"
            }
            if (getComputedStyleRX.test(prop)) {
                prop.replace(getComputedStyleRX, function(_, _char) {
                    return _char.toUpperCase()
                })
            }
            return ((ref = el.currentStyle) != null ? ref[prop] : void 0) || null
        }
        ;
        return this
    }
    ;
    getComputedStyleRX = /(\-([a-z]){1})/g;
    this.WOW = function() {
        WOW.prototype.defaults = {
            boxClass: "wow",
            animateClass: "animated",
            offset: 0,
            mobile: true,
            live: true,
            callback: null
        };
        function WOW(options) {
            if (options == null) {
                options = {}
            }
            this.scrollCallback = bind(this.scrollCallback, this);
            this.scrollHandler = bind(this.scrollHandler, this);
            this.resetAnimation = bind(this.resetAnimation, this);
            this.start = bind(this.start, this);
            this.scrolled = true;
            this.config = this.util().extend(options, this.defaults);
            this.animationNameCache = new WeakMap;
            this.wowEvent = this.util().createEvent(this.config.boxClass)
        }
        WOW.prototype.init = function() {
            var ref;
            this.element = window.document.documentElement;
            if ((ref = document.readyState) === "interactive" || ref === "complete") {
                this.start()
            } else {
                this.util().addEvent(document, "DOMContentLoaded", this.start)
            }
            return this.finished = []
        }
        ;
        WOW.prototype.start = function() {
            var box, j, len, ref;
            this.stopped = false;
            this.boxes = function() {
                var j, len, ref, results;
                ref = this.element.querySelectorAll("." + this.config.boxClass);
                results = [];
                for (j = 0,
                len = ref.length; j < len; j++) {
                    box = ref[j];
                    results.push(box)
                }
                return results
            }
            .call(this);
            this.all = function() {
                var j, len, ref, results;
                ref = this.boxes;
                results = [];
                for (j = 0,
                len = ref.length; j < len; j++) {
                    box = ref[j];
                    results.push(box)
                }
                return results
            }
            .call(this);
            if (this.boxes.length) {
                if (this.disabled()) {
                    this.resetStyle()
                } else {
                    ref = this.boxes;
                    for (j = 0,
                    len = ref.length; j < len; j++) {
                        box = ref[j];
                        this.applyStyle(box, true)
                    }
                }
            }
            if (!this.disabled()) {
                this.util().addEvent(window, "scroll", this.scrollHandler);
                this.util().addEvent(window, "resize", this.scrollHandler);
                this.interval = setInterval(this.scrollCallback, 50)
            }
            if (this.config.live) {
                return new MutationObserver(function(_this) {
                    return function(records) {
                        var k, len1, node, record, results;
                        results = [];
                        for (k = 0,
                        len1 = records.length; k < len1; k++) {
                            record = records[k];
                            results.push(function() {
                                var l, len2, ref1, results1;
                                ref1 = record.addedNodes || [];
                                results1 = [];
                                for (l = 0,
                                len2 = ref1.length; l < len2; l++) {
                                    node = ref1[l];
                                    results1.push(this.doSync(node))
                                }
                                return results1
                            }
                            .call(_this))
                        }
                        return results
                    }
                }(this)).observe(document.body, {
                    childList: true,
                    subtree: true
                })
            }
        }
        ;
        WOW.prototype.stop = function() {
            this.stopped = true;
            this.util().removeEvent(window, "scroll", this.scrollHandler);
            this.util().removeEvent(window, "resize", this.scrollHandler);
            if (this.interval != null) {
                return clearInterval(this.interval)
            }
        }
        ;
        WOW.prototype.sync = function(element) {
            if (MutationObserver.notSupported) {
                return this.doSync(this.element)
            }
        }
        ;
        WOW.prototype.doSync = function(element) {
            var box, j, len, ref, results;
            if (element == null) {
                element = this.element
            }
            if (element.nodeType !== 1) {
                return
            }
            element = element.parentNode || element;
            ref = element.querySelectorAll("." + this.config.boxClass);
            results = [];
            for (j = 0,
            len = ref.length; j < len; j++) {
                box = ref[j];
                if (indexOf.call(this.all, box) < 0) {
                    this.boxes.push(box);
                    this.all.push(box);
                    if (this.stopped || this.disabled()) {
                        this.resetStyle()
                    } else {
                        this.applyStyle(box, true)
                    }
                    results.push(this.scrolled = true)
                } else {
                    results.push(void 0)
                }
            }
            return results
        }
        ;
        WOW.prototype.show = function(box) {
            this.applyStyle(box);
            box.className = box.className + " " + this.config.animateClass;
            if (this.config.callback != null) {
                this.config.callback(box)
            }
            this.util().emitEvent(box, this.wowEvent);
            this.util().addEvent(box, "animationend", this.resetAnimation);
            this.util().addEvent(box, "oanimationend", this.resetAnimation);
            this.util().addEvent(box, "webkitAnimationEnd", this.resetAnimation);
            this.util().addEvent(box, "MSAnimationEnd", this.resetAnimation);
            return box
        }
        ;
        WOW.prototype.applyStyle = function(box, hidden) {
            var delay, duration, iteration;
            duration = box.getAttribute("data-wow-duration");
            delay = box.getAttribute("data-wow-delay");
            iteration = box.getAttribute("data-wow-iteration");
            return this.animate(function(_this) {
                return function() {
                    return _this.customStyle(box, hidden, duration, delay, iteration)
                }
            }(this))
        }
        ;
        WOW.prototype.animate = function() {
            if ("requestAnimationFrame"in window) {
                return function(callback) {
                    return window.requestAnimationFrame(callback)
                }
            } else {
                return function(callback) {
                    return callback()
                }
            }
        }();
        WOW.prototype.resetStyle = function() {
            var box, j, len, ref, results;
            ref = this.boxes;
            results = [];
            for (j = 0,
            len = ref.length; j < len; j++) {
                box = ref[j];
                results.push(box.style.visibility = "visible")
            }
            return results
        }
        ;
        WOW.prototype.resetAnimation = function(event) {
            var target;
            if (event.type.toLowerCase().indexOf("animationend") >= 0) {
                target = event.target || event.srcElement;
                return target.className = target.className.replace(this.config.animateClass, "").trim()
            }
        }
        ;
        WOW.prototype.customStyle = function(box, hidden, duration, delay, iteration) {
            if (hidden) {
                this.cacheAnimationName(box)
            }
            box.style.visibility = hidden ? "hidden" : "visible";
            if (duration) {
                this.vendorSet(box.style, {
                    animationDuration: duration
                })
            }
            if (delay) {
                this.vendorSet(box.style, {
                    animationDelay: delay
                })
            }
            if (iteration) {
                this.vendorSet(box.style, {
                    animationIterationCount: iteration
                })
            }
            this.vendorSet(box.style, {
                animationName: hidden ? "none" : this.cachedAnimationName(box)
            });
            return box
        }
        ;
        WOW.prototype.vendors = ["moz", "webkit"];
        WOW.prototype.vendorSet = function(elem, properties) {
            var name, results, value, vendor;
            results = [];
            for (name in properties) {
                value = properties[name];
                elem["" + name] = value;
                results.push(function() {
                    var j, len, ref, results1;
                    ref = this.vendors;
                    results1 = [];
                    for (j = 0,
                    len = ref.length; j < len; j++) {
                        vendor = ref[j];
                        results1.push(elem["" + vendor + name.charAt(0).toUpperCase() + name.substr(1)] = value)
                    }
                    return results1
                }
                .call(this))
            }
            return results
        }
        ;
        WOW.prototype.vendorCSS = function(elem, property) {
            var j, len, ref, result, style, vendor;
            style = getComputedStyle(elem);
            result = style.getPropertyCSSValue(property);
            ref = this.vendors;
            for (j = 0,
            len = ref.length; j < len; j++) {
                vendor = ref[j];
                result = result || style.getPropertyCSSValue("-" + vendor + "-" + property)
            }
            return result
        }
        ;
        WOW.prototype.animationName = function(box) {
            var animationName;
            try {
                animationName = this.vendorCSS(box, "animation-name").cssText
            } catch (_error) {
                animationName = getComputedStyle(box).getPropertyValue("animation-name")
            }
            if (animationName === "none") {
                return ""
            } else {
                return animationName
            }
        }
        ;
        WOW.prototype.cacheAnimationName = function(box) {
            return this.animationNameCache.set(box, this.animationName(box))
        }
        ;
        WOW.prototype.cachedAnimationName = function(box) {
            return this.animationNameCache.get(box)
        }
        ;
        WOW.prototype.scrollHandler = function() {
            return this.scrolled = true
        }
        ;
        WOW.prototype.scrollCallback = function() {
            var box;
            if (this.scrolled) {
                this.scrolled = false;
                this.boxes = function() {
                    var j, len, ref, results;
                    ref = this.boxes;
                    results = [];
                    for (j = 0,
                    len = ref.length; j < len; j++) {
                        box = ref[j];
                        if (!box) {
                            continue
                        }
                        if (this.isVisible(box)) {
                            this.show(box);
                            continue
                        }
                        results.push(box)
                    }
                    return results
                }
                .call(this);
                if (!(this.boxes.length || this.config.live)) {
                    return this.stop()
                }
            }
        }
        ;
        WOW.prototype.offsetTop = function(element) {
            var top;
            while (element.offsetTop === void 0) {
                element = element.parentNode
            }
            top = element.offsetTop;
            while (element = element.offsetParent) {
                top += element.offsetTop
            }
            return top
        }
        ;
        WOW.prototype.isVisible = function(box) {
            var bottom, offset, top, viewBottom, viewTop;
            offset = box.getAttribute("data-wow-offset") || this.config.offset;
            viewTop = window.pageYOffset;
            viewBottom = viewTop + Math.min(this.element.clientHeight, this.util().innerHeight()) - offset;
            top = this.offsetTop(box);
            bottom = top + box.clientHeight;
            return top <= viewBottom && bottom >= viewTop
        }
        ;
        WOW.prototype.util = function() {
            return this._util != null ? this._util : this._util = new Util
        }
        ;
        WOW.prototype.disabled = function() {
            return !this.config.mobile && this.util().isMobile(navigator.userAgent)
        }
        ;
        return WOW
    }()
}
).call(this);
(function() {
    "use strict";
    var keyCounter = 0;
    var allWaypoints = {};
    function Waypoint(options) {
        if (!options) {
            throw new Error("No options passed to Waypoint constructor")
        }
        if (!options.element) {
            throw new Error("No element option passed to Waypoint constructor")
        }
        if (!options.handler) {
            throw new Error("No handler option passed to Waypoint constructor")
        }
        this.key = "waypoint-" + keyCounter;
        this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
        this.element = this.options.element;
        this.adapter = new Waypoint.Adapter(this.element);
        this.callback = options.handler;
        this.axis = this.options.horizontal ? "horizontal" : "vertical";
        this.enabled = this.options.enabled;
        this.triggerPoint = null;
        this.group = Waypoint.Group.findOrCreate({
            name: this.options.group,
            axis: this.axis
        });
        this.context = Waypoint.Context.findOrCreateByElement(this.options.context);
        if (Waypoint.offsetAliases[this.options.offset]) {
            this.options.offset = Waypoint.offsetAliases[this.options.offset]
        }
        this.group.add(this);
        this.context.add(this);
        allWaypoints[this.key] = this;
        keyCounter += 1
    }
    Waypoint.prototype.queueTrigger = function(direction) {
        this.group.queueTrigger(this, direction)
    }
    ;
    Waypoint.prototype.trigger = function(args) {
        if (!this.enabled) {
            return
        }
        if (this.callback) {
            this.callback.apply(this, args)
        }
    }
    ;
    Waypoint.prototype.destroy = function() {
        this.context.remove(this);
        this.group.remove(this);
        delete allWaypoints[this.key]
    }
    ;
    Waypoint.prototype.disable = function() {
        this.enabled = false;
        return this
    }
    ;
    Waypoint.prototype.enable = function() {
        this.context.refresh();
        this.enabled = true;
        return this
    }
    ;
    Waypoint.prototype.next = function() {
        return this.group.next(this)
    }
    ;
    Waypoint.prototype.previous = function() {
        return this.group.previous(this)
    }
    ;
    Waypoint.invokeAll = function(method) {
        var allWaypointsArray = [];
        for (var waypointKey in allWaypoints) {
            allWaypointsArray.push(allWaypoints[waypointKey])
        }
        for (var i = 0, end = allWaypointsArray.length; i < end; i++) {
            allWaypointsArray[i][method]()
        }
    }
    ;
    Waypoint.destroyAll = function() {
        Waypoint.invokeAll("destroy")
    }
    ;
    Waypoint.disableAll = function() {
        Waypoint.invokeAll("disable")
    }
    ;
    Waypoint.enableAll = function() {
        Waypoint.invokeAll("enable")
    }
    ;
    Waypoint.refreshAll = function() {
        Waypoint.Context.refreshAll()
    }
    ;
    Waypoint.viewportHeight = function() {
        return window.innerHeight || document.documentElement.clientHeight
    }
    ;
    Waypoint.viewportWidth = function() {
        return document.documentElement.clientWidth
    }
    ;
    Waypoint.adapters = [];
    Waypoint.defaults = {
        context: window,
        continuous: true,
        enabled: true,
        group: "default",
        horizontal: false,
        offset: 0
    };
    Waypoint.offsetAliases = {
        "bottom-in-view": function() {
            return this.context.innerHeight() - this.adapter.outerHeight()
        },
        "right-in-view": function() {
            return this.context.innerWidth() - this.adapter.outerWidth()
        }
    };
    window.Waypoint = Waypoint
}
)();
(function() {
    "use strict";
    function requestAnimationFrameShim(callback) {
        window.setTimeout(callback, 1e3 / 60)
    }
    var keyCounter = 0;
    var contexts = {};
    var Waypoint = window.Waypoint;
    var oldWindowLoad = window.onload;
    function Context(element) {
        this.element = element;
        this.Adapter = Waypoint.Adapter;
        this.adapter = new this.Adapter(element);
        this.key = "waypoint-context-" + keyCounter;
        this.didScroll = false;
        this.didResize = false;
        this.oldScroll = {
            x: this.adapter.scrollLeft(),
            y: this.adapter.scrollTop()
        };
        this.waypoints = {
            vertical: {},
            horizontal: {}
        };
        element.waypointContextKey = this.key;
        contexts[element.waypointContextKey] = this;
        keyCounter += 1;
        this.createThrottledScrollHandler();
        this.createThrottledResizeHandler()
    }
    Context.prototype.add = function(waypoint) {
        var axis = waypoint.options.horizontal ? "horizontal" : "vertical";
        this.waypoints[axis][waypoint.key] = waypoint;
        this.refresh()
    }
    ;
    Context.prototype.checkEmpty = function() {
        var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal);
        var verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical);
        if (horizontalEmpty && verticalEmpty) {
            this.adapter.off(".waypoints");
            delete contexts[this.key]
        }
    }
    ;
    Context.prototype.createThrottledResizeHandler = function() {
        var self = this;
        function resizeHandler() {
            self.handleResize();
            self.didResize = false
        }
        this.adapter.on("resize.waypoints", function() {
            if (!self.didResize) {
                self.didResize = true;
                Waypoint.requestAnimationFrame(resizeHandler)
            }
        })
    }
    ;
    Context.prototype.createThrottledScrollHandler = function() {
        var self = this;
        function scrollHandler() {
            self.handleScroll();
            self.didScroll = false
        }
        this.adapter.on("scroll.waypoints", function() {
            if (!self.didScroll || Waypoint.isTouch) {
                self.didScroll = true;
                Waypoint.requestAnimationFrame(scrollHandler)
            }
        })
    }
    ;
    Context.prototype.handleResize = function() {
        Waypoint.Context.refreshAll()
    }
    ;
    Context.prototype.handleScroll = function() {
        var triggeredGroups = {};
        var axes = {
            horizontal: {
                newScroll: this.adapter.scrollLeft(),
                oldScroll: this.oldScroll.x,
                forward: "right",
                backward: "left"
            },
            vertical: {
                newScroll: this.adapter.scrollTop(),
                oldScroll: this.oldScroll.y,
                forward: "down",
                backward: "up"
            }
        };
        for (var axisKey in axes) {
            var axis = axes[axisKey];
            var isForward = axis.newScroll > axis.oldScroll;
            var direction = isForward ? axis.forward : axis.backward;
            for (var waypointKey in this.waypoints[axisKey]) {
                var waypoint = this.waypoints[axisKey][waypointKey];
                var wasBeforeTriggerPoint = axis.oldScroll < waypoint.triggerPoint;
                var nowAfterTriggerPoint = axis.newScroll >= waypoint.triggerPoint;
                var crossedForward = wasBeforeTriggerPoint && nowAfterTriggerPoint;
                var crossedBackward = !wasBeforeTriggerPoint && !nowAfterTriggerPoint;
                if (crossedForward || crossedBackward) {
                    waypoint.queueTrigger(direction);
                    triggeredGroups[waypoint.group.id] = waypoint.group
                }
            }
        }
        for (var groupKey in triggeredGroups) {
            triggeredGroups[groupKey].flushTriggers()
        }
        this.oldScroll = {
            x: axes.horizontal.newScroll,
            y: axes.vertical.newScroll
        }
    }
    ;
    Context.prototype.innerHeight = function() {
        if (this.element == this.element.window) {
            return Waypoint.viewportHeight()
        }
        return this.adapter.innerHeight()
    }
    ;
    Context.prototype.remove = function(waypoint) {
        delete this.waypoints[waypoint.axis][waypoint.key];
        this.checkEmpty()
    }
    ;
    Context.prototype.innerWidth = function() {
        if (this.element == this.element.window) {
            return Waypoint.viewportWidth()
        }
        return this.adapter.innerWidth()
    }
    ;
    Context.prototype.destroy = function() {
        var allWaypoints = [];
        for (var axis in this.waypoints) {
            for (var waypointKey in this.waypoints[axis]) {
                allWaypoints.push(this.waypoints[axis][waypointKey])
            }
        }
        for (var i = 0, end = allWaypoints.length; i < end; i++) {
            allWaypoints[i].destroy()
        }
    }
    ;
    Context.prototype.refresh = function() {
        var isWindow = this.element == this.element.window;
        var contextOffset = isWindow ? undefined : this.adapter.offset();
        var triggeredGroups = {};
        var axes;
        this.handleScroll();
        axes = {
            horizontal: {
                contextOffset: isWindow ? 0 : contextOffset.left,
                contextScroll: isWindow ? 0 : this.oldScroll.x,
                contextDimension: this.innerWidth(),
                oldScroll: this.oldScroll.x,
                forward: "right",
                backward: "left",
                offsetProp: "left"
            },
            vertical: {
                contextOffset: isWindow ? 0 : contextOffset.top,
                contextScroll: isWindow ? 0 : this.oldScroll.y,
                contextDimension: this.innerHeight(),
                oldScroll: this.oldScroll.y,
                forward: "down",
                backward: "up",
                offsetProp: "top"
            }
        };
        for (var axisKey in axes) {
            var axis = axes[axisKey];
            for (var waypointKey in this.waypoints[axisKey]) {
                var waypoint = this.waypoints[axisKey][waypointKey];
                var adjustment = waypoint.options.offset;
                var oldTriggerPoint = waypoint.triggerPoint;
                var elementOffset = 0;
                var freshWaypoint = oldTriggerPoint == null;
                var contextModifier, wasBeforeScroll, nowAfterScroll;
                var triggeredBackward, triggeredForward;
                if (waypoint.element !== waypoint.element.window) {
                    elementOffset = waypoint.adapter.offset()[axis.offsetProp]
                }
                if (typeof adjustment === "function") {
                    adjustment = adjustment.apply(waypoint)
                } else if (typeof adjustment === "string") {
                    adjustment = parseFloat(adjustment);
                    if (waypoint.options.offset.indexOf("%") > -1) {
                        adjustment = Math.ceil(axis.contextDimension * adjustment / 100)
                    }
                }
                contextModifier = axis.contextScroll - axis.contextOffset;
                waypoint.triggerPoint = elementOffset + contextModifier - adjustment;
                wasBeforeScroll = oldTriggerPoint < axis.oldScroll;
                nowAfterScroll = waypoint.triggerPoint >= axis.oldScroll;
                triggeredBackward = wasBeforeScroll && nowAfterScroll;
                triggeredForward = !wasBeforeScroll && !nowAfterScroll;
                if (!freshWaypoint && triggeredBackward) {
                    waypoint.queueTrigger(axis.backward);
                    triggeredGroups[waypoint.group.id] = waypoint.group
                } else if (!freshWaypoint && triggeredForward) {
                    waypoint.queueTrigger(axis.forward);
                    triggeredGroups[waypoint.group.id] = waypoint.group
                } else if (freshWaypoint && axis.oldScroll >= waypoint.triggerPoint) {
                    waypoint.queueTrigger(axis.forward);
                    triggeredGroups[waypoint.group.id] = waypoint.group
                }
            }
        }
        Waypoint.requestAnimationFrame(function() {
            for (var groupKey in triggeredGroups) {
                triggeredGroups[groupKey].flushTriggers()
            }
        });
        return this
    }
    ;
    Context.findOrCreateByElement = function(element) {
        return Context.findByElement(element) || new Context(element)
    }
    ;
    Context.refreshAll = function() {
        for (var contextId in contexts) {
            contexts[contextId].refresh()
        }
    }
    ;
    Context.findByElement = function(element) {
        return contexts[element.waypointContextKey]
    }
    ;
    window.onload = function() {
        if (oldWindowLoad) {
            oldWindowLoad()
        }
        Context.refreshAll()
    }
    ;
    Waypoint.requestAnimationFrame = function(callback) {
        var requestFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || requestAnimationFrameShim;
        requestFn.call(window, callback)
    }
    ;
    Waypoint.Context = Context
}
)();
(function() {
    "use strict";
    function byTriggerPoint(a, b) {
        return a.triggerPoint - b.triggerPoint
    }
    function byReverseTriggerPoint(a, b) {
        return b.triggerPoint - a.triggerPoint
    }
    var groups = {
        vertical: {},
        horizontal: {}
    };
    var Waypoint = window.Waypoint;
    function Group(options) {
        this.name = options.name;
        this.axis = options.axis;
        this.id = this.name + "-" + this.axis;
        this.waypoints = [];
        this.clearTriggerQueues();
        groups[this.axis][this.name] = this
    }
    Group.prototype.add = function(waypoint) {
        this.waypoints.push(waypoint)
    }
    ;
    Group.prototype.clearTriggerQueues = function() {
        this.triggerQueues = {
            up: [],
            down: [],
            left: [],
            right: []
        }
    }
    ;
    Group.prototype.flushTriggers = function() {
        for (var direction in this.triggerQueues) {
            var waypoints = this.triggerQueues[direction];
            var reverse = direction === "up" || direction === "left";
            waypoints.sort(reverse ? byReverseTriggerPoint : byTriggerPoint);
            for (var i = 0, end = waypoints.length; i < end; i += 1) {
                var waypoint = waypoints[i];
                if (waypoint.options.continuous || i === waypoints.length - 1) {
                    waypoint.trigger([direction])
                }
            }
        }
        this.clearTriggerQueues()
    }
    ;
    Group.prototype.next = function(waypoint) {
        this.waypoints.sort(byTriggerPoint);
        var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
        var isLast = index === this.waypoints.length - 1;
        return isLast ? null : this.waypoints[index + 1]
    }
    ;
    Group.prototype.previous = function(waypoint) {
        this.waypoints.sort(byTriggerPoint);
        var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
        return index ? this.waypoints[index - 1] : null
    }
    ;
    Group.prototype.queueTrigger = function(waypoint, direction) {
        this.triggerQueues[direction].push(waypoint)
    }
    ;
    Group.prototype.remove = function(waypoint) {
        var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
        if (index > -1) {
            this.waypoints.splice(index, 1)
        }
    }
    ;
    Group.prototype.first = function() {
        return this.waypoints[0]
    }
    ;
    Group.prototype.last = function() {
        return this.waypoints[this.waypoints.length - 1]
    }
    ;
    Group.findOrCreate = function(options) {
        return groups[options.axis][options.name] || new Group(options)
    }
    ;
    Waypoint.Group = Group
}
)();
(function() {
    "use strict";
    var $ = window.jQuery;
    var Waypoint = window.Waypoint;
    function JQueryAdapter(element) {
        this.$element = $(element)
    }
    $.each(["innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop"], function(i, method) {
        JQueryAdapter.prototype[method] = function() {
            var args = Array.prototype.slice.call(arguments);
            return this.$element[method].apply(this.$element, args)
        }
    });
    $.each(["extend", "inArray", "isEmptyObject"], function(i, method) {
        JQueryAdapter[method] = $[method]
    });
    Waypoint.adapters.push({
        name: "jquery",
        Adapter: JQueryAdapter
    });
    Waypoint.Adapter = JQueryAdapter
}
)();
(function() {
    "use strict";
    var Waypoint = window.Waypoint;
    function createExtension(framework) {
        return function() {
            var waypoints = [];
            var overrides = arguments[0];
            if (framework.isFunction(arguments[0])) {
                overrides = framework.extend({}, arguments[1]);
                overrides.handler = arguments[0]
            }
            this.each(function() {
                var options = framework.extend({}, overrides, {
                    element: this
                });
                if (typeof options.context === "string") {
                    options.context = framework(this).closest(options.context)[0]
                }
                waypoints.push(new Waypoint(options))
            });
            return waypoints
        }
    }
    if (window.jQuery) {
        window.jQuery.fn.waypoint = createExtension(window.jQuery)
    }
    if (window.Zepto) {
        window.Zepto.fn.waypoint = createExtension(window.Zepto)
    }
}
)();
(function($) {
    "use strict";
    $.fn.counterUp = function(options) {
        var settings = $.extend({
            time: 400,
            delay: 10,
            offset: 100,
            beginAt: 0,
            formatter: false,
            context: "window",
            callback: function() {}
        }, options), s;
        return this.each(function() {
            var $this = $(this)
              , counter = {
                time: $(this).data("counterup-time") || settings.time,
                delay: $(this).data("counterup-delay") || settings.delay,
                offset: $(this).data("counterup-offset") || settings.offset,
                beginAt: $(this).data("counterup-beginat") || settings.beginAt,
                context: $(this).data("counterup-context") || settings.context
            };
            var counterUpper = function() {
                var nums = [];
                var divisions = counter.time / counter.delay;
                var num = $(this).attr("data-num") ? $(this).attr("data-num") : $this.text();
                var isComma = /[0-9]+,[0-9]+/.test(num);
                num = num.replace(/,/g, "");
                var decimalPlaces = (num.split(".")[1] || []).length;
                if (counter.beginAt > num)
                    counter.beginAt = num;
                var isTime = /[0-9]+:[0-9]+:[0-9]+/.test(num);
                if (isTime) {
                    var times = num.split(":")
                      , m = 1;
                    s = 0;
                    while (times.length > 0) {
                        s += m * parseInt(times.pop(), 10);
                        m *= 60
                    }
                }
                for (var i = divisions; i >= counter.beginAt / num * divisions; i--) {
                    var newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);
                    if (isTime) {
                        newNum = parseInt(s / divisions * i);
                        var hours = parseInt(newNum / 3600) % 24;
                        var minutes = parseInt(newNum / 60) % 60;
                        var seconds = parseInt(newNum % 60, 10);
                        newNum = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
                    }
                    if (isComma) {
                        while (/(\d+)(\d{3})/.test(newNum.toString())) {
                            newNum = newNum.toString().replace(/(\d+)(\d{3})/, "$1" + "," + "$2")
                        }
                    }
                    if (settings.formatter) {
                        newNum = settings.formatter.call(this, newNum)
                    }
                    nums.unshift(newNum)
                }
                $this.data("counterup-nums", nums);
                $this.text(counter.beginAt);
                var f = function() {
                    if (!$this.data("counterup-nums")) {
                        settings.callback.call(this);
                        return
                    }
                    $this.html($this.data("counterup-nums").shift());
                    if ($this.data("counterup-nums").length) {
                        setTimeout($this.data("counterup-func"), counter.delay)
                    } else {
                        $this.data("counterup-nums", null);
                        $this.data("counterup-func", null);
                        settings.callback.call(this)
                    }
                };
                $this.data("counterup-func", f);
                setTimeout($this.data("counterup-func"), counter.delay)
            };
            $this.waypoint(function(direction) {
                counterUpper();
                this.destroy()
            }, {
                offset: counter.offset + "%",
                context: counter.context
            })
        })
    }
}
)(jQuery);
(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else if (typeof exports !== "undefined") {
        module.exports = factory(require("jquery"))
    } else {
        factory(jQuery)
    }
}
)
(function($) {
    "use strict";
    var Slick = window.Slick || {};
    Slick = function() {
        var instanceUid = 0;
        function Slick(element, settings) {
            var _ = this, dataSettings;
            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3e3,
                centerMode: false,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1)
                },
                dots: false,
                dotsClass: "slick-dots",
                draggable: true,
                easing: "linear",
                edgeFriction: .35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: false,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1e3
            };
            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };
            $.extend(_, _.initials);
            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = "hidden";
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = "visibilitychange";
            _.windowWidth = 0;
            _.windowTimer = null;
            dataSettings = $(element).data("slick") || {};
            _.options = $.extend({}, _.defaults, settings, dataSettings);
            _.currentSlide = _.options.initialSlide;
            _.originalSettings = _.options;
            if (typeof document.mozHidden !== "undefined") {
                _.hidden = "mozHidden";
                _.visibilityChange = "mozvisibilitychange"
            } else if (typeof document.webkitHidden !== "undefined") {
                _.hidden = "webkitHidden";
                _.visibilityChange = "webkitvisibilitychange"
            }
            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);
            _.instanceUid = instanceUid++;
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
            _.registerBreakpoints();
            _.init(true)
        }
        return Slick
    }();
    Slick.prototype.activateADA = function() {
        var _ = this;
        _.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        })
    }
    ;
    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
        var _ = this;
        if (typeof index === "boolean") {
            addBefore = index;
            index = null
        } else if (index < 0 || index >= _.slideCount) {
            return false
        }
        _.unload();
        if (typeof index === "number") {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack)
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index))
            } else {
                $(markup).insertAfter(_.$slides.eq(index))
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack)
            } else {
                $(markup).appendTo(_.$slideTrack)
            }
        }
        _.$slides = _.$slideTrack.children(this.options.slide);
        _.$slideTrack.children(this.options.slide).detach();
        _.$slideTrack.append(_.$slides);
        _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index)
        });
        _.$slidesCache = _.$slides;
        _.reinit()
    }
    ;
    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed)
        }
    }
    ;
    Slick.prototype.animateSlide = function(targetLeft, callback) {
        var animProps = {}
          , _ = this;
        _.animateHeight();
        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback)
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback)
            }
        } else {
            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = "translate(" + now + "px, 0px)";
                            _.$slideTrack.css(animProps)
                        } else {
                            animProps[_.animType] = "translate(0px," + now + "px)";
                            _.$slideTrack.css(animProps)
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call()
                        }
                    }
                })
            } else {
                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);
                if (_.options.vertical === false) {
                    animProps[_.animType] = "translate3d(" + targetLeft + "px, 0px, 0px)"
                } else {
                    animProps[_.animType] = "translate3d(0px," + targetLeft + "px, 0px)"
                }
                _.$slideTrack.css(animProps);
                if (callback) {
                    setTimeout(function() {
                        _.disableTransition();
                        callback.call()
                    }, _.options.speed)
                }
            }
        }
    }
    ;
    Slick.prototype.getNavTarget = function() {
        var _ = this
          , asNavFor = _.options.asNavFor;
        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider)
        }
        return asNavFor
    }
    ;
    Slick.prototype.asNavFor = function(index) {
        var _ = this
          , asNavFor = _.getNavTarget();
        if (asNavFor !== null && typeof asNavFor === "object") {
            asNavFor.each(function() {
                var target = $(this).slick("getSlick");
                if (!target.unslicked) {
                    target.slideHandler(index, true)
                }
            })
        }
    }
    ;
    Slick.prototype.applyTransition = function(slide) {
        var _ = this
          , transition = {};
        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + " " + _.options.speed + "ms " + _.options.cssEase
        } else {
            transition[_.transitionType] = "opacity " + _.options.speed + "ms " + _.options.cssEase
        }
        if (_.options.fade === false) {
            _.$slideTrack.css(transition)
        } else {
            _.$slides.eq(slide).css(transition)
        }
    }
    ;
    Slick.prototype.autoPlay = function() {
        var _ = this;
        _.autoPlayClear();
        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed)
        }
    }
    ;
    Slick.prototype.autoPlayClear = function() {
        var _ = this;
        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer)
        }
    }
    ;
    Slick.prototype.autoPlayIterator = function() {
        var _ = this
          , slideTo = _.currentSlide + _.options.slidesToScroll;
        if (!_.paused && !_.interrupted && !_.focussed) {
            if (_.options.infinite === false) {
                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0
                } else if (_.direction === 0) {
                    slideTo = _.currentSlide - _.options.slidesToScroll;
                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1
                    }
                }
            }
            _.slideHandler(slideTo)
        }
    }
    ;
    Slick.prototype.buildArrows = function() {
        var _ = this;
        if (_.options.arrows === true) {
            _.$prevArrow = $(_.options.prevArrow).addClass("slick-arrow");
            _.$nextArrow = $(_.options.nextArrow).addClass("slick-arrow");
            if (_.slideCount > _.options.slidesToShow) {
                _.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                _.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows)
                }
                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows)
                }
                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")
                }
            } else {
                _.$prevArrow.add(_.$nextArrow).addClass("slick-hidden").attr({
                    "aria-disabled": "true",
                    tabindex: "-1"
                })
            }
        }
    }
    ;
    Slick.prototype.buildDots = function() {
        var _ = this, i, dot;
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            _.$slider.addClass("slick-dotted");
            dot = $("<ul />").addClass(_.options.dotsClass);
            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($("<li />").append(_.options.customPaging.call(this, _, i)))
            }
            _.$dots = dot.appendTo(_.options.appendDots);
            _.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false")
        }
    }
    ;
    Slick.prototype.buildOut = function() {
        var _ = this;
        _.$slides = _.$slider.children(_.options.slide + ":not(.slick-cloned)").addClass("slick-slide");
        _.slideCount = _.$slides.length;
        _.$slides.each(function(index, element) {
            $(element).attr("data-slick-index", index).data("originalStyling", $(element).attr("style") || "")
        });
        _.$slider.addClass("slick-slider");
        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();
        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css("opacity", 0);
        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1
        }
        $("img[data-lazy]", _.$slider).not("[src]").addClass("slick-loading");
        _.setupInfinite();
        _.buildArrows();
        _.buildDots();
        _.updateDots();
        _.setSlideClasses(typeof _.currentSlide === "number" ? _.currentSlide : 0);
        if (_.options.draggable === true) {
            _.$list.addClass("draggable")
        }
    }
    ;
    Slick.prototype.buildRows = function() {
        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;
        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();
        if (_.options.rows > 1) {
            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);
            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement("div");
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement("div");
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target))
                        }
                    }
                    slide.appendChild(row)
                }
                newSlides.appendChild(slide)
            }
            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                width: 100 / _.options.slidesPerRow + "%",
                display: "inline-block"
            })
        }
    }
    ;
    Slick.prototype.checkResponsive = function(initial, forceUpdate) {
        var _ = this, breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();
        if (_.respondTo === "window") {
            respondToWidth = windowWidth
        } else if (_.respondTo === "slider") {
            respondToWidth = sliderWidth
        } else if (_.respondTo === "min") {
            respondToWidth = Math.min(windowWidth, sliderWidth)
        }
        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {
            targetBreakpoint = null;
            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint]
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint]
                        }
                    }
                }
            }
            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === "unslick") {
                            _.unslick(targetBreakpoint)
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide
                            }
                            _.refresh(initial)
                        }
                        triggerBreakpoint = targetBreakpoint
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === "unslick") {
                        _.unslick(targetBreakpoint)
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide
                        }
                        _.refresh(initial)
                    }
                    triggerBreakpoint = targetBreakpoint
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint
                }
            }
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger("breakpoint", [_, triggerBreakpoint])
            }
        }
    }
    ;
    Slick.prototype.changeSlide = function(event, dontAnimate) {
        var _ = this, $target = $(event.currentTarget), indexOffset, slideOffset, unevenOffset;
        if ($target.is("a")) {
            event.preventDefault()
        }
        if (!$target.is("li")) {
            $target = $target.closest("li")
        }
        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
        switch (event.data.message) {
        case "previous":
            slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
            if (_.slideCount > _.options.slidesToShow) {
                _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate)
            }
            break;
        case "next":
            slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
            if (_.slideCount > _.options.slidesToShow) {
                _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate)
            }
            break;
        case "index":
            var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;
            _.slideHandler(_.checkNavigable(index), false, dontAnimate);
            $target.children().trigger("focus");
            break;
        default:
            return
        }
    }
    ;
    Slick.prototype.checkNavigable = function(index) {
        var _ = this, navigables, prevNavigable;
        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1]
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break
                }
                prevNavigable = navigables[n]
            }
        }
        return index
    }
    ;
    Slick.prototype.cleanUpEvents = function() {
        var _ = this;
        if (_.options.dots && _.$dots !== null) {
            $("li", _.$dots).off("click.slick", _.changeSlide).off("mouseenter.slick", $.proxy(_.interrupt, _, true)).off("mouseleave.slick", $.proxy(_.interrupt, _, false))
        }
        _.$slider.off("focus.slick blur.slick");
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off("click.slick", _.changeSlide);
            _.$nextArrow && _.$nextArrow.off("click.slick", _.changeSlide)
        }
        _.$list.off("touchstart.slick mousedown.slick", _.swipeHandler);
        _.$list.off("touchmove.slick mousemove.slick", _.swipeHandler);
        _.$list.off("touchend.slick mouseup.slick", _.swipeHandler);
        _.$list.off("touchcancel.slick mouseleave.slick", _.swipeHandler);
        _.$list.off("click.slick", _.clickHandler);
        $(document).off(_.visibilityChange, _.visibility);
        _.cleanUpSlideEvents();
        if (_.options.accessibility === true) {
            _.$list.off("keydown.slick", _.keyHandler)
        }
        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off("click.slick", _.selectHandler)
        }
        $(window).off("orientationchange.slick.slick-" + _.instanceUid, _.orientationChange);
        $(window).off("resize.slick.slick-" + _.instanceUid, _.resize);
        $("[draggable!=true]", _.$slideTrack).off("dragstart", _.preventDefault);
        $(window).off("load.slick.slick-" + _.instanceUid, _.setPosition);
        $(document).off("ready.slick.slick-" + _.instanceUid, _.setPosition)
    }
    ;
    Slick.prototype.cleanUpSlideEvents = function() {
        var _ = this;
        _.$list.off("mouseenter.slick", $.proxy(_.interrupt, _, true));
        _.$list.off("mouseleave.slick", $.proxy(_.interrupt, _, false))
    }
    ;
    Slick.prototype.cleanUpRows = function() {
        var _ = this, originalSlides;
        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr("style");
            _.$slider.empty().append(originalSlides)
        }
    }
    ;
    Slick.prototype.clickHandler = function(event) {
        var _ = this;
        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault()
        }
    }
    ;
    Slick.prototype.destroy = function(refresh) {
        var _ = this;
        _.autoPlayClear();
        _.touchObject = {};
        _.cleanUpEvents();
        $(".slick-cloned", _.$slider).detach();
        if (_.$dots) {
            _.$dots.remove()
        }
        if (_.$prevArrow && _.$prevArrow.length) {
            _.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove()
            }
        }
        if (_.$nextArrow && _.$nextArrow.length) {
            _.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove()
            }
        }
        if (_.$slides) {
            _.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
                $(this).attr("style", $(this).data("originalStyling"))
            });
            _.$slideTrack.children(this.options.slide).detach();
            _.$slideTrack.detach();
            _.$list.detach();
            _.$slider.append(_.$slides)
        }
        _.cleanUpRows();
        _.$slider.removeClass("slick-slider");
        _.$slider.removeClass("slick-initialized");
        _.$slider.removeClass("slick-dotted");
        _.unslicked = true;
        if (!refresh) {
            _.$slider.trigger("destroy", [_])
        }
    }
    ;
    Slick.prototype.disableTransition = function(slide) {
        var _ = this
          , transition = {};
        transition[_.transitionType] = "";
        if (_.options.fade === false) {
            _.$slideTrack.css(transition)
        } else {
            _.$slides.eq(slide).css(transition)
        }
    }
    ;
    Slick.prototype.fadeSlide = function(slideIndex, callback) {
        var _ = this;
        if (_.cssTransitions === false) {
            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });
            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback)
        } else {
            _.applyTransition(slideIndex);
            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });
            if (callback) {
                setTimeout(function() {
                    _.disableTransition(slideIndex);
                    callback.call()
                }, _.options.speed)
            }
        }
    }
    ;
    Slick.prototype.fadeSlideOut = function(slideIndex) {
        var _ = this;
        if (_.cssTransitions === false) {
            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing)
        } else {
            _.applyTransition(slideIndex);
            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            })
        }
    }
    ;
    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
        var _ = this;
        if (filter !== null) {
            _.$slidesCache = _.$slides;
            _.unload();
            _.$slideTrack.children(this.options.slide).detach();
            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
            _.reinit()
        }
    }
    ;
    Slick.prototype.focusHandler = function() {
        var _ = this;
        _.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*:not(.slick-arrow)", function(event) {
            event.stopImmediatePropagation();
            var $sf = $(this);
            setTimeout(function() {
                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(":focus");
                    _.autoPlay()
                }
            }, 0)
        })
    }
    ;
    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
        var _ = this;
        return _.currentSlide
    }
    ;
    Slick.prototype.getDotCount = function() {
        var _ = this;
        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;
        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll)
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow
            }
        }
        return pagerQty - 1
    }
    ;
    Slick.prototype.getLeft = function(slideIndex) {
        var _ = this, targetLeft, verticalHeight, verticalOffset = 0, targetSlide;
        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);
        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                verticalOffset = verticalHeight * _.options.slidesToShow * -1
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight
            }
        }
        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0
        }
        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2)
        }
        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset
        }
        if (_.options.variableWidth === true) {
            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex)
            } else {
                targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow)
            }
            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1
                } else {
                    targetLeft = 0
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0
            }
            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex)
                } else {
                    targetSlide = _.$slideTrack.children(".slick-slide").eq(slideIndex + _.options.slidesToShow + 1)
                }
                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1
                    } else {
                        targetLeft = 0
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0
                }
                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2
            }
        }
        return targetLeft
    }
    ;
    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
        var _ = this;
        return _.options[option]
    }
    ;
    Slick.prototype.getNavigableIndexes = function() {
        var _ = this, breakPoint = 0, counter = 0, indexes = [], max;
        if (_.options.infinite === false) {
            max = _.slideCount
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2
        }
        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow
        }
        return indexes
    }
    ;
    Slick.prototype.getSlick = function() {
        return this
    }
    ;
    Slick.prototype.getSlideCount = function() {
        var _ = this, slidesTraversed, swipedSlide, centerOffset;
        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;
        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find(".slick-slide").each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false
                }
            });
            slidesTraversed = Math.abs($(swipedSlide).attr("data-slick-index") - _.currentSlide) || 1;
            return slidesTraversed
        } else {
            return _.options.slidesToScroll
        }
    }
    ;
    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
        var _ = this;
        _.changeSlide({
            data: {
                message: "index",
                index: parseInt(slide)
            }
        }, dontAnimate)
    }
    ;
    Slick.prototype.init = function(creation) {
        var _ = this;
        if (!$(_.$slider).hasClass("slick-initialized")) {
            $(_.$slider).addClass("slick-initialized");
            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler()
        }
        if (creation) {
            _.$slider.trigger("init", [_])
        }
        if (_.options.accessibility === true) {
            _.initADA()
        }
        if (_.options.autoplay) {
            _.paused = false;
            _.autoPlay()
        }
    }
    ;
    Slick.prototype.initADA = function() {
        var _ = this;
        _.$slides.add(_.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        });
        _.$slideTrack.attr("role", "listbox");
        _.$slides.not(_.$slideTrack.find(".slick-cloned")).each(function(i) {
            $(this).attr({
                role: "option",
                "aria-describedby": "slick-slide" + _.instanceUid + i + ""
            })
        });
        if (_.$dots !== null) {
            _.$dots.attr("role", "tablist").find("li").each(function(i) {
                $(this).attr({
                    role: "presentation",
                    "aria-selected": "false",
                    "aria-controls": "navigation" + _.instanceUid + i + "",
                    id: "slick-slide" + _.instanceUid + i + ""
                })
            }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar")
        }
        _.activateADA()
    }
    ;
    Slick.prototype.initArrowEvents = function() {
        var _ = this;
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off("click.slick").on("click.slick", {
                message: "previous"
            }, _.changeSlide);
            _.$nextArrow.off("click.slick").on("click.slick", {
                message: "next"
            }, _.changeSlide)
        }
    }
    ;
    Slick.prototype.initDotEvents = function() {
        var _ = this;
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $("li", _.$dots).on("click.slick", {
                message: "index"
            }, _.changeSlide)
        }
        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {
            $("li", _.$dots).on("mouseenter.slick", $.proxy(_.interrupt, _, true)).on("mouseleave.slick", $.proxy(_.interrupt, _, false))
        }
    }
    ;
    Slick.prototype.initSlideEvents = function() {
        var _ = this;
        if (_.options.pauseOnHover) {
            _.$list.on("mouseenter.slick", $.proxy(_.interrupt, _, true));
            _.$list.on("mouseleave.slick", $.proxy(_.interrupt, _, false))
        }
    }
    ;
    Slick.prototype.initializeEvents = function() {
        var _ = this;
        _.initArrowEvents();
        _.initDotEvents();
        _.initSlideEvents();
        _.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, _.swipeHandler);
        _.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, _.swipeHandler);
        _.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, _.swipeHandler);
        _.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, _.swipeHandler);
        _.$list.on("click.slick", _.clickHandler);
        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
        if (_.options.accessibility === true) {
            _.$list.on("keydown.slick", _.keyHandler)
        }
        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on("click.slick", _.selectHandler)
        }
        $(window).on("orientationchange.slick.slick-" + _.instanceUid, $.proxy(_.orientationChange, _));
        $(window).on("resize.slick.slick-" + _.instanceUid, $.proxy(_.resize, _));
        $("[draggable!=true]", _.$slideTrack).on("dragstart", _.preventDefault);
        $(window).on("load.slick.slick-" + _.instanceUid, _.setPosition);
        $(document).on("ready.slick.slick-" + _.instanceUid, _.setPosition)
    }
    ;
    Slick.prototype.initUI = function() {
        var _ = this;
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.show();
            _.$nextArrow.show()
        }
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            _.$dots.show()
        }
    }
    ;
    Slick.prototype.keyHandler = function(event) {
        var _ = this;
        if (!event.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? "next" : "previous"
                    }
                })
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? "previous" : "next"
                    }
                })
            }
        }
    }
    ;
    Slick.prototype.lazyLoad = function() {
        var _ = this, loadRange, cloneRange, rangeStart, rangeEnd;
        function loadImages(imagesScope) {
            $("img[data-lazy]", imagesScope).each(function() {
                var image = $(this)
                  , imageSource = $(this).attr("data-lazy")
                  , imageToLoad = document.createElement("img");
                imageToLoad.onload = function() {
                    image.animate({
                        opacity: 0
                    }, 100, function() {
                        image.attr("src", imageSource).animate({
                            opacity: 1
                        }, 200, function() {
                            image.removeAttr("data-lazy").removeClass("slick-loading")
                        });
                        _.$slider.trigger("lazyLoaded", [_, image, imageSource])
                    })
                }
                ;
                imageToLoad.onerror = function() {
                    image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
                    _.$slider.trigger("lazyLoadError", [_, image, imageSource])
                }
                ;
                imageToLoad.src = imageSource
            })
        }
        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0)
                    rangeStart--;
                if (rangeEnd <= _.slideCount)
                    rangeEnd++
            }
        }
        loadRange = _.$slider.find(".slick-slide").slice(rangeStart, rangeEnd);
        loadImages(loadRange);
        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find(".slick-slide");
            loadImages(cloneRange)
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find(".slick-cloned").slice(0, _.options.slidesToShow);
            loadImages(cloneRange)
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find(".slick-cloned").slice(_.options.slidesToShow * -1);
            loadImages(cloneRange)
        }
    }
    ;
    Slick.prototype.loadSlider = function() {
        var _ = this;
        _.setPosition();
        _.$slideTrack.css({
            opacity: 1
        });
        _.$slider.removeClass("slick-loading");
        _.initUI();
        if (_.options.lazyLoad === "progressive") {
            _.progressiveLazyLoad()
        }
    }
    ;
    Slick.prototype.next = Slick.prototype.slickNext = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "next"
            }
        })
    }
    ;
    Slick.prototype.orientationChange = function() {
        var _ = this;
        _.checkResponsive();
        _.setPosition()
    }
    ;
    Slick.prototype.pause = Slick.prototype.slickPause = function() {
        var _ = this;
        _.autoPlayClear();
        _.paused = true
    }
    ;
    Slick.prototype.play = Slick.prototype.slickPlay = function() {
        var _ = this;
        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false
    }
    ;
    Slick.prototype.postSlide = function(index) {
        var _ = this;
        if (!_.unslicked) {
            _.$slider.trigger("afterChange", [_, index]);
            _.animating = false;
            _.setPosition();
            _.swipeLeft = null;
            if (_.options.autoplay) {
                _.autoPlay()
            }
            if (_.options.accessibility === true) {
                _.initADA()
            }
        }
    }
    ;
    Slick.prototype.prev = Slick.prototype.slickPrev = function() {
        var _ = this;
        _.changeSlide({
            data: {
                message: "previous"
            }
        })
    }
    ;
    Slick.prototype.preventDefault = function(event) {
        event.preventDefault()
    }
    ;
    Slick.prototype.progressiveLazyLoad = function(tryCount) {
        tryCount = tryCount || 1;
        var _ = this, $imgsToLoad = $("img[data-lazy]", _.$slider), image, imageSource, imageToLoad;
        if ($imgsToLoad.length) {
            image = $imgsToLoad.first();
            imageSource = image.attr("data-lazy");
            imageToLoad = document.createElement("img");
            imageToLoad.onload = function() {
                image.attr("src", imageSource).removeAttr("data-lazy").removeClass("slick-loading");
                if (_.options.adaptiveHeight === true) {
                    _.setPosition()
                }
                _.$slider.trigger("lazyLoaded", [_, image, imageSource]);
                _.progressiveLazyLoad()
            }
            ;
            imageToLoad.onerror = function() {
                if (tryCount < 3) {
                    setTimeout(function() {
                        _.progressiveLazyLoad(tryCount + 1)
                    }, 500)
                } else {
                    image.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
                    _.$slider.trigger("lazyLoadError", [_, image, imageSource]);
                    _.progressiveLazyLoad()
                }
            }
            ;
            imageToLoad.src = imageSource
        } else {
            _.$slider.trigger("allImagesLoaded", [_])
        }
    }
    ;
    Slick.prototype.refresh = function(initializing) {
        var _ = this, currentSlide, lastVisibleIndex;
        lastVisibleIndex = _.slideCount - _.options.slidesToShow;
        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex
        }
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0
        }
        currentSlide = _.currentSlide;
        _.destroy(true);
        $.extend(_, _.initials, {
            currentSlide: currentSlide
        });
        _.init();
        if (!initializing) {
            _.changeSlide({
                data: {
                    message: "index",
                    index: currentSlide
                }
            }, false)
        }
    }
    ;
    Slick.prototype.registerBreakpoints = function() {
        var _ = this, breakpoint, currentBreakpoint, l, responsiveSettings = _.options.responsive || null;
        if ($.type(responsiveSettings) === "array" && responsiveSettings.length) {
            _.respondTo = _.options.respondTo || "window";
            for (breakpoint in responsiveSettings) {
                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;
                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1)
                        }
                        l--
                    }
                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings
                }
            }
            _.breakpoints.sort(function(a, b) {
                return _.options.mobileFirst ? a - b : b - a
            })
        }
    }
    ;
    Slick.prototype.reinit = function() {
        var _ = this;
        _.$slides = _.$slideTrack.children(_.options.slide).addClass("slick-slide");
        _.slideCount = _.$slides.length;
        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll
        }
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0
        }
        _.registerBreakpoints();
        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();
        _.checkResponsive(false, true);
        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on("click.slick", _.selectHandler)
        }
        _.setSlideClasses(typeof _.currentSlide === "number" ? _.currentSlide : 0);
        _.setPosition();
        _.focusHandler();
        _.paused = !_.options.autoplay;
        _.autoPlay();
        _.$slider.trigger("reInit", [_])
    }
    ;
    Slick.prototype.resize = function() {
        var _ = this;
        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition()
                }
            }, 50)
        }
    }
    ;
    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
        var _ = this;
        if (typeof index === "boolean") {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1
        } else {
            index = removeBefore === true ? --index : index
        }
        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false
        }
        _.unload();
        if (removeAll === true) {
            _.$slideTrack.children().remove()
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove()
        }
        _.$slides = _.$slideTrack.children(this.options.slide);
        _.$slideTrack.children(this.options.slide).detach();
        _.$slideTrack.append(_.$slides);
        _.$slidesCache = _.$slides;
        _.reinit()
    }
    ;
    Slick.prototype.setCSS = function(position) {
        var _ = this, positionProps = {}, x, y;
        if (_.options.rtl === true) {
            position = -position
        }
        x = _.positionProp == "left" ? Math.ceil(position) + "px" : "0px";
        y = _.positionProp == "top" ? Math.ceil(position) + "px" : "0px";
        positionProps[_.positionProp] = position;
        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps)
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = "translate(" + x + ", " + y + ")";
                _.$slideTrack.css(positionProps)
            } else {
                positionProps[_.animType] = "translate3d(" + x + ", " + y + ", 0px)";
                _.$slideTrack.css(positionProps)
            }
        }
    }
    ;
    Slick.prototype.setDimensions = function() {
        var _ = this;
        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: "0px " + _.options.centerPadding
                })
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + " 0px"
                })
            }
        }
        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();
        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children(".slick-slide").length))
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5e3 * _.slideCount)
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children(".slick-slide").length))
        }
        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false)
            _.$slideTrack.children(".slick-slide").width(_.slideWidth - offset)
    }
    ;
    Slick.prototype.setFade = function() {
        var _ = this, targetLeft;
        _.$slides.each(function(index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: "relative",
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                })
            } else {
                $(element).css({
                    position: "relative",
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                })
            }
        });
        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        })
    }
    ;
    Slick.prototype.setHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css("height", targetHeight)
        }
    }
    ;
    Slick.prototype.setOption = Slick.prototype.slickSetOption = function() {
        var _ = this, l, item, option, value, refresh = false, type;
        if ($.type(arguments[0]) === "object") {
            option = arguments[0];
            refresh = arguments[1];
            type = "multiple"
        } else if ($.type(arguments[0]) === "string") {
            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];
            if (arguments[0] === "responsive" && $.type(arguments[1]) === "array") {
                type = "responsive"
            } else if (typeof arguments[1] !== "undefined") {
                type = "single"
            }
        }
        if (type === "single") {
            _.options[option] = value
        } else if (type === "multiple") {
            $.each(option, function(opt, val) {
                _.options[opt] = val
            })
        } else if (type === "responsive") {
            for (item in value) {
                if ($.type(_.options.responsive) !== "array") {
                    _.options.responsive = [value[item]]
                } else {
                    l = _.options.responsive.length - 1;
                    while (l >= 0) {
                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {
                            _.options.responsive.splice(l, 1)
                        }
                        l--
                    }
                    _.options.responsive.push(value[item])
                }
            }
        }
        if (refresh) {
            _.unload();
            _.reinit()
        }
    }
    ;
    Slick.prototype.setPosition = function() {
        var _ = this;
        _.setDimensions();
        _.setHeight();
        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide))
        } else {
            _.setFade()
        }
        _.$slider.trigger("setPosition", [_])
    }
    ;
    Slick.prototype.setProps = function() {
        var _ = this
          , bodyStyle = document.body.style;
        _.positionProp = _.options.vertical === true ? "top" : "left";
        if (_.positionProp === "top") {
            _.$slider.addClass("slick-vertical")
        } else {
            _.$slider.removeClass("slick-vertical")
        }
        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true
            }
        }
        if (_.options.fade) {
            if (typeof _.options.zIndex === "number") {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3
                }
            } else {
                _.options.zIndex = _.defaults.zIndex
            }
        }
        if (bodyStyle.OTransform !== undefined) {
            _.animType = "OTransform";
            _.transformType = "-o-transform";
            _.transitionType = "OTransition";
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined)
                _.animType = false
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = "MozTransform";
            _.transformType = "-moz-transform";
            _.transitionType = "MozTransition";
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined)
                _.animType = false
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = "webkitTransform";
            _.transformType = "-webkit-transform";
            _.transitionType = "webkitTransition";
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined)
                _.animType = false
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = "msTransform";
            _.transformType = "-ms-transform";
            _.transitionType = "msTransition";
            if (bodyStyle.msTransform === undefined)
                _.animType = false
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = "transform";
            _.transformType = "transform";
            _.transitionType = "transition"
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false)
    }
    ;
    Slick.prototype.setSlideClasses = function(index) {
        var _ = this, centerOffset, allSlides, indexOffset, remainder;
        allSlides = _.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true");
        _.$slides.eq(index).addClass("slick-current");
        if (_.options.centerMode === true) {
            centerOffset = Math.floor(_.options.slidesToShow / 2);
            if (_.options.infinite === true) {
                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
                    _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass("slick-active").attr("aria-hidden", "false")
                } else {
                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass("slick-active").attr("aria-hidden", "false")
                }
                if (index === 0) {
                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass("slick-center")
                } else if (index === _.slideCount - 1) {
                    allSlides.eq(_.options.slidesToShow).addClass("slick-center")
                }
            }
            _.$slides.eq(index).addClass("slick-center")
        } else {
            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {
                _.$slides.slice(index, index + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")
            } else if (allSlides.length <= _.options.slidesToShow) {
                allSlides.addClass("slick-active").attr("aria-hidden", "false")
            } else {
                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {
                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass("slick-active").attr("aria-hidden", "false")
                } else {
                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")
                }
            }
        }
        if (_.options.lazyLoad === "ondemand") {
            _.lazyLoad()
        }
    }
    ;
    Slick.prototype.setupInfinite = function() {
        var _ = this, i, slideIndex, infiniteCount;
        if (_.options.fade === true) {
            _.options.centerMode = false
        }
        if (_.options.infinite === true && _.options.fade === false) {
            slideIndex = null;
            if (_.slideCount > _.options.slidesToShow) {
                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1
                } else {
                    infiniteCount = _.options.slidesToShow
                }
                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass("slick-cloned")
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr("id", "").attr("data-slick-index", slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass("slick-cloned")
                }
                _.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                    $(this).attr("id", "")
                })
            }
        }
    }
    ;
    Slick.prototype.interrupt = function(toggle) {
        var _ = this;
        if (!toggle) {
            _.autoPlay()
        }
        _.interrupted = toggle
    }
    ;
    Slick.prototype.selectHandler = function(event) {
        var _ = this;
        var targetElement = $(event.target).is(".slick-slide") ? $(event.target) : $(event.target).parents(".slick-slide");
        var index = parseInt(targetElement.attr("data-slick-index"));
        if (!index)
            index = 0;
        if (_.slideCount <= _.options.slidesToShow) {
            _.setSlideClasses(index);
            _.asNavFor(index);
            return
        }
        _.slideHandler(index)
    }
    ;
    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null, _ = this, navTarget;
        sync = sync || false;
        if (_.animating === true && _.options.waitForAnimate === true) {
            return
        }
        if (_.options.fade === true && _.currentSlide === index) {
            return
        }
        if (_.slideCount <= _.options.slidesToShow) {
            return
        }
        if (sync === false) {
            _.asNavFor(index)
        }
        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);
        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide)
                    })
                } else {
                    _.postSlide(targetSlide)
                }
            }
            return
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide)
                    })
                } else {
                    _.postSlide(targetSlide)
                }
            }
            return
        }
        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer)
        }
        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll
            } else {
                animSlide = _.slideCount + targetSlide
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0
            } else {
                animSlide = targetSlide - _.slideCount
            }
        } else {
            animSlide = targetSlide
        }
        _.animating = true;
        _.$slider.trigger("beforeChange", [_, _.currentSlide, animSlide]);
        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;
        _.setSlideClasses(_.currentSlide);
        if (_.options.asNavFor) {
            navTarget = _.getNavTarget();
            navTarget = navTarget.slick("getSlick");
            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide)
            }
        }
        _.updateDots();
        _.updateArrows();
        if (_.options.fade === true) {
            if (dontAnimate !== true) {
                _.fadeSlideOut(oldSlide);
                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide)
                })
            } else {
                _.postSlide(animSlide)
            }
            _.animateHeight();
            return
        }
        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide)
            })
        } else {
            _.postSlide(animSlide)
        }
    }
    ;
    Slick.prototype.startLoad = function() {
        var _ = this;
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.hide();
            _.$nextArrow.hide()
        }
        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            _.$dots.hide()
        }
        _.$slider.addClass("slick-loading")
    }
    ;
    Slick.prototype.swipeDirection = function() {
        var xDist, yDist, r, swipeAngle, _ = this;
        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);
        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle)
        }
        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? "left" : "right"
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? "left" : "right"
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? "right" : "left"
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return "down"
            } else {
                return "up"
            }
        }
        return "vertical"
    }
    ;
    Slick.prototype.swipeEnd = function(event) {
        var _ = this, slideCount, direction;
        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;
        if (_.touchObject.curX === undefined) {
            return false
        }
        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger("edge", [_, _.swipeDirection()])
        }
        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {
            direction = _.swipeDirection();
            switch (direction) {
            case "left":
            case "down":
                slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();
                _.currentDirection = 0;
                break;
            case "right":
            case "up":
                slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();
                _.currentDirection = 1;
                break;
            default:
            }
            if (direction != "vertical") {
                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger("swipe", [_, direction])
            }
        } else {
            if (_.touchObject.startX !== _.touchObject.curX) {
                _.slideHandler(_.currentSlide);
                _.touchObject = {}
            }
        }
    }
    ;
    Slick.prototype.swipeHandler = function(event) {
        var _ = this;
        if (_.options.swipe === false || "ontouchend"in document && _.options.swipe === false) {
            return
        } else if (_.options.draggable === false && event.type.indexOf("mouse") !== -1) {
            return
        }
        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;
        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;
        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold
        }
        switch (event.data.action) {
        case "start":
            _.swipeStart(event);
            break;
        case "move":
            _.swipeMove(event);
            break;
        case "end":
            _.swipeEnd(event);
            break
        }
    }
    ;
    Slick.prototype.swipeMove = function(event) {
        var _ = this, edgeWasHit = false, curLeft, swipeDirection, swipeLength, positionOffset, touches;
        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
        if (!_.dragging || touches && touches.length !== 1) {
            return false
        }
        curLeft = _.getLeft(_.currentSlide);
        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)))
        }
        swipeDirection = _.swipeDirection();
        if (swipeDirection === "vertical") {
            return
        }
        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault()
        }
        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1
        }
        swipeLength = _.touchObject.swipeLength;
        _.touchObject.edgeHit = false;
        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === "right" || _.currentSlide >= _.getDotCount() && swipeDirection === "left") {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true
            }
        }
        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset
        }
        if (_.options.fade === true || _.options.touchMove === false) {
            return false
        }
        if (_.animating === true) {
            _.swipeLeft = null;
            return false
        }
        _.setCSS(_.swipeLeft)
    }
    ;
    Slick.prototype.swipeStart = function(event) {
        var _ = this, touches;
        _.interrupted = true;
        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false
        }
        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0]
        }
        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
        _.dragging = true
    }
    ;
    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
        var _ = this;
        if (_.$slidesCache !== null) {
            _.unload();
            _.$slideTrack.children(this.options.slide).detach();
            _.$slidesCache.appendTo(_.$slideTrack);
            _.reinit()
        }
    }
    ;
    Slick.prototype.unload = function() {
        var _ = this;
        $(".slick-cloned", _.$slider).remove();
        if (_.$dots) {
            _.$dots.remove()
        }
        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove()
        }
        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove()
        }
        _.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "")
    }
    ;
    Slick.prototype.unslick = function(fromBreakpoint) {
        var _ = this;
        _.$slider.trigger("unslick", [_, fromBreakpoint]);
        _.destroy()
    }
    ;
    Slick.prototype.updateArrows = function() {
        var _ = this, centerOffset;
        centerOffset = Math.floor(_.options.slidesToShow / 2);
        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {
            _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            if (_.currentSlide === 0) {
                _.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                _.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
                _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
                _.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                _.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")
            }
        }
    }
    ;
    Slick.prototype.updateDots = function() {
        var _ = this;
        if (_.$dots !== null) {
            _.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true");
            _.$dots.find("li").eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false")
        }
    }
    ;
    Slick.prototype.visibility = function() {
        var _ = this;
        if (_.options.autoplay) {
            if (document[_.hidden]) {
                _.interrupted = true
            } else {
                _.interrupted = false
            }
        }
    }
    ;
    $.fn.slick = function() {
        var _ = this, opt = arguments[0], args = Array.prototype.slice.call(arguments, 1), l = _.length, i, ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == "object" || typeof opt == "undefined")
                _[i].slick = new Slick(_[i],opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != "undefined")
                return ret
        }
        return _
    }
});
(function(window) {
    if (window.jQuery) {
        return
    }
    var $ = function(selector, context) {
        return new $.fn.init(selector,context)
    };
    $.isWindow = function(obj) {
        return obj != null && obj == obj.window
    }
    ;
    $.type = function(obj) {
        if (obj == null) {
            return obj + ""
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj
    }
    ;
    $.isArray = Array.isArray || function(obj) {
        return $.type(obj) === "array"
    }
    ;
    function isArraylike(obj) {
        var length = obj.length
          , type = $.type(obj);
        if (type === "function" || $.isWindow(obj)) {
            return false
        }
        if (obj.nodeType === 1 && length) {
            return true
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj
    }
    $.isPlainObject = function(obj) {
        var key;
        if (!obj || $.type(obj) !== "object" || obj.nodeType || $.isWindow(obj)) {
            return false
        }
        try {
            if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false
            }
        } catch (e) {
            return false
        }
        for (key in obj) {}
        return key === undefined || hasOwn.call(obj, key)
    }
    ;
    $.each = function(obj, callback, args) {
        var value, i = 0, length = obj.length, isArray = isArraylike(obj);
        if (args) {
            if (isArray) {
                for (; i < length; i++) {
                    value = callback.apply(obj[i], args);
                    if (value === false) {
                        break
                    }
                }
            } else {
                for (i in obj) {
                    value = callback.apply(obj[i], args);
                    if (value === false) {
                        break
                    }
                }
            }
        } else {
            if (isArray) {
                for (; i < length; i++) {
                    value = callback.call(obj[i], i, obj[i]);
                    if (value === false) {
                        break
                    }
                }
            } else {
                for (i in obj) {
                    value = callback.call(obj[i], i, obj[i]);
                    if (value === false) {
                        break
                    }
                }
            }
        }
        return obj
    }
    ;
    $.data = function(node, key, value) {
        if (value === undefined) {
            var id = node[$.expando]
              , store = id && cache[id];
            if (key === undefined) {
                return store
            } else if (store) {
                if (key in store) {
                    return store[key]
                }
            }
        } else if (key !== undefined) {
            var id = node[$.expando] || (node[$.expando] = ++$.uuid);
            cache[id] = cache[id] || {};
            cache[id][key] = value;
            return value
        }
    }
    ;
    $.removeData = function(node, keys) {
        var id = node[$.expando]
          , store = id && cache[id];
        if (store) {
            $.each(keys, function(_, key) {
                delete store[key]
            })
        }
    }
    ;
    $.extend = function() {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[i] || {};
            i++
        }
        if (typeof target !== "object" && $.type(target) !== "function") {
            target = {}
        }
        if (i === length) {
            target = this;
            i--
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue
                    }
                    if (deep && copy && ($.isPlainObject(copy) || (copyIsArray = $.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && $.isArray(src) ? src : []
                        } else {
                            clone = src && $.isPlainObject(src) ? src : {}
                        }
                        target[name] = $.extend(deep, clone, copy)
                    } else if (copy !== undefined) {
                        target[name] = copy
                    }
                }
            }
        }
        return target
    }
    ;
    $.queue = function(elem, type, data) {
        function $makeArray(arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    (function(first, second) {
                        var len = +second.length
                          , j = 0
                          , i = first.length;
                        while (j < len) {
                            first[i++] = second[j++]
                        }
                        if (len !== len) {
                            while (second[j] !== undefined) {
                                first[i++] = second[j++]
                            }
                        }
                        first.length = i;
                        return first
                    }
                    )(ret, typeof arr === "string" ? [arr] : arr)
                } else {
                    [].push.call(ret, arr)
                }
            }
            return ret
        }
        if (!elem) {
            return
        }
        type = (type || "fx") + "queue";
        var q = $.data(elem, type);
        if (!data) {
            return q || []
        }
        if (!q || $.isArray(data)) {
            q = $.data(elem, type, $makeArray(data))
        } else {
            q.push(data)
        }
        return q
    }
    ;
    $.dequeue = function(elems, type) {
        $.each(elems.nodeType ? [elems] : elems, function(i, elem) {
            type = type || "fx";
            var queue = $.queue(elem, type)
              , fn = queue.shift();
            if (fn === "inprogress") {
                fn = queue.shift()
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress")
                }
                fn.call(elem, function() {
                    $.dequeue(elem, type)
                })
            }
        })
    }
    ;
    $.fn = $.prototype = {
        init: function(selector) {
            if (selector.nodeType) {
                this[0] = selector;
                return this
            } else {
                throw new Error("Not a DOM node.")
            }
        },
        offset: function() {
            var box = this[0].getBoundingClientRect ? this[0].getBoundingClientRect() : {
                top: 0,
                left: 0
            };
            return {
                top: box.top + (window.pageYOffset || document.scrollTop || 0) - (document.clientTop || 0),
                left: box.left + (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || 0)
            }
        },
        position: function() {
            function offsetParent() {
                var offsetParent = this.offsetParent || document;
                while (offsetParent && (!offsetParent.nodeType.toLowerCase === "html" && offsetParent.style.position === "static")) {
                    offsetParent = offsetParent.offsetParent
                }
                return offsetParent || document
            }
            var elem = this[0]
              , offsetParent = offsetParent.apply(elem)
              , offset = this.offset()
              , parentOffset = /^(?:body|html)$/i.test(offsetParent.nodeName) ? {
                top: 0,
                left: 0
            } : $(offsetParent).offset();
            offset.top -= parseFloat(elem.style.marginTop) || 0;
            offset.left -= parseFloat(elem.style.marginLeft) || 0;
            if (offsetParent.style) {
                parentOffset.top += parseFloat(offsetParent.style.borderTopWidth) || 0;
                parentOffset.left += parseFloat(offsetParent.style.borderLeftWidth) || 0
            }
            return {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            }
        }
    };
    var cache = {};
    $.expando = "velocity" + (new Date).getTime();
    $.uuid = 0;
    var class2type = {}
      , hasOwn = class2type.hasOwnProperty
      , toString = class2type.toString;
    var types = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
    for (var i = 0; i < types.length; i++) {
        class2type["[object " + types[i] + "]"] = types[i].toLowerCase()
    }
    $.fn.init.prototype = $.fn;
    window.Velocity = {
        Utilities: $
    }
}
)(window);
(function(factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = factory()
    } else if (typeof define === "function" && define.amd) {
        define(factory)
    } else {
        factory()
    }
}
)(function() {
    return function(global, window, document, undefined) {
        var IE = function() {
            if (document.documentMode) {
                return document.documentMode
            } else {
                for (var i = 7; i > 4; i--) {
                    var div = document.createElement("div");
                    div.innerHTML = "\x3c!--[if IE " + i + "]><span></span><![endif]--\x3e";
                    if (div.getElementsByTagName("span").length) {
                        div = null;
                        return i
                    }
                }
            }
            return undefined
        }();
        var rAFShim = function() {
            var timeLast = 0;
            return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {
                var timeCurrent = (new Date).getTime(), timeDelta;
                timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
                timeLast = timeCurrent + timeDelta;
                return setTimeout(function() {
                    callback(timeCurrent + timeDelta)
                }, timeDelta)
            }
        }();
        function compactSparseArray(array) {
            var index = -1
              , length = array ? array.length : 0
              , result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result.push(value)
                }
            }
            return result
        }
        function sanitizeElements(elements) {
            if (Type.isWrapped(elements)) {
                elements = [].slice.call(elements)
            } else if (Type.isNode(elements)) {
                elements = [elements]
            }
            return elements
        }
        var Type = {
            isString: function(variable) {
                return typeof variable === "string"
            },
            isArray: Array.isArray || function(variable) {
                return Object.prototype.toString.call(variable) === "[object Array]"
            }
            ,
            isFunction: function(variable) {
                return Object.prototype.toString.call(variable) === "[object Function]"
            },
            isNode: function(variable) {
                return variable && variable.nodeType
            },
            isNodeList: function(variable) {
                return typeof variable === "object" && /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(variable)) && variable.length !== undefined && (variable.length === 0 || typeof variable[0] === "object" && variable[0].nodeType > 0)
            },
            isWrapped: function(variable) {
                return variable && (variable.jquery || window.Zepto && window.Zepto.zepto.isZ(variable))
            },
            isSVG: function(variable) {
                return window.SVGElement && variable instanceof window.SVGElement
            },
            isEmptyObject: function(variable) {
                for (var name in variable) {
                    return false
                }
                return true
            }
        };
        var $, isJQuery = false;
        if (global.fn && global.fn.jquery) {
            $ = global;
            isJQuery = true
        } else {
            $ = window.Velocity.Utilities
        }
        if (IE <= 8 && !isJQuery) {
            throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.")
        } else if (IE <= 7) {
            jQuery.fn.velocity = jQuery.fn.animate;
            return
        }
        var DURATION_DEFAULT = 400
          , EASING_DEFAULT = "swing";
        var Velocity = {
            State: {
                isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
                isAndroid: /Android/i.test(navigator.userAgent),
                isGingerbread: /Android 2\.3\.[3-7]/i.test(navigator.userAgent),
                isChrome: window.chrome,
                isFirefox: /Firefox/i.test(navigator.userAgent),
                prefixElement: document.createElement("div"),
                prefixMatches: {},
                scrollAnchor: null,
                scrollPropertyLeft: null,
                scrollPropertyTop: null,
                isTicking: false,
                calls: []
            },
            CSS: {},
            Utilities: $,
            Redirects: {},
            Easings: {},
            Promise: window.Promise,
            defaults: {
                queue: "",
                duration: DURATION_DEFAULT,
                easing: EASING_DEFAULT,
                begin: undefined,
                complete: undefined,
                progress: undefined,
                display: undefined,
                visibility: undefined,
                loop: false,
                delay: false,
                mobileHA: true,
                _cacheValues: true
            },
            init: function(element) {
                $.data(element, "velocity", {
                    isSVG: Type.isSVG(element),
                    isAnimating: false,
                    computedStyle: null,
                    tweensContainer: null,
                    rootPropertyValueCache: {},
                    transformCache: {}
                })
            },
            hook: null,
            mock: false,
            version: {
                major: 1,
                minor: 2,
                patch: 2
            },
            debug: false
        };
        if (window.pageYOffset !== undefined) {
            Velocity.State.scrollAnchor = window;
            Velocity.State.scrollPropertyLeft = "pageXOffset";
            Velocity.State.scrollPropertyTop = "pageYOffset"
        } else {
            Velocity.State.scrollAnchor = document.documentElement || document.body.parentNode || document.body;
            Velocity.State.scrollPropertyLeft = "scrollLeft";
            Velocity.State.scrollPropertyTop = "scrollTop"
        }
        function Data(element) {
            var response = $.data(element, "velocity");
            return response === null ? undefined : response
        }
        function generateStep(steps) {
            return function(p) {
                return Math.round(p * steps) * (1 / steps)
            }
        }
        function generateBezier(mX1, mY1, mX2, mY2) {
            var NEWTON_ITERATIONS = 4
              , NEWTON_MIN_SLOPE = .001
              , SUBDIVISION_PRECISION = 1e-7
              , SUBDIVISION_MAX_ITERATIONS = 10
              , kSplineTableSize = 11
              , kSampleStepSize = 1 / (kSplineTableSize - 1)
              , float32ArraySupported = "Float32Array"in window;
            if (arguments.length !== 4) {
                return false
            }
            for (var i = 0; i < 4; ++i) {
                if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
                    return false
                }
            }
            mX1 = Math.min(mX1, 1);
            mX2 = Math.min(mX2, 1);
            mX1 = Math.max(mX1, 0);
            mX2 = Math.max(mX2, 0);
            var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
            function A(aA1, aA2) {
                return 1 - 3 * aA2 + 3 * aA1
            }
            function B(aA1, aA2) {
                return 3 * aA2 - 6 * aA1
            }
            function C(aA1) {
                return 3 * aA1
            }
            function calcBezier(aT, aA1, aA2) {
                return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT
            }
            function getSlope(aT, aA1, aA2) {
                return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1)
            }
            function newtonRaphsonIterate(aX, aGuessT) {
                for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
                    var currentSlope = getSlope(aGuessT, mX1, mX2);
                    if (currentSlope === 0)
                        return aGuessT;
                    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
                    aGuessT -= currentX / currentSlope
                }
                return aGuessT
            }
            function calcSampleValues() {
                for (var i = 0; i < kSplineTableSize; ++i) {
                    mSampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2)
                }
            }
            function binarySubdivide(aX, aA, aB) {
                var currentX, currentT, i = 0;
                do {
                    currentT = aA + (aB - aA) / 2;
                    currentX = calcBezier(currentT, mX1, mX2) - aX;
                    if (currentX > 0) {
                        aB = currentT
                    } else {
                        aA = currentT
                    }
                } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
                return currentT
            }
            function getTForX(aX) {
                var intervalStart = 0
                  , currentSample = 1
                  , lastSample = kSplineTableSize - 1;
                for (; currentSample != lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                    intervalStart += kSampleStepSize
                }
                --currentSample;
                var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample])
                  , guessForT = intervalStart + dist * kSampleStepSize
                  , initialSlope = getSlope(guessForT, mX1, mX2);
                if (initialSlope >= NEWTON_MIN_SLOPE) {
                    return newtonRaphsonIterate(aX, guessForT)
                } else if (initialSlope == 0) {
                    return guessForT
                } else {
                    return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize)
                }
            }
            var _precomputed = false;
            function precompute() {
                _precomputed = true;
                if (mX1 != mY1 || mX2 != mY2)
                    calcSampleValues()
            }
            var f = function(aX) {
                if (!_precomputed)
                    precompute();
                if (mX1 === mY1 && mX2 === mY2)
                    return aX;
                if (aX === 0)
                    return 0;
                if (aX === 1)
                    return 1;
                return calcBezier(getTForX(aX), mY1, mY2)
            };
            f.getControlPoints = function() {
                return [{
                    x: mX1,
                    y: mY1
                }, {
                    x: mX2,
                    y: mY2
                }]
            }
            ;
            var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
            f.toString = function() {
                return str
            }
            ;
            return f
        }
        var generateSpringRK4 = function() {
            function springAccelerationForState(state) {
                return -state.tension * state.x - state.friction * state.v
            }
            function springEvaluateStateWithDerivative(initialState, dt, derivative) {
                var state = {
                    x: initialState.x + derivative.dx * dt,
                    v: initialState.v + derivative.dv * dt,
                    tension: initialState.tension,
                    friction: initialState.friction
                };
                return {
                    dx: state.v,
                    dv: springAccelerationForState(state)
                }
            }
            function springIntegrateState(state, dt) {
                var a = {
                    dx: state.v,
                    dv: springAccelerationForState(state)
                }
                  , b = springEvaluateStateWithDerivative(state, dt * .5, a)
                  , c = springEvaluateStateWithDerivative(state, dt * .5, b)
                  , d = springEvaluateStateWithDerivative(state, dt, c)
                  , dxdt = 1 / 6 * (a.dx + 2 * (b.dx + c.dx) + d.dx)
                  , dvdt = 1 / 6 * (a.dv + 2 * (b.dv + c.dv) + d.dv);
                state.x = state.x + dxdt * dt;
                state.v = state.v + dvdt * dt;
                return state
            }
            return function springRK4Factory(tension, friction, duration) {
                var initState = {
                    x: -1,
                    v: 0,
                    tension: null,
                    friction: null
                }, path = [0], time_lapsed = 0, tolerance = 1 / 1e4, DT = 16 / 1e3, have_duration, dt, last_state;
                tension = parseFloat(tension) || 500;
                friction = parseFloat(friction) || 20;
                duration = duration || null;
                initState.tension = tension;
                initState.friction = friction;
                have_duration = duration !== null;
                if (have_duration) {
                    time_lapsed = springRK4Factory(tension, friction);
                    dt = time_lapsed / duration * DT
                } else {
                    dt = DT
                }
                while (true) {
                    last_state = springIntegrateState(last_state || initState, dt);
                    path.push(1 + last_state.x);
                    time_lapsed += 16;
                    if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
                        break
                    }
                }
                return !have_duration ? time_lapsed : function(percentComplete) {
                    return path[percentComplete * (path.length - 1) | 0]
                }
            }
        }();
        Velocity.Easings = {
            linear: function(p) {
                return p
            },
            swing: function(p) {
                return .5 - Math.cos(p * Math.PI) / 2
            },
            spring: function(p) {
                return 1 - Math.cos(p * 4.5 * Math.PI) * Math.exp(-p * 6)
            }
        };
        $.each([["ease", [.25, .1, .25, 1]], ["ease-in", [.42, 0, 1, 1]], ["ease-out", [0, 0, .58, 1]], ["ease-in-out", [.42, 0, .58, 1]], ["easeInSine", [.47, 0, .745, .715]], ["easeOutSine", [.39, .575, .565, 1]], ["easeInOutSine", [.445, .05, .55, .95]], ["easeInQuad", [.55, .085, .68, .53]], ["easeOutQuad", [.25, .46, .45, .94]], ["easeInOutQuad", [.455, .03, .515, .955]], ["easeInCubic", [.55, .055, .675, .19]], ["easeOutCubic", [.215, .61, .355, 1]], ["easeInOutCubic", [.645, .045, .355, 1]], ["easeInQuart", [.895, .03, .685, .22]], ["easeOutQuart", [.165, .84, .44, 1]], ["easeInOutQuart", [.77, 0, .175, 1]], ["easeInQuint", [.755, .05, .855, .06]], ["easeOutQuint", [.23, 1, .32, 1]], ["easeInOutQuint", [.86, 0, .07, 1]], ["easeInExpo", [.95, .05, .795, .035]], ["easeOutExpo", [.19, 1, .22, 1]], ["easeInOutExpo", [1, 0, 0, 1]], ["easeInCirc", [.6, .04, .98, .335]], ["easeOutCirc", [.075, .82, .165, 1]], ["easeInOutCirc", [.785, .135, .15, .86]]], function(i, easingArray) {
            Velocity.Easings[easingArray[0]] = generateBezier.apply(null, easingArray[1])
        });
        function getEasing(value, duration) {
            var easing = value;
            if (Type.isString(value)) {
                if (!Velocity.Easings[value]) {
                    easing = false
                }
            } else if (Type.isArray(value) && value.length === 1) {
                easing = generateStep.apply(null, value)
            } else if (Type.isArray(value) && value.length === 2) {
                easing = generateSpringRK4.apply(null, value.concat([duration]))
            } else if (Type.isArray(value) && value.length === 4) {
                easing = generateBezier.apply(null, value)
            } else {
                easing = false
            }
            if (easing === false) {
                if (Velocity.Easings[Velocity.defaults.easing]) {
                    easing = Velocity.defaults.easing
                } else {
                    easing = EASING_DEFAULT
                }
            }
            return easing
        }
        var CSS = Velocity.CSS = {
            RegEx: {
                isHex: /^#([A-f\d]{3}){1,2}$/i,
                valueUnwrap: /^[A-z]+\((.*)\)$/i,
                wrappedValueAlreadyExtracted: /[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,
                valueSplit: /([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi
            },
            Lists: {
                colors: ["fill", "stroke", "stopColor", "color", "backgroundColor", "borderColor", "borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor", "outlineColor"],
                transformsBase: ["translateX", "translateY", "scale", "scaleX", "scaleY", "skewX", "skewY", "rotateZ"],
                transforms3D: ["transformPerspective", "translateZ", "scaleZ", "rotateX", "rotateY"]
            },
            Hooks: {
                templates: {
                    textShadow: ["Color X Y Blur", "black 0px 0px 0px"],
                    boxShadow: ["Color X Y Blur Spread", "black 0px 0px 0px 0px"],
                    clip: ["Top Right Bottom Left", "0px 0px 0px 0px"],
                    backgroundPosition: ["X Y", "0% 0%"],
                    transformOrigin: ["X Y Z", "50% 50% 0px"],
                    perspectiveOrigin: ["X Y", "50% 50%"]
                },
                registered: {},
                register: function() {
                    for (var i = 0; i < CSS.Lists.colors.length; i++) {
                        var rgbComponents = CSS.Lists.colors[i] === "color" ? "0 0 0 1" : "255 255 255 1";
                        CSS.Hooks.templates[CSS.Lists.colors[i]] = ["Red Green Blue Alpha", rgbComponents]
                    }
                    var rootProperty, hookTemplate, hookNames;
                    if (IE) {
                        for (rootProperty in CSS.Hooks.templates) {
                            hookTemplate = CSS.Hooks.templates[rootProperty];
                            hookNames = hookTemplate[0].split(" ");
                            var defaultValues = hookTemplate[1].match(CSS.RegEx.valueSplit);
                            if (hookNames[0] === "Color") {
                                hookNames.push(hookNames.shift());
                                defaultValues.push(defaultValues.shift());
                                CSS.Hooks.templates[rootProperty] = [hookNames.join(" "), defaultValues.join(" ")]
                            }
                        }
                    }
                    for (rootProperty in CSS.Hooks.templates) {
                        hookTemplate = CSS.Hooks.templates[rootProperty];
                        hookNames = hookTemplate[0].split(" ");
                        for (var i in hookNames) {
                            var fullHookName = rootProperty + hookNames[i]
                              , hookPosition = i;
                            CSS.Hooks.registered[fullHookName] = [rootProperty, hookPosition]
                        }
                    }
                },
                getRoot: function(property) {
                    var hookData = CSS.Hooks.registered[property];
                    if (hookData) {
                        return hookData[0]
                    } else {
                        return property
                    }
                },
                cleanRootPropertyValue: function(rootProperty, rootPropertyValue) {
                    if (CSS.RegEx.valueUnwrap.test(rootPropertyValue)) {
                        rootPropertyValue = rootPropertyValue.match(CSS.RegEx.valueUnwrap)[1]
                    }
                    if (CSS.Values.isCSSNullValue(rootPropertyValue)) {
                        rootPropertyValue = CSS.Hooks.templates[rootProperty][1]
                    }
                    return rootPropertyValue
                },
                extractValue: function(fullHookName, rootPropertyValue) {
                    var hookData = CSS.Hooks.registered[fullHookName];
                    if (hookData) {
                        var hookRoot = hookData[0]
                          , hookPosition = hookData[1];
                        rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);
                        return rootPropertyValue.toString().match(CSS.RegEx.valueSplit)[hookPosition]
                    } else {
                        return rootPropertyValue
                    }
                },
                injectValue: function(fullHookName, hookValue, rootPropertyValue) {
                    var hookData = CSS.Hooks.registered[fullHookName];
                    if (hookData) {
                        var hookRoot = hookData[0], hookPosition = hookData[1], rootPropertyValueParts, rootPropertyValueUpdated;
                        rootPropertyValue = CSS.Hooks.cleanRootPropertyValue(hookRoot, rootPropertyValue);
                        rootPropertyValueParts = rootPropertyValue.toString().match(CSS.RegEx.valueSplit);
                        rootPropertyValueParts[hookPosition] = hookValue;
                        rootPropertyValueUpdated = rootPropertyValueParts.join(" ");
                        return rootPropertyValueUpdated
                    } else {
                        return rootPropertyValue
                    }
                }
            },
            Normalizations: {
                registered: {
                    clip: function(type, element, propertyValue) {
                        switch (type) {
                        case "name":
                            return "clip";
                        case "extract":
                            var extracted;
                            if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                                extracted = propertyValue
                            } else {
                                extracted = propertyValue.toString().match(CSS.RegEx.valueUnwrap);
                                extracted = extracted ? extracted[1].replace(/,(\s+)?/g, " ") : propertyValue
                            }
                            return extracted;
                        case "inject":
                            return "rect(" + propertyValue + ")"
                        }
                    },
                    blur: function(type, element, propertyValue) {
                        switch (type) {
                        case "name":
                            return Velocity.State.isFirefox ? "filter" : "-webkit-filter";
                        case "extract":
                            var extracted = parseFloat(propertyValue);
                            if (!(extracted || extracted === 0)) {
                                var blurComponent = propertyValue.toString().match(/blur\(([0-9]+[A-z]+)\)/i);
                                if (blurComponent) {
                                    extracted = blurComponent[1]
                                } else {
                                    extracted = 0
                                }
                            }
                            return extracted;
                        case "inject":
                            if (!parseFloat(propertyValue)) {
                                return "none"
                            } else {
                                return "blur(" + propertyValue + ")"
                            }
                        }
                    },
                    opacity: function(type, element, propertyValue) {
                        if (IE <= 8) {
                            switch (type) {
                            case "name":
                                return "filter";
                            case "extract":
                                var extracted = propertyValue.toString().match(/alpha\(opacity=(.*)\)/i);
                                if (extracted) {
                                    propertyValue = extracted[1] / 100
                                } else {
                                    propertyValue = 1
                                }
                                return propertyValue;
                            case "inject":
                                element.style.zoom = 1;
                                if (parseFloat(propertyValue) >= 1) {
                                    return ""
                                } else {
                                    return "alpha(opacity=" + parseInt(parseFloat(propertyValue) * 100, 10) + ")"
                                }
                            }
                        } else {
                            switch (type) {
                            case "name":
                                return "opacity";
                            case "extract":
                                return propertyValue;
                            case "inject":
                                return propertyValue
                            }
                        }
                    }
                },
                register: function() {
                    if (!(IE <= 9) && !Velocity.State.isGingerbread) {
                        CSS.Lists.transformsBase = CSS.Lists.transformsBase.concat(CSS.Lists.transforms3D)
                    }
                    for (var i = 0; i < CSS.Lists.transformsBase.length; i++) {
                        (function() {
                            var transformName = CSS.Lists.transformsBase[i];
                            CSS.Normalizations.registered[transformName] = function(type, element, propertyValue) {
                                switch (type) {
                                case "name":
                                    return "transform";
                                case "extract":
                                    if (Data(element) === undefined || Data(element).transformCache[transformName] === undefined) {
                                        return /^scale/i.test(transformName) ? 1 : 0
                                    } else {
                                        return Data(element).transformCache[transformName].replace(/[()]/g, "")
                                    }
                                case "inject":
                                    var invalid = false;
                                    switch (transformName.substr(0, transformName.length - 1)) {
                                    case "translate":
                                        invalid = !/(%|px|em|rem|vw|vh|\d)$/i.test(propertyValue);
                                        break;
                                    case "scal":
                                    case "scale":
                                        if (Velocity.State.isAndroid && Data(element).transformCache[transformName] === undefined && propertyValue < 1) {
                                            propertyValue = 1
                                        }
                                        invalid = !/(\d)$/i.test(propertyValue);
                                        break;
                                    case "skew":
                                        invalid = !/(deg|\d)$/i.test(propertyValue);
                                        break;
                                    case "rotate":
                                        invalid = !/(deg|\d)$/i.test(propertyValue);
                                        break
                                    }
                                    if (!invalid) {
                                        Data(element).transformCache[transformName] = "(" + propertyValue + ")"
                                    }
                                    return Data(element).transformCache[transformName]
                                }
                            }
                        }
                        )()
                    }
                    for (var i = 0; i < CSS.Lists.colors.length; i++) {
                        (function() {
                            var colorName = CSS.Lists.colors[i];
                            CSS.Normalizations.registered[colorName] = function(type, element, propertyValue) {
                                switch (type) {
                                case "name":
                                    return colorName;
                                case "extract":
                                    var extracted;
                                    if (CSS.RegEx.wrappedValueAlreadyExtracted.test(propertyValue)) {
                                        extracted = propertyValue
                                    } else {
                                        var converted, colorNames = {
                                            black: "rgb(0, 0, 0)",
                                            blue: "rgb(0, 0, 255)",
                                            gray: "rgb(128, 128, 128)",
                                            green: "rgb(0, 128, 0)",
                                            red: "rgb(255, 0, 0)",
                                            white: "rgb(255, 255, 255)"
                                        };
                                        if (/^[A-z]+$/i.test(propertyValue)) {
                                            if (colorNames[propertyValue] !== undefined) {
                                                converted = colorNames[propertyValue]
                                            } else {
                                                converted = colorNames.black
                                            }
                                        } else if (CSS.RegEx.isHex.test(propertyValue)) {
                                            converted = "rgb(" + CSS.Values.hexToRgb(propertyValue).join(" ") + ")"
                                        } else if (!/^rgba?\(/i.test(propertyValue)) {
                                            converted = colorNames.black
                                        }
                                        extracted = (converted || propertyValue).toString().match(CSS.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g, " ")
                                    }
                                    if (!(IE <= 8) && extracted.split(" ").length === 3) {
                                        extracted += " 1"
                                    }
                                    return extracted;
                                case "inject":
                                    if (IE <= 8) {
                                        if (propertyValue.split(" ").length === 4) {
                                            propertyValue = propertyValue.split(/\s+/).slice(0, 3).join(" ")
                                        }
                                    } else if (propertyValue.split(" ").length === 3) {
                                        propertyValue += " 1"
                                    }
                                    return (IE <= 8 ? "rgb" : "rgba") + "(" + propertyValue.replace(/\s+/g, ",").replace(/\.(\d)+(?=,)/g, "") + ")"
                                }
                            }
                        }
                        )()
                    }
                }
            },
            Names: {
                camelCase: function(property) {
                    return property.replace(/-(\w)/g, function(match, subMatch) {
                        return subMatch.toUpperCase()
                    })
                },
                SVGAttribute: function(property) {
                    var SVGAttributes = "width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";
                    if (IE || Velocity.State.isAndroid && !Velocity.State.isChrome) {
                        SVGAttributes += "|transform"
                    }
                    return new RegExp("^(" + SVGAttributes + ")$","i").test(property)
                },
                prefixCheck: function(property) {
                    if (Velocity.State.prefixMatches[property]) {
                        return [Velocity.State.prefixMatches[property], true]
                    } else {
                        var vendors = ["", "Webkit", "Moz", "ms", "O"];
                        for (var i = 0, vendorsLength = vendors.length; i < vendorsLength; i++) {
                            var propertyPrefixed;
                            if (i === 0) {
                                propertyPrefixed = property
                            } else {
                                propertyPrefixed = vendors[i] + property.replace(/^\w/, function(match) {
                                    return match.toUpperCase()
                                })
                            }
                            if (Type.isString(Velocity.State.prefixElement.style[propertyPrefixed])) {
                                Velocity.State.prefixMatches[property] = propertyPrefixed;
                                return [propertyPrefixed, true]
                            }
                        }
                        return [property, false]
                    }
                }
            },
            Values: {
                hexToRgb: function(hex) {
                    var shortformRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i, longformRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, rgbParts;
                    hex = hex.replace(shortformRegex, function(m, r, g, b) {
                        return r + r + g + g + b + b
                    });
                    rgbParts = longformRegex.exec(hex);
                    return rgbParts ? [parseInt(rgbParts[1], 16), parseInt(rgbParts[2], 16), parseInt(rgbParts[3], 16)] : [0, 0, 0]
                },
                isCSSNullValue: function(value) {
                    return value == 0 || /^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(value)
                },
                getUnitType: function(property) {
                    if (/^(rotate|skew)/i.test(property)) {
                        return "deg"
                    } else if (/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(property)) {
                        return ""
                    } else {
                        return "px"
                    }
                },
                getDisplayType: function(element) {
                    var tagName = element && element.tagName.toString().toLowerCase();
                    if (/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(tagName)) {
                        return "inline"
                    } else if (/^(li)$/i.test(tagName)) {
                        return "list-item"
                    } else if (/^(tr)$/i.test(tagName)) {
                        return "table-row"
                    } else if (/^(table)$/i.test(tagName)) {
                        return "table"
                    } else if (/^(tbody)$/i.test(tagName)) {
                        return "table-row-group"
                    } else {
                        return "block"
                    }
                },
                addClass: function(element, className) {
                    if (element.classList) {
                        element.classList.add(className)
                    } else {
                        element.className += (element.className.length ? " " : "") + className
                    }
                },
                removeClass: function(element, className) {
                    if (element.classList) {
                        element.classList.remove(className)
                    } else {
                        element.className = element.className.toString().replace(new RegExp("(^|\\s)" + className.split(" ").join("|") + "(\\s|$)","gi"), " ")
                    }
                }
            },
            getPropertyValue: function(element, property, rootPropertyValue, forceStyleLookup) {
                function computePropertyValue(element, property) {
                    var computedValue = 0;
                    if (IE <= 8) {
                        computedValue = $.css(element, property)
                    } else {
                        var toggleDisplay = false;
                        if (/^(width|height)$/.test(property) && CSS.getPropertyValue(element, "display") === 0) {
                            toggleDisplay = true;
                            CSS.setPropertyValue(element, "display", CSS.Values.getDisplayType(element))
                        }
                        function revertDisplay() {
                            if (toggleDisplay) {
                                CSS.setPropertyValue(element, "display", "none")
                            }
                        }
                        if (!forceStyleLookup) {
                            if (property === "height" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                                var contentBoxHeight = element.offsetHeight - (parseFloat(CSS.getPropertyValue(element, "borderTopWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderBottomWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingTop")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingBottom")) || 0);
                                revertDisplay();
                                return contentBoxHeight
                            } else if (property === "width" && CSS.getPropertyValue(element, "boxSizing").toString().toLowerCase() !== "border-box") {
                                var contentBoxWidth = element.offsetWidth - (parseFloat(CSS.getPropertyValue(element, "borderLeftWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "borderRightWidth")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingLeft")) || 0) - (parseFloat(CSS.getPropertyValue(element, "paddingRight")) || 0);
                                revertDisplay();
                                return contentBoxWidth
                            }
                        }
                        var computedStyle;
                        if (Data(element) === undefined) {
                            computedStyle = window.getComputedStyle(element, null)
                        } else if (!Data(element).computedStyle) {
                            computedStyle = Data(element).computedStyle = window.getComputedStyle(element, null)
                        } else {
                            computedStyle = Data(element).computedStyle
                        }
                        if (property === "borderColor") {
                            property = "borderTopColor"
                        }
                        if (IE === 9 && property === "filter") {
                            computedValue = computedStyle.getPropertyValue(property)
                        } else {
                            computedValue = computedStyle[property]
                        }
                        if (computedValue === "" || computedValue === null) {
                            computedValue = element.style[property]
                        }
                        revertDisplay()
                    }
                    if (computedValue === "auto" && /^(top|right|bottom|left)$/i.test(property)) {
                        var position = computePropertyValue(element, "position");
                        if (position === "fixed" || position === "absolute" && /top|left/i.test(property)) {
                            computedValue = $(element).position()[property] + "px"
                        }
                    }
                    return computedValue
                }
                var propertyValue;
                if (CSS.Hooks.registered[property]) {
                    var hook = property
                      , hookRoot = CSS.Hooks.getRoot(hook);
                    if (rootPropertyValue === undefined) {
                        rootPropertyValue = CSS.getPropertyValue(element, CSS.Names.prefixCheck(hookRoot)[0])
                    }
                    if (CSS.Normalizations.registered[hookRoot]) {
                        rootPropertyValue = CSS.Normalizations.registered[hookRoot]("extract", element, rootPropertyValue)
                    }
                    propertyValue = CSS.Hooks.extractValue(hook, rootPropertyValue)
                } else if (CSS.Normalizations.registered[property]) {
                    var normalizedPropertyName, normalizedPropertyValue;
                    normalizedPropertyName = CSS.Normalizations.registered[property]("name", element);
                    if (normalizedPropertyName !== "transform") {
                        normalizedPropertyValue = computePropertyValue(element, CSS.Names.prefixCheck(normalizedPropertyName)[0]);
                        if (CSS.Values.isCSSNullValue(normalizedPropertyValue) && CSS.Hooks.templates[property]) {
                            normalizedPropertyValue = CSS.Hooks.templates[property][1]
                        }
                    }
                    propertyValue = CSS.Normalizations.registered[property]("extract", element, normalizedPropertyValue)
                }
                if (!/^[\d-]/.test(propertyValue)) {
                    if (Data(element) && Data(element).isSVG && CSS.Names.SVGAttribute(property)) {
                        if (/^(height|width)$/i.test(property)) {
                            try {
                                propertyValue = element.getBBox()[property]
                            } catch (error) {
                                propertyValue = 0
                            }
                        } else {
                            propertyValue = element.getAttribute(property)
                        }
                    } else {
                        propertyValue = computePropertyValue(element, CSS.Names.prefixCheck(property)[0])
                    }
                }
                if (CSS.Values.isCSSNullValue(propertyValue)) {
                    propertyValue = 0
                }
                if (Velocity.debug >= 2)
                    console.log("Get " + property + ": " + propertyValue);
                return propertyValue
            },
            setPropertyValue: function(element, property, propertyValue, rootPropertyValue, scrollData) {
                var propertyName = property;
                if (property === "scroll") {
                    if (scrollData.container) {
                        scrollData.container["scroll" + scrollData.direction] = propertyValue
                    } else {
                        if (scrollData.direction === "Left") {
                            window.scrollTo(propertyValue, scrollData.alternateValue)
                        } else {
                            window.scrollTo(scrollData.alternateValue, propertyValue)
                        }
                    }
                } else {
                    if (CSS.Normalizations.registered[property] && CSS.Normalizations.registered[property]("name", element) === "transform") {
                        CSS.Normalizations.registered[property]("inject", element, propertyValue);
                        propertyName = "transform";
                        propertyValue = Data(element).transformCache[property]
                    } else {
                        if (CSS.Hooks.registered[property]) {
                            var hookName = property
                              , hookRoot = CSS.Hooks.getRoot(property);
                            rootPropertyValue = rootPropertyValue || CSS.getPropertyValue(element, hookRoot);
                            propertyValue = CSS.Hooks.injectValue(hookName, propertyValue, rootPropertyValue);
                            property = hookRoot
                        }
                        if (CSS.Normalizations.registered[property]) {
                            propertyValue = CSS.Normalizations.registered[property]("inject", element, propertyValue);
                            property = CSS.Normalizations.registered[property]("name", element)
                        }
                        propertyName = CSS.Names.prefixCheck(property)[0];
                        if (IE <= 8) {
                            try {
                                element.style[propertyName] = propertyValue
                            } catch (error) {
                                if (Velocity.debug)
                                    console.log("Browser does not support [" + propertyValue + "] for [" + propertyName + "]")
                            }
                        } else if (Data(element) && Data(element).isSVG && CSS.Names.SVGAttribute(property)) {
                            element.setAttribute(property, propertyValue)
                        } else {
                            element.style[propertyName] = propertyValue
                        }
                        if (Velocity.debug >= 2)
                            console.log("Set " + property + " (" + propertyName + "): " + propertyValue)
                    }
                }
                return [propertyName, propertyValue]
            },
            flushTransformCache: function(element) {
                var transformString = "";
                if ((IE || Velocity.State.isAndroid && !Velocity.State.isChrome) && Data(element).isSVG) {
                    function getTransformFloat(transformProperty) {
                        return parseFloat(CSS.getPropertyValue(element, transformProperty))
                    }
                    var SVGTransforms = {
                        translate: [getTransformFloat("translateX"), getTransformFloat("translateY")],
                        skewX: [getTransformFloat("skewX")],
                        skewY: [getTransformFloat("skewY")],
                        scale: getTransformFloat("scale") !== 1 ? [getTransformFloat("scale"), getTransformFloat("scale")] : [getTransformFloat("scaleX"), getTransformFloat("scaleY")],
                        rotate: [getTransformFloat("rotateZ"), 0, 0]
                    };
                    $.each(Data(element).transformCache, function(transformName) {
                        if (/^translate/i.test(transformName)) {
                            transformName = "translate"
                        } else if (/^scale/i.test(transformName)) {
                            transformName = "scale"
                        } else if (/^rotate/i.test(transformName)) {
                            transformName = "rotate"
                        }
                        if (SVGTransforms[transformName]) {
                            transformString += transformName + "(" + SVGTransforms[transformName].join(" ") + ")" + " ";
                            delete SVGTransforms[transformName]
                        }
                    })
                } else {
                    var transformValue, perspective;
                    $.each(Data(element).transformCache, function(transformName) {
                        transformValue = Data(element).transformCache[transformName];
                        if (transformName === "transformPerspective") {
                            perspective = transformValue;
                            return true
                        }
                        if (IE === 9 && transformName === "rotateZ") {
                            transformName = "rotate"
                        }
                        transformString += transformName + transformValue + " "
                    });
                    if (perspective) {
                        transformString = "perspective" + perspective + " " + transformString
                    }
                }
                CSS.setPropertyValue(element, "transform", transformString)
            }
        };
        CSS.Hooks.register();
        CSS.Normalizations.register();
        Velocity.hook = function(elements, arg2, arg3) {
            var value = undefined;
            elements = sanitizeElements(elements);
            $.each(elements, function(i, element) {
                if (Data(element) === undefined) {
                    Velocity.init(element)
                }
                if (arg3 === undefined) {
                    if (value === undefined) {
                        value = Velocity.CSS.getPropertyValue(element, arg2)
                    }
                } else {
                    var adjustedSet = Velocity.CSS.setPropertyValue(element, arg2, arg3);
                    if (adjustedSet[0] === "transform") {
                        Velocity.CSS.flushTransformCache(element)
                    }
                    value = adjustedSet
                }
            });
            return value
        }
        ;
        var animate = function() {
            function getChain() {
                if (isUtility) {
                    return promiseData.promise || null
                } else {
                    return elementsWrapped
                }
            }
            var syntacticSugar = arguments[0] && (arguments[0].p || ($.isPlainObject(arguments[0].properties) && !arguments[0].properties.names || Type.isString(arguments[0].properties))), isUtility, elementsWrapped, argumentIndex;
            var elements, propertiesMap, options;
            if (Type.isWrapped(this)) {
                isUtility = false;
                argumentIndex = 0;
                elements = this;
                elementsWrapped = this
            } else {
                isUtility = true;
                argumentIndex = 1;
                elements = syntacticSugar ? arguments[0].elements || arguments[0].e : arguments[0]
            }
            elements = sanitizeElements(elements);
            if (!elements) {
                return
            }
            if (syntacticSugar) {
                propertiesMap = arguments[0].properties || arguments[0].p;
                options = arguments[0].options || arguments[0].o
            } else {
                propertiesMap = arguments[argumentIndex];
                options = arguments[argumentIndex + 1]
            }
            var elementsLength = elements.length
              , elementsIndex = 0;
            if (!/^(stop|finish|finishAll)$/i.test(propertiesMap) && !$.isPlainObject(options)) {
                var startingArgumentPosition = argumentIndex + 1;
                options = {};
                for (var i = startingArgumentPosition; i < arguments.length; i++) {
                    if (!Type.isArray(arguments[i]) && (/^(fast|normal|slow)$/i.test(arguments[i]) || /^\d/.test(arguments[i]))) {
                        options.duration = arguments[i]
                    } else if (Type.isString(arguments[i]) || Type.isArray(arguments[i])) {
                        options.easing = arguments[i]
                    } else if (Type.isFunction(arguments[i])) {
                        options.complete = arguments[i]
                    }
                }
            }
            var promiseData = {
                promise: null,
                resolver: null,
                rejecter: null
            };
            if (isUtility && Velocity.Promise) {
                promiseData.promise = new Velocity.Promise(function(resolve, reject) {
                    promiseData.resolver = resolve;
                    promiseData.rejecter = reject
                }
                )
            }
            var action;
            switch (propertiesMap) {
            case "scroll":
                action = "scroll";
                break;
            case "reverse":
                action = "reverse";
                break;
            case "finish":
            case "finishAll":
            case "stop":
                $.each(elements, function(i, element) {
                    if (Data(element) && Data(element).delayTimer) {
                        clearTimeout(Data(element).delayTimer.setTimeout);
                        if (Data(element).delayTimer.next) {
                            Data(element).delayTimer.next()
                        }
                        delete Data(element).delayTimer
                    }
                    if (propertiesMap === "finishAll" && (options === true || Type.isString(options))) {
                        $.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
                            if (Type.isFunction(item)) {
                                item()
                            }
                        });
                        $.queue(element, Type.isString(options) ? options : "", [])
                    }
                });
                var callsToStop = [];
                $.each(Velocity.State.calls, function(i, activeCall) {
                    if (activeCall) {
                        $.each(activeCall[1], function(k, activeElement) {
                            var queueName = options === undefined ? "" : options;
                            if (queueName !== true && activeCall[2].queue !== queueName && !(options === undefined && activeCall[2].queue === false)) {
                                return true
                            }
                            $.each(elements, function(l, element) {
                                if (element === activeElement) {
                                    if (options === true || Type.isString(options)) {
                                        $.each($.queue(element, Type.isString(options) ? options : ""), function(_, item) {
                                            if (Type.isFunction(item)) {
                                                item(null, true)
                                            }
                                        });
                                        $.queue(element, Type.isString(options) ? options : "", [])
                                    }
                                    if (propertiesMap === "stop") {
                                        if (Data(element) && Data(element).tweensContainer && queueName !== false) {
                                            $.each(Data(element).tweensContainer, function(m, activeTween) {
                                                activeTween.endValue = activeTween.currentValue
                                            })
                                        }
                                        callsToStop.push(i)
                                    } else if (propertiesMap === "finish" || propertiesMap === "finishAll") {
                                        activeCall[2].duration = 1
                                    }
                                }
                            })
                        })
                    }
                });
                if (propertiesMap === "stop") {
                    $.each(callsToStop, function(i, j) {
                        completeCall(j, true)
                    });
                    if (promiseData.promise) {
                        promiseData.resolver(elements)
                    }
                }
                return getChain();
            default:
                if ($.isPlainObject(propertiesMap) && !Type.isEmptyObject(propertiesMap)) {
                    action = "start"
                } else if (Type.isString(propertiesMap) && Velocity.Redirects[propertiesMap]) {
                    var opts = $.extend({}, options)
                      , durationOriginal = opts.duration
                      , delayOriginal = opts.delay || 0;
                    if (opts.backwards === true) {
                        elements = $.extend(true, [], elements).reverse()
                    }
                    $.each(elements, function(elementIndex, element) {
                        if (parseFloat(opts.stagger)) {
                            opts.delay = delayOriginal + parseFloat(opts.stagger) * elementIndex
                        } else if (Type.isFunction(opts.stagger)) {
                            opts.delay = delayOriginal + opts.stagger.call(element, elementIndex, elementsLength)
                        }
                        if (opts.drag) {
                            opts.duration = parseFloat(durationOriginal) || (/^(callout|transition)/.test(propertiesMap) ? 1e3 : DURATION_DEFAULT);
                            opts.duration = Math.max(opts.duration * (opts.backwards ? 1 - elementIndex / elementsLength : (elementIndex + 1) / elementsLength), opts.duration * .75, 200)
                        }
                        Velocity.Redirects[propertiesMap].call(element, element, opts || {}, elementIndex, elementsLength, elements, promiseData.promise ? promiseData : undefined)
                    });
                    return getChain()
                } else {
                    var abortError = "Velocity: First argument (" + propertiesMap + ") was not a property map, a known action, or a registered redirect. Aborting.";
                    if (promiseData.promise) {
                        promiseData.rejecter(new Error(abortError))
                    } else {
                        console.log(abortError)
                    }
                    return getChain()
                }
            }
            var callUnitConversionData = {
                lastParent: null,
                lastPosition: null,
                lastFontSize: null,
                lastPercentToPxWidth: null,
                lastPercentToPxHeight: null,
                lastEmToPx: null,
                remToPx: null,
                vwToPx: null,
                vhToPx: null
            };
            var call = [];
            function processElement() {
                var element = this, opts = $.extend({}, Velocity.defaults, options), tweensContainer = {}, elementUnitConversionData;
                if (Data(element) === undefined) {
                    Velocity.init(element)
                }
                if (parseFloat(opts.delay) && opts.queue !== false) {
                    $.queue(element, opts.queue, function(next) {
                        Velocity.velocityQueueEntryFlag = true;
                        Data(element).delayTimer = {
                            setTimeout: setTimeout(next, parseFloat(opts.delay)),
                            next: next
                        }
                    })
                }
                switch (opts.duration.toString().toLowerCase()) {
                case "fast":
                    opts.duration = 200;
                    break;
                case "normal":
                    opts.duration = DURATION_DEFAULT;
                    break;
                case "slow":
                    opts.duration = 600;
                    break;
                default:
                    opts.duration = parseFloat(opts.duration) || 1
                }
                if (Velocity.mock !== false) {
                    if (Velocity.mock === true) {
                        opts.duration = opts.delay = 1
                    } else {
                        opts.duration *= parseFloat(Velocity.mock) || 1;
                        opts.delay *= parseFloat(Velocity.mock) || 1
                    }
                }
                opts.easing = getEasing(opts.easing, opts.duration);
                if (opts.begin && !Type.isFunction(opts.begin)) {
                    opts.begin = null
                }
                if (opts.progress && !Type.isFunction(opts.progress)) {
                    opts.progress = null
                }
                if (opts.complete && !Type.isFunction(opts.complete)) {
                    opts.complete = null
                }
                if (opts.display !== undefined && opts.display !== null) {
                    opts.display = opts.display.toString().toLowerCase();
                    if (opts.display === "auto") {
                        opts.display = Velocity.CSS.Values.getDisplayType(element)
                    }
                }
                if (opts.visibility !== undefined && opts.visibility !== null) {
                    opts.visibility = opts.visibility.toString().toLowerCase()
                }
                opts.mobileHA = opts.mobileHA && Velocity.State.isMobile && !Velocity.State.isGingerbread;
                function buildQueue(next) {
                    if (opts.begin && elementsIndex === 0) {
                        try {
                            opts.begin.call(elements, elements)
                        } catch (error) {
                            setTimeout(function() {
                                throw error
                            }, 1)
                        }
                    }
                    if (action === "scroll") {
                        var scrollDirection = /^x$/i.test(opts.axis) ? "Left" : "Top", scrollOffset = parseFloat(opts.offset) || 0, scrollPositionCurrent, scrollPositionCurrentAlternate, scrollPositionEnd;
                        if (opts.container) {
                            if (Type.isWrapped(opts.container) || Type.isNode(opts.container)) {
                                opts.container = opts.container[0] || opts.container;
                                scrollPositionCurrent = opts.container["scroll" + scrollDirection];
                                scrollPositionEnd = scrollPositionCurrent + $(element).position()[scrollDirection.toLowerCase()] + scrollOffset
                            } else {
                                opts.container = null
                            }
                        } else {
                            scrollPositionCurrent = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + scrollDirection]];
                            scrollPositionCurrentAlternate = Velocity.State.scrollAnchor[Velocity.State["scrollProperty" + (scrollDirection === "Left" ? "Top" : "Left")]];
                            scrollPositionEnd = $(element).offset()[scrollDirection.toLowerCase()] + scrollOffset
                        }
                        tweensContainer = {
                            scroll: {
                                rootPropertyValue: false,
                                startValue: scrollPositionCurrent,
                                currentValue: scrollPositionCurrent,
                                endValue: scrollPositionEnd,
                                unitType: "",
                                easing: opts.easing,
                                scrollData: {
                                    container: opts.container,
                                    direction: scrollDirection,
                                    alternateValue: scrollPositionCurrentAlternate
                                }
                            },
                            element: element
                        };
                        if (Velocity.debug)
                            console.log("tweensContainer (scroll): ", tweensContainer.scroll, element)
                    } else if (action === "reverse") {
                        if (!Data(element).tweensContainer) {
                            $.dequeue(element, opts.queue);
                            return
                        } else {
                            if (Data(element).opts.display === "none") {
                                Data(element).opts.display = "auto"
                            }
                            if (Data(element).opts.visibility === "hidden") {
                                Data(element).opts.visibility = "visible"
                            }
                            Data(element).opts.loop = false;
                            Data(element).opts.begin = null;
                            Data(element).opts.complete = null;
                            if (!options.easing) {
                                delete opts.easing
                            }
                            if (!options.duration) {
                                delete opts.duration
                            }
                            opts = $.extend({}, Data(element).opts, opts);
                            var lastTweensContainer = $.extend(true, {}, Data(element).tweensContainer);
                            for (var lastTween in lastTweensContainer) {
                                if (lastTween !== "element") {
                                    var lastStartValue = lastTweensContainer[lastTween].startValue;
                                    lastTweensContainer[lastTween].startValue = lastTweensContainer[lastTween].currentValue = lastTweensContainer[lastTween].endValue;
                                    lastTweensContainer[lastTween].endValue = lastStartValue;
                                    if (!Type.isEmptyObject(options)) {
                                        lastTweensContainer[lastTween].easing = opts.easing
                                    }
                                    if (Velocity.debug)
                                        console.log("reverse tweensContainer (" + lastTween + "): " + JSON.stringify(lastTweensContainer[lastTween]), element)
                                }
                            }
                            tweensContainer = lastTweensContainer
                        }
                    } else if (action === "start") {
                        var lastTweensContainer;
                        if (Data(element).tweensContainer && Data(element).isAnimating === true) {
                            lastTweensContainer = Data(element).tweensContainer
                        }
                        function parsePropertyValue(valueData, skipResolvingEasing) {
                            var endValue = undefined
                              , easing = undefined
                              , startValue = undefined;
                            if (Type.isArray(valueData)) {
                                endValue = valueData[0];
                                if (!Type.isArray(valueData[1]) && /^[\d-]/.test(valueData[1]) || Type.isFunction(valueData[1]) || CSS.RegEx.isHex.test(valueData[1])) {
                                    startValue = valueData[1]
                                } else if (Type.isString(valueData[1]) && !CSS.RegEx.isHex.test(valueData[1]) || Type.isArray(valueData[1])) {
                                    easing = skipResolvingEasing ? valueData[1] : getEasing(valueData[1], opts.duration);
                                    if (valueData[2] !== undefined) {
                                        startValue = valueData[2]
                                    }
                                }
                            } else {
                                endValue = valueData
                            }
                            if (!skipResolvingEasing) {
                                easing = easing || opts.easing
                            }
                            if (Type.isFunction(endValue)) {
                                endValue = endValue.call(element, elementsIndex, elementsLength)
                            }
                            if (Type.isFunction(startValue)) {
                                startValue = startValue.call(element, elementsIndex, elementsLength)
                            }
                            return [endValue || 0, easing, startValue]
                        }
                        $.each(propertiesMap, function(property, value) {
                            if (RegExp("^" + CSS.Lists.colors.join("$|^") + "$").test(property)) {
                                var valueData = parsePropertyValue(value, true)
                                  , endValue = valueData[0]
                                  , easing = valueData[1]
                                  , startValue = valueData[2];
                                if (CSS.RegEx.isHex.test(endValue)) {
                                    var colorComponents = ["Red", "Green", "Blue"]
                                      , endValueRGB = CSS.Values.hexToRgb(endValue)
                                      , startValueRGB = startValue ? CSS.Values.hexToRgb(startValue) : undefined;
                                    for (var i = 0; i < colorComponents.length; i++) {
                                        var dataArray = [endValueRGB[i]];
                                        if (easing) {
                                            dataArray.push(easing)
                                        }
                                        if (startValueRGB !== undefined) {
                                            dataArray.push(startValueRGB[i])
                                        }
                                        propertiesMap[property + colorComponents[i]] = dataArray
                                    }
                                    delete propertiesMap[property]
                                }
                            }
                        });
                        for (var property in propertiesMap) {
                            var valueData = parsePropertyValue(propertiesMap[property])
                              , endValue = valueData[0]
                              , easing = valueData[1]
                              , startValue = valueData[2];
                            property = CSS.Names.camelCase(property);
                            var rootProperty = CSS.Hooks.getRoot(property)
                              , rootPropertyValue = false;
                            if (!Data(element).isSVG && rootProperty !== "tween" && CSS.Names.prefixCheck(rootProperty)[1] === false && CSS.Normalizations.registered[rootProperty] === undefined) {
                                if (Velocity.debug)
                                    console.log("Skipping [" + rootProperty + "] due to a lack of browser support.");
                                continue
                            }
                            if ((opts.display !== undefined && opts.display !== null && opts.display !== "none" || opts.visibility !== undefined && opts.visibility !== "hidden") && /opacity|filter/.test(property) && !startValue && endValue !== 0) {
                                startValue = 0
                            }
                            if (opts._cacheValues && lastTweensContainer && lastTweensContainer[property]) {
                                if (startValue === undefined) {
                                    startValue = lastTweensContainer[property].endValue + lastTweensContainer[property].unitType
                                }
                                rootPropertyValue = Data(element).rootPropertyValueCache[rootProperty]
                            } else {
                                if (CSS.Hooks.registered[property]) {
                                    if (startValue === undefined) {
                                        rootPropertyValue = CSS.getPropertyValue(element, rootProperty);
                                        startValue = CSS.getPropertyValue(element, property, rootPropertyValue)
                                    } else {
                                        rootPropertyValue = CSS.Hooks.templates[rootProperty][1]
                                    }
                                } else if (startValue === undefined) {
                                    startValue = CSS.getPropertyValue(element, property)
                                }
                            }
                            var separatedValue, endValueUnitType, startValueUnitType, operator = false;
                            function separateValue(property, value) {
                                var unitType, numericValue;
                                numericValue = (value || "0").toString().toLowerCase().replace(/[%A-z]+$/, function(match) {
                                    unitType = match;
                                    return ""
                                });
                                if (!unitType) {
                                    unitType = CSS.Values.getUnitType(property)
                                }
                                return [numericValue, unitType]
                            }
                            separatedValue = separateValue(property, startValue);
                            startValue = separatedValue[0];
                            startValueUnitType = separatedValue[1];
                            separatedValue = separateValue(property, endValue);
                            endValue = separatedValue[0].replace(/^([+-\/*])=/, function(match, subMatch) {
                                operator = subMatch;
                                return ""
                            });
                            endValueUnitType = separatedValue[1];
                            startValue = parseFloat(startValue) || 0;
                            endValue = parseFloat(endValue) || 0;
                            if (endValueUnitType === "%") {
                                if (/^(fontSize|lineHeight)$/.test(property)) {
                                    endValue = endValue / 100;
                                    endValueUnitType = "em"
                                } else if (/^scale/.test(property)) {
                                    endValue = endValue / 100;
                                    endValueUnitType = ""
                                } else if (/(Red|Green|Blue)$/i.test(property)) {
                                    endValue = endValue / 100 * 255;
                                    endValueUnitType = ""
                                }
                            }
                            function calculateUnitRatios() {
                                var sameRatioIndicators = {
                                    myParent: element.parentNode || document.body,
                                    position: CSS.getPropertyValue(element, "position"),
                                    fontSize: CSS.getPropertyValue(element, "fontSize")
                                }
                                  , samePercentRatio = sameRatioIndicators.position === callUnitConversionData.lastPosition && sameRatioIndicators.myParent === callUnitConversionData.lastParent
                                  , sameEmRatio = sameRatioIndicators.fontSize === callUnitConversionData.lastFontSize;
                                callUnitConversionData.lastParent = sameRatioIndicators.myParent;
                                callUnitConversionData.lastPosition = sameRatioIndicators.position;
                                callUnitConversionData.lastFontSize = sameRatioIndicators.fontSize;
                                var measurement = 100
                                  , unitRatios = {};
                                if (!sameEmRatio || !samePercentRatio) {
                                    var dummy = Data(element).isSVG ? document.createElementNS("http://www.w3.org/2000/svg", "rect") : document.createElement("div");
                                    Velocity.init(dummy);
                                    sameRatioIndicators.myParent.appendChild(dummy);
                                    $.each(["overflow", "overflowX", "overflowY"], function(i, property) {
                                        Velocity.CSS.setPropertyValue(dummy, property, "hidden")
                                    });
                                    Velocity.CSS.setPropertyValue(dummy, "position", sameRatioIndicators.position);
                                    Velocity.CSS.setPropertyValue(dummy, "fontSize", sameRatioIndicators.fontSize);
                                    Velocity.CSS.setPropertyValue(dummy, "boxSizing", "content-box");
                                    $.each(["minWidth", "maxWidth", "width", "minHeight", "maxHeight", "height"], function(i, property) {
                                        Velocity.CSS.setPropertyValue(dummy, property, measurement + "%")
                                    });
                                    Velocity.CSS.setPropertyValue(dummy, "paddingLeft", measurement + "em");
                                    unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth = (parseFloat(CSS.getPropertyValue(dummy, "width", null, true)) || 1) / measurement;
                                    unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight = (parseFloat(CSS.getPropertyValue(dummy, "height", null, true)) || 1) / measurement;
                                    unitRatios.emToPx = callUnitConversionData.lastEmToPx = (parseFloat(CSS.getPropertyValue(dummy, "paddingLeft")) || 1) / measurement;
                                    sameRatioIndicators.myParent.removeChild(dummy)
                                } else {
                                    unitRatios.emToPx = callUnitConversionData.lastEmToPx;
                                    unitRatios.percentToPxWidth = callUnitConversionData.lastPercentToPxWidth;
                                    unitRatios.percentToPxHeight = callUnitConversionData.lastPercentToPxHeight
                                }
                                if (callUnitConversionData.remToPx === null) {
                                    callUnitConversionData.remToPx = parseFloat(CSS.getPropertyValue(document.body, "fontSize")) || 16
                                }
                                if (callUnitConversionData.vwToPx === null) {
                                    callUnitConversionData.vwToPx = parseFloat(window.innerWidth) / 100;
                                    callUnitConversionData.vhToPx = parseFloat(window.innerHeight) / 100
                                }
                                unitRatios.remToPx = callUnitConversionData.remToPx;
                                unitRatios.vwToPx = callUnitConversionData.vwToPx;
                                unitRatios.vhToPx = callUnitConversionData.vhToPx;
                                if (Velocity.debug >= 1)
                                    console.log("Unit ratios: " + JSON.stringify(unitRatios), element);
                                return unitRatios
                            }
                            if (/[\/*]/.test(operator)) {
                                endValueUnitType = startValueUnitType
                            } else if (startValueUnitType !== endValueUnitType && startValue !== 0) {
                                if (endValue === 0) {
                                    endValueUnitType = startValueUnitType
                                } else {
                                    elementUnitConversionData = elementUnitConversionData || calculateUnitRatios();
                                    var axis = /margin|padding|left|right|width|text|word|letter/i.test(property) || /X$/.test(property) || property === "x" ? "x" : "y";
                                    switch (startValueUnitType) {
                                    case "%":
                                        startValue *= axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight;
                                        break;
                                    case "px":
                                        break;
                                    default:
                                        startValue *= elementUnitConversionData[startValueUnitType + "ToPx"]
                                    }
                                    switch (endValueUnitType) {
                                    case "%":
                                        startValue *= 1 / (axis === "x" ? elementUnitConversionData.percentToPxWidth : elementUnitConversionData.percentToPxHeight);
                                        break;
                                    case "px":
                                        break;
                                    default:
                                        startValue *= 1 / elementUnitConversionData[endValueUnitType + "ToPx"]
                                    }
                                }
                            }
                            switch (operator) {
                            case "+":
                                endValue = startValue + endValue;
                                break;
                            case "-":
                                endValue = startValue - endValue;
                                break;
                            case "*":
                                endValue = startValue * endValue;
                                break;
                            case "/":
                                endValue = startValue / endValue;
                                break
                            }
                            tweensContainer[property] = {
                                rootPropertyValue: rootPropertyValue,
                                startValue: startValue,
                                currentValue: startValue,
                                endValue: endValue,
                                unitType: endValueUnitType,
                                easing: easing
                            };
                            if (Velocity.debug)
                                console.log("tweensContainer (" + property + "): " + JSON.stringify(tweensContainer[property]), element)
                        }
                        tweensContainer.element = element
                    }
                    if (tweensContainer.element) {
                        CSS.Values.addClass(element, "velocity-animating");
                        call.push(tweensContainer);
                        if (opts.queue === "") {
                            Data(element).tweensContainer = tweensContainer;
                            Data(element).opts = opts
                        }
                        Data(element).isAnimating = true;
                        if (elementsIndex === elementsLength - 1) {
                            Velocity.State.calls.push([call, elements, opts, null, promiseData.resolver]);
                            if (Velocity.State.isTicking === false) {
                                Velocity.State.isTicking = true;
                                tick()
                            }
                        } else {
                            elementsIndex++
                        }
                    }
                }
                if (opts.queue === false) {
                    if (opts.delay) {
                        setTimeout(buildQueue, opts.delay)
                    } else {
                        buildQueue()
                    }
                } else {
                    $.queue(element, opts.queue, function(next, clearQueue) {
                        if (clearQueue === true) {
                            if (promiseData.promise) {
                                promiseData.resolver(elements)
                            }
                            return true
                        }
                        Velocity.velocityQueueEntryFlag = true;
                        buildQueue(next)
                    })
                }
                if ((opts.queue === "" || opts.queue === "fx") && $.queue(element)[0] !== "inprogress") {
                    $.dequeue(element)
                }
            }
            $.each(elements, function(i, element) {
                if (Type.isNode(element)) {
                    processElement.call(element)
                }
            });
            var opts = $.extend({}, Velocity.defaults, options), reverseCallsCount;
            opts.loop = parseInt(opts.loop);
            reverseCallsCount = opts.loop * 2 - 1;
            if (opts.loop) {
                for (var x = 0; x < reverseCallsCount; x++) {
                    var reverseOptions = {
                        delay: opts.delay,
                        progress: opts.progress
                    };
                    if (x === reverseCallsCount - 1) {
                        reverseOptions.display = opts.display;
                        reverseOptions.visibility = opts.visibility;
                        reverseOptions.complete = opts.complete
                    }
                    animate(elements, "reverse", reverseOptions)
                }
            }
            return getChain()
        };
        Velocity = $.extend(animate, Velocity);
        Velocity.animate = animate;
        var ticker = window.requestAnimationFrame || rAFShim;
        if (!Velocity.State.isMobile && document.hidden !== undefined) {
            document.addEventListener("visibilitychange", function() {
                if (document.hidden) {
                    ticker = function(callback) {
                        return setTimeout(function() {
                            callback(true)
                        }, 16)
                    }
                    ;
                    tick()
                } else {
                    ticker = window.requestAnimationFrame || rAFShim
                }
            })
        }
        function tick(timestamp) {
            if (timestamp) {
                var timeCurrent = (new Date).getTime();
                var callsLength = Velocity.State.calls.length;
                if (callsLength > 1e4) {
                    Velocity.State.calls = compactSparseArray(Velocity.State.calls)
                }
                for (var i = 0; i < callsLength; i++) {
                    if (!Velocity.State.calls[i]) {
                        continue
                    }
                    var callContainer = Velocity.State.calls[i]
                      , call = callContainer[0]
                      , opts = callContainer[2]
                      , timeStart = callContainer[3]
                      , firstTick = !!timeStart
                      , tweenDummyValue = null;
                    if (!timeStart) {
                        timeStart = Velocity.State.calls[i][3] = timeCurrent - 16
                    }
                    var percentComplete = Math.min((timeCurrent - timeStart) / opts.duration, 1);
                    for (var j = 0, callLength = call.length; j < callLength; j++) {
                        var tweensContainer = call[j]
                          , element = tweensContainer.element;
                        if (!Data(element)) {
                            continue
                        }
                        var transformPropertyExists = false;
                        if (opts.display !== undefined && opts.display !== null && opts.display !== "none") {
                            if (opts.display === "flex") {
                                var flexValues = ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex"];
                                $.each(flexValues, function(i, flexValue) {
                                    CSS.setPropertyValue(element, "display", flexValue)
                                })
                            }
                            CSS.setPropertyValue(element, "display", opts.display)
                        }
                        if (opts.visibility !== undefined && opts.visibility !== "hidden") {
                            CSS.setPropertyValue(element, "visibility", opts.visibility)
                        }
                        for (var property in tweensContainer) {
                            if (property !== "element") {
                                var tween = tweensContainer[property], currentValue, easing = Type.isString(tween.easing) ? Velocity.Easings[tween.easing] : tween.easing;
                                if (percentComplete === 1) {
                                    currentValue = tween.endValue
                                } else {
                                    var tweenDelta = tween.endValue - tween.startValue;
                                    currentValue = tween.startValue + tweenDelta * easing(percentComplete, opts, tweenDelta);
                                    if (!firstTick && currentValue === tween.currentValue) {
                                        continue
                                    }
                                }
                                tween.currentValue = currentValue;
                                if (property === "tween") {
                                    tweenDummyValue = currentValue
                                } else {
                                    if (CSS.Hooks.registered[property]) {
                                        var hookRoot = CSS.Hooks.getRoot(property)
                                          , rootPropertyValueCache = Data(element).rootPropertyValueCache[hookRoot];
                                        if (rootPropertyValueCache) {
                                            tween.rootPropertyValue = rootPropertyValueCache
                                        }
                                    }
                                    var adjustedSetData = CSS.setPropertyValue(element, property, tween.currentValue + (parseFloat(currentValue) === 0 ? "" : tween.unitType), tween.rootPropertyValue, tween.scrollData);
                                    if (CSS.Hooks.registered[property]) {
                                        if (CSS.Normalizations.registered[hookRoot]) {
                                            Data(element).rootPropertyValueCache[hookRoot] = CSS.Normalizations.registered[hookRoot]("extract", null, adjustedSetData[1])
                                        } else {
                                            Data(element).rootPropertyValueCache[hookRoot] = adjustedSetData[1]
                                        }
                                    }
                                    if (adjustedSetData[0] === "transform") {
                                        transformPropertyExists = true
                                    }
                                }
                            }
                        }
                        if (opts.mobileHA) {
                            if (Data(element).transformCache.translate3d === undefined) {
                                Data(element).transformCache.translate3d = "(0px, 0px, 0px)";
                                transformPropertyExists = true
                            }
                        }
                        if (transformPropertyExists) {
                            CSS.flushTransformCache(element)
                        }
                    }
                    if (opts.display !== undefined && opts.display !== "none") {
                        Velocity.State.calls[i][2].display = false
                    }
                    if (opts.visibility !== undefined && opts.visibility !== "hidden") {
                        Velocity.State.calls[i][2].visibility = false
                    }
                    if (opts.progress) {
                        opts.progress.call(callContainer[1], callContainer[1], percentComplete, Math.max(0, timeStart + opts.duration - timeCurrent), timeStart, tweenDummyValue)
                    }
                    if (percentComplete === 1) {
                        completeCall(i)
                    }
                }
            }
            if (Velocity.State.isTicking) {
                ticker(tick)
            }
        }
        function completeCall(callIndex, isStopped) {
            if (!Velocity.State.calls[callIndex]) {
                return false
            }
            var call = Velocity.State.calls[callIndex][0]
              , elements = Velocity.State.calls[callIndex][1]
              , opts = Velocity.State.calls[callIndex][2]
              , resolver = Velocity.State.calls[callIndex][4];
            var remainingCallsExist = false;
            for (var i = 0, callLength = call.length; i < callLength; i++) {
                var element = call[i].element;
                if (!isStopped && !opts.loop) {
                    if (opts.display === "none") {
                        CSS.setPropertyValue(element, "display", opts.display)
                    }
                    if (opts.visibility === "hidden") {
                        CSS.setPropertyValue(element, "visibility", opts.visibility)
                    }
                }
                if (opts.loop !== true && ($.queue(element)[1] === undefined || !/\.velocityQueueEntryFlag/i.test($.queue(element)[1]))) {
                    if (Data(element)) {
                        Data(element).isAnimating = false;
                        Data(element).rootPropertyValueCache = {};
                        var transformHAPropertyExists = false;
                        $.each(CSS.Lists.transforms3D, function(i, transformName) {
                            var defaultValue = /^scale/.test(transformName) ? 1 : 0
                              , currentValue = Data(element).transformCache[transformName];
                            if (Data(element).transformCache[transformName] !== undefined && new RegExp("^\\(" + defaultValue + "[^.]").test(currentValue)) {
                                transformHAPropertyExists = true;
                                delete Data(element).transformCache[transformName]
                            }
                        });
                        if (opts.mobileHA) {
                            transformHAPropertyExists = true;
                            delete Data(element).transformCache.translate3d
                        }
                        if (transformHAPropertyExists) {
                            CSS.flushTransformCache(element)
                        }
                        CSS.Values.removeClass(element, "velocity-animating")
                    }
                }
                if (!isStopped && opts.complete && !opts.loop && i === callLength - 1) {
                    try {
                        opts.complete.call(elements, elements)
                    } catch (error) {
                        setTimeout(function() {
                            throw error
                        }, 1)
                    }
                }
                if (resolver && opts.loop !== true) {
                    resolver(elements)
                }
                if (Data(element) && opts.loop === true && !isStopped) {
                    $.each(Data(element).tweensContainer, function(propertyName, tweenContainer) {
                        if (/^rotate/.test(propertyName) && parseFloat(tweenContainer.endValue) === 360) {
                            tweenContainer.endValue = 0;
                            tweenContainer.startValue = 360
                        }
                        if (/^backgroundPosition/.test(propertyName) && parseFloat(tweenContainer.endValue) === 100 && tweenContainer.unitType === "%") {
                            tweenContainer.endValue = 0;
                            tweenContainer.startValue = 100
                        }
                    });
                    Velocity(element, "reverse", {
                        loop: true,
                        delay: opts.delay
                    })
                }
                if (opts.queue !== false) {
                    $.dequeue(element, opts.queue)
                }
            }
            Velocity.State.calls[callIndex] = false;
            for (var j = 0, callsLength = Velocity.State.calls.length; j < callsLength; j++) {
                if (Velocity.State.calls[j] !== false) {
                    remainingCallsExist = true;
                    break
                }
            }
            if (remainingCallsExist === false) {
                Velocity.State.isTicking = false;
                delete Velocity.State.calls;
                Velocity.State.calls = []
            }
        }
        global.Velocity = Velocity;
        if (global !== window) {
            global.fn.velocity = animate;
            global.fn.velocity.defaults = Velocity.defaults
        }
        $.each(["Down", "Up"], function(i, direction) {
            Velocity.Redirects["slide" + direction] = function(element, options, elementsIndex, elementsSize, elements, promiseData) {
                var opts = $.extend({}, options)
                  , begin = opts.begin
                  , complete = opts.complete
                  , computedValues = {
                    height: "",
                    marginTop: "",
                    marginBottom: "",
                    paddingTop: "",
                    paddingBottom: ""
                }
                  , inlineValues = {};
                if (opts.display === undefined) {
                    opts.display = direction === "Down" ? Velocity.CSS.Values.getDisplayType(element) === "inline" ? "inline-block" : "block" : "none"
                }
                opts.begin = function() {
                    begin && begin.call(elements, elements);
                    for (var property in computedValues) {
                        inlineValues[property] = element.style[property];
                        var propertyValue = Velocity.CSS.getPropertyValue(element, property);
                        computedValues[property] = direction === "Down" ? [propertyValue, 0] : [0, propertyValue]
                    }
                    inlineValues.overflow = element.style.overflow;
                    element.style.overflow = "hidden"
                }
                ;
                opts.complete = function() {
                    for (var property in inlineValues) {
                        element.style[property] = inlineValues[property]
                    }
                    complete && complete.call(elements, elements);
                    promiseData && promiseData.resolver(elements)
                }
                ;
                Velocity(element, computedValues, opts)
            }
        });
        $.each(["In", "Out"], function(i, direction) {
            Velocity.Redirects["fade" + direction] = function(element, options, elementsIndex, elementsSize, elements, promiseData) {
                var opts = $.extend({}, options)
                  , propertiesMap = {
                    opacity: direction === "In" ? 1 : 0
                }
                  , originalComplete = opts.complete;
                if (elementsIndex !== elementsSize - 1) {
                    opts.complete = opts.begin = null
                } else {
                    opts.complete = function() {
                        if (originalComplete) {
                            originalComplete.call(elements, elements)
                        }
                        promiseData && promiseData.resolver(elements)
                    }
                }
                if (opts.display === undefined) {
                    opts.display = direction === "In" ? "auto" : "none"
                }
                Velocity(this, propertiesMap, opts)
            }
        });
        return Velocity
    }(window.jQuery || window.Zepto || window, window, document)
});
(function(factory) {
    if (typeof require === "function" && typeof exports === "object") {
        module.exports = factory()
    } else if (typeof define === "function" && define.amd) {
        define(["velocity"], factory)
    } else {
        factory()
    }
}
)(function() {
    return function(global, window, document, undefined) {
        if (!global.Velocity || !global.Velocity.Utilities) {
            window.console && console.log("Velocity UI Pack: Velocity must be loaded first. Aborting.");
            return
        } else {
            var Velocity = global.Velocity
              , $ = Velocity.Utilities
        }
        var velocityVersion = Velocity.version
          , requiredVersion = {
            major: 1,
            minor: 1,
            patch: 0
        };
        function greaterSemver(primary, secondary) {
            var versionInts = [];
            if (!primary || !secondary) {
                return false
            }
            $.each([primary, secondary], function(i, versionObject) {
                var versionIntsComponents = [];
                $.each(versionObject, function(component, value) {
                    while (value.toString().length < 5) {
                        value = "0" + value
                    }
                    versionIntsComponents.push(value)
                });
                versionInts.push(versionIntsComponents.join(""))
            });
            return parseFloat(versionInts[0]) > parseFloat(versionInts[1])
        }
        if (greaterSemver(requiredVersion, velocityVersion)) {
            var abortError = "Velocity UI Pack: You need to update Velocity (jquery.velocity.js) to a newer version. Visit http://github.com/julianshapiro/velocity.";
            alert(abortError);
            throw new Error(abortError)
        }
        Velocity.RegisterEffect = Velocity.RegisterUI = function(effectName, properties) {
            function animateParentHeight(elements, direction, totalDuration, stagger) {
                var totalHeightDelta = 0, parentNode;
                $.each(elements.nodeType ? [elements] : elements, function(i, element) {
                    if (stagger) {
                        totalDuration += i * stagger
                    }
                    parentNode = element.parentNode;
                    $.each(["height", "paddingTop", "paddingBottom", "marginTop", "marginBottom"], function(i, property) {
                        totalHeightDelta += parseFloat(Velocity.CSS.getPropertyValue(element, property))
                    })
                });
                Velocity.animate(parentNode, {
                    height: (direction === "In" ? "+" : "-") + "=" + totalHeightDelta
                }, {
                    queue: false,
                    easing: "ease-in-out",
                    duration: totalDuration * (direction === "In" ? .6 : 1)
                })
            }
            Velocity.Redirects[effectName] = function(element, redirectOptions, elementsIndex, elementsSize, elements, promiseData) {
                var finalElement = elementsIndex === elementsSize - 1;
                if (typeof properties.defaultDuration === "function") {
                    properties.defaultDuration = properties.defaultDuration.call(elements, elements)
                } else {
                    properties.defaultDuration = parseFloat(properties.defaultDuration)
                }
                for (var callIndex = 0; callIndex < properties.calls.length; callIndex++) {
                    var call = properties.calls[callIndex]
                      , propertyMap = call[0]
                      , redirectDuration = redirectOptions.duration || properties.defaultDuration || 1e3
                      , durationPercentage = call[1]
                      , callOptions = call[2] || {}
                      , opts = {};
                    opts.duration = redirectDuration * (durationPercentage || 1);
                    opts.queue = redirectOptions.queue || "";
                    opts.easing = callOptions.easing || "ease";
                    opts.delay = parseFloat(callOptions.delay) || 0;
                    opts._cacheValues = callOptions._cacheValues || true;
                    if (callIndex === 0) {
                        opts.delay += parseFloat(redirectOptions.delay) || 0;
                        if (elementsIndex === 0) {
                            opts.begin = function() {
                                redirectOptions.begin && redirectOptions.begin.call(elements, elements);
                                var direction = effectName.match(/(In|Out)$/);
                                if (direction && direction[0] === "In" && propertyMap.opacity !== undefined) {
                                    $.each(elements.nodeType ? [elements] : elements, function(i, element) {
                                        Velocity.CSS.setPropertyValue(element, "opacity", 0)
                                    })
                                }
                                if (redirectOptions.animateParentHeight && direction) {
                                    animateParentHeight(elements, direction[0], redirectDuration + opts.delay, redirectOptions.stagger)
                                }
                            }
                        }
                        if (redirectOptions.display !== null) {
                            if (redirectOptions.display !== undefined && redirectOptions.display !== "none") {
                                opts.display = redirectOptions.display
                            } else if (/In$/.test(effectName)) {
                                var defaultDisplay = Velocity.CSS.Values.getDisplayType(element);
                                opts.display = defaultDisplay === "inline" ? "inline-block" : defaultDisplay
                            }
                        }
                        if (redirectOptions.visibility && redirectOptions.visibility !== "hidden") {
                            opts.visibility = redirectOptions.visibility
                        }
                    }
                    if (callIndex === properties.calls.length - 1) {
                        function injectFinalCallbacks() {
                            if ((redirectOptions.display === undefined || redirectOptions.display === "none") && /Out$/.test(effectName)) {
                                $.each(elements.nodeType ? [elements] : elements, function(i, element) {
                                    Velocity.CSS.setPropertyValue(element, "display", "none")
                                })
                            }
                            redirectOptions.complete && redirectOptions.complete.call(elements, elements);
                            if (promiseData) {
                                promiseData.resolver(elements || element)
                            }
                        }
                        opts.complete = function() {
                            if (properties.reset) {
                                for (var resetProperty in properties.reset) {
                                    var resetValue = properties.reset[resetProperty];
                                    if (Velocity.CSS.Hooks.registered[resetProperty] === undefined && (typeof resetValue === "string" || typeof resetValue === "number")) {
                                        properties.reset[resetProperty] = [properties.reset[resetProperty], properties.reset[resetProperty]]
                                    }
                                }
                                var resetOptions = {
                                    duration: 0,
                                    queue: false
                                };
                                if (finalElement) {
                                    resetOptions.complete = injectFinalCallbacks
                                }
                                Velocity.animate(element, properties.reset, resetOptions)
                            } else if (finalElement) {
                                injectFinalCallbacks()
                            }
                        }
                        ;
                        if (redirectOptions.visibility === "hidden") {
                            opts.visibility = redirectOptions.visibility
                        }
                    }
                    Velocity.animate(element, propertyMap, opts)
                }
            }
            ;
            return Velocity
        }
        ;
        Velocity.RegisterEffect.packagedEffects = {
            "callout.bounce": {
                defaultDuration: 550,
                calls: [[{
                    translateY: -30
                }, .25], [{
                    translateY: 0
                }, .125], [{
                    translateY: -15
                }, .125], [{
                    translateY: 0
                }, .25]]
            },
            "callout.shake": {
                defaultDuration: 800,
                calls: [[{
                    translateX: -11
                }, .125], [{
                    translateX: 11
                }, .125], [{
                    translateX: -11
                }, .125], [{
                    translateX: 11
                }, .125], [{
                    translateX: -11
                }, .125], [{
                    translateX: 11
                }, .125], [{
                    translateX: -11
                }, .125], [{
                    translateX: 0
                }, .125]]
            },
            "callout.flash": {
                defaultDuration: 1100,
                calls: [[{
                    opacity: [0, "easeInOutQuad", 1]
                }, .25], [{
                    opacity: [1, "easeInOutQuad"]
                }, .25], [{
                    opacity: [0, "easeInOutQuad"]
                }, .25], [{
                    opacity: [1, "easeInOutQuad"]
                }, .25]]
            },
            "callout.pulse": {
                defaultDuration: 825,
                calls: [[{
                    scaleX: 1.1,
                    scaleY: 1.1
                }, .5, {
                    easing: "easeInExpo"
                }], [{
                    scaleX: 1,
                    scaleY: 1
                }, .5]]
            },
            "callout.swing": {
                defaultDuration: 950,
                calls: [[{
                    rotateZ: 15
                }, .2], [{
                    rotateZ: -10
                }, .2], [{
                    rotateZ: 5
                }, .2], [{
                    rotateZ: -5
                }, .2], [{
                    rotateZ: 0
                }, .2]]
            },
            "callout.tada": {
                defaultDuration: 1e3,
                calls: [[{
                    scaleX: .9,
                    scaleY: .9,
                    rotateZ: -3
                }, .1], [{
                    scaleX: 1.1,
                    scaleY: 1.1,
                    rotateZ: 3
                }, .1], [{
                    scaleX: 1.1,
                    scaleY: 1.1,
                    rotateZ: -3
                }, .1], ["reverse", .125], ["reverse", .125], ["reverse", .125], ["reverse", .125], ["reverse", .125], [{
                    scaleX: 1,
                    scaleY: 1,
                    rotateZ: 0
                }, .2]]
            },
            "transition.fadeIn": {
                defaultDuration: 500,
                calls: [[{
                    opacity: [1, 0]
                }]]
            },
            "transition.fadeOut": {
                defaultDuration: 500,
                calls: [[{
                    opacity: [0, 1]
                }]]
            },
            "transition.flipXIn": {
                defaultDuration: 700,
                calls: [[{
                    opacity: [1, 0],
                    transformPerspective: [800, 800],
                    rotateY: [0, -55]
                }]],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipXOut": {
                defaultDuration: 700,
                calls: [[{
                    opacity: [0, 1],
                    transformPerspective: [800, 800],
                    rotateY: 55
                }]],
                reset: {
                    transformPerspective: 0,
                    rotateY: 0
                }
            },
            "transition.flipYIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    transformPerspective: [800, 800],
                    rotateX: [0, -45]
                }]],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipYOut": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [0, 1],
                    transformPerspective: [800, 800],
                    rotateX: 25
                }]],
                reset: {
                    transformPerspective: 0,
                    rotateX: 0
                }
            },
            "transition.flipBounceXIn": {
                defaultDuration: 900,
                calls: [[{
                    opacity: [.725, 0],
                    transformPerspective: [400, 400],
                    rotateY: [-10, 90]
                }, .5], [{
                    opacity: .8,
                    rotateY: 10
                }, .25], [{
                    opacity: 1,
                    rotateY: 0
                }, .25]],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipBounceXOut": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [.9, 1],
                    transformPerspective: [400, 400],
                    rotateY: -10
                }, .5], [{
                    opacity: 0,
                    rotateY: 90
                }, .5]],
                reset: {
                    transformPerspective: 0,
                    rotateY: 0
                }
            },
            "transition.flipBounceYIn": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [.725, 0],
                    transformPerspective: [400, 400],
                    rotateX: [-10, 90]
                }, .5], [{
                    opacity: .8,
                    rotateX: 10
                }, .25], [{
                    opacity: 1,
                    rotateX: 0
                }, .25]],
                reset: {
                    transformPerspective: 0
                }
            },
            "transition.flipBounceYOut": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [.9, 1],
                    transformPerspective: [400, 400],
                    rotateX: -15
                }, .5], [{
                    opacity: 0,
                    rotateX: 90
                }, .5]],
                reset: {
                    transformPerspective: 0,
                    rotateX: 0
                }
            },
            "transition.swoopIn": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [1, 0],
                    transformOriginX: ["100%", "50%"],
                    transformOriginY: ["100%", "100%"],
                    scaleX: [1, 0],
                    scaleY: [1, 0],
                    translateX: [0, -700],
                    translateZ: 0
                }]],
                reset: {
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.swoopOut": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [0, 1],
                    transformOriginX: ["50%", "100%"],
                    transformOriginY: ["100%", "100%"],
                    scaleX: 0,
                    scaleY: 0,
                    translateX: -700,
                    translateZ: 0
                }]],
                reset: {
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    scaleX: 1,
                    scaleY: 1,
                    translateX: 0
                }
            },
            "transition.whirlIn": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [1, 0],
                    transformOriginX: ["50%", "50%"],
                    transformOriginY: ["50%", "50%"],
                    scaleX: [1, 0],
                    scaleY: [1, 0],
                    rotateY: [0, 160]
                }, 1, {
                    easing: "easeInOutSine"
                }]]
            },
            "transition.whirlOut": {
                defaultDuration: 750,
                calls: [[{
                    opacity: [0, "easeInOutQuint", 1],
                    transformOriginX: ["50%", "50%"],
                    transformOriginY: ["50%", "50%"],
                    scaleX: 0,
                    scaleY: 0,
                    rotateY: 160
                }, 1, {
                    easing: "swing"
                }]],
                reset: {
                    scaleX: 1,
                    scaleY: 1,
                    rotateY: 0
                }
            },
            "transition.shrinkIn": {
                defaultDuration: 750,
                calls: [[{
                    opacity: [1, 0],
                    transformOriginX: ["50%", "50%"],
                    transformOriginY: ["50%", "50%"],
                    scaleX: [1, 1.5],
                    scaleY: [1, 1.5],
                    translateZ: 0
                }]]
            },
            "transition.shrinkOut": {
                defaultDuration: 600,
                calls: [[{
                    opacity: [0, 1],
                    transformOriginX: ["50%", "50%"],
                    transformOriginY: ["50%", "50%"],
                    scaleX: 1.3,
                    scaleY: 1.3,
                    translateZ: 0
                }]],
                reset: {
                    scaleX: 1,
                    scaleY: 1
                }
            },
            "transition.expandIn": {
                defaultDuration: 700,
                calls: [[{
                    opacity: [1, 0],
                    transformOriginX: ["50%", "50%"],
                    transformOriginY: ["50%", "50%"],
                    scaleX: [1, .625],
                    scaleY: [1, .625],
                    translateZ: 0
                }]]
            },
            "transition.expandOut": {
                defaultDuration: 700,
                calls: [[{
                    opacity: [0, 1],
                    transformOriginX: ["50%", "50%"],
                    transformOriginY: ["50%", "50%"],
                    scaleX: .5,
                    scaleY: .5,
                    translateZ: 0
                }]],
                reset: {
                    scaleX: 1,
                    scaleY: 1
                }
            },
            "transition.bounceIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    scaleX: [1.05, .3],
                    scaleY: [1.05, .3]
                }, .4], [{
                    scaleX: .9,
                    scaleY: .9,
                    translateZ: 0
                }, .2], [{
                    scaleX: 1,
                    scaleY: 1
                }, .5]]
            },
            "transition.bounceOut": {
                defaultDuration: 800,
                calls: [[{
                    scaleX: .95,
                    scaleY: .95
                }, .35], [{
                    scaleX: 1.1,
                    scaleY: 1.1,
                    translateZ: 0
                }, .35], [{
                    opacity: [0, 1],
                    scaleX: .3,
                    scaleY: .3
                }, .3]],
                reset: {
                    scaleX: 1,
                    scaleY: 1
                }
            },
            "transition.bounceUpIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    translateY: [-30, 1e3]
                }, .6, {
                    easing: "easeOutCirc"
                }], [{
                    translateY: 10
                }, .2], [{
                    translateY: 0
                }, .2]]
            },
            "transition.bounceUpOut": {
                defaultDuration: 1e3,
                calls: [[{
                    translateY: 20
                }, .2], [{
                    opacity: [0, "easeInCirc", 1],
                    translateY: -1e3
                }, .8]],
                reset: {
                    translateY: 0
                }
            },
            "transition.bounceDownIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    translateY: [30, -1e3]
                }, .6, {
                    easing: "easeOutCirc"
                }], [{
                    translateY: -10
                }, .2], [{
                    translateY: 0
                }, .2]]
            },
            "transition.bounceDownOut": {
                defaultDuration: 1e3,
                calls: [[{
                    translateY: -20
                }, .2], [{
                    opacity: [0, "easeInCirc", 1],
                    translateY: 1e3
                }, .8]],
                reset: {
                    translateY: 0
                }
            },
            "transition.bounceLeftIn": {
                defaultDuration: 750,
                calls: [[{
                    opacity: [1, 0],
                    translateX: [30, -1250]
                }, .6, {
                    easing: "easeOutCirc"
                }], [{
                    translateX: -10
                }, .2], [{
                    translateX: 0
                }, .2]]
            },
            "transition.bounceLeftOut": {
                defaultDuration: 750,
                calls: [[{
                    translateX: 30
                }, .2], [{
                    opacity: [0, "easeInCirc", 1],
                    translateX: -1250
                }, .8]],
                reset: {
                    translateX: 0
                }
            },
            "transition.bounceRightIn": {
                defaultDuration: 750,
                calls: [[{
                    opacity: [1, 0],
                    translateX: [-30, 1250]
                }, .6, {
                    easing: "easeOutCirc"
                }], [{
                    translateX: 10
                }, .2], [{
                    translateX: 0
                }, .2]]
            },
            "transition.bounceRightOut": {
                defaultDuration: 750,
                calls: [[{
                    translateX: -30
                }, .2], [{
                    opacity: [0, "easeInCirc", 1],
                    translateX: 1250
                }, .8]],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideUpIn": {
                defaultDuration: 900,
                calls: [[{
                    opacity: [1, 0],
                    translateY: [0, 20],
                    translateZ: 0
                }]]
            },
            "transition.slideUpOut": {
                defaultDuration: 900,
                calls: [[{
                    opacity: [0, 1],
                    translateY: -20,
                    translateZ: 0
                }]],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideDownIn": {
                defaultDuration: 900,
                calls: [[{
                    opacity: [1, 0],
                    translateY: [0, -20],
                    translateZ: 0
                }]]
            },
            "transition.slideDownOut": {
                defaultDuration: 900,
                calls: [[{
                    opacity: [0, 1],
                    translateY: 20,
                    translateZ: 0
                }]],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideLeftIn": {
                defaultDuration: 1e3,
                calls: [[{
                    opacity: [1, 0],
                    translateX: [0, -20],
                    translateZ: 0
                }]]
            },
            "transition.slideLeftOut": {
                defaultDuration: 1050,
                calls: [[{
                    opacity: [0, 1],
                    translateX: -20,
                    translateZ: 0
                }]],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideRightIn": {
                defaultDuration: 1e3,
                calls: [[{
                    opacity: [1, 0],
                    translateX: [0, 20],
                    translateZ: 0
                }]]
            },
            "transition.slideRightOut": {
                defaultDuration: 1050,
                calls: [[{
                    opacity: [0, 1],
                    translateX: 20,
                    translateZ: 0
                }]],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideUpBigIn": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [1, 0],
                    translateY: [0, 75],
                    translateZ: 0
                }]]
            },
            "transition.slideUpBigOut": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [0, 1],
                    translateY: -75,
                    translateZ: 0
                }]],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideDownBigIn": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [1, 0],
                    translateY: [0, -75],
                    translateZ: 0
                }]]
            },
            "transition.slideDownBigOut": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [0, 1],
                    translateY: 75,
                    translateZ: 0
                }]],
                reset: {
                    translateY: 0
                }
            },
            "transition.slideLeftBigIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    translateX: [0, -75],
                    translateZ: 0
                }]]
            },
            "transition.slideLeftBigOut": {
                defaultDuration: 750,
                calls: [[{
                    opacity: [0, 1],
                    translateX: -75,
                    translateZ: 0
                }]],
                reset: {
                    translateX: 0
                }
            },
            "transition.slideRightBigIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    translateX: [0, 75],
                    translateZ: 0
                }]]
            },
            "transition.slideRightBigOut": {
                defaultDuration: 750,
                calls: [[{
                    opacity: [0, 1],
                    translateX: 75,
                    translateZ: 0
                }]],
                reset: {
                    translateX: 0
                }
            },
            "transition.perspectiveUpIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    transformPerspective: [800, 800],
                    transformOriginX: [0, 0],
                    transformOriginY: ["100%", "100%"],
                    rotateX: [0, -180]
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveUpOut": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [0, 1],
                    transformPerspective: [800, 800],
                    transformOriginX: [0, 0],
                    transformOriginY: ["100%", "100%"],
                    rotateX: -180
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateX: 0
                }
            },
            "transition.perspectiveDownIn": {
                defaultDuration: 800,
                calls: [[{
                    opacity: [1, 0],
                    transformPerspective: [800, 800],
                    transformOriginX: [0, 0],
                    transformOriginY: [0, 0],
                    rotateX: [0, 180]
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveDownOut": {
                defaultDuration: 850,
                calls: [[{
                    opacity: [0, 1],
                    transformPerspective: [800, 800],
                    transformOriginX: [0, 0],
                    transformOriginY: [0, 0],
                    rotateX: 180
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateX: 0
                }
            },
            "transition.perspectiveLeftIn": {
                defaultDuration: 950,
                calls: [[{
                    opacity: [1, 0],
                    transformPerspective: [2e3, 2e3],
                    transformOriginX: [0, 0],
                    transformOriginY: [0, 0],
                    rotateY: [0, -180]
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveLeftOut": {
                defaultDuration: 950,
                calls: [[{
                    opacity: [0, 1],
                    transformPerspective: [2e3, 2e3],
                    transformOriginX: [0, 0],
                    transformOriginY: [0, 0],
                    rotateY: -180
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateY: 0
                }
            },
            "transition.perspectiveRightIn": {
                defaultDuration: 950,
                calls: [[{
                    opacity: [1, 0],
                    transformPerspective: [2e3, 2e3],
                    transformOriginX: ["100%", "100%"],
                    transformOriginY: [0, 0],
                    rotateY: [0, 180]
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%"
                }
            },
            "transition.perspectiveRightOut": {
                defaultDuration: 950,
                calls: [[{
                    opacity: [0, 1],
                    transformPerspective: [2e3, 2e3],
                    transformOriginX: ["100%", "100%"],
                    transformOriginY: [0, 0],
                    rotateY: 180
                }]],
                reset: {
                    transformPerspective: 0,
                    transformOriginX: "50%",
                    transformOriginY: "50%",
                    rotateY: 0
                }
            }
        };
        for (var effectName in Velocity.RegisterEffect.packagedEffects) {
            Velocity.RegisterEffect(effectName, Velocity.RegisterEffect.packagedEffects[effectName])
        }
        Velocity.RunSequence = function(originalSequence) {
            var sequence = $.extend(true, [], originalSequence);
            if (sequence.length > 1) {
                $.each(sequence.reverse(), function(i, currentCall) {
                    var nextCall = sequence[i + 1];
                    if (nextCall) {
                        var currentCallOptions = currentCall.o || currentCall.options
                          , nextCallOptions = nextCall.o || nextCall.options;
                        var timing = currentCallOptions && currentCallOptions.sequenceQueue === false ? "begin" : "complete"
                          , callbackOriginal = nextCallOptions && nextCallOptions[timing]
                          , options = {};
                        options[timing] = function() {
                            var nextCallElements = nextCall.e || nextCall.elements;
                            var elements = nextCallElements.nodeType ? [nextCallElements] : nextCallElements;
                            callbackOriginal && callbackOriginal.call(elements, elements);
                            Velocity(currentCall)
                        }
                        ;
                        if (nextCall.o) {
                            nextCall.o = $.extend({}, nextCallOptions, options)
                        } else {
                            nextCall.options = $.extend({}, nextCallOptions, options)
                        }
                    }
                });
                sequence.reverse()
            }
            Velocity(sequence[0])
        }
    }(window.jQuery || window.Zepto || window, window, document)
});
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else if (typeof exports === "object") {
        module.exports = factory
    } else {
        factory(jQuery)
    }
}
)(function($) {
    var toFix = ["wheel", "mousewheel", "DOMMouseScroll", "MozMousePixelScroll"], toBind = "onwheel"in document || document.documentMode >= 9 ? ["wheel"] : ["mousewheel", "DomMouseScroll", "MozMousePixelScroll"], slice = Array.prototype.slice, nullLowestDeltaTimeout, lowestDelta;
    if ($.event.fixHooks) {
        for (var i = toFix.length; i; ) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks
        }
    }
    var special = $.event.special.mousewheel = {
        version: "3.1.12",
        setup: function() {
            if (this.addEventListener) {
                for (var i = toBind.length; i; ) {
                    this.addEventListener(toBind[--i], handler, false)
                }
            } else {
                this.onmousewheel = handler
            }
            $.data(this, "mousewheel-line-height", special.getLineHeight(this));
            $.data(this, "mousewheel-page-height", special.getPageHeight(this))
        },
        teardown: function() {
            if (this.removeEventListener) {
                for (var i = toBind.length; i; ) {
                    this.removeEventListener(toBind[--i], handler, false)
                }
            } else {
                this.onmousewheel = null
            }
            $.removeData(this, "mousewheel-line-height");
            $.removeData(this, "mousewheel-page-height")
        },
        getLineHeight: function(elem) {
            var $elem = $(elem)
              , $parent = $elem["offsetParent"in $.fn ? "offsetParent" : "parent"]();
            if (!$parent.length) {
                $parent = $("body")
            }
            return parseInt($parent.css("fontSize"), 10) || parseInt($elem.css("fontSize"), 10) || 16
        },
        getPageHeight: function(elem) {
            return $(elem).height()
        },
        settings: {
            adjustOldDeltas: true,
            normalizeOffset: true
        }
    };
    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel")
        },
        unmousewheel: function(fn) {
            return this.unbind("mousewheel", fn)
        }
    });
    function handler(event) {
        var orgEvent = event || window.event
          , args = slice.call(arguments, 1)
          , delta = 0
          , deltaX = 0
          , deltaY = 0
          , absDelta = 0
          , offsetX = 0
          , offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";
        if ("detail"in orgEvent) {
            deltaY = orgEvent.detail * -1
        }
        if ("wheelDelta"in orgEvent) {
            deltaY = orgEvent.wheelDelta
        }
        if ("wheelDeltaY"in orgEvent) {
            deltaY = orgEvent.wheelDeltaY
        }
        if ("wheelDeltaX"in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1
        }
        if ("axis"in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0
        }
        delta = deltaY === 0 ? deltaX : deltaY;
        if ("deltaY"in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY
        }
        if ("deltaX"in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1
            }
        }
        if (deltaY === 0 && deltaX === 0) {
            return
        }
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, "mousewheel-line-height");
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, "mousewheel-page-height");
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight
        }
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40
            }
        }
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40
        }
        delta = Math[delta >= 1 ? "floor" : "ceil"](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? "floor" : "ceil"](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? "floor" : "ceil"](deltaY / lowestDelta);
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top
        }
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        event.deltaMode = 0;
        args.unshift(event, delta, deltaX, deltaY);
        if (nullLowestDeltaTimeout) {
            clearTimeout(nullLowestDeltaTimeout)
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);
        return ($.event.dispatch || $.event.handle).apply(this, args)
    }
    function nullLowestDelta() {
        lowestDelta = null
    }
    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        return special.settings.adjustOldDeltas && orgEvent.type === "mousewheel" && absDelta % 120 === 0
    }
});
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory)
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = factory
    } else {
        factory(jQuery, window, document)
    }
}
)(function($) {
    (function(init) {
        var _rjs = typeof define === "function" && define.amd
          , _njs = typeof module !== "undefined" && module.exports
          , _dlp = "https:" == document.location.protocol ? "https:" : "http:"
          , _url = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
        if (!_rjs) {
            if (_njs) {
                require("jquery-mousewheel")($)
            } else {
                $.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src=" + _dlp + "//" + _url + "%3E%3C/script%3E"))
            }
        }
        init()
    }
    )(function() {
        var pluginNS = "mCustomScrollbar", pluginPfx = "mCS", defaultSelector = ".mCustomScrollbar", defaults = {
            setTop: 0,
            setLeft: 0,
            axis: "y",
            scrollbarPosition: "inside",
            scrollInertia: 950,
            autoDraggerLength: true,
            alwaysShowScrollbar: 0,
            snapOffset: 0,
            mouseWheel: {
                enable: true,
                scrollAmount: "auto",
                axis: "y",
                deltaFactor: "auto",
                disableOver: ["select", "option", "keygen", "datalist", "textarea"]
            },
            scrollButtons: {
                scrollType: "stepless",
                scrollAmount: "auto"
            },
            keyboard: {
                enable: true,
                scrollType: "stepless",
                scrollAmount: "auto"
            },
            contentTouchScroll: 25,
            documentTouchScroll: true,
            advanced: {
                autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
                updateOnContentResize: true,
                updateOnImageLoad: "auto",
                autoUpdateTimeout: 60
            },
            theme: "light",
            callbacks: {
                onTotalScrollOffset: 0,
                onTotalScrollBackOffset: 0,
                alwaysTriggerOffsets: true
            }
        }, totalInstances = 0, liveTimers = {}, oldIE = window.attachEvent && !window.addEventListener ? 1 : 0, touchActive = false, touchable, classes = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"], methods = {
            init: function(options) {
                var options = $.extend(true, {}, defaults, options)
                  , selector = _selector.call(this);
                if (options.live) {
                    var liveSelector = options.liveSelector || this.selector || defaultSelector
                      , $liveSelector = $(liveSelector);
                    if (options.live === "off") {
                        removeLiveTimers(liveSelector);
                        return
                    }
                    liveTimers[liveSelector] = setTimeout(function() {
                        $liveSelector.mCustomScrollbar(options);
                        if (options.live === "once" && $liveSelector.length) {
                            removeLiveTimers(liveSelector)
                        }
                    }, 500)
                } else {
                    removeLiveTimers(liveSelector)
                }
                options.setWidth = options.set_width ? options.set_width : options.setWidth;
                options.setHeight = options.set_height ? options.set_height : options.setHeight;
                options.axis = options.horizontalScroll ? "x" : _findAxis(options.axis);
                options.scrollInertia = options.scrollInertia > 0 && options.scrollInertia < 17 ? 17 : options.scrollInertia;
                if (typeof options.mouseWheel !== "object" && options.mouseWheel == true) {
                    options.mouseWheel = {
                        enable: true,
                        scrollAmount: "auto",
                        axis: "y",
                        preventDefault: false,
                        deltaFactor: "auto",
                        normalizeDelta: false,
                        invert: false
                    }
                }
                options.mouseWheel.scrollAmount = !options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
                options.mouseWheel.normalizeDelta = !options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
                options.scrollButtons.scrollType = _findScrollButtonsType(options.scrollButtons.scrollType);
                _theme(options);
                return $(selector).each(function() {
                    var $this = $(this);
                    if (!$this.data(pluginPfx)) {
                        $this.data(pluginPfx, {
                            idx: ++totalInstances,
                            opt: options,
                            scrollRatio: {
                                y: null,
                                x: null
                            },
                            overflowed: null,
                            contentReset: {
                                y: null,
                                x: null
                            },
                            bindEvents: false,
                            tweenRunning: false,
                            sequential: {},
                            langDir: $this.css("direction"),
                            cbOffsets: null,
                            trigger: null,
                            poll: {
                                size: {
                                    o: 0,
                                    n: 0
                                },
                                img: {
                                    o: 0,
                                    n: 0
                                },
                                change: {
                                    o: 0,
                                    n: 0
                                }
                            }
                        });
                        var d = $this.data(pluginPfx)
                          , o = d.opt
                          , htmlDataAxis = $this.data("mcs-axis")
                          , htmlDataSbPos = $this.data("mcs-scrollbar-position")
                          , htmlDataTheme = $this.data("mcs-theme");
                        if (htmlDataAxis) {
                            o.axis = htmlDataAxis
                        }
                        if (htmlDataSbPos) {
                            o.scrollbarPosition = htmlDataSbPos
                        }
                        if (htmlDataTheme) {
                            o.theme = htmlDataTheme;
                            _theme(o)
                        }
                        _pluginMarkup.call(this);
                        if (d && o.callbacks.onCreate && typeof o.callbacks.onCreate === "function") {
                            o.callbacks.onCreate.call(this)
                        }
                        $("#mCSB_" + d.idx + "_container img:not(." + classes[2] + ")").addClass(classes[2]);
                        methods.update.call(null, $this)
                    }
                })
            },
            update: function(el, cb) {
                var selector = el || _selector.call(this);
                return $(selector).each(function() {
                    var $this = $(this);
                    if ($this.data(pluginPfx)) {
                        var d = $this.data(pluginPfx)
                          , o = d.opt
                          , mCSB_container = $("#mCSB_" + d.idx + "_container")
                          , mCustomScrollBox = $("#mCSB_" + d.idx)
                          , mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
                        if (!mCSB_container.length) {
                            return
                        }
                        if (d.tweenRunning) {
                            _stop($this)
                        }
                        if (cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate === "function") {
                            o.callbacks.onBeforeUpdate.call(this)
                        }
                        if ($this.hasClass(classes[3])) {
                            $this.removeClass(classes[3])
                        }
                        if ($this.hasClass(classes[4])) {
                            $this.removeClass(classes[4])
                        }
                        mCustomScrollBox.css("max-height", "none");
                        if (mCustomScrollBox.height() !== $this.height()) {
                            mCustomScrollBox.css("max-height", $this.height())
                        }
                        _expandContentHorizontally.call(this);
                        if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
                            mCSB_container.css("width", _contentWidth(mCSB_container))
                        }
                        d.overflowed = _overflowed.call(this);
                        _scrollbarVisibility.call(this);
                        if (o.autoDraggerLength) {
                            _setDraggerLength.call(this)
                        }
                        _scrollRatio.call(this);
                        _bindEvents.call(this);
                        var to = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)];
                        if (o.axis !== "x") {
                            if (!d.overflowed[0]) {
                                _resetContentPosition.call(this);
                                if (o.axis === "y") {
                                    _unbindEvents.call(this)
                                } else if (o.axis === "yx" && d.overflowed[1]) {
                                    _scrollTo($this, to[1].toString(), {
                                        dir: "x",
                                        dur: 0,
                                        overwrite: "none"
                                    })
                                }
                            } else if (mCSB_dragger[0].height() > mCSB_dragger[0].parent().height()) {
                                _resetContentPosition.call(this)
                            } else {
                                _scrollTo($this, to[0].toString(), {
                                    dir: "y",
                                    dur: 0,
                                    overwrite: "none"
                                });
                                d.contentReset.y = null
                            }
                        }
                        if (o.axis !== "y") {
                            if (!d.overflowed[1]) {
                                _resetContentPosition.call(this);
                                if (o.axis === "x") {
                                    _unbindEvents.call(this)
                                } else if (o.axis === "yx" && d.overflowed[0]) {
                                    _scrollTo($this, to[0].toString(), {
                                        dir: "y",
                                        dur: 0,
                                        overwrite: "none"
                                    })
                                }
                            } else if (mCSB_dragger[1].width() > mCSB_dragger[1].parent().width()) {
                                _resetContentPosition.call(this)
                            } else {
                                _scrollTo($this, to[1].toString(), {
                                    dir: "x",
                                    dur: 0,
                                    overwrite: "none"
                                });
                                d.contentReset.x = null
                            }
                        }
                        if (cb && d) {
                            if (cb === 2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad === "function") {
                                o.callbacks.onImageLoad.call(this)
                            } else if (cb === 3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange === "function") {
                                o.callbacks.onSelectorChange.call(this)
                            } else if (o.callbacks.onUpdate && typeof o.callbacks.onUpdate === "function") {
                                o.callbacks.onUpdate.call(this)
                            }
                        }
                        _autoUpdate.call(this)
                    }
                })
            },
            scrollTo: function(val, options) {
                if (typeof val == "undefined" || val == null) {
                    return
                }
                var selector = _selector.call(this);
                return $(selector).each(function() {
                    var $this = $(this);
                    if ($this.data(pluginPfx)) {
                        var d = $this.data(pluginPfx)
                          , o = d.opt
                          , methodDefaults = {
                            trigger: "external",
                            scrollInertia: o.scrollInertia,
                            scrollEasing: "mcsEaseInOut",
                            moveDragger: false,
                            timeout: 60,
                            callbacks: true,
                            onStart: true,
                            onUpdate: true,
                            onComplete: true
                        }
                          , methodOptions = $.extend(true, {}, methodDefaults, options)
                          , to = _arr.call(this, val)
                          , dur = methodOptions.scrollInertia > 0 && methodOptions.scrollInertia < 17 ? 17 : methodOptions.scrollInertia;
                        to[0] = _to.call(this, to[0], "y");
                        to[1] = _to.call(this, to[1], "x");
                        if (methodOptions.moveDragger) {
                            to[0] *= d.scrollRatio.y;
                            to[1] *= d.scrollRatio.x
                        }
                        methodOptions.dur = _isTabHidden() ? 0 : dur;
                        setTimeout(function() {
                            if (to[0] !== null && typeof to[0] !== "undefined" && o.axis !== "x" && d.overflowed[0]) {
                                methodOptions.dir = "y";
                                methodOptions.overwrite = "all";
                                _scrollTo($this, to[0].toString(), methodOptions)
                            }
                            if (to[1] !== null && typeof to[1] !== "undefined" && o.axis !== "y" && d.overflowed[1]) {
                                methodOptions.dir = "x";
                                methodOptions.overwrite = "none";
                                _scrollTo($this, to[1].toString(), methodOptions)
                            }
                        }, methodOptions.timeout)
                    }
                })
            },
            stop: function() {
                var selector = _selector.call(this);
                return $(selector).each(function() {
                    var $this = $(this);
                    if ($this.data(pluginPfx)) {
                        _stop($this)
                    }
                })
            },
            disable: function(r) {
                var selector = _selector.call(this);
                return $(selector).each(function() {
                    var $this = $(this);
                    if ($this.data(pluginPfx)) {
                        var d = $this.data(pluginPfx);
                        _autoUpdate.call(this, "remove");
                        _unbindEvents.call(this);
                        if (r) {
                            _resetContentPosition.call(this)
                        }
                        _scrollbarVisibility.call(this, true);
                        $this.addClass(classes[3])
                    }
                })
            },
            destroy: function() {
                var selector = _selector.call(this);
                return $(selector).each(function() {
                    var $this = $(this);
                    if ($this.data(pluginPfx)) {
                        var d = $this.data(pluginPfx)
                          , o = d.opt
                          , mCustomScrollBox = $("#mCSB_" + d.idx)
                          , mCSB_container = $("#mCSB_" + d.idx + "_container")
                          , scrollbar = $(".mCSB_" + d.idx + "_scrollbar");
                        if (o.live) {
                            removeLiveTimers(o.liveSelector || $(selector).selector)
                        }
                        _autoUpdate.call(this, "remove");
                        _unbindEvents.call(this);
                        _resetContentPosition.call(this);
                        $this.removeData(pluginPfx);
                        _delete(this, "mcs");
                        scrollbar.remove();
                        mCSB_container.find("img." + classes[2]).removeClass(classes[2]);
                        mCustomScrollBox.replaceWith(mCSB_container.contents());
                        $this.removeClass(pluginNS + " _" + pluginPfx + "_" + d.idx + " " + classes[6] + " " + classes[7] + " " + classes[5] + " " + classes[3]).addClass(classes[4])
                    }
                })
            }
        }, _selector = function() {
            return typeof $(this) !== "object" || $(this).length < 1 ? defaultSelector : this
        }, _theme = function(obj) {
            var fixedSizeScrollbarThemes = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"]
              , nonExpandedScrollbarThemes = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"]
              , disabledScrollButtonsThemes = ["minimal", "minimal-dark"]
              , enabledAutoHideScrollbarThemes = ["minimal", "minimal-dark"]
              , scrollbarPositionOutsideThemes = ["minimal", "minimal-dark"];
            obj.autoDraggerLength = $.inArray(obj.theme, fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
            obj.autoExpandScrollbar = $.inArray(obj.theme, nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
            obj.scrollButtons.enable = $.inArray(obj.theme, disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
            obj.autoHideScrollbar = $.inArray(obj.theme, enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
            obj.scrollbarPosition = $.inArray(obj.theme, scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition
        }, removeLiveTimers = function(selector) {
            if (liveTimers[selector]) {
                clearTimeout(liveTimers[selector]);
                _delete(liveTimers, selector)
            }
        }, _findAxis = function(val) {
            return val === "yx" || val === "xy" || val === "auto" ? "yx" : val === "x" || val === "horizontal" ? "x" : "y"
        }, _findScrollButtonsType = function(val) {
            return val === "stepped" || val === "pixels" || val === "step" || val === "click" ? "stepped" : "stepless"
        }, _pluginMarkup = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , expandClass = o.autoExpandScrollbar ? " " + classes[1] + "_expand" : ""
              , scrollbar = ["<div id='mCSB_" + d.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_vertical" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + d.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_horizontal" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"]
              , wrapperClass = o.axis === "yx" ? "mCSB_vertical_horizontal" : o.axis === "x" ? "mCSB_horizontal" : "mCSB_vertical"
              , scrollbars = o.axis === "yx" ? scrollbar[0] + scrollbar[1] : o.axis === "x" ? scrollbar[1] : scrollbar[0]
              , contentWrapper = o.axis === "yx" ? "<div id='mCSB_" + d.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : ""
              , autoHideClass = o.autoHideScrollbar ? " " + classes[6] : ""
              , scrollbarDirClass = o.axis !== "x" && d.langDir === "rtl" ? " " + classes[7] : "";
            if (o.setWidth) {
                $this.css("width", o.setWidth)
            }
            if (o.setHeight) {
                $this.css("height", o.setHeight)
            }
            o.setLeft = o.axis !== "y" && d.langDir === "rtl" ? "989999px" : o.setLeft;
            $this.addClass(pluginNS + " _" + pluginPfx + "_" + d.idx + autoHideClass + scrollbarDirClass).wrapInner("<div id='mCSB_" + d.idx + "' class='mCustomScrollBox mCS-" + o.theme + " " + wrapperClass + "'><div id='mCSB_" + d.idx + "_container' class='mCSB_container' style='position:relative; top:" + o.setTop + "; left:" + o.setLeft + ";' dir='" + d.langDir + "' /></div>");
            var mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container");
            if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
                mCSB_container.css("width", _contentWidth(mCSB_container))
            }
            if (o.scrollbarPosition === "outside") {
                if ($this.css("position") === "static") {
                    $this.css("position", "relative")
                }
                $this.css("overflow", "visible");
                mCustomScrollBox.addClass("mCSB_outside").after(scrollbars)
            } else {
                mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
                mCSB_container.wrap(contentWrapper)
            }
            _scrollButtons.call(this);
            var mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
            mCSB_dragger[0].css("min-height", mCSB_dragger[0].height());
            mCSB_dragger[1].css("min-width", mCSB_dragger[1].width())
        }, _contentWidth = function(el) {
            var val = [el[0].scrollWidth, Math.max.apply(Math, el.children().map(function() {
                return $(this).outerWidth(true)
            }).get())]
              , w = el.parent().width();
            return val[0] > w ? val[0] : val[1] > w ? val[1] : "100%"
        }, _expandContentHorizontally = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , mCSB_container = $("#mCSB_" + d.idx + "_container");
            if (o.advanced.autoExpandHorizontalScroll && o.axis !== "y") {
                mCSB_container.css({
                    width: "auto",
                    "min-width": 0,
                    "overflow-x": "scroll"
                });
                var w = Math.ceil(mCSB_container[0].scrollWidth);
                if (o.advanced.autoExpandHorizontalScroll === 3 || o.advanced.autoExpandHorizontalScroll !== 2 && w > mCSB_container.parent().width()) {
                    mCSB_container.css({
                        width: w,
                        "min-width": "100%",
                        "overflow-x": "inherit"
                    })
                } else {
                    mCSB_container.css({
                        "overflow-x": "inherit",
                        position: "absolute"
                    }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
                        width: Math.ceil(mCSB_container[0].getBoundingClientRect().right + .4) - Math.floor(mCSB_container[0].getBoundingClientRect().left),
                        "min-width": "100%",
                        position: "relative"
                    }).unwrap()
                }
            }
        }, _scrollButtons = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , mCSB_scrollTools = $(".mCSB_" + d.idx + "_scrollbar:first")
              , tabindex = !_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='" + o.scrollButtons.tabindex + "'"
              , btnHTML = ["<a href='#' class='" + classes[13] + "' " + tabindex + " />", "<a href='#' class='" + classes[14] + "' " + tabindex + " />", "<a href='#' class='" + classes[15] + "' " + tabindex + " />", "<a href='#' class='" + classes[16] + "' " + tabindex + " />"]
              , btn = [o.axis === "x" ? btnHTML[2] : btnHTML[0], o.axis === "x" ? btnHTML[3] : btnHTML[1], btnHTML[2], btnHTML[3]];
            if (o.scrollButtons.enable) {
                mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3])
            }
        }, _setDraggerLength = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")]
              , ratio = [mCustomScrollBox.height() / mCSB_container.outerHeight(false), mCustomScrollBox.width() / mCSB_container.outerWidth(false)]
              , l = [parseInt(mCSB_dragger[0].css("min-height")), Math.round(ratio[0] * mCSB_dragger[0].parent().height()), parseInt(mCSB_dragger[1].css("min-width")), Math.round(ratio[1] * mCSB_dragger[1].parent().width())]
              , h = oldIE && l[1] < l[0] ? l[0] : l[1]
              , w = oldIE && l[3] < l[2] ? l[2] : l[3];
            mCSB_dragger[0].css({
                height: h,
                "max-height": mCSB_dragger[0].parent().height() - 10
            }).find(".mCSB_dragger_bar").css({
                "line-height": l[0] + "px"
            });
            mCSB_dragger[1].css({
                width: w,
                "max-width": mCSB_dragger[1].parent().width() - 10
            })
        }, _scrollRatio = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")]
              , scrollAmount = [mCSB_container.outerHeight(false) - mCustomScrollBox.height(), mCSB_container.outerWidth(false) - mCustomScrollBox.width()]
              , ratio = [scrollAmount[0] / (mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()), scrollAmount[1] / (mCSB_dragger[1].parent().width() - mCSB_dragger[1].width())];
            d.scrollRatio = {
                y: ratio[0],
                x: ratio[1]
            }
        }, _onDragClasses = function(el, action, xpnd) {
            var expandClass = xpnd ? classes[0] + "_expanded" : ""
              , scrollbar = el.closest(".mCSB_scrollTools");
            if (action === "active") {
                el.toggleClass(classes[0] + " " + expandClass);
                scrollbar.toggleClass(classes[1]);
                el[0]._draggable = el[0]._draggable ? 0 : 1
            } else {
                if (!el[0]._draggable) {
                    if (action === "hide") {
                        el.removeClass(classes[0]);
                        scrollbar.removeClass(classes[1])
                    } else {
                        el.addClass(classes[0]);
                        scrollbar.addClass(classes[1])
                    }
                }
            }
        }, _overflowed = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , contentHeight = d.overflowed == null ? mCSB_container.height() : mCSB_container.outerHeight(false)
              , contentWidth = d.overflowed == null ? mCSB_container.width() : mCSB_container.outerWidth(false)
              , h = mCSB_container[0].scrollHeight
              , w = mCSB_container[0].scrollWidth;
            if (h > contentHeight) {
                contentHeight = h
            }
            if (w > contentWidth) {
                contentWidth = w
            }
            return [contentHeight > mCustomScrollBox.height(), contentWidth > mCustomScrollBox.width()]
        }, _resetContentPosition = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
            _stop($this);
            if (o.axis !== "x" && !d.overflowed[0] || o.axis === "y" && d.overflowed[0]) {
                mCSB_dragger[0].add(mCSB_container).css("top", 0);
                _scrollTo($this, "_resetY")
            }
            if (o.axis !== "y" && !d.overflowed[1] || o.axis === "x" && d.overflowed[1]) {
                var cx = dx = 0;
                if (d.langDir === "rtl") {
                    cx = mCustomScrollBox.width() - mCSB_container.outerWidth(false);
                    dx = Math.abs(cx / d.scrollRatio.x)
                }
                mCSB_container.css("left", cx);
                mCSB_dragger[1].css("left", dx);
                _scrollTo($this, "_resetX")
            }
        }, _bindEvents = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt;
            if (!d.bindEvents) {
                _draggable.call(this);
                if (o.contentTouchScroll) {
                    _contentDraggable.call(this)
                }
                _selectable.call(this);
                if (o.mouseWheel.enable) {
                    function _mwt() {
                        mousewheelTimeout = setTimeout(function() {
                            if (!$.event.special.mousewheel) {
                                _mwt()
                            } else {
                                clearTimeout(mousewheelTimeout);
                                _mousewheel.call($this[0])
                            }
                        }, 100)
                    }
                    var mousewheelTimeout;
                    _mwt()
                }
                _draggerRail.call(this);
                _wrapperScroll.call(this);
                if (o.advanced.autoScrollOnFocus) {
                    _focus.call(this)
                }
                if (o.scrollButtons.enable) {
                    _buttons.call(this)
                }
                if (o.keyboard.enable) {
                    _keyboard.call(this)
                }
                d.bindEvents = true
            }
        }, _unbindEvents = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , namespace = pluginPfx + "_" + d.idx
              , sb = ".mCSB_" + d.idx + "_scrollbar"
              , sel = $("#mCSB_" + d.idx + ",#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper," + sb + " ." + classes[12] + ",#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal," + sb + ">a")
              , mCSB_container = $("#mCSB_" + d.idx + "_container");
            if (o.advanced.releaseDraggableSelectors) {
                sel.add($(o.advanced.releaseDraggableSelectors))
            }
            if (o.advanced.extraDraggableSelectors) {
                sel.add($(o.advanced.extraDraggableSelectors))
            }
            if (d.bindEvents) {
                $(document).add($(!_canAccessIFrame() || top.document)).unbind("." + namespace);
                sel.each(function() {
                    $(this).unbind("." + namespace)
                });
                clearTimeout($this[0]._focusTimeout);
                _delete($this[0], "_focusTimeout");
                clearTimeout(d.sequential.step);
                _delete(d.sequential, "step");
                clearTimeout(mCSB_container[0].onCompleteTimeout);
                _delete(mCSB_container[0], "onCompleteTimeout");
                d.bindEvents = false
            }
        }, _scrollbarVisibility = function(disabled) {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , contentWrapper = $("#mCSB_" + d.idx + "_container_wrapper")
              , content = contentWrapper.length ? contentWrapper : $("#mCSB_" + d.idx + "_container")
              , scrollbar = [$("#mCSB_" + d.idx + "_scrollbar_vertical"), $("#mCSB_" + d.idx + "_scrollbar_horizontal")]
              , mCSB_dragger = [scrollbar[0].find(".mCSB_dragger"), scrollbar[1].find(".mCSB_dragger")];
            if (o.axis !== "x") {
                if (d.overflowed[0] && !disabled) {
                    scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display", "block");
                    content.removeClass(classes[8] + " " + classes[10])
                } else {
                    if (o.alwaysShowScrollbar) {
                        if (o.alwaysShowScrollbar !== 2) {
                            mCSB_dragger[0].css("display", "none")
                        }
                        content.removeClass(classes[10])
                    } else {
                        scrollbar[0].css("display", "none");
                        content.addClass(classes[10])
                    }
                    content.addClass(classes[8])
                }
            }
            if (o.axis !== "y") {
                if (d.overflowed[1] && !disabled) {
                    scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display", "block");
                    content.removeClass(classes[9] + " " + classes[11])
                } else {
                    if (o.alwaysShowScrollbar) {
                        if (o.alwaysShowScrollbar !== 2) {
                            mCSB_dragger[1].css("display", "none")
                        }
                        content.removeClass(classes[11])
                    } else {
                        scrollbar[1].css("display", "none");
                        content.addClass(classes[11])
                    }
                    content.addClass(classes[9])
                }
            }
            if (!d.overflowed[0] && !d.overflowed[1]) {
                $this.addClass(classes[5])
            } else {
                $this.removeClass(classes[5])
            }
        }, _coordinates = function(e) {
            var t = e.type
              , o = e.target.ownerDocument !== document && frameElement !== null ? [$(frameElement).offset().top, $(frameElement).offset().left] : null
              , io = _canAccessIFrame() && e.target.ownerDocument !== top.document && frameElement !== null ? [$(e.view.frameElement).offset().top, $(e.view.frameElement).offset().left] : [0, 0];
            switch (t) {
            case "pointerdown":
            case "MSPointerDown":
            case "pointermove":
            case "MSPointerMove":
            case "pointerup":
            case "MSPointerUp":
                return o ? [e.originalEvent.pageY - o[0] + io[0], e.originalEvent.pageX - o[1] + io[1], false] : [e.originalEvent.pageY, e.originalEvent.pageX, false];
                break;
            case "touchstart":
            case "touchmove":
            case "touchend":
                var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]
                  , touches = e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
                return e.target.ownerDocument !== document ? [touch.screenY, touch.screenX, touches > 1] : [touch.pageY, touch.pageX, touches > 1];
                break;
            default:
                return o ? [e.pageY - o[0] + io[0], e.pageX - o[1] + io[1], false] : [e.pageY, e.pageX, false]
            }
        }, _draggable = function() {
            var $this = $(this), d = $this.data(pluginPfx), o = d.opt, namespace = pluginPfx + "_" + d.idx, draggerId = ["mCSB_" + d.idx + "_dragger_vertical", "mCSB_" + d.idx + "_dragger_horizontal"], mCSB_container = $("#mCSB_" + d.idx + "_container"), mCSB_dragger = $("#" + draggerId[0] + ",#" + draggerId[1]), draggable, dragY, dragX, rds = o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger, eds = o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
            mCSB_dragger.bind("contextmenu." + namespace, function(e) {
                e.preventDefault()
            }).bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                if (!_mouseBtnLeft(e)) {
                    return
                }
                touchActive = true;
                if (oldIE) {
                    document.onselectstart = function() {
                        return false
                    }
                }
                _iframe.call(mCSB_container, false);
                _stop($this);
                draggable = $(this);
                var offset = draggable.offset()
                  , y = _coordinates(e)[0] - offset.top
                  , x = _coordinates(e)[1] - offset.left
                  , h = draggable.height() + offset.top
                  , w = draggable.width() + offset.left;
                if (y < h && y > 0 && x < w && x > 0) {
                    dragY = y;
                    dragX = x
                }
                _onDragClasses(draggable, "active", o.autoExpandScrollbar)
            }).bind("touchmove." + namespace, function(e) {
                e.stopImmediatePropagation();
                e.preventDefault();
                var offset = draggable.offset()
                  , y = _coordinates(e)[0] - offset.top
                  , x = _coordinates(e)[1] - offset.left;
                _drag(dragY, dragX, y, x)
            });
            $(document).add(eds).bind("mousemove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, function(e) {
                if (draggable) {
                    var offset = draggable.offset()
                      , y = _coordinates(e)[0] - offset.top
                      , x = _coordinates(e)[1] - offset.left;
                    if (dragY === y && dragX === x) {
                        return
                    }
                    _drag(dragY, dragX, y, x)
                }
            }).add(rds).bind("mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function(e) {
                if (draggable) {
                    _onDragClasses(draggable, "active", o.autoExpandScrollbar);
                    draggable = null
                }
                touchActive = false;
                if (oldIE) {
                    document.onselectstart = null
                }
                _iframe.call(mCSB_container, true)
            });
            function _drag(dragY, dragX, y, x) {
                mCSB_container[0].idleTimer = o.scrollInertia < 233 ? 250 : 0;
                if (draggable.attr("id") === draggerId[1]) {
                    var dir = "x"
                      , to = (draggable[0].offsetLeft - dragX + x) * d.scrollRatio.x
                } else {
                    var dir = "y"
                      , to = (draggable[0].offsetTop - dragY + y) * d.scrollRatio.y
                }
                _scrollTo($this, to.toString(), {
                    dir: dir,
                    drag: true
                })
            }
        }, _contentDraggable = function() {
            var $this = $(this), d = $this.data(pluginPfx), o = d.opt, namespace = pluginPfx + "_" + d.idx, mCustomScrollBox = $("#mCSB_" + d.idx), mCSB_container = $("#mCSB_" + d.idx + "_container"), mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")], draggable, dragY, dragX, touchStartY, touchStartX, touchMoveY = [], touchMoveX = [], startTime, runningTime, endTime, distance, speed, amount, durA = 0, durB, overwrite = o.axis === "yx" ? "none" : "all", touchIntent = [], touchDrag, docDrag, iframe = mCSB_container.find("iframe"), events = ["touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, "touchmove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, "touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace], touchAction = document.body.style.touchAction !== undefined && document.body.style.touchAction !== "";
            mCSB_container.bind(events[0], function(e) {
                _onTouchstart(e)
            }).bind(events[1], function(e) {
                _onTouchmove(e)
            });
            mCustomScrollBox.bind(events[0], function(e) {
                _onTouchstart2(e)
            }).bind(events[2], function(e) {
                _onTouchend(e)
            });
            if (iframe.length) {
                iframe.each(function() {
                    $(this).bind("load", function() {
                        if (_canAccessIFrame(this)) {
                            $(this.contentDocument || this.contentWindow.document).bind(events[0], function(e) {
                                _onTouchstart(e);
                                _onTouchstart2(e)
                            }).bind(events[1], function(e) {
                                _onTouchmove(e)
                            }).bind(events[2], function(e) {
                                _onTouchend(e)
                            })
                        }
                    })
                })
            }
            function _onTouchstart(e) {
                if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                    touchable = 0;
                    return
                }
                touchable = 1;
                touchDrag = 0;
                docDrag = 0;
                draggable = 1;
                $this.removeClass("mCS_touch_action");
                var offset = mCSB_container.offset();
                dragY = _coordinates(e)[0] - offset.top;
                dragX = _coordinates(e)[1] - offset.left;
                touchIntent = [_coordinates(e)[0], _coordinates(e)[1]]
            }
            function _onTouchmove(e) {
                if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                    return
                }
                if (!o.documentTouchScroll) {
                    e.preventDefault()
                }
                e.stopImmediatePropagation();
                if (docDrag && !touchDrag) {
                    return
                }
                if (draggable) {
                    runningTime = _getTime();
                    var offset = mCustomScrollBox.offset()
                      , y = _coordinates(e)[0] - offset.top
                      , x = _coordinates(e)[1] - offset.left
                      , easing = "mcsLinearOut";
                    touchMoveY.push(y);
                    touchMoveX.push(x);
                    touchIntent[2] = Math.abs(_coordinates(e)[0] - touchIntent[0]);
                    touchIntent[3] = Math.abs(_coordinates(e)[1] - touchIntent[1]);
                    if (d.overflowed[0]) {
                        var limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()
                          , prevent = dragY - y > 0 && y - dragY > -(limit * d.scrollRatio.y) && (touchIntent[3] * 2 < touchIntent[2] || o.axis === "yx")
                    }
                    if (d.overflowed[1]) {
                        var limitX = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width()
                          , preventX = dragX - x > 0 && x - dragX > -(limitX * d.scrollRatio.x) && (touchIntent[2] * 2 < touchIntent[3] || o.axis === "yx")
                    }
                    if (prevent || preventX) {
                        if (!touchAction) {
                            e.preventDefault()
                        }
                        touchDrag = 1
                    } else {
                        docDrag = 1;
                        $this.addClass("mCS_touch_action")
                    }
                    if (touchAction) {
                        e.preventDefault()
                    }
                    amount = o.axis === "yx" ? [dragY - y, dragX - x] : o.axis === "x" ? [null, dragX - x] : [dragY - y, null];
                    mCSB_container[0].idleTimer = 250;
                    if (d.overflowed[0]) {
                        _drag(amount[0], durA, easing, "y", "all", true)
                    }
                    if (d.overflowed[1]) {
                        _drag(amount[1], durA, easing, "x", overwrite, true)
                    }
                }
            }
            function _onTouchstart2(e) {
                if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                    touchable = 0;
                    return
                }
                touchable = 1;
                e.stopImmediatePropagation();
                _stop($this);
                startTime = _getTime();
                var offset = mCustomScrollBox.offset();
                touchStartY = _coordinates(e)[0] - offset.top;
                touchStartX = _coordinates(e)[1] - offset.left;
                touchMoveY = [];
                touchMoveX = []
            }
            function _onTouchend(e) {
                if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                    return
                }
                draggable = 0;
                e.stopImmediatePropagation();
                touchDrag = 0;
                docDrag = 0;
                endTime = _getTime();
                var offset = mCustomScrollBox.offset()
                  , y = _coordinates(e)[0] - offset.top
                  , x = _coordinates(e)[1] - offset.left;
                if (endTime - runningTime > 30) {
                    return
                }
                speed = 1e3 / (endTime - startTime);
                var easing = "mcsEaseOut"
                  , slow = speed < 2.5
                  , diff = slow ? [touchMoveY[touchMoveY.length - 2], touchMoveX[touchMoveX.length - 2]] : [0, 0];
                distance = slow ? [y - diff[0], x - diff[1]] : [y - touchStartY, x - touchStartX];
                var absDistance = [Math.abs(distance[0]), Math.abs(distance[1])];
                speed = slow ? [Math.abs(distance[0] / 4), Math.abs(distance[1] / 4)] : [speed, speed];
                var a = [Math.abs(mCSB_container[0].offsetTop) - distance[0] * _m(absDistance[0] / speed[0], speed[0]), Math.abs(mCSB_container[0].offsetLeft) - distance[1] * _m(absDistance[1] / speed[1], speed[1])];
                amount = o.axis === "yx" ? [a[0], a[1]] : o.axis === "x" ? [null, a[1]] : [a[0], null];
                durB = [absDistance[0] * 4 + o.scrollInertia, absDistance[1] * 4 + o.scrollInertia];
                var md = parseInt(o.contentTouchScroll) || 0;
                amount[0] = absDistance[0] > md ? amount[0] : 0;
                amount[1] = absDistance[1] > md ? amount[1] : 0;
                if (d.overflowed[0]) {
                    _drag(amount[0], durB[0], easing, "y", overwrite, false)
                }
                if (d.overflowed[1]) {
                    _drag(amount[1], durB[1], easing, "x", overwrite, false)
                }
            }
            function _m(ds, s) {
                var r = [s * 1.5, s * 2, s / 1.5, s / 2];
                if (ds > 90) {
                    return s > 4 ? r[0] : r[3]
                } else if (ds > 60) {
                    return s > 3 ? r[3] : r[2]
                } else if (ds > 30) {
                    return s > 8 ? r[1] : s > 6 ? r[0] : s > 4 ? s : r[2]
                } else {
                    return s > 8 ? s : r[3]
                }
            }
            function _drag(amount, dur, easing, dir, overwrite, drag) {
                if (!amount) {
                    return
                }
                _scrollTo($this, amount.toString(), {
                    dur: dur,
                    scrollEasing: easing,
                    dir: dir,
                    overwrite: overwrite,
                    drag: drag
                })
            }
        }, _selectable = function() {
            var $this = $(this), d = $this.data(pluginPfx), o = d.opt, seq = d.sequential, namespace = pluginPfx + "_" + d.idx, mCSB_container = $("#mCSB_" + d.idx + "_container"), wrapper = mCSB_container.parent(), action;
            mCSB_container.bind("mousedown." + namespace, function(e) {
                if (touchable) {
                    return
                }
                if (!action) {
                    action = 1;
                    touchActive = true
                }
            }).add(document).bind("mousemove." + namespace, function(e) {
                if (!touchable && action && _sel()) {
                    var offset = mCSB_container.offset()
                      , y = _coordinates(e)[0] - offset.top + mCSB_container[0].offsetTop
                      , x = _coordinates(e)[1] - offset.left + mCSB_container[0].offsetLeft;
                    if (y > 0 && y < wrapper.height() && x > 0 && x < wrapper.width()) {
                        if (seq.step) {
                            _seq("off", null, "stepped")
                        }
                    } else {
                        if (o.axis !== "x" && d.overflowed[0]) {
                            if (y < 0) {
                                _seq("on", 38)
                            } else if (y > wrapper.height()) {
                                _seq("on", 40)
                            }
                        }
                        if (o.axis !== "y" && d.overflowed[1]) {
                            if (x < 0) {
                                _seq("on", 37)
                            } else if (x > wrapper.width()) {
                                _seq("on", 39)
                            }
                        }
                    }
                }
            }).bind("mouseup." + namespace + " dragend." + namespace, function(e) {
                if (touchable) {
                    return
                }
                if (action) {
                    action = 0;
                    _seq("off", null)
                }
                touchActive = false
            });
            function _sel() {
                return window.getSelection ? window.getSelection().toString() : document.selection && document.selection.type != "Control" ? document.selection.createRange().text : 0
            }
            function _seq(a, c, s) {
                seq.type = s && action ? "stepped" : "stepless";
                seq.scrollAmount = 10;
                _sequentialScroll($this, a, c, "mcsLinearOut", s ? 60 : null)
            }
        }, _mousewheel = function() {
            if (!$(this).data(pluginPfx)) {
                return
            }
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , namespace = pluginPfx + "_" + d.idx
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")]
              , iframe = $("#mCSB_" + d.idx + "_container").find("iframe");
            if (iframe.length) {
                iframe.each(function() {
                    $(this).bind("load", function() {
                        if (_canAccessIFrame(this)) {
                            $(this.contentDocument || this.contentWindow.document).bind("mousewheel." + namespace, function(e, delta) {
                                _onMousewheel(e, delta)
                            })
                        }
                    })
                })
            }
            mCustomScrollBox.bind("mousewheel." + namespace, function(e, delta) {
                _onMousewheel(e, delta)
            });
            function _onMousewheel(e, delta) {
                _stop($this);
                if (_disableMousewheel($this, e.target)) {
                    return
                }
                var deltaFactor = o.mouseWheel.deltaFactor !== "auto" ? parseInt(o.mouseWheel.deltaFactor) : oldIE && e.deltaFactor < 100 ? 100 : e.deltaFactor || 100
                  , dur = o.scrollInertia;
                if (o.axis === "x" || o.mouseWheel.axis === "x") {
                    var dir = "x"
                      , px = [Math.round(deltaFactor * d.scrollRatio.x), parseInt(o.mouseWheel.scrollAmount)]
                      , amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.width() ? mCustomScrollBox.width() * .9 : px[0]
                      , contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetLeft)
                      , draggerPos = mCSB_dragger[1][0].offsetLeft
                      , limit = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width()
                      , dlt = o.mouseWheel.axis === "y" ? e.deltaY || delta : e.deltaX
                } else {
                    var dir = "y"
                      , px = [Math.round(deltaFactor * d.scrollRatio.y), parseInt(o.mouseWheel.scrollAmount)]
                      , amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.height() ? mCustomScrollBox.height() * .9 : px[0]
                      , contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetTop)
                      , draggerPos = mCSB_dragger[0][0].offsetTop
                      , limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()
                      , dlt = e.deltaY || delta
                }
                if (dir === "y" && !d.overflowed[0] || dir === "x" && !d.overflowed[1]) {
                    return
                }
                if (o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice) {
                    dlt = -dlt
                }
                if (o.mouseWheel.normalizeDelta) {
                    dlt = dlt < 0 ? -1 : 1
                }
                if (dlt > 0 && draggerPos !== 0 || dlt < 0 && draggerPos !== limit || o.mouseWheel.preventDefault) {
                    e.stopImmediatePropagation();
                    e.preventDefault()
                }
                if (e.deltaFactor < 5 && !o.mouseWheel.normalizeDelta) {
                    amount = e.deltaFactor;
                    dur = 17
                }
                _scrollTo($this, (contentPos - dlt * amount).toString(), {
                    dir: dir,
                    dur: dur
                })
            }
        }, _canAccessIFrameCache = new Object, _canAccessIFrame = function(iframe) {
            var result = false
              , cacheKey = false
              , html = null;
            if (iframe === undefined) {
                cacheKey = "#empty"
            } else if ($(iframe).attr("id") !== undefined) {
                cacheKey = $(iframe).attr("id")
            }
            if (cacheKey !== false && _canAccessIFrameCache[cacheKey] !== undefined) {
                return _canAccessIFrameCache[cacheKey]
            }
            if (!iframe) {
                try {
                    var doc = top.document;
                    html = doc.body.innerHTML
                } catch (err) {}
                result = html !== null
            } else {
                try {
                    var doc = iframe.contentDocument || iframe.contentWindow.document;
                    html = doc.body.innerHTML
                } catch (err) {}
                result = html !== null
            }
            if (cacheKey !== false) {
                _canAccessIFrameCache[cacheKey] = result
            }
            return result
        }, _iframe = function(evt) {
            var el = this.find("iframe");
            if (!el.length) {
                return
            }
            var val = !evt ? "none" : "auto";
            el.css("pointer-events", val)
        }, _disableMousewheel = function(el, target) {
            var tag = target.nodeName.toLowerCase()
              , tags = el.data(pluginPfx).opt.mouseWheel.disableOver
              , focusTags = ["select", "textarea"];
            return $.inArray(tag, tags) > -1 && !($.inArray(tag, focusTags) > -1 && !$(target).is(":focus"))
        }, _draggerRail = function() {
            var $this = $(this), d = $this.data(pluginPfx), namespace = pluginPfx + "_" + d.idx, mCSB_container = $("#mCSB_" + d.idx + "_container"), wrapper = mCSB_container.parent(), mCSB_draggerContainer = $(".mCSB_" + d.idx + "_scrollbar ." + classes[12]), clickable;
            mCSB_draggerContainer.bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function(e) {
                touchActive = true;
                if (!$(e.target).hasClass("mCSB_dragger")) {
                    clickable = 1
                }
            }).bind("touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function(e) {
                touchActive = false
            }).bind("click." + namespace, function(e) {
                if (!clickable) {
                    return
                }
                clickable = 0;
                if ($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")) {
                    _stop($this);
                    var el = $(this)
                      , mCSB_dragger = el.find(".mCSB_dragger");
                    if (el.parent(".mCSB_scrollTools_horizontal").length > 0) {
                        if (!d.overflowed[1]) {
                            return
                        }
                        var dir = "x"
                          , clickDir = e.pageX > mCSB_dragger.offset().left ? -1 : 1
                          , to = Math.abs(mCSB_container[0].offsetLeft) - clickDir * (wrapper.width() * .9)
                    } else {
                        if (!d.overflowed[0]) {
                            return
                        }
                        var dir = "y"
                          , clickDir = e.pageY > mCSB_dragger.offset().top ? -1 : 1
                          , to = Math.abs(mCSB_container[0].offsetTop) - clickDir * (wrapper.height() * .9)
                    }
                    _scrollTo($this, to.toString(), {
                        dir: dir,
                        scrollEasing: "mcsEaseInOut"
                    })
                }
            })
        }, _focus = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , namespace = pluginPfx + "_" + d.idx
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , wrapper = mCSB_container.parent();
            mCSB_container.bind("focusin." + namespace, function(e) {
                var el = $(document.activeElement)
                  , nested = mCSB_container.find(".mCustomScrollBox").length
                  , dur = 0;
                if (!el.is(o.advanced.autoScrollOnFocus)) {
                    return
                }
                _stop($this);
                clearTimeout($this[0]._focusTimeout);
                $this[0]._focusTimer = nested ? (dur + 17) * nested : 0;
                $this[0]._focusTimeout = setTimeout(function() {
                    var to = [_childPos(el)[0], _childPos(el)[1]]
                      , contentPos = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft]
                      , isVisible = [contentPos[0] + to[0] >= 0 && contentPos[0] + to[0] < wrapper.height() - el.outerHeight(false), contentPos[1] + to[1] >= 0 && contentPos[0] + to[1] < wrapper.width() - el.outerWidth(false)]
                      , overwrite = o.axis === "yx" && !isVisible[0] && !isVisible[1] ? "none" : "all";
                    if (o.axis !== "x" && !isVisible[0]) {
                        _scrollTo($this, to[0].toString(), {
                            dir: "y",
                            scrollEasing: "mcsEaseInOut",
                            overwrite: overwrite,
                            dur: dur
                        })
                    }
                    if (o.axis !== "y" && !isVisible[1]) {
                        _scrollTo($this, to[1].toString(), {
                            dir: "x",
                            scrollEasing: "mcsEaseInOut",
                            overwrite: overwrite,
                            dur: dur
                        })
                    }
                }, $this[0]._focusTimer)
            })
        }, _wrapperScroll = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , namespace = pluginPfx + "_" + d.idx
              , wrapper = $("#mCSB_" + d.idx + "_container").parent();
            wrapper.bind("scroll." + namespace, function(e) {
                if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
                    $(".mCSB_" + d.idx + "_scrollbar").css("visibility", "hidden")
                }
            })
        }, _buttons = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , seq = d.sequential
              , namespace = pluginPfx + "_" + d.idx
              , sel = ".mCSB_" + d.idx + "_scrollbar"
              , btn = $(sel + ">a");
            btn.bind("contextmenu." + namespace, function(e) {
                e.preventDefault()
            }).bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace + " mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace + " mouseout." + namespace + " pointerout." + namespace + " MSPointerOut." + namespace + " click." + namespace, function(e) {
                e.preventDefault();
                if (!_mouseBtnLeft(e)) {
                    return
                }
                var btnClass = $(this).attr("class");
                seq.type = o.scrollButtons.scrollType;
                switch (e.type) {
                case "mousedown":
                case "touchstart":
                case "pointerdown":
                case "MSPointerDown":
                    if (seq.type === "stepped") {
                        return
                    }
                    touchActive = true;
                    d.tweenRunning = false;
                    _seq("on", btnClass);
                    break;
                case "mouseup":
                case "touchend":
                case "pointerup":
                case "MSPointerUp":
                case "mouseout":
                case "pointerout":
                case "MSPointerOut":
                    if (seq.type === "stepped") {
                        return
                    }
                    touchActive = false;
                    if (seq.dir) {
                        _seq("off", btnClass)
                    }
                    break;
                case "click":
                    if (seq.type !== "stepped" || d.tweenRunning) {
                        return
                    }
                    _seq("on", btnClass);
                    break
                }
                function _seq(a, c) {
                    seq.scrollAmount = o.scrollButtons.scrollAmount;
                    _sequentialScroll($this, a, c)
                }
            })
        }, _keyboard = function() {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , seq = d.sequential
              , namespace = pluginPfx + "_" + d.idx
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , wrapper = mCSB_container.parent()
              , editables = "input,textarea,select,datalist,keygen,[contenteditable='true']"
              , iframe = mCSB_container.find("iframe")
              , events = ["blur." + namespace + " keydown." + namespace + " keyup." + namespace];
            if (iframe.length) {
                iframe.each(function() {
                    $(this).bind("load", function() {
                        if (_canAccessIFrame(this)) {
                            $(this.contentDocument || this.contentWindow.document).bind(events[0], function(e) {
                                _onKeyboard(e)
                            })
                        }
                    })
                })
            }
            mCustomScrollBox.attr("tabindex", "0").bind(events[0], function(e) {
                _onKeyboard(e)
            });
            function _onKeyboard(e) {
                switch (e.type) {
                case "blur":
                    if (d.tweenRunning && seq.dir) {
                        _seq("off", null)
                    }
                    break;
                case "keydown":
                case "keyup":
                    var code = e.keyCode ? e.keyCode : e.which
                      , action = "on";
                    if (o.axis !== "x" && (code === 38 || code === 40) || o.axis !== "y" && (code === 37 || code === 39)) {
                        if ((code === 38 || code === 40) && !d.overflowed[0] || (code === 37 || code === 39) && !d.overflowed[1]) {
                            return
                        }
                        if (e.type === "keyup") {
                            action = "off"
                        }
                        if (!$(document.activeElement).is(editables)) {
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            _seq(action, code)
                        }
                    } else if (code === 33 || code === 34) {
                        if (d.overflowed[0] || d.overflowed[1]) {
                            e.preventDefault();
                            e.stopImmediatePropagation()
                        }
                        if (e.type === "keyup") {
                            _stop($this);
                            var keyboardDir = code === 34 ? -1 : 1;
                            if (o.axis === "x" || o.axis === "yx" && d.overflowed[1] && !d.overflowed[0]) {
                                var dir = "x"
                                  , to = Math.abs(mCSB_container[0].offsetLeft) - keyboardDir * (wrapper.width() * .9)
                            } else {
                                var dir = "y"
                                  , to = Math.abs(mCSB_container[0].offsetTop) - keyboardDir * (wrapper.height() * .9)
                            }
                            _scrollTo($this, to.toString(), {
                                dir: dir,
                                scrollEasing: "mcsEaseInOut"
                            })
                        }
                    } else if (code === 35 || code === 36) {
                        if (!$(document.activeElement).is(editables)) {
                            if (d.overflowed[0] || d.overflowed[1]) {
                                e.preventDefault();
                                e.stopImmediatePropagation()
                            }
                            if (e.type === "keyup") {
                                if (o.axis === "x" || o.axis === "yx" && d.overflowed[1] && !d.overflowed[0]) {
                                    var dir = "x"
                                      , to = code === 35 ? Math.abs(wrapper.width() - mCSB_container.outerWidth(false)) : 0
                                } else {
                                    var dir = "y"
                                      , to = code === 35 ? Math.abs(wrapper.height() - mCSB_container.outerHeight(false)) : 0
                                }
                                _scrollTo($this, to.toString(), {
                                    dir: dir,
                                    scrollEasing: "mcsEaseInOut"
                                })
                            }
                        }
                    }
                    break
                }
                function _seq(a, c) {
                    seq.type = o.keyboard.scrollType;
                    seq.scrollAmount = o.keyboard.scrollAmount;
                    if (seq.type === "stepped" && d.tweenRunning) {
                        return
                    }
                    _sequentialScroll($this, a, c)
                }
            }
        }, _sequentialScroll = function(el, action, trigger, e, s) {
            var d = el.data(pluginPfx)
              , o = d.opt
              , seq = d.sequential
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , once = seq.type === "stepped" ? true : false
              , steplessSpeed = o.scrollInertia < 26 ? 26 : o.scrollInertia
              , steppedSpeed = o.scrollInertia < 1 ? 17 : o.scrollInertia;
            switch (action) {
            case "on":
                seq.dir = [trigger === classes[16] || trigger === classes[15] || trigger === 39 || trigger === 37 ? "x" : "y", trigger === classes[13] || trigger === classes[15] || trigger === 38 || trigger === 37 ? -1 : 1];
                _stop(el);
                if (_isNumeric(trigger) && seq.type === "stepped") {
                    return
                }
                _on(once);
                break;
            case "off":
                _off();
                if (once || d.tweenRunning && seq.dir) {
                    _on(true)
                }
                break
            }
            function _on(once) {
                if (o.snapAmount) {
                    seq.scrollAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0] === "x" ? o.snapAmount[1] : o.snapAmount[0]
                }
                var c = seq.type !== "stepped"
                  , t = s ? s : !once ? 1e3 / 60 : c ? steplessSpeed / 1.5 : steppedSpeed
                  , m = !once ? 2.5 : c ? 7.5 : 40
                  , contentPos = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)]
                  , ratio = [d.scrollRatio.y > 10 ? 10 : d.scrollRatio.y, d.scrollRatio.x > 10 ? 10 : d.scrollRatio.x]
                  , amount = seq.dir[0] === "x" ? contentPos[1] + seq.dir[1] * (ratio[1] * m) : contentPos[0] + seq.dir[1] * (ratio[0] * m)
                  , px = seq.dir[0] === "x" ? contentPos[1] + seq.dir[1] * parseInt(seq.scrollAmount) : contentPos[0] + seq.dir[1] * parseInt(seq.scrollAmount)
                  , to = seq.scrollAmount !== "auto" ? px : amount
                  , easing = e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut"
                  , onComplete = !once ? false : true;
                if (once && t < 17) {
                    to = seq.dir[0] === "x" ? contentPos[1] : contentPos[0]
                }
                _scrollTo(el, to.toString(), {
                    dir: seq.dir[0],
                    scrollEasing: easing,
                    dur: t,
                    onComplete: onComplete
                });
                if (once) {
                    seq.dir = false;
                    return
                }
                clearTimeout(seq.step);
                seq.step = setTimeout(function() {
                    _on()
                }, t)
            }
            function _off() {
                clearTimeout(seq.step);
                _delete(seq, "step");
                _stop(el)
            }
        }, _arr = function(val) {
            var o = $(this).data(pluginPfx).opt
              , vals = [];
            if (typeof val === "function") {
                val = val()
            }
            if (!(val instanceof Array)) {
                vals[0] = val.y ? val.y : val.x || o.axis === "x" ? null : val;
                vals[1] = val.x ? val.x : val.y || o.axis === "y" ? null : val
            } else {
                vals = val.length > 1 ? [val[0], val[1]] : o.axis === "x" ? [null, val[0]] : [val[0], null]
            }
            if (typeof vals[0] === "function") {
                vals[0] = vals[0]()
            }
            if (typeof vals[1] === "function") {
                vals[1] = vals[1]()
            }
            return vals
        }, _to = function(val, dir) {
            if (val == null || typeof val == "undefined") {
                return
            }
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , wrapper = mCSB_container.parent()
              , t = typeof val;
            if (!dir) {
                dir = o.axis === "x" ? "x" : "y"
            }
            var contentLength = dir === "x" ? mCSB_container.outerWidth(false) - wrapper.width() : mCSB_container.outerHeight(false) - wrapper.height()
              , contentPos = dir === "x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop
              , cssProp = dir === "x" ? "left" : "top";
            switch (t) {
            case "function":
                return val();
                break;
            case "object":
                var obj = val.jquery ? val : $(val);
                if (!obj.length) {
                    return
                }
                return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
                break;
            case "string":
            case "number":
                if (_isNumeric(val)) {
                    return Math.abs(val)
                } else if (val.indexOf("%") !== -1) {
                    return Math.abs(contentLength * parseInt(val) / 100)
                } else if (val.indexOf("-=") !== -1) {
                    return Math.abs(contentPos - parseInt(val.split("-=")[1]))
                } else if (val.indexOf("+=") !== -1) {
                    var p = contentPos + parseInt(val.split("+=")[1]);
                    return p >= 0 ? 0 : Math.abs(p)
                } else if (val.indexOf("px") !== -1 && _isNumeric(val.split("px")[0])) {
                    return Math.abs(val.split("px")[0])
                } else {
                    if (val === "top" || val === "left") {
                        return 0
                    } else if (val === "bottom") {
                        return Math.abs(wrapper.height() - mCSB_container.outerHeight(false))
                    } else if (val === "right") {
                        return Math.abs(wrapper.width() - mCSB_container.outerWidth(false))
                    } else if (val === "first" || val === "last") {
                        var obj = mCSB_container.find(":" + val);
                        return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0]
                    } else {
                        if ($(val).length) {
                            return dir === "x" ? _childPos($(val))[1] : _childPos($(val))[0]
                        } else {
                            mCSB_container.css(cssProp, val);
                            methods.update.call(null, $this[0]);
                            return
                        }
                    }
                }
                break
            }
        }, _autoUpdate = function(rem) {
            var $this = $(this)
              , d = $this.data(pluginPfx)
              , o = d.opt
              , mCSB_container = $("#mCSB_" + d.idx + "_container");
            if (rem) {
                clearTimeout(mCSB_container[0].autoUpdate);
                _delete(mCSB_container[0], "autoUpdate");
                return
            }
            upd();
            function upd() {
                clearTimeout(mCSB_container[0].autoUpdate);
                if ($this.parents("html").length === 0) {
                    $this = null;
                    return
                }
                mCSB_container[0].autoUpdate = setTimeout(function() {
                    if (o.advanced.updateOnSelectorChange) {
                        d.poll.change.n = sizesSum();
                        if (d.poll.change.n !== d.poll.change.o) {
                            d.poll.change.o = d.poll.change.n;
                            doUpd(3);
                            return
                        }
                    }
                    if (o.advanced.updateOnContentResize) {
                        d.poll.size.n = $this[0].scrollHeight + $this[0].scrollWidth + mCSB_container[0].offsetHeight + $this[0].offsetHeight + $this[0].offsetWidth;
                        if (d.poll.size.n !== d.poll.size.o) {
                            d.poll.size.o = d.poll.size.n;
                            doUpd(1);
                            return
                        }
                    }
                    if (o.advanced.updateOnImageLoad) {
                        if (!(o.advanced.updateOnImageLoad === "auto" && o.axis === "y")) {
                            d.poll.img.n = mCSB_container.find("img").length;
                            if (d.poll.img.n !== d.poll.img.o) {
                                d.poll.img.o = d.poll.img.n;
                                mCSB_container.find("img").each(function() {
                                    imgLoader(this)
                                });
                                return
                            }
                        }
                    }
                    if (o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad) {
                        upd()
                    }
                }, o.advanced.autoUpdateTimeout)
            }
            function imgLoader(el) {
                if ($(el).hasClass(classes[2])) {
                    doUpd();
                    return
                }
                var img = new Image;
                function createDelegate(contextObject, delegateMethod) {
                    return function() {
                        return delegateMethod.apply(contextObject, arguments)
                    }
                }
                function imgOnLoad() {
                    this.onload = null;
                    $(el).addClass(classes[2]);
                    doUpd(2)
                }
                img.onload = createDelegate(img, imgOnLoad);
                img.src = el.src
            }
            function sizesSum() {
                if (o.advanced.updateOnSelectorChange === true) {
                    o.advanced.updateOnSelectorChange = "*"
                }
                var total = 0
                  , sel = mCSB_container.find(o.advanced.updateOnSelectorChange);
                if (o.advanced.updateOnSelectorChange && sel.length > 0) {
                    sel.each(function() {
                        total += this.offsetHeight + this.offsetWidth
                    })
                }
                return total
            }
            function doUpd(cb) {
                clearTimeout(mCSB_container[0].autoUpdate);
                methods.update.call(null, $this[0], cb)
            }
        }, _snapAmount = function(to, amount, offset) {
            return Math.round(to / amount) * amount - offset
        }, _stop = function(el) {
            var d = el.data(pluginPfx)
              , sel = $("#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper,#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal");
            sel.each(function() {
                _stopTween.call(this)
            })
        }, _scrollTo = function(el, to, options) {
            var d = el.data(pluginPfx)
              , o = d.opt
              , defaults = {
                trigger: "internal",
                dir: "y",
                scrollEasing: "mcsEaseOut",
                drag: false,
                dur: o.scrollInertia,
                overwrite: "all",
                callbacks: true,
                onStart: true,
                onUpdate: true,
                onComplete: true
            }
              , options = $.extend(defaults, options)
              , dur = [options.dur, options.drag ? 0 : options.dur]
              , mCustomScrollBox = $("#mCSB_" + d.idx)
              , mCSB_container = $("#mCSB_" + d.idx + "_container")
              , wrapper = mCSB_container.parent()
              , totalScrollOffsets = o.callbacks.onTotalScrollOffset ? _arr.call(el, o.callbacks.onTotalScrollOffset) : [0, 0]
              , totalScrollBackOffsets = o.callbacks.onTotalScrollBackOffset ? _arr.call(el, o.callbacks.onTotalScrollBackOffset) : [0, 0];
            d.trigger = options.trigger;
            if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
                $(".mCSB_" + d.idx + "_scrollbar").css("visibility", "visible");
                wrapper.scrollTop(0).scrollLeft(0)
            }
            if (to === "_resetY" && !d.contentReset.y) {
                if (_cb("onOverflowYNone")) {
                    o.callbacks.onOverflowYNone.call(el[0])
                }
                d.contentReset.y = 1
            }
            if (to === "_resetX" && !d.contentReset.x) {
                if (_cb("onOverflowXNone")) {
                    o.callbacks.onOverflowXNone.call(el[0])
                }
                d.contentReset.x = 1
            }
            if (to === "_resetY" || to === "_resetX") {
                return
            }
            if ((d.contentReset.y || !el[0].mcs) && d.overflowed[0]) {
                if (_cb("onOverflowY")) {
                    o.callbacks.onOverflowY.call(el[0])
                }
                d.contentReset.x = null
            }
            if ((d.contentReset.x || !el[0].mcs) && d.overflowed[1]) {
                if (_cb("onOverflowX")) {
                    o.callbacks.onOverflowX.call(el[0])
                }
                d.contentReset.x = null
            }
            if (o.snapAmount) {
                var snapAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : options.dir === "x" ? o.snapAmount[1] : o.snapAmount[0];
                to = _snapAmount(to, snapAmount, o.snapOffset)
            }
            switch (options.dir) {
            case "x":
                var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_horizontal")
                  , property = "left"
                  , contentPos = mCSB_container[0].offsetLeft
                  , limit = [mCustomScrollBox.width() - mCSB_container.outerWidth(false), mCSB_dragger.parent().width() - mCSB_dragger.width()]
                  , scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.x]
                  , tso = totalScrollOffsets[1]
                  , tsbo = totalScrollBackOffsets[1]
                  , totalScrollOffset = tso > 0 ? tso / d.scrollRatio.x : 0
                  , totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.x : 0;
                break;
            case "y":
                var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_vertical")
                  , property = "top"
                  , contentPos = mCSB_container[0].offsetTop
                  , limit = [mCustomScrollBox.height() - mCSB_container.outerHeight(false), mCSB_dragger.parent().height() - mCSB_dragger.height()]
                  , scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.y]
                  , tso = totalScrollOffsets[0]
                  , tsbo = totalScrollBackOffsets[0]
                  , totalScrollOffset = tso > 0 ? tso / d.scrollRatio.y : 0
                  , totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.y : 0;
                break
            }
            if (scrollTo[1] < 0 || scrollTo[0] === 0 && scrollTo[1] === 0) {
                scrollTo = [0, 0]
            } else if (scrollTo[1] >= limit[1]) {
                scrollTo = [limit[0], limit[1]]
            } else {
                scrollTo[0] = -scrollTo[0]
            }
            if (!el[0].mcs) {
                _mcs();
                if (_cb("onInit")) {
                    o.callbacks.onInit.call(el[0])
                }
            }
            clearTimeout(mCSB_container[0].onCompleteTimeout);
            _tweenTo(mCSB_dragger[0], property, Math.round(scrollTo[1]), dur[1], options.scrollEasing);
            if (!d.tweenRunning && (contentPos === 0 && scrollTo[0] >= 0 || contentPos === limit[0] && scrollTo[0] <= limit[0])) {
                return
            }
            _tweenTo(mCSB_container[0], property, Math.round(scrollTo[0]), dur[0], options.scrollEasing, options.overwrite, {
                onStart: function() {
                    if (options.callbacks && options.onStart && !d.tweenRunning) {
                        if (_cb("onScrollStart")) {
                            _mcs();
                            o.callbacks.onScrollStart.call(el[0])
                        }
                        d.tweenRunning = true;
                        _onDragClasses(mCSB_dragger);
                        d.cbOffsets = _cbOffsets()
                    }
                },
                onUpdate: function() {
                    if (options.callbacks && options.onUpdate) {
                        if (_cb("whileScrolling")) {
                            _mcs();
                            o.callbacks.whileScrolling.call(el[0])
                        }
                    }
                },
                onComplete: function() {
                    if (options.callbacks && options.onComplete) {
                        if (o.axis === "yx") {
                            clearTimeout(mCSB_container[0].onCompleteTimeout)
                        }
                        var t = mCSB_container[0].idleTimer || 0;
                        mCSB_container[0].onCompleteTimeout = setTimeout(function() {
                            if (_cb("onScroll")) {
                                _mcs();
                                o.callbacks.onScroll.call(el[0])
                            }
                            if (_cb("onTotalScroll") && scrollTo[1] >= limit[1] - totalScrollOffset && d.cbOffsets[0]) {
                                _mcs();
                                o.callbacks.onTotalScroll.call(el[0])
                            }
                            if (_cb("onTotalScrollBack") && scrollTo[1] <= totalScrollBackOffset && d.cbOffsets[1]) {
                                _mcs();
                                o.callbacks.onTotalScrollBack.call(el[0])
                            }
                            d.tweenRunning = false;
                            mCSB_container[0].idleTimer = 0;
                            _onDragClasses(mCSB_dragger, "hide")
                        }, t)
                    }
                }
            });
            function _cb(cb) {
                return d && o.callbacks[cb] && typeof o.callbacks[cb] === "function"
            }
            function _cbOffsets() {
                return [o.callbacks.alwaysTriggerOffsets || contentPos >= limit[0] + tso, o.callbacks.alwaysTriggerOffsets || contentPos <= -tsbo]
            }
            function _mcs() {
                var cp = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft]
                  , dp = [mCSB_dragger[0].offsetTop, mCSB_dragger[0].offsetLeft]
                  , cl = [mCSB_container.outerHeight(false), mCSB_container.outerWidth(false)]
                  , pl = [mCustomScrollBox.height(), mCustomScrollBox.width()];
                el[0].mcs = {
                    content: mCSB_container,
                    top: cp[0],
                    left: cp[1],
                    draggerTop: dp[0],
                    draggerLeft: dp[1],
                    topPct: Math.round(100 * Math.abs(cp[0]) / (Math.abs(cl[0]) - pl[0])),
                    leftPct: Math.round(100 * Math.abs(cp[1]) / (Math.abs(cl[1]) - pl[1])),
                    direction: options.dir
                }
            }
        }, _tweenTo = function(el, prop, to, duration, easing, overwrite, callbacks) {
            if (!el._mTween) {
                el._mTween = {
                    top: {},
                    left: {}
                }
            }
            var callbacks = callbacks || {}, onStart = callbacks.onStart || function() {}
            , onUpdate = callbacks.onUpdate || function() {}
            , onComplete = callbacks.onComplete || function() {}
            , startTime = _getTime(), _delay, progress = 0, from = el.offsetTop, elStyle = el.style, _request, tobj = el._mTween[prop];
            if (prop === "left") {
                from = el.offsetLeft
            }
            var diff = to - from;
            tobj.stop = 0;
            if (overwrite !== "none") {
                _cancelTween()
            }
            _startTween();
            function _step() {
                if (tobj.stop) {
                    return
                }
                if (!progress) {
                    onStart.call()
                }
                progress = _getTime() - startTime;
                _tween();
                if (progress >= tobj.time) {
                    tobj.time = progress > tobj.time ? progress + _delay - (progress - tobj.time) : progress + _delay - 1;
                    if (tobj.time < progress + 1) {
                        tobj.time = progress + 1
                    }
                }
                if (tobj.time < duration) {
                    tobj.id = _request(_step)
                } else {
                    onComplete.call()
                }
            }
            function _tween() {
                if (duration > 0) {
                    tobj.currVal = _ease(tobj.time, from, diff, duration, easing);
                    elStyle[prop] = Math.round(tobj.currVal) + "px"
                } else {
                    elStyle[prop] = to + "px"
                }
                onUpdate.call()
            }
            function _startTween() {
                _delay = 1e3 / 60;
                tobj.time = progress + _delay;
                _request = !window.requestAnimationFrame ? function(f) {
                    _tween();
                    return setTimeout(f, .01)
                }
                : window.requestAnimationFrame;
                tobj.id = _request(_step)
            }
            function _cancelTween() {
                if (tobj.id == null) {
                    return
                }
                if (!window.requestAnimationFrame) {
                    clearTimeout(tobj.id)
                } else {
                    window.cancelAnimationFrame(tobj.id)
                }
                tobj.id = null
            }
            function _ease(t, b, c, d, type) {
                switch (type) {
                case "linear":
                case "mcsLinear":
                    return c * t / d + b;
                    break;
                case "mcsLinearOut":
                    t /= d;
                    t--;
                    return c * Math.sqrt(1 - t * t) + b;
                    break;
                case "easeInOutSmooth":
                    t /= d / 2;
                    if (t < 1)
                        return c / 2 * t * t + b;
                    t--;
                    return -c / 2 * (t * (t - 2) - 1) + b;
                    break;
                case "easeInOutStrong":
                    t /= d / 2;
                    if (t < 1)
                        return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                    t--;
                    return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
                    break;
                case "easeInOut":
                case "mcsEaseInOut":
                    t /= d / 2;
                    if (t < 1)
                        return c / 2 * t * t * t + b;
                    t -= 2;
                    return c / 2 * (t * t * t + 2) + b;
                    break;
                case "easeOutSmooth":
                    t /= d;
                    t--;
                    return -c * (t * t * t * t - 1) + b;
                    break;
                case "easeOutStrong":
                    return c * (-Math.pow(2, -10 * t / d) + 1) + b;
                    break;
                case "easeOut":
                case "mcsEaseOut":
                default:
                    var ts = (t /= d) * t
                      , tc = ts * t;
                    return b + c * (.499999999999997 * tc * ts + -2.5 * ts * ts + 5.5 * tc + -6.5 * ts + 4 * t)
                }
            }
        }, _getTime = function() {
            if (window.performance && window.performance.now) {
                return window.performance.now()
            } else {
                if (window.performance && window.performance.webkitNow) {
                    return window.performance.webkitNow()
                } else {
                    if (Date.now) {
                        return Date.now()
                    } else {
                        return (new Date).getTime()
                    }
                }
            }
        }, _stopTween = function() {
            var el = this;
            if (!el._mTween) {
                el._mTween = {
                    top: {},
                    left: {}
                }
            }
            var props = ["top", "left"];
            for (var i = 0; i < props.length; i++) {
                var prop = props[i];
                if (el._mTween[prop].id) {
                    if (!window.requestAnimationFrame) {
                        clearTimeout(el._mTween[prop].id)
                    } else {
                        window.cancelAnimationFrame(el._mTween[prop].id)
                    }
                    el._mTween[prop].id = null;
                    el._mTween[prop].stop = 1
                }
            }
        }, _delete = function(c, m) {
            try {
                delete c[m]
            } catch (e) {
                c[m] = null
            }
        }, _mouseBtnLeft = function(e) {
            return !(e.which && e.which !== 1)
        }, _pointerTouch = function(e) {
            var t = e.originalEvent.pointerType;
            return !(t && t !== "touch" && t !== 2)
        }, _isNumeric = function(val) {
            return !isNaN(parseFloat(val)) && isFinite(val)
        }, _childPos = function(el) {
            var p = el.parents(".mCSB_container");
            return [el.offset().top - p.offset().top, el.offset().left - p.offset().left]
        }, _isTabHidden = function() {
            var prop = _getHiddenProp();
            if (!prop)
                return false;
            return document[prop];
            function _getHiddenProp() {
                var pfx = ["webkit", "moz", "ms", "o"];
                if ("hidden"in document)
                    return "hidden";
                for (var i = 0; i < pfx.length; i++) {
                    if (pfx[i] + "Hidden"in document)
                        return pfx[i] + "Hidden"
                }
                return null
            }
        };
        $.fn[pluginNS] = function(method) {
            if (methods[method]) {
                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1))
            } else if (typeof method === "object" || !method) {
                return methods.init.apply(this, arguments)
            } else {
                $.error("Method " + method + " does not exist")
            }
        }
        ;
        $[pluginNS] = function(method) {
            if (methods[method]) {
                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1))
            } else if (typeof method === "object" || !method) {
                return methods.init.apply(this, arguments)
            } else {
                $.error("Method " + method + " does not exist")
            }
        }
        ;
        $[pluginNS].defaults = defaults;
        window[pluginNS] = true;
        $(window).bind("load", function() {
            $(defaultSelector)[pluginNS]();
            $.extend($.expr[":"], {
                mcsInView: $.expr[":"].mcsInView || function(el) {
                    var $el = $(el), content = $el.parents(".mCSB_container"), wrapper, cPos;
                    if (!content.length) {
                        return
                    }
                    wrapper = content.parent();
                    cPos = [content[0].offsetTop, content[0].offsetLeft];
                    return cPos[0] + _childPos($el)[0] >= 0 && cPos[0] + _childPos($el)[0] < wrapper.height() - $el.outerHeight(false) && cPos[1] + _childPos($el)[1] >= 0 && cPos[1] + _childPos($el)[1] < wrapper.width() - $el.outerWidth(false)
                }
                ,
                mcsInSight: $.expr[":"].mcsInSight || function(el, i, m) {
                    var $el = $(el), elD, content = $el.parents(".mCSB_container"), wrapperView, pos, wrapperViewPct, pctVals = m[3] === "exact" ? [[1, 0], [1, 0]] : [[.9, .1], [.6, .4]];
                    if (!content.length) {
                        return
                    }
                    elD = [$el.outerHeight(false), $el.outerWidth(false)];
                    pos = [content[0].offsetTop + _childPos($el)[0], content[0].offsetLeft + _childPos($el)[1]];
                    wrapperView = [content.parent()[0].offsetHeight, content.parent()[0].offsetWidth];
                    wrapperViewPct = [elD[0] < wrapperView[0] ? pctVals[0] : pctVals[1], elD[1] < wrapperView[1] ? pctVals[0] : pctVals[1]];
                    return pos[0] - wrapperView[0] * wrapperViewPct[0][0] < 0 && pos[0] + elD[0] - wrapperView[0] * wrapperViewPct[0][1] >= 0 && pos[1] - wrapperView[1] * wrapperViewPct[1][0] < 0 && pos[1] + elD[1] - wrapperView[1] * wrapperViewPct[1][1] >= 0
                }
                ,
                mcsOverflow: $.expr[":"].mcsOverflow || function(el) {
                    var d = $(el).data(pluginPfx);
                    if (!d) {
                        return
                    }
                    return d.overflowed[0] || d.overflowed[1]
                }
            })
        })
    })
});
(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define(factory)
    } else if (typeof exports === "object") {
        module.exports = factory()
    } else {
        root.ScrollMagic = factory()
    }
}
)(this, function() {
    "use strict";
    var ScrollMagic = function() {
        _util.log(2, "(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use 'new ScrollMagic.Controller()' to create a new controller instance. Use 'new ScrollMagic.Scene()' to instance a scene.")
    };
    ScrollMagic.version = "2.0.5";
    window.addEventListener("mousewheel", function() {});
    var PIN_SPACER_ATTRIBUTE = "data-scrollmagic-pin-spacer";
    ScrollMagic.Controller = function(options) {
        var NAMESPACE = "ScrollMagic.Controller"
          , SCROLL_DIRECTION_FORWARD = "FORWARD"
          , SCROLL_DIRECTION_REVERSE = "REVERSE"
          , SCROLL_DIRECTION_PAUSED = "PAUSED"
          , DEFAULT_OPTIONS = CONTROLLER_OPTIONS.defaults;
        var Controller = this, _options = _util.extend({}, DEFAULT_OPTIONS, options), _sceneObjects = [], _updateScenesOnNextCycle = false, _scrollPos = 0, _scrollDirection = SCROLL_DIRECTION_PAUSED, _isDocument = true, _viewPortSize = 0, _enabled = true, _updateTimeout, _refreshTimeout;
        var construct = function() {
            for (var key in _options) {
                if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
                    log(2, 'WARNING: Unknown option "' + key + '"');
                    delete _options[key]
                }
            }
            _options.container = _util.get.elements(_options.container)[0];
            if (!_options.container) {
                log(1, "ERROR creating object " + NAMESPACE + ": No valid scroll container supplied");
                throw NAMESPACE + " init failed."
            }
            _isDocument = _options.container === window || _options.container === document.body || !document.body.contains(_options.container);
            if (_isDocument) {
                _options.container = window
            }
            _viewPortSize = getViewportSize();
            _options.container.addEventListener("resize", onChange);
            _options.container.addEventListener("scroll", onChange);
            _options.refreshInterval = parseInt(_options.refreshInterval) || DEFAULT_OPTIONS.refreshInterval;
            scheduleRefresh();
            log(3, "added new " + NAMESPACE + " controller (v" + ScrollMagic.version + ")")
        };
        var scheduleRefresh = function() {
            if (_options.refreshInterval > 0) {
                _refreshTimeout = window.setTimeout(refresh, _options.refreshInterval)
            }
        };
        var getScrollPos = function() {
            return _options.vertical ? _util.get.scrollTop(_options.container) : _util.get.scrollLeft(_options.container)
        };
        var getViewportSize = function() {
            return _options.vertical ? _util.get.height(_options.container) : _util.get.width(_options.container)
        };
        var setScrollPos = this._setScrollPos = function(pos) {
            if (_options.vertical) {
                if (_isDocument) {
                    window.scrollTo(_util.get.scrollLeft(), pos)
                } else {
                    _options.container.scrollTop = pos
                }
            } else {
                if (_isDocument) {
                    window.scrollTo(pos, _util.get.scrollTop())
                } else {
                    _options.container.scrollLeft = pos
                }
            }
        }
        ;
        var updateScenes = function() {
            if (_enabled && _updateScenesOnNextCycle) {
                var scenesToUpdate = _util.type.Array(_updateScenesOnNextCycle) ? _updateScenesOnNextCycle : _sceneObjects.slice(0);
                _updateScenesOnNextCycle = false;
                var oldScrollPos = _scrollPos;
                _scrollPos = Controller.scrollPos();
                var deltaScroll = _scrollPos - oldScrollPos;
                if (deltaScroll !== 0) {
                    _scrollDirection = deltaScroll > 0 ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_REVERSE
                }
                if (_scrollDirection === SCROLL_DIRECTION_REVERSE) {
                    scenesToUpdate.reverse()
                }
                scenesToUpdate.forEach(function(scene, index) {
                    log(3, "updating Scene " + (index + 1) + "/" + scenesToUpdate.length + " (" + _sceneObjects.length + " total)");
                    scene.update(true)
                });
                if (scenesToUpdate.length === 0 && _options.loglevel >= 3) {
                    log(3, "updating 0 Scenes (nothing added to controller)")
                }
            }
        };
        var debounceUpdate = function() {
            _updateTimeout = _util.rAF(updateScenes)
        };
        var onChange = function(e) {
            log(3, "event fired causing an update:", e.type);
            if (e.type == "resize") {
                _viewPortSize = getViewportSize();
                _scrollDirection = SCROLL_DIRECTION_PAUSED
            }
            if (_updateScenesOnNextCycle !== true) {
                _updateScenesOnNextCycle = true;
                debounceUpdate()
            }
        };
        var refresh = function() {
            if (!_isDocument) {
                if (_viewPortSize != getViewportSize()) {
                    var resizeEvent;
                    try {
                        resizeEvent = new Event("resize",{
                            bubbles: false,
                            cancelable: false
                        })
                    } catch (e) {
                        resizeEvent = document.createEvent("Event");
                        resizeEvent.initEvent("resize", false, false)
                    }
                    _options.container.dispatchEvent(resizeEvent)
                }
            }
            _sceneObjects.forEach(function(scene, index) {
                scene.refresh()
            });
            scheduleRefresh()
        };
        var log = this._log = function(loglevel, output) {
            if (_options.loglevel >= loglevel) {
                Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");
                _util.log.apply(window, arguments)
            }
        }
        ;
        this._options = _options;
        var sortScenes = function(ScenesArray) {
            if (ScenesArray.length <= 1) {
                return ScenesArray
            } else {
                var scenes = ScenesArray.slice(0);
                scenes.sort(function(a, b) {
                    return a.scrollOffset() > b.scrollOffset() ? 1 : -1
                });
                return scenes
            }
        };
        this.addScene = function(newScene) {
            if (_util.type.Array(newScene)) {
                newScene.forEach(function(scene, index) {
                    Controller.addScene(scene)
                })
            } else if (newScene instanceof ScrollMagic.Scene) {
                if (newScene.controller() !== Controller) {
                    newScene.addTo(Controller)
                } else if (_sceneObjects.indexOf(newScene) < 0) {
                    _sceneObjects.push(newScene);
                    _sceneObjects = sortScenes(_sceneObjects);
                    newScene.on("shift.controller_sort", function() {
                        _sceneObjects = sortScenes(_sceneObjects)
                    });
                    for (var key in _options.globalSceneOptions) {
                        if (newScene[key]) {
                            newScene[key].call(newScene, _options.globalSceneOptions[key])
                        }
                    }
                    log(3, "adding Scene (now " + _sceneObjects.length + " total)")
                }
            } else {
                log(1, "ERROR: invalid argument supplied for '.addScene()'")
            }
            return Controller
        }
        ;
        this.removeScene = function(Scene) {
            if (_util.type.Array(Scene)) {
                Scene.forEach(function(scene, index) {
                    Controller.removeScene(scene)
                })
            } else {
                var index = _sceneObjects.indexOf(Scene);
                if (index > -1) {
                    Scene.off("shift.controller_sort");
                    _sceneObjects.splice(index, 1);
                    log(3, "removing Scene (now " + _sceneObjects.length + " left)");
                    Scene.remove()
                }
            }
            return Controller
        }
        ;
        this.updateScene = function(Scene, immediately) {
            if (_util.type.Array(Scene)) {
                Scene.forEach(function(scene, index) {
                    Controller.updateScene(scene, immediately)
                })
            } else {
                if (immediately) {
                    Scene.update(true)
                } else if (_updateScenesOnNextCycle !== true && Scene instanceof ScrollMagic.Scene) {
                    _updateScenesOnNextCycle = _updateScenesOnNextCycle || [];
                    if (_updateScenesOnNextCycle.indexOf(Scene) == -1) {
                        _updateScenesOnNextCycle.push(Scene)
                    }
                    _updateScenesOnNextCycle = sortScenes(_updateScenesOnNextCycle);
                    debounceUpdate()
                }
            }
            return Controller
        }
        ;
        this.update = function(immediately) {
            onChange({
                type: "resize"
            });
            if (immediately) {
                updateScenes()
            }
            return Controller
        }
        ;
        this.scrollTo = function(scrollTarget, additionalParameter) {
            if (_util.type.Number(scrollTarget)) {
                setScrollPos.call(_options.container, scrollTarget, additionalParameter)
            } else if (scrollTarget instanceof ScrollMagic.Scene) {
                if (scrollTarget.controller() === Controller) {
                    Controller.scrollTo(scrollTarget.scrollOffset(), additionalParameter)
                } else {
                    log(2, "scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.", scrollTarget)
                }
            } else if (_util.type.Function(scrollTarget)) {
                setScrollPos = scrollTarget
            } else {
                var elem = _util.get.elements(scrollTarget)[0];
                if (elem) {
                    while (elem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                        elem = elem.parentNode
                    }
                    var param = _options.vertical ? "top" : "left"
                      , containerOffset = _util.get.offset(_options.container)
                      , elementOffset = _util.get.offset(elem);
                    if (!_isDocument) {
                        containerOffset[param] -= Controller.scrollPos()
                    }
                    Controller.scrollTo(elementOffset[param] - containerOffset[param], additionalParameter)
                } else {
                    log(2, "scrollTo(): The supplied argument is invalid. Scroll cancelled.", scrollTarget)
                }
            }
            return Controller
        }
        ;
        this.scrollPos = function(scrollPosMethod) {
            if (!arguments.length) {
                return getScrollPos.call(Controller)
            } else {
                if (_util.type.Function(scrollPosMethod)) {
                    getScrollPos = scrollPosMethod
                } else {
                    log(2, "Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'.")
                }
            }
            return Controller
        }
        ;
        this.info = function(about) {
            var values = {
                size: _viewPortSize,
                vertical: _options.vertical,
                scrollPos: _scrollPos,
                scrollDirection: _scrollDirection,
                container: _options.container,
                isDocument: _isDocument
            };
            if (!arguments.length) {
                return values
            } else if (values[about] !== undefined) {
                return values[about]
            } else {
                log(1, 'ERROR: option "' + about + '" is not available');
                return
            }
        }
        ;
        this.loglevel = function(newLoglevel) {
            if (!arguments.length) {
                return _options.loglevel
            } else if (_options.loglevel != newLoglevel) {
                _options.loglevel = newLoglevel
            }
            return Controller
        }
        ;
        this.enabled = function(newState) {
            if (!arguments.length) {
                return _enabled
            } else if (_enabled != newState) {
                _enabled = !!newState;
                Controller.updateScene(_sceneObjects, true)
            }
            return Controller
        }
        ;
        this.destroy = function(resetScenes) {
            window.clearTimeout(_refreshTimeout);
            var i = _sceneObjects.length;
            while (i--) {
                _sceneObjects[i].destroy(resetScenes)
            }
            _options.container.removeEventListener("resize", onChange);
            _options.container.removeEventListener("scroll", onChange);
            _util.cAF(_updateTimeout);
            log(3, "destroyed " + NAMESPACE + " (reset: " + (resetScenes ? "true" : "false") + ")");
            return null
        }
        ;
        construct();
        return Controller
    }
    ;
    var CONTROLLER_OPTIONS = {
        defaults: {
            container: window,
            vertical: true,
            globalSceneOptions: {},
            loglevel: 2,
            refreshInterval: 100
        }
    };
    ScrollMagic.Controller.addOption = function(name, defaultValue) {
        CONTROLLER_OPTIONS.defaults[name] = defaultValue
    }
    ;
    ScrollMagic.Controller.extend = function(extension) {
        var oldClass = this;
        ScrollMagic.Controller = function() {
            oldClass.apply(this, arguments);
            this.$super = _util.extend({}, this);
            return extension.apply(this, arguments) || this
        }
        ;
        _util.extend(ScrollMagic.Controller, oldClass);
        ScrollMagic.Controller.prototype = oldClass.prototype;
        ScrollMagic.Controller.prototype.constructor = ScrollMagic.Controller
    }
    ;
    ScrollMagic.Scene = function(options) {
        var NAMESPACE = "ScrollMagic.Scene"
          , SCENE_STATE_BEFORE = "BEFORE"
          , SCENE_STATE_DURING = "DURING"
          , SCENE_STATE_AFTER = "AFTER"
          , DEFAULT_OPTIONS = SCENE_OPTIONS.defaults;
        var Scene = this, _options = _util.extend({}, DEFAULT_OPTIONS, options), _state = SCENE_STATE_BEFORE, _progress = 0, _scrollOffset = {
            start: 0,
            end: 0
        }, _triggerPos = 0, _enabled = true, _durationUpdateMethod, _controller;
        var construct = function() {
            for (var key in _options) {
                if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
                    log(2, 'WARNING: Unknown option "' + key + '"');
                    delete _options[key]
                }
            }
            for (var optionName in DEFAULT_OPTIONS) {
                addSceneOption(optionName)
            }
            validateOption()
        };
        var _listeners = {};
        this.on = function(names, callback) {
            if (_util.type.Function(callback)) {
                names = names.trim().split(" ");
                names.forEach(function(fullname) {
                    var nameparts = fullname.split(".")
                      , eventname = nameparts[0]
                      , namespace = nameparts[1];
                    if (eventname != "*") {
                        if (!_listeners[eventname]) {
                            _listeners[eventname] = []
                        }
                        _listeners[eventname].push({
                            namespace: namespace || "",
                            callback: callback
                        })
                    }
                })
            } else {
                log(1, "ERROR when calling '.on()': Supplied callback for '" + names + "' is not a valid function!")
            }
            return Scene
        }
        ;
        this.off = function(names, callback) {
            if (!names) {
                log(1, "ERROR: Invalid event name supplied.");
                return Scene
            }
            names = names.trim().split(" ");
            names.forEach(function(fullname, key) {
                var nameparts = fullname.split(".")
                  , eventname = nameparts[0]
                  , namespace = nameparts[1] || ""
                  , removeList = eventname === "*" ? Object.keys(_listeners) : [eventname];
                removeList.forEach(function(remove) {
                    var list = _listeners[remove] || []
                      , i = list.length;
                    while (i--) {
                        var listener = list[i];
                        if (listener && (namespace === listener.namespace || namespace === "*") && (!callback || callback == listener.callback)) {
                            list.splice(i, 1)
                        }
                    }
                    if (!list.length) {
                        delete _listeners[remove]
                    }
                })
            });
            return Scene
        }
        ;
        this.trigger = function(name, vars) {
            if (name) {
                var nameparts = name.trim().split(".")
                  , eventname = nameparts[0]
                  , namespace = nameparts[1]
                  , listeners = _listeners[eventname];
                log(3, "event fired:", eventname, vars ? "->" : "", vars || "");
                if (listeners) {
                    listeners.forEach(function(listener, key) {
                        if (!namespace || namespace === listener.namespace) {
                            listener.callback.call(Scene, new ScrollMagic.Event(eventname,listener.namespace,Scene,vars))
                        }
                    })
                }
            } else {
                log(1, "ERROR: Invalid event name supplied.")
            }
            return Scene
        }
        ;
        Scene.on("change.internal", function(e) {
            if (e.what !== "loglevel" && e.what !== "tweenChanges") {
                if (e.what === "triggerElement") {
                    updateTriggerElementPosition()
                } else if (e.what === "reverse") {
                    Scene.update()
                }
            }
        }).on("shift.internal", function(e) {
            updateScrollOffset();
            Scene.update()
        });
        var log = this._log = function(loglevel, output) {
            if (_options.loglevel >= loglevel) {
                Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");
                _util.log.apply(window, arguments)
            }
        }
        ;
        this.addTo = function(controller) {
            if (!(controller instanceof ScrollMagic.Controller)) {
                log(1, "ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller")
            } else if (_controller != controller) {
                if (_controller) {
                    _controller.removeScene(Scene)
                }
                _controller = controller;
                validateOption();
                updateDuration(true);
                updateTriggerElementPosition(true);
                updateScrollOffset();
                _controller.info("container").addEventListener("resize", onContainerResize);
                controller.addScene(Scene);
                Scene.trigger("add", {
                    controller: _controller
                });
                log(3, "added " + NAMESPACE + " to controller");
                Scene.update()
            }
            return Scene
        }
        ;
        this.enabled = function(newState) {
            if (!arguments.length) {
                return _enabled
            } else if (_enabled != newState) {
                _enabled = !!newState;
                Scene.update(true)
            }
            return Scene
        }
        ;
        this.remove = function() {
            if (_controller) {
                _controller.info("container").removeEventListener("resize", onContainerResize);
                var tmpParent = _controller;
                _controller = undefined;
                tmpParent.removeScene(Scene);
                Scene.trigger("remove");
                log(3, "removed " + NAMESPACE + " from controller")
            }
            return Scene
        }
        ;
        this.destroy = function(reset) {
            Scene.trigger("destroy", {
                reset: reset
            });
            Scene.remove();
            Scene.off("*.*");
            log(3, "destroyed " + NAMESPACE + " (reset: " + (reset ? "true" : "false") + ")");
            return null
        }
        ;
        this.update = function(immediately) {
            if (_controller) {
                if (immediately) {
                    if (_controller.enabled() && _enabled) {
                        var scrollPos = _controller.info("scrollPos"), newProgress;
                        if (_options.duration > 0) {
                            newProgress = (scrollPos - _scrollOffset.start) / (_scrollOffset.end - _scrollOffset.start)
                        } else {
                            newProgress = scrollPos >= _scrollOffset.start ? 1 : 0
                        }
                        Scene.trigger("update", {
                            startPos: _scrollOffset.start,
                            endPos: _scrollOffset.end,
                            scrollPos: scrollPos
                        });
                        Scene.progress(newProgress)
                    } else if (_pin && _state === SCENE_STATE_DURING) {
                        updatePinState(true)
                    }
                } else {
                    _controller.updateScene(Scene, false)
                }
            }
            return Scene
        }
        ;
        this.refresh = function() {
            updateDuration();
            updateTriggerElementPosition();
            return Scene
        }
        ;
        this.progress = function(progress) {
            if (!arguments.length) {
                return _progress
            } else {
                var doUpdate = false
                  , oldState = _state
                  , scrollDirection = _controller ? _controller.info("scrollDirection") : "PAUSED"
                  , reverseOrForward = _options.reverse || progress >= _progress;
                if (_options.duration === 0) {
                    doUpdate = _progress != progress;
                    _progress = progress < 1 && reverseOrForward ? 0 : 1;
                    _state = _progress === 0 ? SCENE_STATE_BEFORE : SCENE_STATE_DURING
                } else {
                    if (progress < 0 && _state !== SCENE_STATE_BEFORE && reverseOrForward) {
                        _progress = 0;
                        _state = SCENE_STATE_BEFORE;
                        doUpdate = true
                    } else if (progress >= 0 && progress < 1 && reverseOrForward) {
                        _progress = progress;
                        _state = SCENE_STATE_DURING;
                        doUpdate = true
                    } else if (progress >= 1 && _state !== SCENE_STATE_AFTER) {
                        _progress = 1;
                        _state = SCENE_STATE_AFTER;
                        doUpdate = true
                    } else if (_state === SCENE_STATE_DURING && !reverseOrForward) {
                        updatePinState()
                    }
                }
                if (doUpdate) {
                    var eventVars = {
                        progress: _progress,
                        state: _state,
                        scrollDirection: scrollDirection
                    }
                      , stateChanged = _state != oldState;
                    var trigger = function(eventName) {
                        Scene.trigger(eventName, eventVars)
                    };
                    if (stateChanged) {
                        if (oldState !== SCENE_STATE_DURING) {
                            trigger("enter");
                            trigger(oldState === SCENE_STATE_BEFORE ? "start" : "end")
                        }
                    }
                    trigger("progress");
                    if (stateChanged) {
                        if (_state !== SCENE_STATE_DURING) {
                            trigger(_state === SCENE_STATE_BEFORE ? "start" : "end");
                            trigger("leave")
                        }
                    }
                }
                return Scene
            }
        }
        ;
        var updateScrollOffset = function() {
            _scrollOffset = {
                start: _triggerPos + _options.offset
            };
            if (_controller && _options.triggerElement) {
                _scrollOffset.start -= _controller.info("size") * _options.triggerHook
            }
            _scrollOffset.end = _scrollOffset.start + _options.duration
        };
        var updateDuration = function(suppressEvents) {
            if (_durationUpdateMethod) {
                var varname = "duration";
                if (changeOption(varname, _durationUpdateMethod.call(Scene)) && !suppressEvents) {
                    Scene.trigger("change", {
                        what: varname,
                        newval: _options[varname]
                    });
                    Scene.trigger("shift", {
                        reason: varname
                    })
                }
            }
        };
        var updateTriggerElementPosition = function(suppressEvents) {
            var elementPos = 0
              , telem = _options.triggerElement;
            if (_controller && telem) {
                var controllerInfo = _controller.info()
                  , containerOffset = _util.get.offset(controllerInfo.container)
                  , param = controllerInfo.vertical ? "top" : "left";
                while (telem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                    telem = telem.parentNode
                }
                var elementOffset = _util.get.offset(telem);
                if (!controllerInfo.isDocument) {
                    containerOffset[param] -= _controller.scrollPos()
                }
                elementPos = elementOffset[param] - containerOffset[param]
            }
            var changed = elementPos != _triggerPos;
            _triggerPos = elementPos;
            if (changed && !suppressEvents) {
                Scene.trigger("shift", {
                    reason: "triggerElementPosition"
                })
            }
        };
        var onContainerResize = function(e) {
            if (_options.triggerHook > 0) {
                Scene.trigger("shift", {
                    reason: "containerResize"
                })
            }
        };
        var _validate = _util.extend(SCENE_OPTIONS.validate, {
            duration: function(val) {
                if (_util.type.String(val) && val.match(/^(\.|\d)*\d+%$/)) {
                    var perc = parseFloat(val) / 100;
                    val = function() {
                        return _controller ? _controller.info("size") * perc : 0
                    }
                }
                if (_util.type.Function(val)) {
                    _durationUpdateMethod = val;
                    try {
                        val = parseFloat(_durationUpdateMethod())
                    } catch (e) {
                        val = -1
                    }
                }
                val = parseFloat(val);
                if (!_util.type.Number(val) || val < 0) {
                    if (_durationUpdateMethod) {
                        _durationUpdateMethod = undefined;
                        throw ['Invalid return value of supplied function for option "duration":', val]
                    } else {
                        throw ['Invalid value for option "duration":', val]
                    }
                }
                return val
            }
        });
        var validateOption = function(check) {
            check = arguments.length ? [check] : Object.keys(_validate);
            check.forEach(function(optionName, key) {
                var value;
                if (_validate[optionName]) {
                    try {
                        value = _validate[optionName](_options[optionName])
                    } catch (e) {
                        value = DEFAULT_OPTIONS[optionName];
                        var logMSG = _util.type.String(e) ? [e] : e;
                        if (_util.type.Array(logMSG)) {
                            logMSG[0] = "ERROR: " + logMSG[0];
                            logMSG.unshift(1);
                            log.apply(this, logMSG)
                        } else {
                            log(1, "ERROR: Problem executing validation callback for option '" + optionName + "':", e.message)
                        }
                    } finally {
                        _options[optionName] = value
                    }
                }
            })
        };
        var changeOption = function(varname, newval) {
            var changed = false
              , oldval = _options[varname];
            if (_options[varname] != newval) {
                _options[varname] = newval;
                validateOption(varname);
                changed = oldval != _options[varname]
            }
            return changed
        };
        var addSceneOption = function(optionName) {
            if (!Scene[optionName]) {
                Scene[optionName] = function(newVal) {
                    if (!arguments.length) {
                        return _options[optionName]
                    } else {
                        if (optionName === "duration") {
                            _durationUpdateMethod = undefined
                        }
                        if (changeOption(optionName, newVal)) {
                            Scene.trigger("change", {
                                what: optionName,
                                newval: _options[optionName]
                            });
                            if (SCENE_OPTIONS.shifts.indexOf(optionName) > -1) {
                                Scene.trigger("shift", {
                                    reason: optionName
                                })
                            }
                        }
                    }
                    return Scene
                }
            }
        };
        this.controller = function() {
            return _controller
        }
        ;
        this.state = function() {
            return _state
        }
        ;
        this.scrollOffset = function() {
            return _scrollOffset.start
        }
        ;
        this.triggerPosition = function() {
            var pos = _options.offset;
            if (_controller) {
                if (_options.triggerElement) {
                    pos += _triggerPos
                } else {
                    pos += _controller.info("size") * Scene.triggerHook()
                }
            }
            return pos
        }
        ;
        var _pin, _pinOptions;
        Scene.on("shift.internal", function(e) {
            var durationChanged = e.reason === "duration";
            if (_state === SCENE_STATE_AFTER && durationChanged || _state === SCENE_STATE_DURING && _options.duration === 0) {
                updatePinState()
            }
            if (durationChanged) {
                updatePinDimensions()
            }
        }).on("progress.internal", function(e) {
            updatePinState()
        }).on("add.internal", function(e) {
            updatePinDimensions()
        }).on("destroy.internal", function(e) {
            Scene.removePin(e.reset)
        });
        var updatePinState = function(forceUnpin) {
            if (_pin && _controller) {
                var containerInfo = _controller.info()
                  , pinTarget = _pinOptions.spacer.firstChild;
                if (!forceUnpin && _state === SCENE_STATE_DURING) {
                    if (_util.css(pinTarget, "position") != "fixed") {
                        _util.css(pinTarget, {
                            position: "fixed"
                        });
                        updatePinDimensions()
                    }
                    var fixedPos = _util.get.offset(_pinOptions.spacer, true)
                      , scrollDistance = _options.reverse || _options.duration === 0 ? containerInfo.scrollPos - _scrollOffset.start : Math.round(_progress * _options.duration * 10) / 10;
                    fixedPos[containerInfo.vertical ? "top" : "left"] += scrollDistance;
                    _util.css(_pinOptions.spacer.firstChild, {
                        top: fixedPos.top,
                        left: fixedPos.left
                    })
                } else {
                    var newCSS = {
                        position: _pinOptions.inFlow ? "relative" : "absolute",
                        top: 0,
                        left: 0
                    }
                      , change = _util.css(pinTarget, "position") != newCSS.position;
                    if (!_pinOptions.pushFollowers) {
                        newCSS[containerInfo.vertical ? "top" : "left"] = _options.duration * _progress
                    } else if (_options.duration > 0) {
                        if (_state === SCENE_STATE_AFTER && parseFloat(_util.css(_pinOptions.spacer, "padding-top")) === 0) {
                            change = true
                        } else if (_state === SCENE_STATE_BEFORE && parseFloat(_util.css(_pinOptions.spacer, "padding-bottom")) === 0) {
                            change = true
                        }
                    }
                    _util.css(pinTarget, newCSS);
                    if (change) {
                        updatePinDimensions()
                    }
                }
            }
        };
        var updatePinDimensions = function() {
            if (_pin && _controller && _pinOptions.inFlow) {
                var after = _state === SCENE_STATE_AFTER
                  , before = _state === SCENE_STATE_BEFORE
                  , during = _state === SCENE_STATE_DURING
                  , vertical = _controller.info("vertical")
                  , pinTarget = _pinOptions.spacer.firstChild
                  , marginCollapse = _util.isMarginCollapseType(_util.css(_pinOptions.spacer, "display"))
                  , css = {};
                if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
                    if (during) {
                        _util.css(_pin, {
                            width: _util.get.width(_pinOptions.spacer)
                        })
                    } else {
                        _util.css(_pin, {
                            width: "100%"
                        })
                    }
                } else {
                    css["min-width"] = _util.get.width(vertical ? _pin : pinTarget, true, true);
                    css.width = during ? css["min-width"] : "auto"
                }
                if (_pinOptions.relSize.height) {
                    if (during) {
                        _util.css(_pin, {
                            height: _util.get.height(_pinOptions.spacer) - (_pinOptions.pushFollowers ? _options.duration : 0)
                        })
                    } else {
                        _util.css(_pin, {
                            height: "100%"
                        })
                    }
                } else {
                    css["min-height"] = _util.get.height(vertical ? pinTarget : _pin, true, !marginCollapse);
                    css.height = during ? css["min-height"] : "auto"
                }
                if (_pinOptions.pushFollowers) {
                    css["padding" + (vertical ? "Top" : "Left")] = _options.duration * _progress;
                    css["padding" + (vertical ? "Bottom" : "Right")] = _options.duration * (1 - _progress)
                }
                _util.css(_pinOptions.spacer, css)
            }
        };
        var updatePinInContainer = function() {
            if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) {
                updatePinState()
            }
        };
        var updateRelativePinSpacer = function() {
            if (_controller && _pin && _state === SCENE_STATE_DURING && ((_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) && _util.get.width(window) != _util.get.width(_pinOptions.spacer.parentNode) || _pinOptions.relSize.height && _util.get.height(window) != _util.get.height(_pinOptions.spacer.parentNode))) {
                updatePinDimensions()
            }
        };
        var onMousewheelOverPin = function(e) {
            if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) {
                e.preventDefault();
                _controller._setScrollPos(_controller.info("scrollPos") - ((e.wheelDelta || e[_controller.info("vertical") ? "wheelDeltaY" : "wheelDeltaX"]) / 3 || -e.detail * 30))
            }
        };
        this.setPin = function(element, settings) {
            var defaultSettings = {
                pushFollowers: true,
                spacerClass: "scrollmagic-pin-spacer"
            };
            settings = _util.extend({}, defaultSettings, settings);
            element = _util.get.elements(element)[0];
            if (!element) {
                log(1, "ERROR calling method 'setPin()': Invalid pin element supplied.");
                return Scene
            } else if (_util.css(element, "position") === "fixed") {
                log(1, "ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.");
                return Scene
            }
            if (_pin) {
                if (_pin === element) {
                    return Scene
                } else {
                    Scene.removePin()
                }
            }
            _pin = element;
            var parentDisplay = _pin.parentNode.style.display
              , boundsParams = ["top", "left", "bottom", "right", "margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
            _pin.parentNode.style.display = "none";
            var inFlow = _util.css(_pin, "position") != "absolute"
              , pinCSS = _util.css(_pin, boundsParams.concat(["display"]))
              , sizeCSS = _util.css(_pin, ["width", "height"]);
            _pin.parentNode.style.display = parentDisplay;
            if (!inFlow && settings.pushFollowers) {
                log(2, "WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled.");
                settings.pushFollowers = false
            }
            window.setTimeout(function() {
                if (_pin && _options.duration === 0 && settings.pushFollowers) {
                    log(2, "WARNING: pushFollowers =", true, "has no effect, when scene duration is 0.")
                }
            }, 0);
            var spacer = _pin.parentNode.insertBefore(document.createElement("div"), _pin)
              , spacerCSS = _util.extend(pinCSS, {
                position: inFlow ? "relative" : "absolute",
                boxSizing: "content-box",
                mozBoxSizing: "content-box",
                webkitBoxSizing: "content-box"
            });
            if (!inFlow) {
                _util.extend(spacerCSS, _util.css(_pin, ["width", "height"]))
            }
            _util.css(spacer, spacerCSS);
            spacer.setAttribute(PIN_SPACER_ATTRIBUTE, "");
            _util.addClass(spacer, settings.spacerClass);
            _pinOptions = {
                spacer: spacer,
                relSize: {
                    width: sizeCSS.width.slice(-1) === "%",
                    height: sizeCSS.height.slice(-1) === "%",
                    autoFullWidth: sizeCSS.width === "auto" && inFlow && _util.isMarginCollapseType(pinCSS.display)
                },
                pushFollowers: settings.pushFollowers,
                inFlow: inFlow
            };
            if (!_pin.___origStyle) {
                _pin.___origStyle = {};
                var pinInlineCSS = _pin.style
                  , copyStyles = boundsParams.concat(["width", "height", "position", "boxSizing", "mozBoxSizing", "webkitBoxSizing"]);
                copyStyles.forEach(function(val) {
                    _pin.___origStyle[val] = pinInlineCSS[val] || ""
                })
            }
            if (_pinOptions.relSize.width) {
                _util.css(spacer, {
                    width: sizeCSS.width
                })
            }
            if (_pinOptions.relSize.height) {
                _util.css(spacer, {
                    height: sizeCSS.height
                })
            }
            spacer.appendChild(_pin);
            _util.css(_pin, {
                position: inFlow ? "relative" : "absolute",
                margin: "auto",
                top: "auto",
                left: "auto",
                bottom: "auto",
                right: "auto"
            });
            if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
                _util.css(_pin, {
                    boxSizing: "border-box",
                    mozBoxSizing: "border-box",
                    webkitBoxSizing: "border-box"
                })
            }
            window.addEventListener("scroll", updatePinInContainer);
            window.addEventListener("resize", updatePinInContainer);
            window.addEventListener("resize", updateRelativePinSpacer);
            _pin.addEventListener("mousewheel", onMousewheelOverPin);
            _pin.addEventListener("DOMMouseScroll", onMousewheelOverPin);
            log(3, "added pin");
            updatePinState();
            return Scene
        }
        ;
        this.removePin = function(reset) {
            if (_pin) {
                if (_state === SCENE_STATE_DURING) {
                    updatePinState(true)
                }
                if (reset || !_controller) {
                    var pinTarget = _pinOptions.spacer.firstChild;
                    if (pinTarget.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                        var style = _pinOptions.spacer.style
                          , values = ["margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
                        margins = {};
                        values.forEach(function(val) {
                            margins[val] = style[val] || ""
                        });
                        _util.css(pinTarget, margins)
                    }
                    _pinOptions.spacer.parentNode.insertBefore(pinTarget, _pinOptions.spacer);
                    _pinOptions.spacer.parentNode.removeChild(_pinOptions.spacer);
                    if (!_pin.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                        _util.css(_pin, _pin.___origStyle);
                        delete _pin.___origStyle
                    }
                }
                window.removeEventListener("scroll", updatePinInContainer);
                window.removeEventListener("resize", updatePinInContainer);
                window.removeEventListener("resize", updateRelativePinSpacer);
                _pin.removeEventListener("mousewheel", onMousewheelOverPin);
                _pin.removeEventListener("DOMMouseScroll", onMousewheelOverPin);
                _pin = undefined;
                log(3, "removed pin (reset: " + (reset ? "true" : "false") + ")")
            }
            return Scene
        }
        ;
        var _cssClasses, _cssClassElems = [];
        Scene.on("destroy.internal", function(e) {
            Scene.removeClassToggle(e.reset)
        });
        this.setClassToggle = function(element, classes) {
            var elems = _util.get.elements(element);
            if (elems.length === 0 || !_util.type.String(classes)) {
                log(1, "ERROR calling method 'setClassToggle()': Invalid " + (elems.length === 0 ? "element" : "classes") + " supplied.");
                return Scene
            }
            if (_cssClassElems.length > 0) {
                Scene.removeClassToggle()
            }
            _cssClasses = classes;
            _cssClassElems = elems;
            Scene.on("enter.internal_class leave.internal_class", function(e) {
                var toggle = e.type === "enter" ? _util.addClass : _util.removeClass;
                _cssClassElems.forEach(function(elem, key) {
                    toggle(elem, _cssClasses)
                })
            });
            return Scene
        }
        ;
        this.removeClassToggle = function(reset) {
            if (reset) {
                _cssClassElems.forEach(function(elem, key) {
                    _util.removeClass(elem, _cssClasses)
                })
            }
            Scene.off("start.internal_class end.internal_class");
            _cssClasses = undefined;
            _cssClassElems = [];
            return Scene
        }
        ;
        construct();
        return Scene
    }
    ;
    var SCENE_OPTIONS = {
        defaults: {
            duration: 0,
            offset: 0,
            triggerElement: undefined,
            triggerHook: .5,
            reverse: true,
            loglevel: 2
        },
        validate: {
            offset: function(val) {
                val = parseFloat(val);
                if (!_util.type.Number(val)) {
                    throw ['Invalid value for option "offset":', val]
                }
                return val
            },
            triggerElement: function(val) {
                val = val || undefined;
                if (val) {
                    var elem = _util.get.elements(val)[0];
                    if (elem) {
                        val = elem
                    } else {
                        throw ['Element defined in option "triggerElement" was not found:', val]
                    }
                }
                return val
            },
            triggerHook: function(val) {
                var translate = {
                    onCenter: .5,
                    onEnter: 1,
                    onLeave: 0
                };
                if (_util.type.Number(val)) {
                    val = Math.max(0, Math.min(parseFloat(val), 1))
                } else if (val in translate) {
                    val = translate[val]
                } else {
                    throw ['Invalid value for option "triggerHook": ', val]
                }
                return val
            },
            reverse: function(val) {
                return !!val
            },
            loglevel: function(val) {
                val = parseInt(val);
                if (!_util.type.Number(val) || val < 0 || val > 3) {
                    throw ['Invalid value for option "loglevel":', val]
                }
                return val
            }
        },
        shifts: ["duration", "offset", "triggerHook"]
    };
    ScrollMagic.Scene.addOption = function(name, defaultValue, validationCallback, shifts) {
        if (!(name in SCENE_OPTIONS.defaults)) {
            SCENE_OPTIONS.defaults[name] = defaultValue;
            SCENE_OPTIONS.validate[name] = validationCallback;
            if (shifts) {
                SCENE_OPTIONS.shifts.push(name)
            }
        } else {
            ScrollMagic._util.log(1, "[static] ScrollMagic.Scene -> Cannot add Scene option '" + name + "', because it already exists.")
        }
    }
    ;
    ScrollMagic.Scene.extend = function(extension) {
        var oldClass = this;
        ScrollMagic.Scene = function() {
            oldClass.apply(this, arguments);
            this.$super = _util.extend({}, this);
            return extension.apply(this, arguments) || this
        }
        ;
        _util.extend(ScrollMagic.Scene, oldClass);
        ScrollMagic.Scene.prototype = oldClass.prototype;
        ScrollMagic.Scene.prototype.constructor = ScrollMagic.Scene
    }
    ;
    ScrollMagic.Event = function(type, namespace, target, vars) {
        vars = vars || {};
        for (var key in vars) {
            this[key] = vars[key]
        }
        this.type = type;
        this.target = this.currentTarget = target;
        this.namespace = namespace || "";
        this.timeStamp = this.timestamp = Date.now();
        return this
    }
    ;
    var _util = ScrollMagic._util = function(window) {
        var U = {}, i;
        var floatval = function(number) {
            return parseFloat(number) || 0
        };
        var _getComputedStyle = function(elem) {
            return elem.currentStyle ? elem.currentStyle : window.getComputedStyle(elem)
        };
        var _dimension = function(which, elem, outer, includeMargin) {
            elem = elem === document ? window : elem;
            if (elem === window) {
                includeMargin = false
            } else if (!_type.DomElement(elem)) {
                return 0
            }
            which = which.charAt(0).toUpperCase() + which.substr(1).toLowerCase();
            var dimension = (outer ? elem["offset" + which] || elem["outer" + which] : elem["client" + which] || elem["inner" + which]) || 0;
            if (outer && includeMargin) {
                var style = _getComputedStyle(elem);
                dimension += which === "Height" ? floatval(style.marginTop) + floatval(style.marginBottom) : floatval(style.marginLeft) + floatval(style.marginRight)
            }
            return dimension
        };
        var _camelCase = function(str) {
            return str.replace(/^[^a-z]+([a-z])/g, "$1").replace(/-([a-z])/g, function(g) {
                return g[1].toUpperCase()
            })
        };
        U.extend = function(obj) {
            obj = obj || {};
            for (i = 1; i < arguments.length; i++) {
                if (!arguments[i]) {
                    continue
                }
                for (var key in arguments[i]) {
                    if (arguments[i].hasOwnProperty(key)) {
                        obj[key] = arguments[i][key]
                    }
                }
            }
            return obj
        }
        ;
        U.isMarginCollapseType = function(str) {
            return ["block", "flex", "list-item", "table", "-webkit-box"].indexOf(str) > -1
        }
        ;
        var lastTime = 0
          , vendors = ["ms", "moz", "webkit", "o"];
        var _requestAnimationFrame = window.requestAnimationFrame;
        var _cancelAnimationFrame = window.cancelAnimationFrame;
        for (i = 0; !_requestAnimationFrame && i < vendors.length; ++i) {
            _requestAnimationFrame = window[vendors[i] + "RequestAnimationFrame"];
            _cancelAnimationFrame = window[vendors[i] + "CancelAnimationFrame"] || window[vendors[i] + "CancelRequestAnimationFrame"]
        }
        if (!_requestAnimationFrame) {
            _requestAnimationFrame = function(callback) {
                var currTime = (new Date).getTime()
                  , timeToCall = Math.max(0, 16 - (currTime - lastTime))
                  , id = window.setTimeout(function() {
                    callback(currTime + timeToCall)
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id
            }
        }
        if (!_cancelAnimationFrame) {
            _cancelAnimationFrame = function(id) {
                window.clearTimeout(id)
            }
        }
        U.rAF = _requestAnimationFrame.bind(window);
        U.cAF = _cancelAnimationFrame.bind(window);
        var loglevels = ["error", "warn", "log"]
          , console = window.console || {};
        console.log = console.log || function() {}
        ;
        for (i = 0; i < loglevels.length; i++) {
            var method = loglevels[i];
            if (!console[method]) {
                console[method] = console.log
            }
        }
        U.log = function(loglevel) {
            if (loglevel > loglevels.length || loglevel <= 0)
                loglevel = loglevels.length;
            var now = new Date
              , time = ("0" + now.getHours()).slice(-2) + ":" + ("0" + now.getMinutes()).slice(-2) + ":" + ("0" + now.getSeconds()).slice(-2) + ":" + ("00" + now.getMilliseconds()).slice(-3)
              , method = loglevels[loglevel - 1]
              , args = Array.prototype.splice.call(arguments, 1)
              , func = Function.prototype.bind.call(console[method], console);
            args.unshift(time);
            func.apply(console, args)
        }
        ;
        var _type = U.type = function(v) {
            return Object.prototype.toString.call(v).replace(/^\[object (.+)\]$/, "$1").toLowerCase()
        }
        ;
        _type.String = function(v) {
            return _type(v) === "string"
        }
        ;
        _type.Function = function(v) {
            return _type(v) === "function"
        }
        ;
        _type.Array = function(v) {
            return Array.isArray(v)
        }
        ;
        _type.Number = function(v) {
            return !_type.Array(v) && v - parseFloat(v) + 1 >= 0
        }
        ;
        _type.DomElement = function(o) {
            return typeof HTMLElement === "object" ? o instanceof HTMLElement : o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string"
        }
        ;
        var _get = U.get = {};
        _get.elements = function(selector) {
            var arr = [];
            if (_type.String(selector)) {
                try {
                    selector = document.querySelectorAll(selector)
                } catch (e) {
                    return arr
                }
            }
            if (_type(selector) === "nodelist" || _type.Array(selector)) {
                for (var i = 0, ref = arr.length = selector.length; i < ref; i++) {
                    var elem = selector[i];
                    arr[i] = _type.DomElement(elem) ? elem : _get.elements(elem)
                }
            } else if (_type.DomElement(selector) || selector === document || selector === window) {
                arr = [selector]
            }
            return arr
        }
        ;
        _get.scrollTop = function(elem) {
            return elem && typeof elem.scrollTop === "number" ? elem.scrollTop : window.pageYOffset || 0
        }
        ;
        _get.scrollLeft = function(elem) {
            return elem && typeof elem.scrollLeft === "number" ? elem.scrollLeft : window.pageXOffset || 0
        }
        ;
        _get.width = function(elem, outer, includeMargin) {
            return _dimension("width", elem, outer, includeMargin)
        }
        ;
        _get.height = function(elem, outer, includeMargin) {
            return _dimension("height", elem, outer, includeMargin)
        }
        ;
        _get.offset = function(elem, relativeToViewport) {
            var offset = {
                top: 0,
                left: 0
            };
            if (elem && elem.getBoundingClientRect) {
                var rect = elem.getBoundingClientRect();
                offset.top = rect.top;
                offset.left = rect.left;
                if (!relativeToViewport) {
                    offset.top += _get.scrollTop();
                    offset.left += _get.scrollLeft()
                }
            }
            return offset
        }
        ;
        U.addClass = function(elem, classname) {
            if (classname) {
                if (elem.classList)
                    elem.classList.add(classname);
                else
                    elem.className += " " + classname
            }
        }
        ;
        U.removeClass = function(elem, classname) {
            if (classname) {
                if (elem.classList)
                    elem.classList.remove(classname);
                else
                    elem.className = elem.className.replace(new RegExp("(^|\\b)" + classname.split(" ").join("|") + "(\\b|$)","gi"), " ")
            }
        }
        ;
        U.css = function(elem, options) {
            if (_type.String(options)) {
                return _getComputedStyle(elem)[_camelCase(options)]
            } else if (_type.Array(options)) {
                var obj = {}
                  , style = _getComputedStyle(elem);
                options.forEach(function(option, key) {
                    obj[option] = style[_camelCase(option)]
                });
                return obj
            } else {
                for (var option in options) {
                    var val = options[option];
                    if (val == parseFloat(val)) {
                        val += "px"
                    }
                    elem.style[_camelCase(option)] = val
                }
            }
        }
        ;
        return U
    }(window || {});
    ScrollMagic.Scene.prototype.addIndicators = function() {
        ScrollMagic._util.log(1, "(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js");
        return this
    }
    ;
    ScrollMagic.Scene.prototype.removeIndicators = function() {
        ScrollMagic._util.log(1, "(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin 'debug.addIndicators'. Please make sure to include plugins/debug.addIndicators.js");
        return this
    }
    ;
    ScrollMagic.Scene.prototype.setTween = function() {
        ScrollMagic._util.log(1, "(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js");
        return this
    }
    ;
    ScrollMagic.Scene.prototype.removeTween = function() {
        ScrollMagic._util.log(1, "(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin 'animation.gsap'. Please make sure to include plugins/animation.gsap.js");
        return this
    }
    ;
    ScrollMagic.Scene.prototype.setVelocity = function() {
        ScrollMagic._util.log(1, "(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js");
        return this
    }
    ;
    ScrollMagic.Scene.prototype.removeVelocity = function() {
        ScrollMagic._util.log(1, "(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin 'animation.velocity'. Please make sure to include plugins/animation.velocity.js");
        return this
    }
    ;
    return ScrollMagic
});
(function(f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g.videojs = f()
    }
}
)(function() {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND",
                    f
                }
                var l = n[o] = {
                    exports: {}
                };
                t[o][0].call(l.exports, function(e) {
                    var n = t[o][1][e];
                    return s(n ? n : e)
                }, l, l.exports, e, t, n, r)
            }
            return n[o].exports
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s
    }({
        1: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _button = _dereq_(2);
            var _button2 = _interopRequireDefault(_button);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var BigPlayButton = function(_Button) {
                _inherits(BigPlayButton, _Button);
                function BigPlayButton() {
                    _classCallCheck(this, BigPlayButton);
                    return _possibleConstructorReturn(this, _Button.apply(this, arguments))
                }
                BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-big-play-button"
                }
                ;
                BigPlayButton.prototype.handleClick = function handleClick(event) {
                    this.player_.play()
                }
                ;
                return BigPlayButton
            }(_button2["default"]);
            BigPlayButton.prototype.controlText_ = "Play Video";
            _component2["default"].registerComponent("BigPlayButton", BigPlayButton);
            exports["default"] = BigPlayButton
        }
        , {
            2: 2,
            5: 5
        }],
        2: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _clickableComponent = _dereq_(3);
            var _clickableComponent2 = _interopRequireDefault(_clickableComponent);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _obj = _dereq_(88);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Button = function(_ClickableComponent) {
                _inherits(Button, _ClickableComponent);
                function Button() {
                    _classCallCheck(this, Button);
                    return _possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments))
                }
                Button.prototype.createEl = function createEl() {
                    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "button";
                    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    props = (0,
                    _obj.assign)({
                        className: this.buildCSSClass()
                    }, props);
                    if (tag !== "button") {
                        _log2["default"].warn("Creating a Button with an HTML element of " + tag + " is deprecated; use ClickableComponent instead.");
                        props = (0,
                        _obj.assign)({
                            tabIndex: 0
                        }, props);
                        attributes = (0,
                        _obj.assign)({
                            role: "button"
                        }, attributes)
                    }
                    attributes = (0,
                    _obj.assign)({
                        type: "button",
                        "aria-live": "polite"
                    }, attributes);
                    var el = _component2["default"].prototype.createEl.call(this, tag, props, attributes);
                    this.createControlTextEl(el);
                    return el
                }
                ;
                Button.prototype.addChild = function addChild(child) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var className = this.constructor.name;
                    _log2["default"].warn("Adding an actionable (user controllable) child to a Button (" + className + ") is not supported; use a ClickableComponent instead.");
                    return _component2["default"].prototype.addChild.call(this, child, options)
                }
                ;
                Button.prototype.enable = function enable() {
                    _ClickableComponent.prototype.enable.call(this);
                    this.el_.removeAttribute("disabled")
                }
                ;
                Button.prototype.disable = function disable() {
                    _ClickableComponent.prototype.disable.call(this);
                    this.el_.setAttribute("disabled", "disabled")
                }
                ;
                Button.prototype.handleKeyPress = function handleKeyPress(event) {
                    if (event.which === 32 || event.which === 13) {
                        return
                    }
                    _ClickableComponent.prototype.handleKeyPress.call(this, event)
                }
                ;
                return Button
            }(_clickableComponent2["default"]);
            _component2["default"].registerComponent("Button", Button);
            exports["default"] = Button
        }
        , {
            3: 3,
            5: 5,
            86: 86,
            88: 88
        }],
        3: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _obj = _dereq_(88);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var ClickableComponent = function(_Component) {
                _inherits(ClickableComponent, _Component);
                function ClickableComponent(player, options) {
                    _classCallCheck(this, ClickableComponent);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.emitTapEvents();
                    _this.enable();
                    return _this
                }
                ClickableComponent.prototype.createEl = function createEl() {
                    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "div";
                    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    props = (0,
                    _obj.assign)({
                        className: this.buildCSSClass(),
                        tabIndex: 0
                    }, props);
                    if (tag === "button") {
                        _log2["default"].error("Creating a ClickableComponent with an HTML element of " + tag + " is not supported; use a Button instead.")
                    }
                    attributes = (0,
                    _obj.assign)({
                        role: "button",
                        "aria-live": "polite"
                    }, attributes);
                    this.tabIndex_ = props.tabIndex;
                    var el = _Component.prototype.createEl.call(this, tag, props, attributes);
                    this.createControlTextEl(el);
                    return el
                }
                ;
                ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
                    this.controlTextEl_ = Dom.createEl("span", {
                        className: "vjs-control-text"
                    });
                    if (el) {
                        el.appendChild(this.controlTextEl_)
                    }
                    this.controlText(this.controlText_, el);
                    return this.controlTextEl_
                }
                ;
                ClickableComponent.prototype.controlText = function controlText(text) {
                    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();
                    if (!text) {
                        return this.controlText_ || "Need Text"
                    }
                    var localizedText = this.localize(text);
                    this.controlText_ = text;
                    this.controlTextEl_.innerHTML = localizedText;
                    el.setAttribute("title", localizedText);
                    return this
                }
                ;
                ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-control vjs-button " + _Component.prototype.buildCSSClass.call(this)
                }
                ;
                ClickableComponent.prototype.enable = function enable() {
                    this.removeClass("vjs-disabled");
                    this.el_.setAttribute("aria-disabled", "false");
                    if (typeof this.tabIndex_ !== "undefined") {
                        this.el_.setAttribute("tabIndex", this.tabIndex_)
                    }
                    this.on("tap", this.handleClick);
                    this.on("click", this.handleClick);
                    this.on("focus", this.handleFocus);
                    this.on("blur", this.handleBlur);
                    return this
                }
                ;
                ClickableComponent.prototype.disable = function disable() {
                    this.addClass("vjs-disabled");
                    this.el_.setAttribute("aria-disabled", "true");
                    if (typeof this.tabIndex_ !== "undefined") {
                        this.el_.removeAttribute("tabIndex")
                    }
                    this.off("tap", this.handleClick);
                    this.off("click", this.handleClick);
                    this.off("focus", this.handleFocus);
                    this.off("blur", this.handleBlur);
                    return this
                }
                ;
                ClickableComponent.prototype.handleClick = function handleClick(event) {}
                ;
                ClickableComponent.prototype.handleFocus = function handleFocus(event) {
                    Events.on(_document2["default"], "keydown", Fn.bind(this, this.handleKeyPress))
                }
                ;
                ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {
                    if (event.which === 32 || event.which === 13) {
                        event.preventDefault();
                        this.handleClick(event)
                    } else if (_Component.prototype.handleKeyPress) {
                        _Component.prototype.handleKeyPress.call(this, event)
                    }
                }
                ;
                ClickableComponent.prototype.handleBlur = function handleBlur(event) {
                    Events.off(_document2["default"], "keydown", Fn.bind(this, this.handleKeyPress))
                }
                ;
                return ClickableComponent
            }(_component2["default"]);
            _component2["default"].registerComponent("ClickableComponent", ClickableComponent);
            exports["default"] = ClickableComponent
        }
        , {
            5: 5,
            81: 81,
            82: 82,
            83: 83,
            86: 86,
            88: 88,
            94: 94
        }],
        4: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _button = _dereq_(2);
            var _button2 = _interopRequireDefault(_button);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var CloseButton = function(_Button) {
                _inherits(CloseButton, _Button);
                function CloseButton(player, options) {
                    _classCallCheck(this, CloseButton);
                    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));
                    _this.controlText(options && options.controlText || _this.localize("Close"));
                    return _this
                }
                CloseButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-close-button " + _Button.prototype.buildCSSClass.call(this)
                }
                ;
                CloseButton.prototype.handleClick = function handleClick(event) {
                    this.trigger({
                        type: "close",
                        bubbles: false
                    })
                }
                ;
                return CloseButton
            }(_button2["default"]);
            _component2["default"].registerComponent("CloseButton", CloseButton);
            exports["default"] = CloseButton
        }
        , {
            2: 2,
            5: 5
        }],
        5: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _guid = _dereq_(85);
            var Guid = _interopRequireWildcard(_guid);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _toTitleCase = _dereq_(91);
            var _toTitleCase2 = _interopRequireDefault(_toTitleCase);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            var Component = function() {
                function Component(player, options, ready) {
                    _classCallCheck(this, Component);
                    if (!player && this.play) {
                        this.player_ = player = this
                    } else {
                        this.player_ = player
                    }
                    this.options_ = (0,
                    _mergeOptions2["default"])({}, this.options_);
                    options = this.options_ = (0,
                    _mergeOptions2["default"])(this.options_, options);
                    this.id_ = options.id || options.el && options.el.id;
                    if (!this.id_) {
                        var id = player && player.id && player.id() || "no_player";
                        this.id_ = id + "_component_" + Guid.newGUID()
                    }
                    this.name_ = options.name || null;
                    if (options.el) {
                        this.el_ = options.el
                    } else if (options.createEl !== false) {
                        this.el_ = this.createEl()
                    }
                    this.children_ = [];
                    this.childIndex_ = {};
                    this.childNameIndex_ = {};
                    if (options.initChildren !== false) {
                        this.initChildren()
                    }
                    this.ready(ready);
                    if (options.reportTouchActivity !== false) {
                        this.enableTouchActivity()
                    }
                }
                Component.prototype.dispose = function dispose() {
                    this.trigger({
                        type: "dispose",
                        bubbles: false
                    });
                    if (this.children_) {
                        for (var i = this.children_.length - 1; i >= 0; i--) {
                            if (this.children_[i].dispose) {
                                this.children_[i].dispose()
                            }
                        }
                    }
                    this.children_ = null;
                    this.childIndex_ = null;
                    this.childNameIndex_ = null;
                    this.off();
                    if (this.el_.parentNode) {
                        this.el_.parentNode.removeChild(this.el_)
                    }
                    Dom.removeElData(this.el_);
                    this.el_ = null
                }
                ;
                Component.prototype.player = function player() {
                    return this.player_
                }
                ;
                Component.prototype.options = function options(obj) {
                    _log2["default"].warn("this.options() has been deprecated and will be moved to the constructor in 6.0");
                    if (!obj) {
                        return this.options_
                    }
                    this.options_ = (0,
                    _mergeOptions2["default"])(this.options_, obj);
                    return this.options_
                }
                ;
                Component.prototype.el = function el() {
                    return this.el_
                }
                ;
                Component.prototype.createEl = function createEl(tagName, properties, attributes) {
                    return Dom.createEl(tagName, properties, attributes)
                }
                ;
                Component.prototype.localize = function localize(string) {
                    var code = this.player_.language && this.player_.language();
                    var languages = this.player_.languages && this.player_.languages();
                    if (!code || !languages) {
                        return string
                    }
                    var language = languages[code];
                    if (language && language[string]) {
                        return language[string]
                    }
                    var primaryCode = code.split("-")[0];
                    var primaryLang = languages[primaryCode];
                    if (primaryLang && primaryLang[string]) {
                        return primaryLang[string]
                    }
                    return string
                }
                ;
                Component.prototype.contentEl = function contentEl() {
                    return this.contentEl_ || this.el_
                }
                ;
                Component.prototype.id = function id() {
                    return this.id_
                }
                ;
                Component.prototype.name = function name() {
                    return this.name_
                }
                ;
                Component.prototype.children = function children() {
                    return this.children_
                }
                ;
                Component.prototype.getChildById = function getChildById(id) {
                    return this.childIndex_[id]
                }
                ;
                Component.prototype.getChild = function getChild(name) {
                    if (!name) {
                        return
                    }
                    name = (0,
                    _toTitleCase2["default"])(name);
                    return this.childNameIndex_[name]
                }
                ;
                Component.prototype.addChild = function addChild(child) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;
                    var component = void 0;
                    var componentName = void 0;
                    if (typeof child === "string") {
                        componentName = (0,
                        _toTitleCase2["default"])(child);
                        if (!options) {
                            options = {}
                        }
                        if (options === true) {
                            _log2["default"].warn("Initializing a child component with `true` is deprecated." + "Children should be defined in an array when possible, " + "but if necessary use an object instead of `true`.");
                            options = {}
                        }
                        var componentClassName = options.componentClass || componentName;
                        options.name = componentName;
                        var ComponentClass = Component.getComponent(componentClassName);
                        if (!ComponentClass) {
                            throw new Error("Component " + componentClassName + " does not exist")
                        }
                        if (typeof ComponentClass !== "function") {
                            return null
                        }
                        component = new ComponentClass(this.player_ || this,options)
                    } else {
                        component = child
                    }
                    this.children_.splice(index, 0, component);
                    if (typeof component.id === "function") {
                        this.childIndex_[component.id()] = component
                    }
                    componentName = componentName || component.name && component.name();
                    if (componentName) {
                        this.childNameIndex_[componentName] = component
                    }
                    if (typeof component.el === "function" && component.el()) {
                        var childNodes = this.contentEl().children;
                        var refNode = childNodes[index] || null;
                        this.contentEl().insertBefore(component.el(), refNode)
                    }
                    return component
                }
                ;
                Component.prototype.removeChild = function removeChild(component) {
                    if (typeof component === "string") {
                        component = this.getChild(component)
                    }
                    if (!component || !this.children_) {
                        return
                    }
                    var childFound = false;
                    for (var i = this.children_.length - 1; i >= 0; i--) {
                        if (this.children_[i] === component) {
                            childFound = true;
                            this.children_.splice(i, 1);
                            break
                        }
                    }
                    if (!childFound) {
                        return
                    }
                    this.childIndex_[component.id()] = null;
                    this.childNameIndex_[component.name()] = null;
                    var compEl = component.el();
                    if (compEl && compEl.parentNode === this.contentEl()) {
                        this.contentEl().removeChild(component.el())
                    }
                }
                ;
                Component.prototype.initChildren = function initChildren() {
                    var _this = this;
                    var children = this.options_.children;
                    if (children) {
                        (function() {
                            var parentOptions = _this.options_;
                            var handleAdd = function handleAdd(child) {
                                var name = child.name;
                                var opts = child.opts;
                                if (parentOptions[name] !== undefined) {
                                    opts = parentOptions[name]
                                }
                                if (opts === false) {
                                    return
                                }
                                if (opts === true) {
                                    opts = {}
                                }
                                opts.playerOptions = _this.options_.playerOptions;
                                var newChild = _this.addChild(name, opts);
                                if (newChild) {
                                    _this[name] = newChild
                                }
                            };
                            var workingChildren = void 0;
                            var Tech = Component.getComponent("Tech");
                            if (Array.isArray(children)) {
                                workingChildren = children
                            } else {
                                workingChildren = Object.keys(children)
                            }
                            workingChildren.concat(Object.keys(_this.options_).filter(function(child) {
                                return !workingChildren.some(function(wchild) {
                                    if (typeof wchild === "string") {
                                        return child === wchild
                                    }
                                    return child === wchild.name
                                })
                            })).map(function(child) {
                                var name = void 0;
                                var opts = void 0;
                                if (typeof child === "string") {
                                    name = child;
                                    opts = children[name] || _this.options_[name] || {}
                                } else {
                                    name = child.name;
                                    opts = child
                                }
                                return {
                                    name: name,
                                    opts: opts
                                }
                            }).filter(function(child) {
                                var c = Component.getComponent(child.opts.componentClass || (0,
                                _toTitleCase2["default"])(child.name));
                                return c && !Tech.isTech(c)
                            }).forEach(handleAdd)
                        }
                        )()
                    }
                }
                ;
                Component.prototype.buildCSSClass = function buildCSSClass() {
                    return ""
                }
                ;
                Component.prototype.on = function on(first, second, third) {
                    var _this2 = this;
                    if (typeof first === "string" || Array.isArray(first)) {
                        Events.on(this.el_, first, Fn.bind(this, second))
                    } else {
                        (function() {
                            var target = first;
                            var type = second;
                            var fn = Fn.bind(_this2, third);
                            var removeOnDispose = function removeOnDispose() {
                                return _this2.off(target, type, fn)
                            };
                            removeOnDispose.guid = fn.guid;
                            _this2.on("dispose", removeOnDispose);
                            var cleanRemover = function cleanRemover() {
                                return _this2.off("dispose", removeOnDispose)
                            };
                            cleanRemover.guid = fn.guid;
                            if (first.nodeName) {
                                Events.on(target, type, fn);
                                Events.on(target, "dispose", cleanRemover)
                            } else if (typeof first.on === "function") {
                                target.on(type, fn);
                                target.on("dispose", cleanRemover)
                            }
                        }
                        )()
                    }
                    return this
                }
                ;
                Component.prototype.off = function off(first, second, third) {
                    if (!first || typeof first === "string" || Array.isArray(first)) {
                        Events.off(this.el_, first, second)
                    } else {
                        var target = first;
                        var type = second;
                        var fn = Fn.bind(this, third);
                        this.off("dispose", fn);
                        if (first.nodeName) {
                            Events.off(target, type, fn);
                            Events.off(target, "dispose", fn)
                        } else {
                            target.off(type, fn);
                            target.off("dispose", fn)
                        }
                    }
                    return this
                }
                ;
                Component.prototype.one = function one(first, second, third) {
                    var _this3 = this
                      , _arguments = arguments;
                    if (typeof first === "string" || Array.isArray(first)) {
                        Events.one(this.el_, first, Fn.bind(this, second))
                    } else {
                        (function() {
                            var target = first;
                            var type = second;
                            var fn = Fn.bind(_this3, third);
                            var newFunc = function newFunc() {
                                _this3.off(target, type, newFunc);
                                fn.apply(null, _arguments)
                            };
                            newFunc.guid = fn.guid;
                            _this3.on(target, type, newFunc)
                        }
                        )()
                    }
                    return this
                }
                ;
                Component.prototype.trigger = function trigger(event, hash) {
                    Events.trigger(this.el_, event, hash);
                    return this
                }
                ;
                Component.prototype.ready = function ready(fn) {
                    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                    if (fn) {
                        if (this.isReady_) {
                            if (sync) {
                                fn.call(this)
                            } else {
                                this.setTimeout(fn, 1)
                            }
                        } else {
                            this.readyQueue_ = this.readyQueue_ || [];
                            this.readyQueue_.push(fn)
                        }
                    }
                    return this
                }
                ;
                Component.prototype.triggerReady = function triggerReady() {
                    this.isReady_ = true;
                    this.setTimeout(function() {
                        var readyQueue = this.readyQueue_;
                        this.readyQueue_ = [];
                        if (readyQueue && readyQueue.length > 0) {
                            readyQueue.forEach(function(fn) {
                                fn.call(this)
                            }, this)
                        }
                        this.trigger("ready")
                    }, 1)
                }
                ;
                Component.prototype.$ = function $(selector, context) {
                    return Dom.$(selector, context || this.contentEl())
                }
                ;
                Component.prototype.$$ = function $$(selector, context) {
                    return Dom.$$(selector, context || this.contentEl())
                }
                ;
                Component.prototype.hasClass = function hasClass(classToCheck) {
                    return Dom.hasElClass(this.el_, classToCheck)
                }
                ;
                Component.prototype.addClass = function addClass(classToAdd) {
                    Dom.addElClass(this.el_, classToAdd);
                    return this
                }
                ;
                Component.prototype.removeClass = function removeClass(classToRemove) {
                    Dom.removeElClass(this.el_, classToRemove);
                    return this
                }
                ;
                Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
                    Dom.toggleElClass(this.el_, classToToggle, predicate);
                    return this
                }
                ;
                Component.prototype.show = function show() {
                    this.removeClass("vjs-hidden");
                    return this
                }
                ;
                Component.prototype.hide = function hide() {
                    this.addClass("vjs-hidden");
                    return this
                }
                ;
                Component.prototype.lockShowing = function lockShowing() {
                    this.addClass("vjs-lock-showing");
                    return this
                }
                ;
                Component.prototype.unlockShowing = function unlockShowing() {
                    this.removeClass("vjs-lock-showing");
                    return this
                }
                ;
                Component.prototype.getAttribute = function getAttribute(attribute) {
                    return Dom.getAttribute(this.el_, attribute)
                }
                ;
                Component.prototype.setAttribute = function setAttribute(attribute, value) {
                    Dom.setAttribute(this.el_, attribute, value);
                    return this
                }
                ;
                Component.prototype.removeAttribute = function removeAttribute(attribute) {
                    Dom.removeAttribute(this.el_, attribute);
                    return this
                }
                ;
                Component.prototype.width = function width(num, skipListeners) {
                    return this.dimension("width", num, skipListeners)
                }
                ;
                Component.prototype.height = function height(num, skipListeners) {
                    return this.dimension("height", num, skipListeners)
                }
                ;
                Component.prototype.dimensions = function dimensions(width, height) {
                    return this.width(width, true).height(height)
                }
                ;
                Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
                    if (num !== undefined) {
                        if (num === null || num !== num) {
                            num = 0
                        }
                        if (("" + num).indexOf("%") !== -1 || ("" + num).indexOf("px") !== -1) {
                            this.el_.style[widthOrHeight] = num
                        } else if (num === "auto") {
                            this.el_.style[widthOrHeight] = ""
                        } else {
                            this.el_.style[widthOrHeight] = num + "px"
                        }
                        if (!skipListeners) {
                            this.trigger("resize")
                        }
                        return this
                    }
                    if (!this.el_) {
                        return 0
                    }
                    var val = this.el_.style[widthOrHeight];
                    var pxIndex = val.indexOf("px");
                    if (pxIndex !== -1) {
                        return parseInt(val.slice(0, pxIndex), 10)
                    }
                    return parseInt(this.el_["offset" + (0,
                    _toTitleCase2["default"])(widthOrHeight)], 10)
                }
                ;
                Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
                    var computedWidthOrHeight = 0;
                    if (widthOrHeight !== "width" && widthOrHeight !== "height") {
                        throw new Error("currentDimension only accepts width or height value")
                    }
                    if (typeof _window2["default"].getComputedStyle === "function") {
                        var computedStyle = _window2["default"].getComputedStyle(this.el_);
                        computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight]
                    }
                    computedWidthOrHeight = parseFloat(computedWidthOrHeight);
                    if (computedWidthOrHeight === 0) {
                        var rule = "offset" + (0,
                        _toTitleCase2["default"])(widthOrHeight);
                        computedWidthOrHeight = this.el_[rule]
                    }
                    return computedWidthOrHeight
                }
                ;
                Component.prototype.currentDimensions = function currentDimensions() {
                    return {
                        width: this.currentDimension("width"),
                        height: this.currentDimension("height")
                    }
                }
                ;
                Component.prototype.currentWidth = function currentWidth() {
                    return this.currentDimension("width")
                }
                ;
                Component.prototype.currentHeight = function currentHeight() {
                    return this.currentDimension("height")
                }
                ;
                Component.prototype.emitTapEvents = function emitTapEvents() {
                    var touchStart = 0;
                    var firstTouch = null;
                    var tapMovementThreshold = 10;
                    var touchTimeThreshold = 200;
                    var couldBeTap = void 0;
                    this.on("touchstart", function(event) {
                        if (event.touches.length === 1) {
                            firstTouch = {
                                pageX: event.touches[0].pageX,
                                pageY: event.touches[0].pageY
                            };
                            touchStart = (new Date).getTime();
                            couldBeTap = true
                        }
                    });
                    this.on("touchmove", function(event) {
                        if (event.touches.length > 1) {
                            couldBeTap = false
                        } else if (firstTouch) {
                            var xdiff = event.touches[0].pageX - firstTouch.pageX;
                            var ydiff = event.touches[0].pageY - firstTouch.pageY;
                            var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
                            if (touchDistance > tapMovementThreshold) {
                                couldBeTap = false
                            }
                        }
                    });
                    var noTap = function noTap() {
                        couldBeTap = false
                    };
                    this.on("touchleave", noTap);
                    this.on("touchcancel", noTap);
                    this.on("touchend", function(event) {
                        firstTouch = null;
                        if (couldBeTap === true) {
                            var touchTime = (new Date).getTime() - touchStart;
                            if (touchTime < touchTimeThreshold) {
                                event.preventDefault();
                                this.trigger("tap")
                            }
                        }
                    })
                }
                ;
                Component.prototype.enableTouchActivity = function enableTouchActivity() {
                    if (!this.player() || !this.player().reportUserActivity) {
                        return
                    }
                    var report = Fn.bind(this.player(), this.player().reportUserActivity);
                    var touchHolding = void 0;
                    this.on("touchstart", function() {
                        report();
                        this.clearInterval(touchHolding);
                        touchHolding = this.setInterval(report, 250)
                    });
                    var touchEnd = function touchEnd(event) {
                        report();
                        this.clearInterval(touchHolding)
                    };
                    this.on("touchmove", report);
                    this.on("touchend", touchEnd);
                    this.on("touchcancel", touchEnd)
                }
                ;
                Component.prototype.setTimeout = function setTimeout(fn, timeout) {
                    fn = Fn.bind(this, fn);
                    var timeoutId = _window2["default"].setTimeout(fn, timeout);
                    var disposeFn = function disposeFn() {
                        this.clearTimeout(timeoutId)
                    };
                    disposeFn.guid = "vjs-timeout-" + timeoutId;
                    this.on("dispose", disposeFn);
                    return timeoutId
                }
                ;
                Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
                    _window2["default"].clearTimeout(timeoutId);
                    var disposeFn = function disposeFn() {};
                    disposeFn.guid = "vjs-timeout-" + timeoutId;
                    this.off("dispose", disposeFn);
                    return timeoutId
                }
                ;
                Component.prototype.setInterval = function setInterval(fn, interval) {
                    fn = Fn.bind(this, fn);
                    var intervalId = _window2["default"].setInterval(fn, interval);
                    var disposeFn = function disposeFn() {
                        this.clearInterval(intervalId)
                    };
                    disposeFn.guid = "vjs-interval-" + intervalId;
                    this.on("dispose", disposeFn);
                    return intervalId
                }
                ;
                Component.prototype.clearInterval = function clearInterval(intervalId) {
                    _window2["default"].clearInterval(intervalId);
                    var disposeFn = function disposeFn() {};
                    disposeFn.guid = "vjs-interval-" + intervalId;
                    this.off("dispose", disposeFn);
                    return intervalId
                }
                ;
                Component.registerComponent = function registerComponent(name, comp) {
                    if (!name) {
                        return
                    }
                    name = (0,
                    _toTitleCase2["default"])(name);
                    if (!Component.components_) {
                        Component.components_ = {}
                    }
                    if (name === "Player" && Component.components_[name]) {
                        (function() {
                            var Player = Component.components_[name];
                            if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function(playerName) {
                                return Player.players[playerName]
                            }).every(Boolean)) {
                                throw new Error("Can not register Player component after player has been created")
                            }
                        }
                        )()
                    }
                    Component.components_[name] = comp;
                    return comp
                }
                ;
                Component.getComponent = function getComponent(name) {
                    if (!name) {
                        return
                    }
                    name = (0,
                    _toTitleCase2["default"])(name);
                    if (Component.components_ && Component.components_[name]) {
                        return Component.components_[name]
                    }
                    if (_window2["default"] && _window2["default"].videojs && _window2["default"].videojs[name]) {
                        _log2["default"].warn("The " + name + " component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)");
                        return _window2["default"].videojs[name]
                    }
                }
                ;
                Component.extend = function extend(props) {
                    props = props || {};
                    _log2["default"].warn("Component.extend({}) has been deprecated, " + " use videojs.extend(Component, {}) instead");
                    var init = props.init || props.init || this.prototype.init || this.prototype.init || function() {}
                    ;
                    var subObj = function subObj() {
                        init.apply(this, arguments)
                    };
                    subObj.prototype = Object.create(this.prototype);
                    subObj.prototype.constructor = subObj;
                    subObj.extend = Component.extend;
                    for (var name in props) {
                        if (props.hasOwnProperty(name)) {
                            subObj.prototype[name] = props[name]
                        }
                    }
                    return subObj
                }
                ;
                return Component
            }();
            Component.registerComponent("Component", Component);
            exports["default"] = Component
        }
        , {
            81: 81,
            82: 82,
            83: 83,
            85: 85,
            86: 86,
            87: 87,
            91: 91,
            95: 95
        }],
        6: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackButton = _dereq_(36);
            var _trackButton2 = _interopRequireDefault(_trackButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _audioTrackMenuItem = _dereq_(7);
            var _audioTrackMenuItem2 = _interopRequireDefault(_audioTrackMenuItem);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var AudioTrackButton = function(_TrackButton) {
                _inherits(AudioTrackButton, _TrackButton);
                function AudioTrackButton(player) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    _classCallCheck(this, AudioTrackButton);
                    options.tracks = player.audioTracks && player.audioTracks();
                    var _this = _possibleConstructorReturn(this, _TrackButton.call(this, player, options));
                    _this.el_.setAttribute("aria-label", "Audio Menu");
                    return _this
                }
                AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-audio-button " + _TrackButton.prototype.buildCSSClass.call(this)
                }
                ;
                AudioTrackButton.prototype.createItems = function createItems() {
                    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    var tracks = this.player_.audioTracks && this.player_.audioTracks();
                    if (!tracks) {
                        return items
                    }
                    for (var i = 0; i < tracks.length; i++) {
                        var track = tracks[i];
                        items.push(new _audioTrackMenuItem2["default"](this.player_,{
                            track: track,
                            selectable: true
                        }))
                    }
                    return items
                }
                ;
                return AudioTrackButton
            }(_trackButton2["default"]);
            AudioTrackButton.prototype.controlText_ = "Audio Track";
            _component2["default"].registerComponent("AudioTrackButton", AudioTrackButton);
            exports["default"] = AudioTrackButton
        }
        , {
            36: 36,
            5: 5,
            7: 7
        }],
        7: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _menuItem = _dereq_(48);
            var _menuItem2 = _interopRequireDefault(_menuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var AudioTrackMenuItem = function(_MenuItem) {
                _inherits(AudioTrackMenuItem, _MenuItem);
                function AudioTrackMenuItem(player, options) {
                    _classCallCheck(this, AudioTrackMenuItem);
                    var track = options.track;
                    var tracks = player.audioTracks();
                    options.label = track.label || track.language || "Unknown";
                    options.selected = track.enabled;
                    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));
                    _this.track = track;
                    if (tracks) {
                        (function() {
                            var changeHandler = Fn.bind(_this, _this.handleTracksChange);
                            tracks.addEventListener("change", changeHandler);
                            _this.on("dispose", function() {
                                tracks.removeEventListener("change", changeHandler)
                            })
                        }
                        )()
                    }
                    return _this
                }
                AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
                    var tracks = this.player_.audioTracks();
                    _MenuItem.prototype.handleClick.call(this, event);
                    if (!tracks) {
                        return
                    }
                    for (var i = 0; i < tracks.length; i++) {
                        var track = tracks[i];
                        track.enabled = track === this.track
                    }
                }
                ;
                AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
                    this.selected(this.track.enabled)
                }
                ;
                return AudioTrackMenuItem
            }(_menuItem2["default"]);
            _component2["default"].registerComponent("AudioTrackMenuItem", AudioTrackMenuItem);
            exports["default"] = AudioTrackMenuItem
        }
        , {
            48: 48,
            5: 5,
            83: 83
        }],
        8: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            _dereq_(12);
            _dereq_(32);
            _dereq_(33);
            _dereq_(35);
            _dereq_(34);
            _dereq_(10);
            _dereq_(18);
            _dereq_(9);
            _dereq_(38);
            _dereq_(40);
            _dereq_(11);
            _dereq_(25);
            _dereq_(27);
            _dereq_(29);
            _dereq_(24);
            _dereq_(6);
            _dereq_(13);
            _dereq_(21);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var ControlBar = function(_Component) {
                _inherits(ControlBar, _Component);
                function ControlBar() {
                    _classCallCheck(this, ControlBar);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                ControlBar.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-control-bar",
                        dir: "ltr"
                    }, {
                        role: "group"
                    })
                }
                ;
                return ControlBar
            }(_component2["default"]);
            ControlBar.prototype.options_ = {
                children: ["playToggle", "volumeMenuButton", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subtitlesButton", "captionsButton", "audioTrackButton", "fullscreenToggle"]
            };
            _component2["default"].registerComponent("ControlBar", ControlBar);
            exports["default"] = ControlBar
        }
        , {
            10: 10,
            11: 11,
            12: 12,
            13: 13,
            18: 18,
            21: 21,
            24: 24,
            25: 25,
            27: 27,
            29: 29,
            32: 32,
            33: 33,
            34: 34,
            35: 35,
            38: 38,
            40: 40,
            5: 5,
            6: 6,
            9: 9
        }],
        9: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _button = _dereq_(2);
            var _button2 = _interopRequireDefault(_button);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var FullscreenToggle = function(_Button) {
                _inherits(FullscreenToggle, _Button);
                function FullscreenToggle(player, options) {
                    _classCallCheck(this, FullscreenToggle);
                    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));
                    _this.on(player, "fullscreenchange", _this.handleFullscreenChange);
                    return _this
                }
                FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-fullscreen-control " + _Button.prototype.buildCSSClass.call(this)
                }
                ;
                FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
                    if (this.player_.isFullscreen()) {
                        this.controlText("Non-Fullscreen")
                    } else {
                        this.controlText("Fullscreen")
                    }
                }
                ;
                FullscreenToggle.prototype.handleClick = function handleClick(event) {
                    if (!this.player_.isFullscreen()) {
                        this.player_.requestFullscreen()
                    } else {
                        this.player_.exitFullscreen()
                    }
                }
                ;
                return FullscreenToggle
            }(_button2["default"]);
            FullscreenToggle.prototype.controlText_ = "Fullscreen";
            _component2["default"].registerComponent("FullscreenToggle", FullscreenToggle);
            exports["default"] = FullscreenToggle
        }
        , {
            2: 2,
            5: 5
        }],
        10: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var LiveDisplay = function(_Component) {
                _inherits(LiveDisplay, _Component);
                function LiveDisplay(player, options) {
                    _classCallCheck(this, LiveDisplay);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.updateShowing();
                    _this.on(_this.player(), "durationchange", _this.updateShowing);
                    return _this
                }
                LiveDisplay.prototype.createEl = function createEl() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-live-control vjs-control"
                    });
                    this.contentEl_ = Dom.createEl("div", {
                        className: "vjs-live-display",
                        innerHTML: '<span class="vjs-control-text">' + this.localize("Stream Type") + "</span>" + this.localize("LIVE")
                    }, {
                        "aria-live": "off"
                    });
                    el.appendChild(this.contentEl_);
                    return el
                }
                ;
                LiveDisplay.prototype.updateShowing = function updateShowing(event) {
                    if (this.player().duration() === Infinity) {
                        this.show()
                    } else {
                        this.hide()
                    }
                }
                ;
                return LiveDisplay
            }(_component2["default"]);
            _component2["default"].registerComponent("LiveDisplay", LiveDisplay);
            exports["default"] = LiveDisplay
        }
        , {
            5: 5,
            81: 81
        }],
        11: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _button = _dereq_(2);
            var _button2 = _interopRequireDefault(_button);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var MuteToggle = function(_Button) {
                _inherits(MuteToggle, _Button);
                function MuteToggle(player, options) {
                    _classCallCheck(this, MuteToggle);
                    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));
                    _this.on(player, "volumechange", _this.update);
                    if (player.tech_ && player.tech_.featuresVolumeControl === false) {
                        _this.addClass("vjs-hidden")
                    }
                    _this.on(player, "loadstart", function() {
                        this.update();
                        if (player.tech_.featuresVolumeControl === false) {
                            this.addClass("vjs-hidden")
                        } else {
                            this.removeClass("vjs-hidden")
                        }
                    });
                    return _this
                }
                MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-mute-control " + _Button.prototype.buildCSSClass.call(this)
                }
                ;
                MuteToggle.prototype.handleClick = function handleClick(event) {
                    this.player_.muted(this.player_.muted() ? false : true)
                }
                ;
                MuteToggle.prototype.update = function update(event) {
                    var vol = this.player_.volume();
                    var level = 3;
                    if (vol === 0 || this.player_.muted()) {
                        level = 0
                    } else if (vol < .33) {
                        level = 1
                    } else if (vol < .67) {
                        level = 2
                    }
                    var toMute = this.player_.muted() ? "Unmute" : "Mute";
                    if (this.controlText() !== toMute) {
                        this.controlText(toMute)
                    }
                    for (var i = 0; i < 4; i++) {
                        Dom.removeElClass(this.el_, "vjs-vol-" + i)
                    }
                    Dom.addElClass(this.el_, "vjs-vol-" + level)
                }
                ;
                return MuteToggle
            }(_button2["default"]);
            MuteToggle.prototype.controlText_ = "Mute";
            _component2["default"].registerComponent("MuteToggle", MuteToggle);
            exports["default"] = MuteToggle
        }
        , {
            2: 2,
            5: 5,
            81: 81
        }],
        12: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _button = _dereq_(2);
            var _button2 = _interopRequireDefault(_button);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var PlayToggle = function(_Button) {
                _inherits(PlayToggle, _Button);
                function PlayToggle(player, options) {
                    _classCallCheck(this, PlayToggle);
                    var _this = _possibleConstructorReturn(this, _Button.call(this, player, options));
                    _this.on(player, "play", _this.handlePlay);
                    _this.on(player, "pause", _this.handlePause);
                    return _this
                }
                PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-play-control " + _Button.prototype.buildCSSClass.call(this)
                }
                ;
                PlayToggle.prototype.handleClick = function handleClick(event) {
                    if (this.player_.paused()) {
                        this.player_.play()
                    } else {
                        this.player_.pause()
                    }
                }
                ;
                PlayToggle.prototype.handlePlay = function handlePlay(event) {
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.controlText("Pause")
                }
                ;
                PlayToggle.prototype.handlePause = function handlePause(event) {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.controlText("Play")
                }
                ;
                return PlayToggle
            }(_button2["default"]);
            PlayToggle.prototype.controlText_ = "Play";
            _component2["default"].registerComponent("PlayToggle", PlayToggle);
            exports["default"] = PlayToggle
        }
        , {
            2: 2,
            5: 5
        }],
        13: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _menuButton = _dereq_(47);
            var _menuButton2 = _interopRequireDefault(_menuButton);
            var _menu = _dereq_(49);
            var _menu2 = _interopRequireDefault(_menu);
            var _playbackRateMenuItem = _dereq_(14);
            var _playbackRateMenuItem2 = _interopRequireDefault(_playbackRateMenuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var PlaybackRateMenuButton = function(_MenuButton) {
                _inherits(PlaybackRateMenuButton, _MenuButton);
                function PlaybackRateMenuButton(player, options) {
                    _classCallCheck(this, PlaybackRateMenuButton);
                    var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));
                    _this.updateVisibility();
                    _this.updateLabel();
                    _this.on(player, "loadstart", _this.updateVisibility);
                    _this.on(player, "ratechange", _this.updateLabel);
                    return _this
                }
                PlaybackRateMenuButton.prototype.createEl = function createEl() {
                    var el = _MenuButton.prototype.createEl.call(this);
                    this.labelEl_ = Dom.createEl("div", {
                        className: "vjs-playback-rate-value",
                        innerHTML: 1
                    });
                    el.appendChild(this.labelEl_);
                    return el
                }
                ;
                PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-playback-rate " + _MenuButton.prototype.buildCSSClass.call(this)
                }
                ;
                PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
                    var menu = new _menu2["default"](this.player());
                    var rates = this.playbackRates();
                    if (rates) {
                        for (var i = rates.length - 1; i >= 0; i--) {
                            menu.addChild(new _playbackRateMenuItem2["default"](this.player(),{
                                rate: rates[i] + "x"
                            }))
                        }
                    }
                    return menu
                }
                ;
                PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
                    this.el().setAttribute("aria-valuenow", this.player().playbackRate())
                }
                ;
                PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
                    var currentRate = this.player().playbackRate();
                    var rates = this.playbackRates();
                    var newRate = rates[0];
                    for (var i = 0; i < rates.length; i++) {
                        if (rates[i] > currentRate) {
                            newRate = rates[i];
                            break
                        }
                    }
                    this.player().playbackRate(newRate)
                }
                ;
                PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
                    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates
                }
                ;
                PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
                    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0
                }
                ;
                PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
                    if (this.playbackRateSupported()) {
                        this.removeClass("vjs-hidden")
                    } else {
                        this.addClass("vjs-hidden")
                    }
                }
                ;
                PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
                    if (this.playbackRateSupported()) {
                        this.labelEl_.innerHTML = this.player().playbackRate() + "x"
                    }
                }
                ;
                return PlaybackRateMenuButton
            }(_menuButton2["default"]);
            PlaybackRateMenuButton.prototype.controlText_ = "Playback Rate";
            _component2["default"].registerComponent("PlaybackRateMenuButton", PlaybackRateMenuButton);
            exports["default"] = PlaybackRateMenuButton
        }
        , {
            14: 14,
            47: 47,
            49: 49,
            5: 5,
            81: 81
        }],
        14: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _menuItem = _dereq_(48);
            var _menuItem2 = _interopRequireDefault(_menuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var PlaybackRateMenuItem = function(_MenuItem) {
                _inherits(PlaybackRateMenuItem, _MenuItem);
                function PlaybackRateMenuItem(player, options) {
                    _classCallCheck(this, PlaybackRateMenuItem);
                    var label = options.rate;
                    var rate = parseFloat(label, 10);
                    options.label = label;
                    options.selected = rate === 1;
                    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));
                    _this.label = label;
                    _this.rate = rate;
                    _this.on(player, "ratechange", _this.update);
                    return _this
                }
                PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
                    _MenuItem.prototype.handleClick.call(this);
                    this.player().playbackRate(this.rate)
                }
                ;
                PlaybackRateMenuItem.prototype.update = function update(event) {
                    this.selected(this.player().playbackRate() === this.rate)
                }
                ;
                return PlaybackRateMenuItem
            }(_menuItem2["default"]);
            PlaybackRateMenuItem.prototype.contentElType = "button";
            _component2["default"].registerComponent("PlaybackRateMenuItem", PlaybackRateMenuItem);
            exports["default"] = PlaybackRateMenuItem
        }
        , {
            48: 48,
            5: 5
        }],
        15: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var LoadProgressBar = function(_Component) {
                _inherits(LoadProgressBar, _Component);
                function LoadProgressBar(player, options) {
                    _classCallCheck(this, LoadProgressBar);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.partEls_ = [];
                    _this.on(player, "progress", _this.update);
                    return _this
                }
                LoadProgressBar.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-load-progress",
                        innerHTML: '<span class="vjs-control-text"><span>' + this.localize("Loaded") + "</span>: 0%</span>"
                    })
                }
                ;
                LoadProgressBar.prototype.update = function update(event) {
                    var buffered = this.player_.buffered();
                    var duration = this.player_.duration();
                    var bufferedEnd = this.player_.bufferedEnd();
                    var children = this.partEls_;
                    var percentify = function percentify(time, end) {
                        var percent = time / end || 0;
                        return (percent >= 1 ? 1 : percent) * 100 + "%"
                    };
                    this.el_.style.width = percentify(bufferedEnd, duration);
                    for (var i = 0; i < buffered.length; i++) {
                        var start = buffered.start(i);
                        var end = buffered.end(i);
                        var part = children[i];
                        if (!part) {
                            part = this.el_.appendChild(Dom.createEl());
                            children[i] = part
                        }
                        part.style.left = percentify(start, bufferedEnd);
                        part.style.width = percentify(end - start, bufferedEnd)
                    }
                    for (var _i = children.length; _i > buffered.length; _i--) {
                        this.el_.removeChild(children[_i - 1])
                    }
                    children.length = buffered.length
                }
                ;
                return LoadProgressBar
            }(_component2["default"]);
            _component2["default"].registerComponent("LoadProgressBar", LoadProgressBar);
            exports["default"] = LoadProgressBar
        }
        , {
            5: 5,
            81: 81
        }],
        16: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            var _computedStyle = _dereq_(80);
            var _computedStyle2 = _interopRequireDefault(_computedStyle);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var MouseTimeDisplay = function(_Component) {
                _inherits(MouseTimeDisplay, _Component);
                function MouseTimeDisplay(player, options) {
                    _classCallCheck(this, MouseTimeDisplay);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                        _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside
                    }
                    if (_this.keepTooltipsInside) {
                        _this.tooltip = Dom.createEl("div", {
                            className: "vjs-time-tooltip"
                        });
                        _this.el().appendChild(_this.tooltip);
                        _this.addClass("vjs-keep-tooltips-inside")
                    }
                    _this.update(0, 0);
                    player.on("ready", function() {
                        _this.on(player.controlBar.progressControl.el(), "mousemove", Fn.throttle(Fn.bind(_this, _this.handleMouseMove), 25))
                    });
                    return _this
                }
                MouseTimeDisplay.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    })
                }
                ;
                MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
                    var duration = this.player_.duration();
                    var newTime = this.calculateDistance(event) * duration;
                    var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;
                    this.update(newTime, position)
                }
                ;
                MouseTimeDisplay.prototype.update = function update(newTime, position) {
                    var time = (0,
                    _formatTime2["default"])(newTime, this.player_.duration());
                    this.el().style.left = position + "px";
                    this.el().setAttribute("data-current-time", time);
                    if (this.keepTooltipsInside) {
                        var clampedPosition = this.clampPosition_(position);
                        var difference = position - clampedPosition + 1;
                        var tooltipWidth = parseFloat((0,
                        _computedStyle2["default"])(this.tooltip, "width"));
                        var tooltipWidthHalf = tooltipWidth / 2;
                        this.tooltip.innerHTML = time;
                        this.tooltip.style.right = "-" + (tooltipWidthHalf - difference) + "px"
                    }
                }
                ;
                MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
                    return Dom.getPointerPosition(this.el().parentNode, event).x
                }
                ;
                MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
                    if (!this.keepTooltipsInside) {
                        return position
                    }
                    var playerWidth = parseFloat((0,
                    _computedStyle2["default"])(this.player().el(), "width"));
                    var tooltipWidth = parseFloat((0,
                    _computedStyle2["default"])(this.tooltip, "width"));
                    var tooltipWidthHalf = tooltipWidth / 2;
                    var actualPosition = position;
                    if (position < tooltipWidthHalf) {
                        actualPosition = Math.ceil(tooltipWidthHalf)
                    } else if (position > playerWidth - tooltipWidthHalf) {
                        actualPosition = Math.floor(playerWidth - tooltipWidthHalf)
                    }
                    return actualPosition
                }
                ;
                return MouseTimeDisplay
            }(_component2["default"]);
            _component2["default"].registerComponent("MouseTimeDisplay", MouseTimeDisplay);
            exports["default"] = MouseTimeDisplay
        }
        , {
            5: 5,
            80: 80,
            81: 81,
            83: 83,
            84: 84
        }],
        17: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var PlayProgressBar = function(_Component) {
                _inherits(PlayProgressBar, _Component);
                function PlayProgressBar(player, options) {
                    _classCallCheck(this, PlayProgressBar);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.updateDataAttr();
                    _this.on(player, "timeupdate", _this.updateDataAttr);
                    player.ready(Fn.bind(_this, _this.updateDataAttr));
                    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                        _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside
                    }
                    if (_this.keepTooltipsInside) {
                        _this.addClass("vjs-keep-tooltips-inside")
                    }
                    return _this
                }
                PlayProgressBar.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-play-progress vjs-slider-bar",
                        innerHTML: '<span class="vjs-control-text"><span>' + this.localize("Progress") + "</span>: 0%</span>"
                    })
                }
                ;
                PlayProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {
                    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    this.el_.setAttribute("data-current-time", (0,
                    _formatTime2["default"])(time, this.player_.duration()))
                }
                ;
                return PlayProgressBar
            }(_component2["default"]);
            _component2["default"].registerComponent("PlayProgressBar", PlayProgressBar);
            exports["default"] = PlayProgressBar
        }
        , {
            5: 5,
            83: 83,
            84: 84
        }],
        18: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            _dereq_(19);
            _dereq_(16);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var ProgressControl = function(_Component) {
                _inherits(ProgressControl, _Component);
                function ProgressControl() {
                    _classCallCheck(this, ProgressControl);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                ProgressControl.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-control vjs-control"
                    })
                }
                ;
                return ProgressControl
            }(_component2["default"]);
            ProgressControl.prototype.options_ = {
                children: ["seekBar"]
            };
            _component2["default"].registerComponent("ProgressControl", ProgressControl);
            exports["default"] = ProgressControl
        }
        , {
            16: 16,
            19: 19,
            5: 5
        }],
        19: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _slider = _dereq_(57);
            var _slider2 = _interopRequireDefault(_slider);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            var _computedStyle = _dereq_(80);
            var _computedStyle2 = _interopRequireDefault(_computedStyle);
            _dereq_(15);
            _dereq_(17);
            _dereq_(20);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var SeekBar = function(_Slider) {
                _inherits(SeekBar, _Slider);
                function SeekBar(player, options) {
                    _classCallCheck(this, SeekBar);
                    var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));
                    _this.on(player, "timeupdate", _this.updateProgress);
                    _this.on(player, "ended", _this.updateProgress);
                    player.ready(Fn.bind(_this, _this.updateProgress));
                    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
                        _this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside
                    }
                    if (_this.keepTooltipsInside) {
                        _this.tooltipProgressBar = _this.addChild("TooltipProgressBar")
                    }
                    return _this
                }
                SeekBar.prototype.createEl = function createEl() {
                    return _Slider.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-holder"
                    }, {
                        "aria-label": "progress bar"
                    })
                }
                ;
                SeekBar.prototype.updateProgress = function updateProgress(event) {
                    this.updateAriaAttributes(this.el_);
                    if (this.keepTooltipsInside) {
                        this.updateAriaAttributes(this.tooltipProgressBar.el_);
                        this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;
                        var playerWidth = parseFloat((0,
                        _computedStyle2["default"])(this.player().el(), "width"));
                        var tooltipWidth = parseFloat((0,
                        _computedStyle2["default"])(this.tooltipProgressBar.tooltip, "width"));
                        var tooltipStyle = this.tooltipProgressBar.el().style;
                        tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + "px";
                        tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + "px";
                        tooltipStyle.right = "-" + tooltipWidth / 2 + "px"
                    }
                }
                ;
                SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
                    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    el.setAttribute("aria-valuenow", (this.getPercent() * 100).toFixed(2));
                    el.setAttribute("aria-valuetext", (0,
                    _formatTime2["default"])(time, this.player_.duration()))
                }
                ;
                SeekBar.prototype.getPercent = function getPercent() {
                    var percent = this.player_.currentTime() / this.player_.duration();
                    return percent >= 1 ? 1 : percent
                }
                ;
                SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
                    this.player_.scrubbing(true);
                    this.videoWasPlaying = !this.player_.paused();
                    this.player_.pause();
                    _Slider.prototype.handleMouseDown.call(this, event)
                }
                ;
                SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
                    var newTime = this.calculateDistance(event) * this.player_.duration();
                    if (newTime === this.player_.duration()) {
                        newTime = newTime - .1
                    }
                    this.player_.currentTime(newTime)
                }
                ;
                SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
                    _Slider.prototype.handleMouseUp.call(this, event);
                    this.player_.scrubbing(false);
                    if (this.videoWasPlaying) {
                        this.player_.play()
                    }
                }
                ;
                SeekBar.prototype.stepForward = function stepForward() {
                    this.player_.currentTime(this.player_.currentTime() + 5)
                }
                ;
                SeekBar.prototype.stepBack = function stepBack() {
                    this.player_.currentTime(this.player_.currentTime() - 5)
                }
                ;
                return SeekBar
            }(_slider2["default"]);
            SeekBar.prototype.options_ = {
                children: ["loadProgressBar", "mouseTimeDisplay", "playProgressBar"],
                barName: "playProgressBar"
            };
            SeekBar.prototype.playerEvent = "timeupdate";
            _component2["default"].registerComponent("SeekBar", SeekBar);
            exports["default"] = SeekBar
        }
        , {
            15: 15,
            17: 17,
            20: 20,
            5: 5,
            57: 57,
            80: 80,
            83: 83,
            84: 84
        }],
        20: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TooltipProgressBar = function(_Component) {
                _inherits(TooltipProgressBar, _Component);
                function TooltipProgressBar(player, options) {
                    _classCallCheck(this, TooltipProgressBar);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.updateDataAttr();
                    _this.on(player, "timeupdate", _this.updateDataAttr);
                    player.ready(Fn.bind(_this, _this.updateDataAttr));
                    return _this
                }
                TooltipProgressBar.prototype.createEl = function createEl() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-tooltip-progress-bar vjs-slider-bar",
                        innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize("Progress") + "</span>: 0%</span>"
                    });
                    this.tooltip = el.querySelector(".vjs-time-tooltip");
                    return el
                }
                ;
                TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr(event) {
                    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    var formattedTime = (0,
                    _formatTime2["default"])(time, this.player_.duration());
                    this.el_.setAttribute("data-current-time", formattedTime);
                    this.tooltip.innerHTML = formattedTime
                }
                ;
                return TooltipProgressBar
            }(_component2["default"]);
            _component2["default"].registerComponent("TooltipProgressBar", TooltipProgressBar);
            exports["default"] = TooltipProgressBar
        }
        , {
            5: 5,
            83: 83,
            84: 84
        }],
        21: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _spacer = _dereq_(22);
            var _spacer2 = _interopRequireDefault(_spacer);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var CustomControlSpacer = function(_Spacer) {
                _inherits(CustomControlSpacer, _Spacer);
                function CustomControlSpacer() {
                    _classCallCheck(this, CustomControlSpacer);
                    return _possibleConstructorReturn(this, _Spacer.apply(this, arguments))
                }
                CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-custom-control-spacer " + _Spacer.prototype.buildCSSClass.call(this)
                }
                ;
                CustomControlSpacer.prototype.createEl = function createEl() {
                    var el = _Spacer.prototype.createEl.call(this, {
                        className: this.buildCSSClass()
                    });
                    el.innerHTML = "&nbsp;";
                    return el
                }
                ;
                return CustomControlSpacer
            }(_spacer2["default"]);
            _component2["default"].registerComponent("CustomControlSpacer", CustomControlSpacer);
            exports["default"] = CustomControlSpacer
        }
        , {
            22: 22,
            5: 5
        }],
        22: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Spacer = function(_Component) {
                _inherits(Spacer, _Component);
                function Spacer() {
                    _classCallCheck(this, Spacer);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                Spacer.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-spacer " + _Component.prototype.buildCSSClass.call(this)
                }
                ;
                Spacer.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass()
                    })
                }
                ;
                return Spacer
            }(_component2["default"]);
            _component2["default"].registerComponent("Spacer", Spacer);
            exports["default"] = Spacer
        }
        , {
            5: 5
        }],
        23: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackMenuItem = _dereq_(31);
            var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var CaptionSettingsMenuItem = function(_TextTrackMenuItem) {
                _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);
                function CaptionSettingsMenuItem(player, options) {
                    _classCallCheck(this, CaptionSettingsMenuItem);
                    options.track = {
                        player: player,
                        kind: options.kind,
                        label: options.kind + " settings",
                        selectable: false,
                        "default": false,
                        mode: "disabled"
                    };
                    options.selectable = false;
                    var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
                    _this.addClass("vjs-texttrack-settings");
                    _this.controlText(", opens " + options.kind + " settings dialog");
                    return _this
                }
                CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
                    this.player().getChild("textTrackSettings").show();
                    this.player().getChild("textTrackSettings").el_.focus()
                }
                ;
                return CaptionSettingsMenuItem
            }(_textTrackMenuItem2["default"]);
            _component2["default"].registerComponent("CaptionSettingsMenuItem", CaptionSettingsMenuItem);
            exports["default"] = CaptionSettingsMenuItem
        }
        , {
            31: 31,
            5: 5
        }],
        24: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackButton = _dereq_(30);
            var _textTrackButton2 = _interopRequireDefault(_textTrackButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _captionSettingsMenuItem = _dereq_(23);
            var _captionSettingsMenuItem2 = _interopRequireDefault(_captionSettingsMenuItem);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var CaptionsButton = function(_TextTrackButton) {
                _inherits(CaptionsButton, _TextTrackButton);
                function CaptionsButton(player, options, ready) {
                    _classCallCheck(this, CaptionsButton);
                    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
                    _this.el_.setAttribute("aria-label", "Captions Menu");
                    return _this
                }
                CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-captions-button " + _TextTrackButton.prototype.buildCSSClass.call(this)
                }
                ;
                CaptionsButton.prototype.update = function update(event) {
                    var threshold = 2;
                    _TextTrackButton.prototype.update.call(this);
                    if (this.player().tech_ && this.player().tech_.featuresNativeTextTracks) {
                        threshold = 1
                    }
                    if (this.items && this.items.length > threshold) {
                        this.show()
                    } else {
                        this.hide()
                    }
                }
                ;
                CaptionsButton.prototype.createItems = function createItems() {
                    var items = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
                        items.push(new _captionSettingsMenuItem2["default"](this.player_,{
                            kind: this.kind_
                        }))
                    }
                    return _TextTrackButton.prototype.createItems.call(this, items)
                }
                ;
                return CaptionsButton
            }(_textTrackButton2["default"]);
            CaptionsButton.prototype.kind_ = "captions";
            CaptionsButton.prototype.controlText_ = "Captions";
            _component2["default"].registerComponent("CaptionsButton", CaptionsButton);
            exports["default"] = CaptionsButton
        }
        , {
            23: 23,
            30: 30,
            5: 5
        }],
        25: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackButton = _dereq_(30);
            var _textTrackButton2 = _interopRequireDefault(_textTrackButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _chaptersTrackMenuItem = _dereq_(26);
            var _chaptersTrackMenuItem2 = _interopRequireDefault(_chaptersTrackMenuItem);
            var _toTitleCase = _dereq_(91);
            var _toTitleCase2 = _interopRequireDefault(_toTitleCase);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var ChaptersButton = function(_TextTrackButton) {
                _inherits(ChaptersButton, _TextTrackButton);
                function ChaptersButton(player, options, ready) {
                    _classCallCheck(this, ChaptersButton);
                    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
                    _this.el_.setAttribute("aria-label", "Chapters Menu");
                    return _this
                }
                ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-chapters-button " + _TextTrackButton.prototype.buildCSSClass.call(this)
                }
                ;
                ChaptersButton.prototype.update = function update(event) {
                    if (!this.track_ || event && (event.type === "addtrack" || event.type === "removetrack")) {
                        this.setTrack(this.findChaptersTrack())
                    }
                    _TextTrackButton.prototype.update.call(this)
                }
                ;
                ChaptersButton.prototype.setTrack = function setTrack(track) {
                    if (this.track_ === track) {
                        return
                    }
                    if (!this.updateHandler_) {
                        this.updateHandler_ = this.update.bind(this)
                    }
                    if (this.track_) {
                        var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (remoteTextTrackEl) {
                            remoteTextTrackEl.removeEventListener("load", this.updateHandler_)
                        }
                        this.track_ = null
                    }
                    this.track_ = track;
                    if (this.track_) {
                        this.track_.mode = "hidden";
                        var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (_remoteTextTrackEl) {
                            _remoteTextTrackEl.addEventListener("load", this.updateHandler_)
                        }
                    }
                }
                ;
                ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
                    var tracks = this.player_.textTracks() || [];
                    for (var i = tracks.length - 1; i >= 0; i--) {
                        var track = tracks[i];
                        if (track.kind === this.kind_) {
                            return track
                        }
                    }
                }
                ;
                ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
                    if (this.track_ && this.track_.label) {
                        return this.track_.label
                    }
                    return this.localize((0,
                    _toTitleCase2["default"])(this.kind_))
                }
                ;
                ChaptersButton.prototype.createMenu = function createMenu() {
                    this.options_.title = this.getMenuCaption();
                    return _TextTrackButton.prototype.createMenu.call(this)
                }
                ;
                ChaptersButton.prototype.createItems = function createItems() {
                    var items = [];
                    if (!this.track_) {
                        return items
                    }
                    var cues = this.track_.cues;
                    if (!cues) {
                        return items
                    }
                    for (var i = 0, l = cues.length; i < l; i++) {
                        var cue = cues[i];
                        var mi = new _chaptersTrackMenuItem2["default"](this.player_,{
                            track: this.track_,
                            cue: cue
                        });
                        items.push(mi)
                    }
                    return items
                }
                ;
                return ChaptersButton
            }(_textTrackButton2["default"]);
            ChaptersButton.prototype.kind_ = "chapters";
            ChaptersButton.prototype.controlText_ = "Chapters";
            _component2["default"].registerComponent("ChaptersButton", ChaptersButton);
            exports["default"] = ChaptersButton
        }
        , {
            26: 26,
            30: 30,
            5: 5,
            91: 91
        }],
        26: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _menuItem = _dereq_(48);
            var _menuItem2 = _interopRequireDefault(_menuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var ChaptersTrackMenuItem = function(_MenuItem) {
                _inherits(ChaptersTrackMenuItem, _MenuItem);
                function ChaptersTrackMenuItem(player, options) {
                    _classCallCheck(this, ChaptersTrackMenuItem);
                    var track = options.track;
                    var cue = options.cue;
                    var currentTime = player.currentTime();
                    options.selectable = true;
                    options.label = cue.text;
                    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;
                    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));
                    _this.track = track;
                    _this.cue = cue;
                    track.addEventListener("cuechange", Fn.bind(_this, _this.update));
                    return _this
                }
                ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
                    _MenuItem.prototype.handleClick.call(this);
                    this.player_.currentTime(this.cue.startTime);
                    this.update(this.cue.startTime)
                }
                ;
                ChaptersTrackMenuItem.prototype.update = function update(event) {
                    var cue = this.cue;
                    var currentTime = this.player_.currentTime();
                    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime)
                }
                ;
                return ChaptersTrackMenuItem
            }(_menuItem2["default"]);
            _component2["default"].registerComponent("ChaptersTrackMenuItem", ChaptersTrackMenuItem);
            exports["default"] = ChaptersTrackMenuItem
        }
        , {
            48: 48,
            5: 5,
            83: 83
        }],
        27: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackButton = _dereq_(30);
            var _textTrackButton2 = _interopRequireDefault(_textTrackButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var DescriptionsButton = function(_TextTrackButton) {
                _inherits(DescriptionsButton, _TextTrackButton);
                function DescriptionsButton(player, options, ready) {
                    _classCallCheck(this, DescriptionsButton);
                    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
                    _this.el_.setAttribute("aria-label", "Descriptions Menu");
                    var tracks = player.textTracks();
                    if (tracks) {
                        (function() {
                            var changeHandler = Fn.bind(_this, _this.handleTracksChange);
                            tracks.addEventListener("change", changeHandler);
                            _this.on("dispose", function() {
                                tracks.removeEventListener("change", changeHandler)
                            })
                        }
                        )()
                    }
                    return _this
                }
                DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
                    var tracks = this.player().textTracks();
                    var disabled = false;
                    for (var i = 0, l = tracks.length; i < l; i++) {
                        var track = tracks[i];
                        if (track.kind !== this.kind_ && track.mode === "showing") {
                            disabled = true;
                            break
                        }
                    }
                    if (disabled) {
                        this.disable()
                    } else {
                        this.enable()
                    }
                }
                ;
                DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-descriptions-button " + _TextTrackButton.prototype.buildCSSClass.call(this)
                }
                ;
                return DescriptionsButton
            }(_textTrackButton2["default"]);
            DescriptionsButton.prototype.kind_ = "descriptions";
            DescriptionsButton.prototype.controlText_ = "Descriptions";
            _component2["default"].registerComponent("DescriptionsButton", DescriptionsButton);
            exports["default"] = DescriptionsButton
        }
        , {
            30: 30,
            5: 5,
            83: 83
        }],
        28: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackMenuItem = _dereq_(31);
            var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var OffTextTrackMenuItem = function(_TextTrackMenuItem) {
                _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);
                function OffTextTrackMenuItem(player, options) {
                    _classCallCheck(this, OffTextTrackMenuItem);
                    options.track = {
                        player: player,
                        kind: options.kind,
                        label: options.kind + " off",
                        "default": false,
                        mode: "disabled"
                    };
                    options.selectable = true;
                    var _this = _possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
                    _this.selected(true);
                    return _this
                }
                OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
                    var tracks = this.player().textTracks();
                    var selected = true;
                    for (var i = 0, l = tracks.length; i < l; i++) {
                        var track = tracks[i];
                        if (track.kind === this.track.kind && track.mode === "showing") {
                            selected = false;
                            break
                        }
                    }
                    this.selected(selected)
                }
                ;
                return OffTextTrackMenuItem
            }(_textTrackMenuItem2["default"]);
            _component2["default"].registerComponent("OffTextTrackMenuItem", OffTextTrackMenuItem);
            exports["default"] = OffTextTrackMenuItem
        }
        , {
            31: 31,
            5: 5
        }],
        29: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackButton = _dereq_(30);
            var _textTrackButton2 = _interopRequireDefault(_textTrackButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var SubtitlesButton = function(_TextTrackButton) {
                _inherits(SubtitlesButton, _TextTrackButton);
                function SubtitlesButton(player, options, ready) {
                    _classCallCheck(this, SubtitlesButton);
                    var _this = _possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
                    _this.el_.setAttribute("aria-label", "Subtitles Menu");
                    return _this
                }
                SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-subtitles-button " + _TextTrackButton.prototype.buildCSSClass.call(this)
                }
                ;
                return SubtitlesButton
            }(_textTrackButton2["default"]);
            SubtitlesButton.prototype.kind_ = "subtitles";
            SubtitlesButton.prototype.controlText_ = "Subtitles";
            _component2["default"].registerComponent("SubtitlesButton", SubtitlesButton);
            exports["default"] = SubtitlesButton
        }
        , {
            30: 30,
            5: 5
        }],
        30: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackButton = _dereq_(36);
            var _trackButton2 = _interopRequireDefault(_trackButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _textTrackMenuItem = _dereq_(31);
            var _textTrackMenuItem2 = _interopRequireDefault(_textTrackMenuItem);
            var _offTextTrackMenuItem = _dereq_(28);
            var _offTextTrackMenuItem2 = _interopRequireDefault(_offTextTrackMenuItem);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TextTrackButton = function(_TrackButton) {
                _inherits(TextTrackButton, _TrackButton);
                function TextTrackButton(player) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    _classCallCheck(this, TextTrackButton);
                    options.tracks = player.textTracks();
                    return _possibleConstructorReturn(this, _TrackButton.call(this, player, options))
                }
                TextTrackButton.prototype.createItems = function createItems() {
                    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    items.push(new _offTextTrackMenuItem2["default"](this.player_,{
                        kind: this.kind_
                    }));
                    var tracks = this.player_.textTracks();
                    if (!tracks) {
                        return items
                    }
                    for (var i = 0; i < tracks.length; i++) {
                        var track = tracks[i];
                        if (track.kind === this.kind_) {
                            items.push(new _textTrackMenuItem2["default"](this.player_,{
                                track: track,
                                selectable: true
                            }))
                        }
                    }
                    return items
                }
                ;
                return TextTrackButton
            }(_trackButton2["default"]);
            _component2["default"].registerComponent("TextTrackButton", TextTrackButton);
            exports["default"] = TextTrackButton
        }
        , {
            28: 28,
            31: 31,
            36: 36,
            5: 5
        }],
        31: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj
            }
            : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
            }
            ;
            var _menuItem = _dereq_(48);
            var _menuItem2 = _interopRequireDefault(_menuItem);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TextTrackMenuItem = function(_MenuItem) {
                _inherits(TextTrackMenuItem, _MenuItem);
                function TextTrackMenuItem(player, options) {
                    _classCallCheck(this, TextTrackMenuItem);
                    var track = options.track;
                    var tracks = player.textTracks();
                    options.label = track.label || track.language || "Unknown";
                    options.selected = track["default"] || track.mode === "showing";
                    var _this = _possibleConstructorReturn(this, _MenuItem.call(this, player, options));
                    _this.track = track;
                    if (tracks) {
                        (function() {
                            var changeHandler = Fn.bind(_this, _this.handleTracksChange);
                            tracks.addEventListener("change", changeHandler);
                            _this.on("dispose", function() {
                                tracks.removeEventListener("change", changeHandler)
                            })
                        }
                        )()
                    }
                    if (tracks && tracks.onchange === undefined) {
                        (function() {
                            var event = void 0;
                            _this.on(["tap", "click"], function() {
                                if (_typeof(_window2["default"].Event) !== "object") {
                                    try {
                                        event = new _window2["default"].Event("change")
                                    } catch (err) {}
                                }
                                if (!event) {
                                    event = _document2["default"].createEvent("Event");
                                    event.initEvent("change", true, true)
                                }
                                tracks.dispatchEvent(event)
                            })
                        }
                        )()
                    }
                    return _this
                }
                TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
                    var kind = this.track.kind;
                    var tracks = this.player_.textTracks();
                    _MenuItem.prototype.handleClick.call(this, event);
                    if (!tracks) {
                        return
                    }
                    for (var i = 0; i < tracks.length; i++) {
                        var track = tracks[i];
                        if (track.kind !== kind) {
                            continue
                        }
                        if (track === this.track) {
                            track.mode = "showing"
                        } else {
                            track.mode = "disabled"
                        }
                    }
                }
                ;
                TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
                    this.selected(this.track.mode === "showing")
                }
                ;
                return TextTrackMenuItem
            }(_menuItem2["default"]);
            _component2["default"].registerComponent("TextTrackMenuItem", TextTrackMenuItem);
            exports["default"] = TextTrackMenuItem
        }
        , {
            48: 48,
            5: 5,
            83: 83,
            94: 94,
            95: 95
        }],
        32: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var CurrentTimeDisplay = function(_Component) {
                _inherits(CurrentTimeDisplay, _Component);
                function CurrentTimeDisplay(player, options) {
                    _classCallCheck(this, CurrentTimeDisplay);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.on(player, "timeupdate", _this.updateContent);
                    return _this
                }
                CurrentTimeDisplay.prototype.createEl = function createEl() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-current-time vjs-time-control vjs-control"
                    });
                    this.contentEl_ = Dom.createEl("div", {
                        className: "vjs-current-time-display",
                        innerHTML: '<span class="vjs-control-text">Current Time </span>' + "0:00"
                    }, {
                        "aria-live": "off"
                    });
                    el.appendChild(this.contentEl_);
                    return el
                }
                ;
                CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
                    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    var localizedText = this.localize("Current Time");
                    var formattedTime = (0,
                    _formatTime2["default"])(time, this.player_.duration());
                    if (formattedTime !== this.formattedTime_) {
                        this.formattedTime_ = formattedTime;
                        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + "</span> " + formattedTime
                    }
                }
                ;
                return CurrentTimeDisplay
            }(_component2["default"]);
            _component2["default"].registerComponent("CurrentTimeDisplay", CurrentTimeDisplay);
            exports["default"] = CurrentTimeDisplay
        }
        , {
            5: 5,
            81: 81,
            84: 84
        }],
        33: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var DurationDisplay = function(_Component) {
                _inherits(DurationDisplay, _Component);
                function DurationDisplay(player, options) {
                    _classCallCheck(this, DurationDisplay);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.on(player, "durationchange", _this.updateContent);
                    _this.on(player, "timeupdate", _this.updateContent);
                    _this.on(player, "loadedmetadata", _this.updateContent);
                    return _this
                }
                DurationDisplay.prototype.createEl = function createEl() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-duration vjs-time-control vjs-control"
                    });
                    this.contentEl_ = Dom.createEl("div", {
                        className: "vjs-duration-display",
                        innerHTML: '<span class="vjs-control-text">' + this.localize("Duration Time") + "</span> 0:00"
                    }, {
                        "aria-live": "off"
                    });
                    el.appendChild(this.contentEl_);
                    return el
                }
                ;
                DurationDisplay.prototype.updateContent = function updateContent(event) {
                    var duration = this.player_.duration();
                    if (duration && this.duration_ !== duration) {
                        this.duration_ = duration;
                        var localizedText = this.localize("Duration Time");
                        var formattedTime = (0,
                        _formatTime2["default"])(duration);
                        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + "</span> " + formattedTime
                    }
                }
                ;
                return DurationDisplay
            }(_component2["default"]);
            _component2["default"].registerComponent("DurationDisplay", DurationDisplay);
            exports["default"] = DurationDisplay
        }
        , {
            5: 5,
            81: 81,
            84: 84
        }],
        34: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var RemainingTimeDisplay = function(_Component) {
                _inherits(RemainingTimeDisplay, _Component);
                function RemainingTimeDisplay(player, options) {
                    _classCallCheck(this, RemainingTimeDisplay);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.on(player, "timeupdate", _this.updateContent);
                    _this.on(player, "durationchange", _this.updateContent);
                    return _this
                }
                RemainingTimeDisplay.prototype.createEl = function createEl() {
                    var el = _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-remaining-time vjs-time-control vjs-control"
                    });
                    this.contentEl_ = Dom.createEl("div", {
                        className: "vjs-remaining-time-display",
                        innerHTML: '<span class="vjs-control-text">' + this.localize("Remaining Time") + "</span> -0:00"
                    }, {
                        "aria-live": "off"
                    });
                    el.appendChild(this.contentEl_);
                    return el
                }
                ;
                RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
                    if (this.player_.duration()) {
                        var localizedText = this.localize("Remaining Time");
                        var formattedTime = (0,
                        _formatTime2["default"])(this.player_.remainingTime());
                        if (formattedTime !== this.formattedTime_) {
                            this.formattedTime_ = formattedTime;
                            this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + "</span> -" + formattedTime
                        }
                    }
                }
                ;
                return RemainingTimeDisplay
            }(_component2["default"]);
            _component2["default"].registerComponent("RemainingTimeDisplay", RemainingTimeDisplay);
            exports["default"] = RemainingTimeDisplay
        }
        , {
            5: 5,
            81: 81,
            84: 84
        }],
        35: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TimeDivider = function(_Component) {
                _inherits(TimeDivider, _Component);
                function TimeDivider() {
                    _classCallCheck(this, TimeDivider);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                TimeDivider.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-time-control vjs-time-divider",
                        innerHTML: "<div><span>/</span></div>"
                    })
                }
                ;
                return TimeDivider
            }(_component2["default"]);
            _component2["default"].registerComponent("TimeDivider", TimeDivider);
            exports["default"] = TimeDivider
        }
        , {
            5: 5
        }],
        36: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _menuButton = _dereq_(47);
            var _menuButton2 = _interopRequireDefault(_menuButton);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TrackButton = function(_MenuButton) {
                _inherits(TrackButton, _MenuButton);
                function TrackButton(player, options) {
                    _classCallCheck(this, TrackButton);
                    var tracks = options.tracks;
                    var _this = _possibleConstructorReturn(this, _MenuButton.call(this, player, options));
                    if (_this.items.length <= 1) {
                        _this.hide()
                    }
                    if (!tracks) {
                        return _possibleConstructorReturn(_this)
                    }
                    var updateHandler = Fn.bind(_this, _this.update);
                    tracks.addEventListener("removetrack", updateHandler);
                    tracks.addEventListener("addtrack", updateHandler);
                    _this.player_.on("dispose", function() {
                        tracks.removeEventListener("removetrack", updateHandler);
                        tracks.removeEventListener("addtrack", updateHandler)
                    });
                    return _this
                }
                return TrackButton
            }(_menuButton2["default"]);
            _component2["default"].registerComponent("TrackButton", TrackButton);
            exports["default"] = TrackButton
        }
        , {
            47: 47,
            5: 5,
            83: 83
        }],
        37: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _slider = _dereq_(57);
            var _slider2 = _interopRequireDefault(_slider);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            _dereq_(39);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var VolumeBar = function(_Slider) {
                _inherits(VolumeBar, _Slider);
                function VolumeBar(player, options) {
                    _classCallCheck(this, VolumeBar);
                    var _this = _possibleConstructorReturn(this, _Slider.call(this, player, options));
                    _this.on(player, "volumechange", _this.updateARIAAttributes);
                    player.ready(Fn.bind(_this, _this.updateARIAAttributes));
                    return _this
                }
                VolumeBar.prototype.createEl = function createEl() {
                    return _Slider.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-bar vjs-slider-bar"
                    }, {
                        "aria-label": "volume level"
                    })
                }
                ;
                VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
                    this.checkMuted();
                    this.player_.volume(this.calculateDistance(event))
                }
                ;
                VolumeBar.prototype.checkMuted = function checkMuted() {
                    if (this.player_.muted()) {
                        this.player_.muted(false)
                    }
                }
                ;
                VolumeBar.prototype.getPercent = function getPercent() {
                    if (this.player_.muted()) {
                        return 0
                    }
                    return this.player_.volume()
                }
                ;
                VolumeBar.prototype.stepForward = function stepForward() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() + .1)
                }
                ;
                VolumeBar.prototype.stepBack = function stepBack() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() - .1)
                }
                ;
                VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
                    var volume = (this.player_.volume() * 100).toFixed(2);
                    this.el_.setAttribute("aria-valuenow", volume);
                    this.el_.setAttribute("aria-valuetext", volume + "%")
                }
                ;
                return VolumeBar
            }(_slider2["default"]);
            VolumeBar.prototype.options_ = {
                children: ["volumeLevel"],
                barName: "volumeLevel"
            };
            VolumeBar.prototype.playerEvent = "volumechange";
            _component2["default"].registerComponent("VolumeBar", VolumeBar);
            exports["default"] = VolumeBar
        }
        , {
            39: 39,
            5: 5,
            57: 57,
            83: 83
        }],
        38: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            _dereq_(37);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var VolumeControl = function(_Component) {
                _inherits(VolumeControl, _Component);
                function VolumeControl(player, options) {
                    _classCallCheck(this, VolumeControl);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    if (player.tech_ && player.tech_.featuresVolumeControl === false) {
                        _this.addClass("vjs-hidden")
                    }
                    _this.on(player, "loadstart", function() {
                        if (player.tech_.featuresVolumeControl === false) {
                            this.addClass("vjs-hidden")
                        } else {
                            this.removeClass("vjs-hidden")
                        }
                    });
                    return _this
                }
                VolumeControl.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-control vjs-control"
                    })
                }
                ;
                return VolumeControl
            }(_component2["default"]);
            VolumeControl.prototype.options_ = {
                children: ["volumeBar"]
            };
            _component2["default"].registerComponent("VolumeControl", VolumeControl);
            exports["default"] = VolumeControl
        }
        , {
            37: 37,
            5: 5
        }],
        39: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var VolumeLevel = function(_Component) {
                _inherits(VolumeLevel, _Component);
                function VolumeLevel() {
                    _classCallCheck(this, VolumeLevel);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                VolumeLevel.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-level",
                        innerHTML: '<span class="vjs-control-text"></span>'
                    })
                }
                ;
                return VolumeLevel
            }(_component2["default"]);
            _component2["default"].registerComponent("VolumeLevel", VolumeLevel);
            exports["default"] = VolumeLevel
        }
        , {
            5: 5
        }],
        40: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _popup = _dereq_(54);
            var _popup2 = _interopRequireDefault(_popup);
            var _popupButton = _dereq_(53);
            var _popupButton2 = _interopRequireDefault(_popupButton);
            var _muteToggle = _dereq_(11);
            var _muteToggle2 = _interopRequireDefault(_muteToggle);
            var _volumeBar = _dereq_(37);
            var _volumeBar2 = _interopRequireDefault(_volumeBar);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var VolumeMenuButton = function(_PopupButton) {
                _inherits(VolumeMenuButton, _PopupButton);
                function VolumeMenuButton(player) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    _classCallCheck(this, VolumeMenuButton);
                    if (options.inline === undefined) {
                        options.inline = true
                    }
                    if (options.vertical === undefined) {
                        if (options.inline) {
                            options.vertical = false
                        } else {
                            options.vertical = true
                        }
                    }
                    options.volumeBar = options.volumeBar || {};
                    options.volumeBar.vertical = !!options.vertical;
                    var _this = _possibleConstructorReturn(this, _PopupButton.call(this, player, options));
                    _this.on(player, "volumechange", _this.volumeUpdate);
                    _this.on(player, "loadstart", _this.volumeUpdate);
                    function updateVisibility() {
                        if (player.tech_ && player.tech_.featuresVolumeControl === false) {
                            this.addClass("vjs-hidden")
                        } else {
                            this.removeClass("vjs-hidden")
                        }
                    }
                    updateVisibility.call(_this);
                    _this.on(player, "loadstart", updateVisibility);
                    _this.on(_this.volumeBar, ["slideractive", "focus"], function() {
                        this.addClass("vjs-slider-active")
                    });
                    _this.on(_this.volumeBar, ["sliderinactive", "blur"], function() {
                        this.removeClass("vjs-slider-active")
                    });
                    _this.on(_this.volumeBar, ["focus"], function() {
                        this.addClass("vjs-lock-showing")
                    });
                    _this.on(_this.volumeBar, ["blur"], function() {
                        this.removeClass("vjs-lock-showing")
                    });
                    return _this
                }
                VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
                    var orientationClass = "";
                    if (this.options_.vertical) {
                        orientationClass = "vjs-volume-menu-button-vertical"
                    } else {
                        orientationClass = "vjs-volume-menu-button-horizontal"
                    }
                    return "vjs-volume-menu-button " + _PopupButton.prototype.buildCSSClass.call(this) + " " + orientationClass
                }
                ;
                VolumeMenuButton.prototype.createPopup = function createPopup() {
                    var popup = new _popup2["default"](this.player_,{
                        contentElType: "div"
                    });
                    var vb = new _volumeBar2["default"](this.player_,this.options_.volumeBar);
                    popup.addChild(vb);
                    this.menuContent = popup;
                    this.volumeBar = vb;
                    this.attachVolumeBarEvents();
                    return popup
                }
                ;
                VolumeMenuButton.prototype.handleClick = function handleClick(event) {
                    _muteToggle2["default"].prototype.handleClick.call(this);
                    _PopupButton.prototype.handleClick.call(this)
                }
                ;
                VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
                    this.menuContent.on(["mousedown", "touchdown"], Fn.bind(this, this.handleMouseDown))
                }
                ;
                VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
                    this.on(["mousemove", "touchmove"], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
                    this.on(this.el_.ownerDocument, ["mouseup", "touchend"], this.handleMouseUp)
                }
                ;
                VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
                    this.off(["mousemove", "touchmove"], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove))
                }
                ;
                return VolumeMenuButton
            }(_popupButton2["default"]);
            VolumeMenuButton.prototype.volumeUpdate = _muteToggle2["default"].prototype.update;
            VolumeMenuButton.prototype.controlText_ = "Mute";
            _component2["default"].registerComponent("VolumeMenuButton", VolumeMenuButton);
            exports["default"] = VolumeMenuButton
        }
        , {
            11: 11,
            37: 37,
            5: 5,
            53: 53,
            54: 54,
            83: 83
        }],
        41: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _modalDialog = _dereq_(50);
            var _modalDialog2 = _interopRequireDefault(_modalDialog);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var ErrorDisplay = function(_ModalDialog) {
                _inherits(ErrorDisplay, _ModalDialog);
                function ErrorDisplay(player, options) {
                    _classCallCheck(this, ErrorDisplay);
                    var _this = _possibleConstructorReturn(this, _ModalDialog.call(this, player, options));
                    _this.on(player, "error", _this.open);
                    return _this
                }
                ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
                    return "vjs-error-display " + _ModalDialog.prototype.buildCSSClass.call(this)
                }
                ;
                ErrorDisplay.prototype.content = function content() {
                    var error = this.player().error();
                    return error ? this.localize(error.message) : ""
                }
                ;
                return ErrorDisplay
            }(_modalDialog2["default"]);
            ErrorDisplay.prototype.options_ = (0,
            _mergeOptions2["default"])(_modalDialog2["default"].prototype.options_, {
                fillAlways: true,
                temporary: false,
                uncloseable: true
            });
            _component2["default"].registerComponent("ErrorDisplay", ErrorDisplay);
            exports["default"] = ErrorDisplay
        }
        , {
            5: 5,
            50: 50,
            87: 87
        }],
        42: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            var EventTarget = function EventTarget() {};
            EventTarget.prototype.allowedEvents_ = {};
            EventTarget.prototype.on = function(type, fn) {
                var ael = this.addEventListener;
                this.addEventListener = function() {}
                ;
                Events.on(this, type, fn);
                this.addEventListener = ael
            }
            ;
            EventTarget.prototype.addEventListener = EventTarget.prototype.on;
            EventTarget.prototype.off = function(type, fn) {
                Events.off(this, type, fn)
            }
            ;
            EventTarget.prototype.removeEventListener = EventTarget.prototype.off;
            EventTarget.prototype.one = function(type, fn) {
                var ael = this.addEventListener;
                this.addEventListener = function() {}
                ;
                Events.one(this, type, fn);
                this.addEventListener = ael
            }
            ;
            EventTarget.prototype.trigger = function(event) {
                var type = event.type || event;
                if (typeof event === "string") {
                    event = {
                        type: type
                    }
                }
                event = Events.fixEvent(event);
                if (this.allowedEvents_[type] && this["on" + type]) {
                    this["on" + type](event)
                }
                Events.trigger(this, event)
            }
            ;
            EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;
            exports["default"] = EventTarget
        }
        , {
            82: 82
        }],
        43: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj
            }
            : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
            }
            ;
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _obj = _dereq_(88);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            var _inherits = function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)))
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) {
                    subClass.super_ = superClass
                }
            };
            var extendFn = function extendFn(superClass) {
                var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var subClass = function subClass() {
                    superClass.apply(this, arguments)
                };
                var methods = {};
                if ((0,
                _obj.isObject)(subClassMethods)) {
                    if (typeof subClassMethods.init === "function") {
                        _log2["default"].warn("Constructor logic via init() is deprecated; please use constructor() instead.");
                        subClassMethods.constructor = subClassMethods.init
                    }
                    if (subClassMethods.constructor !== Object.prototype.constructor) {
                        subClass = subClassMethods.constructor
                    }
                    methods = subClassMethods
                } else if (typeof subClassMethods === "function") {
                    subClass = subClassMethods
                }
                _inherits(subClass, superClass);
                for (var name in methods) {
                    if (methods.hasOwnProperty(name)) {
                        subClass.prototype[name] = methods[name]
                    }
                }
                return subClass
            };
            exports["default"] = extendFn
        }
        , {
            86: 86,
            88: 88
        }],
        44: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            var FullscreenApi = {};
            var apiMap = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]];
            var specApi = apiMap[0];
            var browserApi = void 0;
            for (var i = 0; i < apiMap.length; i++) {
                if (apiMap[i][1]in _document2["default"]) {
                    browserApi = apiMap[i];
                    break
                }
            }
            if (browserApi) {
                for (var _i = 0; _i < browserApi.length; _i++) {
                    FullscreenApi[specApi[_i]] = browserApi[_i]
                }
            }
            exports["default"] = FullscreenApi
        }
        , {
            94: 94
        }],
        45: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var LoadingSpinner = function(_Component) {
                _inherits(LoadingSpinner, _Component);
                function LoadingSpinner() {
                    _classCallCheck(this, LoadingSpinner);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                LoadingSpinner.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-loading-spinner",
                        dir: "ltr"
                    })
                }
                ;
                return LoadingSpinner
            }(_component2["default"]);
            _component2["default"].registerComponent("LoadingSpinner", LoadingSpinner);
            exports["default"] = LoadingSpinner
        }
        , {
            5: 5
        }],
        46: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _obj = _dereq_(88);
            function MediaError(value) {
                if (value instanceof MediaError) {
                    return value
                }
                if (typeof value === "number") {
                    this.code = value
                } else if (typeof value === "string") {
                    this.message = value
                } else if ((0,
                _obj.isObject)(value)) {
                    if (typeof value.code === "number") {
                        this.code = value.code
                    }
                    (0,
                    _obj.assign)(this, value)
                }
                if (!this.message) {
                    this.message = MediaError.defaultMessages[this.code] || ""
                }
            }
            MediaError.prototype.code = 0;
            MediaError.prototype.message = "";
            MediaError.prototype.status = null;
            MediaError.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"];
            MediaError.defaultMessages = {
                1: "You aborted the media playback",
                2: "A network error caused the media download to fail part-way.",
                3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
                4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
                5: "The media is encrypted and we do not have the keys to decrypt it."
            };
            for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
                MediaError[MediaError.errorTypes[errNum]] = errNum;
                MediaError.prototype[MediaError.errorTypes[errNum]] = errNum
            }
            exports["default"] = MediaError
        }
        , {
            88: 88
        }],
        47: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _clickableComponent = _dereq_(3);
            var _clickableComponent2 = _interopRequireDefault(_clickableComponent);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _menu = _dereq_(49);
            var _menu2 = _interopRequireDefault(_menu);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _toTitleCase = _dereq_(91);
            var _toTitleCase2 = _interopRequireDefault(_toTitleCase);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var MenuButton = function(_ClickableComponent) {
                _inherits(MenuButton, _ClickableComponent);
                function MenuButton(player) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    _classCallCheck(this, MenuButton);
                    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));
                    _this.update();
                    _this.enabled_ = true;
                    _this.el_.setAttribute("aria-haspopup", "true");
                    _this.el_.setAttribute("role", "menuitem");
                    _this.on("keydown", _this.handleSubmenuKeyPress);
                    return _this
                }
                MenuButton.prototype.update = function update() {
                    var menu = this.createMenu();
                    if (this.menu) {
                        this.removeChild(this.menu)
                    }
                    this.menu = menu;
                    this.addChild(menu);
                    this.buttonPressed_ = false;
                    this.el_.setAttribute("aria-expanded", "false");
                    if (this.items && this.items.length === 0) {
                        this.hide()
                    } else if (this.items && this.items.length > 1) {
                        this.show()
                    }
                }
                ;
                MenuButton.prototype.createMenu = function createMenu() {
                    var menu = new _menu2["default"](this.player_);
                    if (this.options_.title) {
                        var title = Dom.createEl("li", {
                            className: "vjs-menu-title",
                            innerHTML: (0,
                            _toTitleCase2["default"])(this.options_.title),
                            tabIndex: -1
                        });
                        menu.children_.unshift(title);
                        Dom.insertElFirst(title, menu.contentEl())
                    }
                    this.items = this.createItems();
                    if (this.items) {
                        for (var i = 0; i < this.items.length; i++) {
                            menu.addItem(this.items[i])
                        }
                    }
                    return menu
                }
                ;
                MenuButton.prototype.createItems = function createItems() {}
                ;
                MenuButton.prototype.createEl = function createEl() {
                    return _ClickableComponent.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass()
                    })
                }
                ;
                MenuButton.prototype.buildCSSClass = function buildCSSClass() {
                    var menuButtonClass = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        menuButtonClass += "-inline"
                    } else {
                        menuButtonClass += "-popup"
                    }
                    return "vjs-menu-button " + menuButtonClass + " " + _ClickableComponent.prototype.buildCSSClass.call(this)
                }
                ;
                MenuButton.prototype.handleClick = function handleClick(event) {
                    this.one(this.menu.contentEl(), "mouseleave", Fn.bind(this, function(e) {
                        this.unpressButton();
                        this.el_.blur()
                    }));
                    if (this.buttonPressed_) {
                        this.unpressButton()
                    } else {
                        this.pressButton()
                    }
                }
                ;
                MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {
                    if (event.which === 27 || event.which === 9) {
                        if (this.buttonPressed_) {
                            this.unpressButton()
                        }
                        if (event.which !== 9) {
                            event.preventDefault()
                        }
                    } else if (event.which === 38 || event.which === 40) {
                        if (!this.buttonPressed_) {
                            this.pressButton();
                            event.preventDefault()
                        }
                    } else {
                        _ClickableComponent.prototype.handleKeyPress.call(this, event)
                    }
                }
                ;
                MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {
                    if (event.which === 27 || event.which === 9) {
                        if (this.buttonPressed_) {
                            this.unpressButton()
                        }
                        if (event.which !== 9) {
                            event.preventDefault()
                        }
                    }
                }
                ;
                MenuButton.prototype.pressButton = function pressButton() {
                    if (this.enabled_) {
                        this.buttonPressed_ = true;
                        this.menu.lockShowing();
                        this.el_.setAttribute("aria-expanded", "true");
                        this.menu.focus()
                    }
                }
                ;
                MenuButton.prototype.unpressButton = function unpressButton() {
                    if (this.enabled_) {
                        this.buttonPressed_ = false;
                        this.menu.unlockShowing();
                        this.el_.setAttribute("aria-expanded", "false");
                        this.el_.focus()
                    }
                }
                ;
                MenuButton.prototype.disable = function disable() {
                    this.buttonPressed_ = false;
                    this.menu.unlockShowing();
                    this.el_.setAttribute("aria-expanded", "false");
                    this.enabled_ = false;
                    return _ClickableComponent.prototype.disable.call(this)
                }
                ;
                MenuButton.prototype.enable = function enable() {
                    this.enabled_ = true;
                    return _ClickableComponent.prototype.enable.call(this)
                }
                ;
                return MenuButton
            }(_clickableComponent2["default"]);
            _component2["default"].registerComponent("MenuButton", MenuButton);
            exports["default"] = MenuButton
        }
        , {
            3: 3,
            49: 49,
            5: 5,
            81: 81,
            83: 83,
            91: 91
        }],
        48: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _clickableComponent = _dereq_(3);
            var _clickableComponent2 = _interopRequireDefault(_clickableComponent);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _obj = _dereq_(88);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var MenuItem = function(_ClickableComponent) {
                _inherits(MenuItem, _ClickableComponent);
                function MenuItem(player, options) {
                    _classCallCheck(this, MenuItem);
                    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));
                    _this.selectable = options.selectable;
                    _this.selected(options.selected);
                    if (_this.selectable) {
                        _this.el_.setAttribute("role", "menuitemcheckbox")
                    } else {
                        _this.el_.setAttribute("role", "menuitem")
                    }
                    return _this
                }
                MenuItem.prototype.createEl = function createEl(type, props, attrs) {
                    return _ClickableComponent.prototype.createEl.call(this, "li", (0,
                    _obj.assign)({
                        className: "vjs-menu-item",
                        innerHTML: this.localize(this.options_.label),
                        tabIndex: -1
                    }, props), attrs)
                }
                ;
                MenuItem.prototype.handleClick = function handleClick(event) {
                    this.selected(true)
                }
                ;
                MenuItem.prototype.selected = function selected(_selected) {
                    if (this.selectable) {
                        if (_selected) {
                            this.addClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "true");
                            this.controlText(", selected")
                        } else {
                            this.removeClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "false");
                            this.controlText(" ")
                        }
                    }
                }
                ;
                return MenuItem
            }(_clickableComponent2["default"]);
            _component2["default"].registerComponent("MenuItem", MenuItem);
            exports["default"] = MenuItem
        }
        , {
            3: 3,
            5: 5,
            88: 88
        }],
        49: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Menu = function(_Component) {
                _inherits(Menu, _Component);
                function Menu(player, options) {
                    _classCallCheck(this, Menu);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.focusedChild_ = -1;
                    _this.on("keydown", _this.handleKeyPress);
                    return _this
                }
                Menu.prototype.addItem = function addItem(component) {
                    this.addChild(component);
                    component.on("click", Fn.bind(this, function(event) {
                        this.unlockShowing()
                    }))
                }
                ;
                Menu.prototype.createEl = function createEl() {
                    var contentElType = this.options_.contentElType || "ul";
                    this.contentEl_ = Dom.createEl(contentElType, {
                        className: "vjs-menu-content"
                    });
                    this.contentEl_.setAttribute("role", "menu");
                    var el = _Component.prototype.createEl.call(this, "div", {
                        append: this.contentEl_,
                        className: "vjs-menu"
                    });
                    el.setAttribute("role", "presentation");
                    el.appendChild(this.contentEl_);
                    Events.on(el, "click", function(event) {
                        event.preventDefault();
                        event.stopImmediatePropagation()
                    });
                    return el
                }
                ;
                Menu.prototype.handleKeyPress = function handleKeyPress(event) {
                    if (event.which === 37 || event.which === 40) {
                        event.preventDefault();
                        this.stepForward()
                    } else if (event.which === 38 || event.which === 39) {
                        event.preventDefault();
                        this.stepBack()
                    }
                }
                ;
                Menu.prototype.stepForward = function stepForward() {
                    var stepChild = 0;
                    if (this.focusedChild_ !== undefined) {
                        stepChild = this.focusedChild_ + 1
                    }
                    this.focus(stepChild)
                }
                ;
                Menu.prototype.stepBack = function stepBack() {
                    var stepChild = 0;
                    if (this.focusedChild_ !== undefined) {
                        stepChild = this.focusedChild_ - 1
                    }
                    this.focus(stepChild)
                }
                ;
                Menu.prototype.focus = function focus() {
                    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                    var children = this.children().slice();
                    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);
                    if (haveTitle) {
                        children.shift()
                    }
                    if (children.length > 0) {
                        if (item < 0) {
                            item = 0
                        } else if (item >= children.length) {
                            item = children.length - 1
                        }
                        this.focusedChild_ = item;
                        children[item].el_.focus()
                    }
                }
                ;
                return Menu
            }(_component2["default"]);
            _component2["default"].registerComponent("Menu", Menu);
            exports["default"] = Menu
        }
        , {
            5: 5,
            81: 81,
            82: 82,
            83: 83
        }],
        50: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var MODAL_CLASS_NAME = "vjs-modal-dialog";
            var ESC = 27;
            var ModalDialog = function(_Component) {
                _inherits(ModalDialog, _Component);
                function ModalDialog(player, options) {
                    _classCallCheck(this, ModalDialog);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;
                    _this.closeable(!_this.options_.uncloseable);
                    _this.content(_this.options_.content);
                    _this.contentEl_ = Dom.createEl("div", {
                        className: MODAL_CLASS_NAME + "-content"
                    }, {
                        role: "document"
                    });
                    _this.descEl_ = Dom.createEl("p", {
                        className: MODAL_CLASS_NAME + "-description vjs-offscreen",
                        id: _this.el().getAttribute("aria-describedby")
                    });
                    Dom.textContent(_this.descEl_, _this.description());
                    _this.el_.appendChild(_this.descEl_);
                    _this.el_.appendChild(_this.contentEl_);
                    return _this
                }
                ModalDialog.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        tabIndex: -1
                    }, {
                        "aria-describedby": this.id() + "_description",
                        "aria-hidden": "true",
                        "aria-label": this.label(),
                        role: "dialog"
                    })
                }
                ;
                ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
                    return MODAL_CLASS_NAME + " vjs-hidden " + _Component.prototype.buildCSSClass.call(this)
                }
                ;
                ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
                    if (e.which === ESC && this.closeable()) {
                        this.close()
                    }
                }
                ;
                ModalDialog.prototype.label = function label() {
                    return this.options_.label || this.localize("Modal Window")
                }
                ;
                ModalDialog.prototype.description = function description() {
                    var desc = this.options_.description || this.localize("This is a modal window.");
                    if (this.closeable()) {
                        desc += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")
                    }
                    return desc
                }
                ;
                ModalDialog.prototype.open = function open() {
                    if (!this.opened_) {
                        var player = this.player();
                        this.trigger("beforemodalopen");
                        this.opened_ = true;
                        if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
                            this.fill()
                        }
                        this.wasPlaying_ = !player.paused();
                        if (this.wasPlaying_) {
                            player.pause()
                        }
                        if (this.closeable()) {
                            this.on(this.el_.ownerDocument, "keydown", Fn.bind(this, this.handleKeyPress))
                        }
                        player.controls(false);
                        this.show();
                        this.el().setAttribute("aria-hidden", "false");
                        this.trigger("modalopen");
                        this.hasBeenOpened_ = true
                    }
                    return this
                }
                ;
                ModalDialog.prototype.opened = function opened(value) {
                    if (typeof value === "boolean") {
                        this[value ? "open" : "close"]()
                    }
                    return this.opened_
                }
                ;
                ModalDialog.prototype.close = function close() {
                    if (this.opened_) {
                        var player = this.player();
                        this.trigger("beforemodalclose");
                        this.opened_ = false;
                        if (this.wasPlaying_) {
                            player.play()
                        }
                        if (this.closeable()) {
                            this.off(this.el_.ownerDocument, "keydown", Fn.bind(this, this.handleKeyPress))
                        }
                        player.controls(true);
                        this.hide();
                        this.el().setAttribute("aria-hidden", "true");
                        this.trigger("modalclose");
                        if (this.options_.temporary) {
                            this.dispose()
                        }
                    }
                    return this
                }
                ;
                ModalDialog.prototype.closeable = function closeable(value) {
                    if (typeof value === "boolean") {
                        var closeable = this.closeable_ = !!value;
                        var close = this.getChild("closeButton");
                        if (closeable && !close) {
                            var temp = this.contentEl_;
                            this.contentEl_ = this.el_;
                            close = this.addChild("closeButton", {
                                controlText: "Close Modal Dialog"
                            });
                            this.contentEl_ = temp;
                            this.on(close, "close", this.close)
                        }
                        if (!closeable && close) {
                            this.off(close, "close", this.close);
                            this.removeChild(close);
                            close.dispose()
                        }
                    }
                    return this.closeable_
                }
                ;
                ModalDialog.prototype.fill = function fill() {
                    return this.fillWith(this.content())
                }
                ;
                ModalDialog.prototype.fillWith = function fillWith(content) {
                    var contentEl = this.contentEl();
                    var parentEl = contentEl.parentNode;
                    var nextSiblingEl = contentEl.nextSibling;
                    this.trigger("beforemodalfill");
                    this.hasBeenFilled_ = true;
                    parentEl.removeChild(contentEl);
                    this.empty();
                    Dom.insertContent(contentEl, content);
                    this.trigger("modalfill");
                    if (nextSiblingEl) {
                        parentEl.insertBefore(contentEl, nextSiblingEl)
                    } else {
                        parentEl.appendChild(contentEl)
                    }
                    return this
                }
                ;
                ModalDialog.prototype.empty = function empty() {
                    this.trigger("beforemodalempty");
                    Dom.emptyEl(this.contentEl());
                    this.trigger("modalempty");
                    return this
                }
                ;
                ModalDialog.prototype.content = function content(value) {
                    if (typeof value !== "undefined") {
                        this.content_ = value
                    }
                    return this.content_
                }
                ;
                return ModalDialog
            }(_component2["default"]);
            ModalDialog.prototype.options_ = {
                temporary: true
            };
            _component2["default"].registerComponent("ModalDialog", ModalDialog);
            exports["default"] = ModalDialog
        }
        , {
            5: 5,
            81: 81,
            83: 83
        }],
        51: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _guid = _dereq_(85);
            var Guid = _interopRequireWildcard(_guid);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _toTitleCase = _dereq_(91);
            var _toTitleCase2 = _interopRequireDefault(_toTitleCase);
            var _timeRanges = _dereq_(90);
            var _buffer = _dereq_(79);
            var _stylesheet = _dereq_(89);
            var stylesheet = _interopRequireWildcard(_stylesheet);
            var _fullscreenApi = _dereq_(44);
            var _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);
            var _mediaError = _dereq_(46);
            var _mediaError2 = _interopRequireDefault(_mediaError);
            var _tuple = _dereq_(97);
            var _tuple2 = _interopRequireDefault(_tuple);
            var _obj = _dereq_(88);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            var _textTrackListConverter = _dereq_(69);
            var _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);
            var _modalDialog = _dereq_(50);
            var _modalDialog2 = _interopRequireDefault(_modalDialog);
            var _tech = _dereq_(62);
            var _tech2 = _interopRequireDefault(_tech);
            var _audioTrackList = _dereq_(63);
            var _audioTrackList2 = _interopRequireDefault(_audioTrackList);
            var _videoTrackList = _dereq_(76);
            var _videoTrackList2 = _interopRequireDefault(_videoTrackList);
            _dereq_(61);
            _dereq_(59);
            _dereq_(55);
            _dereq_(68);
            _dereq_(45);
            _dereq_(1);
            _dereq_(4);
            _dereq_(8);
            _dereq_(41);
            _dereq_(71);
            _dereq_(60);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TECH_EVENTS_RETRIGGER = ["progress", "abort", "suspend", "emptied", "stalled", "loadedmetadata", "loadeddata", "timeupdate", "ratechange", "volumechange", "texttrackchange"];
            var Player = function(_Component) {
                _inherits(Player, _Component);
                function Player(tag, options, ready) {
                    _classCallCheck(this, Player);
                    tag.id = tag.id || "vjs_video_" + Guid.newGUID();
                    options = (0,
                    _obj.assign)(Player.getTagSettings(tag), options);
                    options.initChildren = false;
                    options.createEl = false;
                    options.reportTouchActivity = false;
                    if (!options.language) {
                        if (typeof tag.closest === "function") {
                            var closest = tag.closest("[lang]");
                            if (closest) {
                                options.language = closest.getAttribute("lang")
                            }
                        } else {
                            var element = tag;
                            while (element && element.nodeType === 1) {
                                if (Dom.getElAttributes(element).hasOwnProperty("lang")) {
                                    options.language = element.getAttribute("lang");
                                    break
                                }
                                element = element.parentNode
                            }
                        }
                    }
                    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));
                    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
                        throw new Error("No techOrder specified. Did you overwrite " + "videojs.options instead of just changing the " + "properties you want to override?")
                    }
                    _this.tag = tag;
                    _this.tagAttributes = tag && Dom.getElAttributes(tag);
                    _this.language(_this.options_.language);
                    if (options.languages) {
                        (function() {
                            var languagesToLower = {};
                            Object.getOwnPropertyNames(options.languages).forEach(function(name) {
                                languagesToLower[name.toLowerCase()] = options.languages[name]
                            });
                            _this.languages_ = languagesToLower
                        }
                        )()
                    } else {
                        _this.languages_ = Player.prototype.options_.languages
                    }
                    _this.cache_ = {};
                    _this.poster_ = options.poster || "";
                    _this.controls_ = !!options.controls;
                    tag.controls = false;
                    _this.scrubbing_ = false;
                    _this.el_ = _this.createEl();
                    var playerOptionsCopy = (0,
                    _mergeOptions2["default"])(_this.options_);
                    if (options.plugins) {
                        (function() {
                            var plugins = options.plugins;
                            Object.getOwnPropertyNames(plugins).forEach(function(name) {
                                if (typeof this[name] === "function") {
                                    this[name](plugins[name])
                                } else {
                                    _log2["default"].error("Unable to find plugin:", name)
                                }
                            }, _this)
                        }
                        )()
                    }
                    _this.options_.playerOptions = playerOptionsCopy;
                    _this.initChildren();
                    _this.isAudio(tag.nodeName.toLowerCase() === "audio");
                    if (_this.controls()) {
                        _this.addClass("vjs-controls-enabled")
                    } else {
                        _this.addClass("vjs-controls-disabled")
                    }
                    _this.el_.setAttribute("role", "region");
                    if (_this.isAudio()) {
                        _this.el_.setAttribute("aria-label", "audio player")
                    } else {
                        _this.el_.setAttribute("aria-label", "video player")
                    }
                    if (_this.isAudio()) {
                        _this.addClass("vjs-audio")
                    }
                    if (_this.flexNotSupported_()) {
                        _this.addClass("vjs-no-flex")
                    }
                    if (!browser.IS_IOS) {
                        _this.addClass("vjs-workinghover")
                    }
                    Player.players[_this.id_] = _this;
                    _this.userActive(true);
                    _this.reportUserActivity();
                    _this.listenForUserActivity_();
                    _this.on("fullscreenchange", _this.handleFullscreenChange_);
                    _this.on("stageclick", _this.handleStageClick_);
                    return _this
                }
                Player.prototype.dispose = function dispose() {
                    this.trigger("dispose");
                    this.off("dispose");
                    if (this.styleEl_ && this.styleEl_.parentNode) {
                        this.styleEl_.parentNode.removeChild(this.styleEl_)
                    }
                    Player.players[this.id_] = null;
                    if (this.tag && this.tag.player) {
                        this.tag.player = null
                    }
                    if (this.el_ && this.el_.player) {
                        this.el_.player = null
                    }
                    if (this.tech_) {
                        this.tech_.dispose()
                    }
                    _Component.prototype.dispose.call(this)
                }
                ;
                Player.prototype.createEl = function createEl() {
                    var tag = this.tag;
                    var el = void 0;
                    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute("data-vjs-player");
                    if (playerElIngest) {
                        el = this.el_ = tag.parentNode
                    } else {
                        el = this.el_ = _Component.prototype.createEl.call(this, "div")
                    }
                    tag.removeAttribute("width");
                    tag.removeAttribute("height");
                    var attrs = Dom.getElAttributes(tag);
                    Object.getOwnPropertyNames(attrs).forEach(function(attr) {
                        if (attr === "class") {
                            el.className += " " + attrs[attr]
                        } else {
                            el.setAttribute(attr, attrs[attr])
                        }
                    });
                    tag.playerId = tag.id;
                    tag.id += "_html5_api";
                    tag.className = "vjs-tech";
                    tag.player = el.player = this;
                    this.addClass("vjs-paused");
                    if (_window2["default"].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                        this.styleEl_ = stylesheet.createStyleElement("vjs-styles-dimensions");
                        var defaultsStyleEl = Dom.$(".vjs-styles-defaults");
                        var head = Dom.$("head");
                        head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild)
                    }
                    this.width(this.options_.width);
                    this.height(this.options_.height);
                    this.fluid(this.options_.fluid);
                    this.aspectRatio(this.options_.aspectRatio);
                    var links = tag.getElementsByTagName("a");
                    for (var i = 0; i < links.length; i++) {
                        var linkEl = links.item(i);
                        Dom.addElClass(linkEl, "vjs-hidden");
                        linkEl.setAttribute("hidden", "hidden")
                    }
                    tag.initNetworkState_ = tag.networkState;
                    if (tag.parentNode && !playerElIngest) {
                        tag.parentNode.insertBefore(el, tag)
                    }
                    Dom.insertElFirst(tag, el);
                    this.children_.unshift(tag);
                    this.el_ = el;
                    return el
                }
                ;
                Player.prototype.width = function width(value) {
                    return this.dimension("width", value)
                }
                ;
                Player.prototype.height = function height(value) {
                    return this.dimension("height", value)
                }
                ;
                Player.prototype.dimension = function dimension(_dimension, value) {
                    var privDimension = _dimension + "_";
                    if (value === undefined) {
                        return this[privDimension] || 0
                    }
                    if (value === "") {
                        this[privDimension] = undefined
                    } else {
                        var parsedVal = parseFloat(value);
                        if (isNaN(parsedVal)) {
                            _log2["default"].error('Improper value "' + value + '" supplied for for ' + _dimension);
                            return this
                        }
                        this[privDimension] = parsedVal
                    }
                    this.updateStyleEl_();
                    return this
                }
                ;
                Player.prototype.fluid = function fluid(bool) {
                    if (bool === undefined) {
                        return !!this.fluid_
                    }
                    this.fluid_ = !!bool;
                    if (bool) {
                        this.addClass("vjs-fluid")
                    } else {
                        this.removeClass("vjs-fluid")
                    }
                    this.updateStyleEl_()
                }
                ;
                Player.prototype.aspectRatio = function aspectRatio(ratio) {
                    if (ratio === undefined) {
                        return this.aspectRatio_
                    }
                    if (!/^\d+\:\d+$/.test(ratio)) {
                        throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.")
                    }
                    this.aspectRatio_ = ratio;
                    this.fluid(true);
                    this.updateStyleEl_()
                }
                ;
                Player.prototype.updateStyleEl_ = function updateStyleEl_() {
                    if (_window2["default"].VIDEOJS_NO_DYNAMIC_STYLE === true) {
                        var _width = typeof this.width_ === "number" ? this.width_ : this.options_.width;
                        var _height = typeof this.height_ === "number" ? this.height_ : this.options_.height;
                        var techEl = this.tech_ && this.tech_.el();
                        if (techEl) {
                            if (_width >= 0) {
                                techEl.width = _width
                            }
                            if (_height >= 0) {
                                techEl.height = _height
                            }
                        }
                        return
                    }
                    var width = void 0;
                    var height = void 0;
                    var aspectRatio = void 0;
                    var idClass = void 0;
                    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== "auto") {
                        aspectRatio = this.aspectRatio_
                    } else if (this.videoWidth() > 0) {
                        aspectRatio = this.videoWidth() + ":" + this.videoHeight()
                    } else {
                        aspectRatio = "16:9"
                    }
                    var ratioParts = aspectRatio.split(":");
                    var ratioMultiplier = ratioParts[1] / ratioParts[0];
                    if (this.width_ !== undefined) {
                        width = this.width_
                    } else if (this.height_ !== undefined) {
                        width = this.height_ / ratioMultiplier
                    } else {
                        width = this.videoWidth() || 300
                    }
                    if (this.height_ !== undefined) {
                        height = this.height_
                    } else {
                        height = width * ratioMultiplier
                    }
                    if (/^[^a-zA-Z]/.test(this.id())) {
                        idClass = "dimensions-" + this.id()
                    } else {
                        idClass = this.id() + "-dimensions"
                    }
                    this.addClass(idClass);
                    stylesheet.setTextContent(this.styleEl_, "\n      ." + idClass + " {\n        width: " + width + "px;\n        height: " + height + "px;\n      }\n\n      ." + idClass + ".vjs-fluid {\n        padding-top: " + ratioMultiplier * 100 + "%;\n      }\n    ")
                }
                ;
                Player.prototype.loadTech_ = function loadTech_(techName, source) {
                    var _this2 = this;
                    if (this.tech_) {
                        this.unloadTech_()
                    }
                    if (techName !== "Html5" && this.tag) {
                        _tech2["default"].getTech("Html5").disposeMediaElement(this.tag);
                        this.tag.player = null;
                        this.tag = null
                    }
                    this.techName_ = techName;
                    this.isReady_ = false;
                    var techOptions = (0,
                    _obj.assign)({
                        source: source,
                        nativeControlsForTouch: this.options_.nativeControlsForTouch,
                        playerId: this.id(),
                        techId: this.id() + "_" + techName + "_api",
                        videoTracks: this.videoTracks_,
                        textTracks: this.textTracks_,
                        audioTracks: this.audioTracks_,
                        autoplay: this.options_.autoplay,
                        preload: this.options_.preload,
                        loop: this.options_.loop,
                        muted: this.options_.muted,
                        poster: this.poster(),
                        language: this.language(),
                        playerElIngest: this.playerElIngest_ || false,
                        "vtt.js": this.options_["vtt.js"]
                    }, this.options_[techName.toLowerCase()]);
                    if (this.tag) {
                        techOptions.tag = this.tag
                    }
                    if (source) {
                        this.currentType_ = source.type;
                        if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
                            techOptions.startTime = this.cache_.currentTime
                        }
                        this.cache_.sources = null;
                        this.cache_.source = source;
                        this.cache_.src = source.src
                    }
                    var TechComponent = _tech2["default"].getTech(techName);
                    if (!TechComponent) {
                        TechComponent = _component2["default"].getComponent(techName)
                    }
                    this.tech_ = new TechComponent(techOptions);
                    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);
                    _textTrackListConverter2["default"].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
                    TECH_EVENTS_RETRIGGER.forEach(function(event) {
                        _this2.on(_this2.tech_, event, _this2["handleTech" + (0,
                        _toTitleCase2["default"])(event) + "_"])
                    });
                    this.on(this.tech_, "loadstart", this.handleTechLoadStart_);
                    this.on(this.tech_, "waiting", this.handleTechWaiting_);
                    this.on(this.tech_, "canplay", this.handleTechCanPlay_);
                    this.on(this.tech_, "canplaythrough", this.handleTechCanPlayThrough_);
                    this.on(this.tech_, "playing", this.handleTechPlaying_);
                    this.on(this.tech_, "ended", this.handleTechEnded_);
                    this.on(this.tech_, "seeking", this.handleTechSeeking_);
                    this.on(this.tech_, "seeked", this.handleTechSeeked_);
                    this.on(this.tech_, "play", this.handleTechPlay_);
                    this.on(this.tech_, "firstplay", this.handleTechFirstPlay_);
                    this.on(this.tech_, "pause", this.handleTechPause_);
                    this.on(this.tech_, "durationchange", this.handleTechDurationChange_);
                    this.on(this.tech_, "fullscreenchange", this.handleTechFullscreenChange_);
                    this.on(this.tech_, "error", this.handleTechError_);
                    this.on(this.tech_, "loadedmetadata", this.updateStyleEl_);
                    this.on(this.tech_, "posterchange", this.handleTechPosterChange_);
                    this.on(this.tech_, "textdata", this.handleTechTextData_);
                    this.usingNativeControls(this.techGet_("controls"));
                    if (this.controls() && !this.usingNativeControls()) {
                        this.addTechControlsListeners_()
                    }
                    if (this.tech_.el().parentNode !== this.el() && (techName !== "Html5" || !this.tag)) {
                        Dom.insertElFirst(this.tech_.el(), this.el())
                    }
                    if (this.tag) {
                        this.tag.player = null;
                        this.tag = null
                    }
                }
                ;
                Player.prototype.unloadTech_ = function unloadTech_() {
                    this.videoTracks_ = this.videoTracks();
                    this.textTracks_ = this.textTracks();
                    this.audioTracks_ = this.audioTracks();
                    this.textTracksJson_ = _textTrackListConverter2["default"].textTracksToJson(this.tech_);
                    this.isReady_ = false;
                    this.tech_.dispose();
                    this.tech_ = false
                }
                ;
                Player.prototype.tech = function tech(safety) {
                    if (safety && safety.IWillNotUseThisInPlugins) {
                        return this.tech_
                    }
                    var errorText = "\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ";
                    _window2["default"].alert(errorText);
                    throw new Error(errorText)
                }
                ;
                Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
                    this.removeTechControlsListeners_();
                    this.on(this.tech_, "mousedown", this.handleTechClick_);
                    this.on(this.tech_, "touchstart", this.handleTechTouchStart_);
                    this.on(this.tech_, "touchmove", this.handleTechTouchMove_);
                    this.on(this.tech_, "touchend", this.handleTechTouchEnd_);
                    this.on(this.tech_, "tap", this.handleTechTap_)
                }
                ;
                Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
                    this.off(this.tech_, "tap", this.handleTechTap_);
                    this.off(this.tech_, "touchstart", this.handleTechTouchStart_);
                    this.off(this.tech_, "touchmove", this.handleTechTouchMove_);
                    this.off(this.tech_, "touchend", this.handleTechTouchEnd_);
                    this.off(this.tech_, "mousedown", this.handleTechClick_)
                }
                ;
                Player.prototype.handleTechReady_ = function handleTechReady_() {
                    this.triggerReady();
                    if (this.cache_.volume) {
                        this.techCall_("setVolume", this.cache_.volume)
                    }
                    this.handleTechPosterChange_();
                    this.handleTechDurationChange_();
                    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
                        try {
                            delete this.tag.poster
                        } catch (e) {
                            (0,
                            _log2["default"])("deleting tag.poster throws in some browsers", e)
                        }
                        this.play()
                    }
                }
                ;
                Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-seeking");
                    this.error(null);
                    if (!this.paused()) {
                        this.trigger("loadstart");
                        this.trigger("firstplay")
                    } else {
                        this.hasStarted(false);
                        this.trigger("loadstart")
                    }
                }
                ;
                Player.prototype.hasStarted = function hasStarted(_hasStarted) {
                    if (_hasStarted !== undefined) {
                        if (this.hasStarted_ !== _hasStarted) {
                            this.hasStarted_ = _hasStarted;
                            if (_hasStarted) {
                                this.addClass("vjs-has-started");
                                this.trigger("firstplay")
                            } else {
                                this.removeClass("vjs-has-started")
                            }
                        }
                        return this
                    }
                    return !!this.hasStarted_
                }
                ;
                Player.prototype.handleTechPlay_ = function handleTechPlay_() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.hasStarted(true);
                    this.trigger("play")
                }
                ;
                Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
                    var _this3 = this;
                    this.addClass("vjs-waiting");
                    this.trigger("waiting");
                    this.one("timeupdate", function() {
                        return _this3.removeClass("vjs-waiting")
                    })
                }
                ;
                Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplay")
                }
                ;
                Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplaythrough")
                }
                ;
                Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
                    this.removeClass("vjs-waiting");
                    this.trigger("playing")
                }
                ;
                Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
                    this.addClass("vjs-seeking");
                    this.trigger("seeking")
                }
                ;
                Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
                    this.removeClass("vjs-seeking");
                    this.trigger("seeked")
                }
                ;
                Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
                    if (this.options_.starttime) {
                        _log2["default"].warn("Passing the `starttime` option to the player will be deprecated in 6.0");
                        this.currentTime(this.options_.starttime)
                    }
                    this.addClass("vjs-has-started");
                    this.trigger("firstplay")
                }
                ;
                Player.prototype.handleTechPause_ = function handleTechPause_() {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.trigger("pause")
                }
                ;
                Player.prototype.handleTechEnded_ = function handleTechEnded_() {
                    this.addClass("vjs-ended");
                    if (this.options_.loop) {
                        this.currentTime(0);
                        this.play()
                    } else if (!this.paused()) {
                        this.pause()
                    }
                    this.trigger("ended")
                }
                ;
                Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
                    this.duration(this.techGet_("duration"))
                }
                ;
                Player.prototype.handleTechClick_ = function handleTechClick_(event) {
                    if (event.button !== 0) {
                        return
                    }
                    if (this.controls()) {
                        if (this.paused()) {
                            this.play()
                        } else {
                            this.pause()
                        }
                    }
                }
                ;
                Player.prototype.handleTechTap_ = function handleTechTap_() {
                    this.userActive(!this.userActive())
                }
                ;
                Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
                    this.userWasActive = this.userActive()
                }
                ;
                Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
                    if (this.userWasActive) {
                        this.reportUserActivity()
                    }
                }
                ;
                Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
                    event.preventDefault()
                }
                ;
                Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
                    if (this.isFullscreen()) {
                        this.addClass("vjs-fullscreen")
                    } else {
                        this.removeClass("vjs-fullscreen")
                    }
                }
                ;
                Player.prototype.handleStageClick_ = function handleStageClick_() {
                    this.reportUserActivity()
                }
                ;
                Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
                    if (data) {
                        this.isFullscreen(data.isFullscreen)
                    }
                    this.trigger("fullscreenchange")
                }
                ;
                Player.prototype.handleTechError_ = function handleTechError_() {
                    var error = this.tech_.error();
                    this.error(error)
                }
                ;
                Player.prototype.handleTechTextData_ = function handleTechTextData_() {
                    var data = null;
                    if (arguments.length > 1) {
                        data = arguments[1]
                    }
                    this.trigger("textdata", data)
                }
                ;
                Player.prototype.getCache = function getCache() {
                    return this.cache_
                }
                ;
                Player.prototype.techCall_ = function techCall_(method, arg) {
                    if (this.tech_ && !this.tech_.isReady_) {
                        this.tech_.ready(function() {
                            this[method](arg)
                        }, true)
                    } else {
                        try {
                            if (this.tech_) {
                                this.tech_[method](arg)
                            }
                        } catch (e) {
                            (0,
                            _log2["default"])(e);
                            throw e
                        }
                    }
                }
                ;
                Player.prototype.techGet_ = function techGet_(method) {
                    if (this.tech_ && this.tech_.isReady_) {
                        try {
                            return this.tech_[method]()
                        } catch (e) {
                            if (this.tech_[method] === undefined) {
                                (0,
                                _log2["default"])("Video.js: " + method + " method not defined for " + this.techName_ + " playback technology.", e)
                            } else if (e.name === "TypeError") {
                                (0,
                                _log2["default"])("Video.js: " + method + " unavailable on " + this.techName_ + " playback technology element.", e);
                                this.tech_.isReady_ = false
                            } else {
                                (0,
                                _log2["default"])(e)
                            }
                            throw e
                        }
                    }
                    return
                }
                ;
                Player.prototype.play = function play() {
                    if (this.src() || this.currentSrc()) {
                        this.techCall_("play")
                    } else {
                        this.tech_.one("loadstart", function() {
                            this.play()
                        })
                    }
                    return this
                }
                ;
                Player.prototype.pause = function pause() {
                    this.techCall_("pause");
                    return this
                }
                ;
                Player.prototype.paused = function paused() {
                    return this.techGet_("paused") === false ? false : true
                }
                ;
                Player.prototype.scrubbing = function scrubbing(isScrubbing) {
                    if (isScrubbing !== undefined) {
                        this.scrubbing_ = !!isScrubbing;
                        if (isScrubbing) {
                            this.addClass("vjs-scrubbing")
                        } else {
                            this.removeClass("vjs-scrubbing")
                        }
                        return this
                    }
                    return this.scrubbing_
                }
                ;
                Player.prototype.currentTime = function currentTime(seconds) {
                    if (seconds !== undefined) {
                        this.techCall_("setCurrentTime", seconds);
                        return this
                    }
                    this.cache_.currentTime = this.techGet_("currentTime") || 0;
                    return this.cache_.currentTime
                }
                ;
                Player.prototype.duration = function duration(seconds) {
                    if (seconds === undefined) {
                        return this.cache_.duration || 0
                    }
                    seconds = parseFloat(seconds) || 0;
                    if (seconds < 0) {
                        seconds = Infinity
                    }
                    if (seconds !== this.cache_.duration) {
                        this.cache_.duration = seconds;
                        if (seconds === Infinity) {
                            this.addClass("vjs-live")
                        } else {
                            this.removeClass("vjs-live")
                        }
                        this.trigger("durationchange")
                    }
                    return this
                }
                ;
                Player.prototype.remainingTime = function remainingTime() {
                    return this.duration() - this.currentTime()
                }
                ;
                Player.prototype.buffered = function buffered() {
                    var buffered = this.techGet_("buffered");
                    if (!buffered || !buffered.length) {
                        buffered = (0,
                        _timeRanges.createTimeRange)(0, 0)
                    }
                    return buffered
                }
                ;
                Player.prototype.bufferedPercent = function bufferedPercent() {
                    return (0,
                    _buffer.bufferedPercent)(this.buffered(), this.duration())
                }
                ;
                Player.prototype.bufferedEnd = function bufferedEnd() {
                    var buffered = this.buffered();
                    var duration = this.duration();
                    var end = buffered.end(buffered.length - 1);
                    if (end > duration) {
                        end = duration
                    }
                    return end
                }
                ;
                Player.prototype.volume = function volume(percentAsDecimal) {
                    var vol = void 0;
                    if (percentAsDecimal !== undefined) {
                        vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
                        this.cache_.volume = vol;
                        this.techCall_("setVolume", vol);
                        return this
                    }
                    vol = parseFloat(this.techGet_("volume"));
                    return isNaN(vol) ? 1 : vol
                }
                ;
                Player.prototype.muted = function muted(_muted) {
                    if (_muted !== undefined) {
                        this.techCall_("setMuted", _muted);
                        return this
                    }
                    return this.techGet_("muted") || false
                }
                ;
                Player.prototype.supportsFullScreen = function supportsFullScreen() {
                    return this.techGet_("supportsFullScreen") || false
                }
                ;
                Player.prototype.isFullscreen = function isFullscreen(isFS) {
                    if (isFS !== undefined) {
                        this.isFullscreen_ = !!isFS;
                        return this
                    }
                    return !!this.isFullscreen_
                }
                ;
                Player.prototype.requestFullscreen = function requestFullscreen() {
                    var fsApi = _fullscreenApi2["default"];
                    this.isFullscreen(true);
                    if (fsApi.requestFullscreen) {
                        Events.on(_document2["default"], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
                            this.isFullscreen(_document2["default"][fsApi.fullscreenElement]);
                            if (this.isFullscreen() === false) {
                                Events.off(_document2["default"], fsApi.fullscreenchange, documentFullscreenChange)
                            }
                            this.trigger("fullscreenchange")
                        }));
                        this.el_[fsApi.requestFullscreen]()
                    } else if (this.tech_.supportsFullScreen()) {
                        this.techCall_("enterFullScreen")
                    } else {
                        this.enterFullWindow();
                        this.trigger("fullscreenchange")
                    }
                    return this
                }
                ;
                Player.prototype.exitFullscreen = function exitFullscreen() {
                    var fsApi = _fullscreenApi2["default"];
                    this.isFullscreen(false);
                    if (fsApi.requestFullscreen) {
                        _document2["default"][fsApi.exitFullscreen]()
                    } else if (this.tech_.supportsFullScreen()) {
                        this.techCall_("exitFullScreen")
                    } else {
                        this.exitFullWindow();
                        this.trigger("fullscreenchange")
                    }
                    return this
                }
                ;
                Player.prototype.enterFullWindow = function enterFullWindow() {
                    this.isFullWindow = true;
                    this.docOrigOverflow = _document2["default"].documentElement.style.overflow;
                    Events.on(_document2["default"], "keydown", Fn.bind(this, this.fullWindowOnEscKey));
                    _document2["default"].documentElement.style.overflow = "hidden";
                    Dom.addElClass(_document2["default"].body, "vjs-full-window");
                    this.trigger("enterFullWindow")
                }
                ;
                Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
                    if (event.keyCode === 27) {
                        if (this.isFullscreen() === true) {
                            this.exitFullscreen()
                        } else {
                            this.exitFullWindow()
                        }
                    }
                }
                ;
                Player.prototype.exitFullWindow = function exitFullWindow() {
                    this.isFullWindow = false;
                    Events.off(_document2["default"], "keydown", this.fullWindowOnEscKey);
                    _document2["default"].documentElement.style.overflow = this.docOrigOverflow;
                    Dom.removeElClass(_document2["default"].body, "vjs-full-window");
                    this.trigger("exitFullWindow")
                }
                ;
                Player.prototype.canPlayType = function canPlayType(type) {
                    var can = void 0;
                    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
                        var techName = (0,
                        _toTitleCase2["default"])(j[i]);
                        var tech = _tech2["default"].getTech(techName);
                        if (!tech) {
                            tech = _component2["default"].getComponent(techName)
                        }
                        if (!tech) {
                            _log2["default"].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                            continue
                        }
                        if (tech.isSupported()) {
                            can = tech.canPlayType(type);
                            if (can) {
                                return can
                            }
                        }
                    }
                    return ""
                }
                ;
                Player.prototype.selectSource = function selectSource(sources) {
                    var _this4 = this;
                    var techs = this.options_.techOrder.map(_toTitleCase2["default"]).map(function(techName) {
                        return [techName, _tech2["default"].getTech(techName) || _component2["default"].getComponent(techName)]
                    }).filter(function(_ref) {
                        var techName = _ref[0]
                          , tech = _ref[1];
                        if (tech) {
                            return tech.isSupported()
                        }
                        _log2["default"].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
                        return false
                    });
                    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
                        var found = void 0;
                        outerArray.some(function(outerChoice) {
                            return innerArray.some(function(innerChoice) {
                                found = tester(outerChoice, innerChoice);
                                if (found) {
                                    return true
                                }
                            })
                        });
                        return found
                    };
                    var foundSourceAndTech = void 0;
                    var flip = function flip(fn) {
                        return function(a, b) {
                            return fn(b, a)
                        }
                    };
                    var finder = function finder(_ref2, source) {
                        var techName = _ref2[0]
                          , tech = _ref2[1];
                        if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {
                            return {
                                source: source,
                                tech: techName
                            }
                        }
                    };
                    if (this.options_.sourceOrder) {
                        foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder))
                    } else {
                        foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder)
                    }
                    return foundSourceAndTech || false
                }
                ;
                Player.prototype.src = function src(source) {
                    if (source === undefined) {
                        return this.techGet_("src")
                    }
                    var currentTech = _tech2["default"].getTech(this.techName_);
                    if (!currentTech) {
                        currentTech = _component2["default"].getComponent(this.techName_)
                    }
                    if (Array.isArray(source)) {
                        this.sourceList_(source)
                    } else if (typeof source === "string") {
                        this.src({
                            src: source
                        })
                    } else if (source instanceof Object) {
                        if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {
                            this.sourceList_([source])
                        } else {
                            this.cache_.sources = null;
                            this.cache_.source = source;
                            this.cache_.src = source.src;
                            this.currentType_ = source.type || "";
                            this.ready(function() {
                                if (currentTech.prototype.hasOwnProperty("setSource")) {
                                    this.techCall_("setSource", source)
                                } else {
                                    this.techCall_("src", source.src)
                                }
                                if (this.options_.preload === "auto") {
                                    this.load()
                                }
                                if (this.options_.autoplay) {
                                    this.play()
                                }
                            }, true)
                        }
                    }
                    return this
                }
                ;
                Player.prototype.sourceList_ = function sourceList_(sources) {
                    var sourceTech = this.selectSource(sources);
                    if (sourceTech) {
                        if (sourceTech.tech === this.techName_) {
                            this.src(sourceTech.source)
                        } else {
                            this.loadTech_(sourceTech.tech, sourceTech.source)
                        }
                        this.cache_.sources = sources
                    } else {
                        this.setTimeout(function() {
                            this.error({
                                code: 4,
                                message: this.localize(this.options_.notSupportedMessage)
                            })
                        }, 0);
                        this.triggerReady()
                    }
                }
                ;
                Player.prototype.load = function load() {
                    this.techCall_("load");
                    return this
                }
                ;
                Player.prototype.reset = function reset() {
                    this.loadTech_((0,
                    _toTitleCase2["default"])(this.options_.techOrder[0]), null);
                    this.techCall_("reset");
                    return this
                }
                ;
                Player.prototype.currentSources = function currentSources() {
                    var source = this.currentSource();
                    var sources = [];
                    if (Object.keys(source).length !== 0) {
                        sources.push(source)
                    }
                    return this.cache_.sources || sources
                }
                ;
                Player.prototype.currentSource = function currentSource() {
                    var source = {};
                    var src = this.currentSrc();
                    if (src) {
                        source.src = src
                    }
                    return this.cache_.source || source
                }
                ;
                Player.prototype.currentSrc = function currentSrc() {
                    return this.techGet_("currentSrc") || this.cache_.src || ""
                }
                ;
                Player.prototype.currentType = function currentType() {
                    return this.currentType_ || ""
                }
                ;
                Player.prototype.preload = function preload(value) {
                    if (value !== undefined) {
                        this.techCall_("setPreload", value);
                        this.options_.preload = value;
                        return this
                    }
                    return this.techGet_("preload")
                }
                ;
                Player.prototype.autoplay = function autoplay(value) {
                    if (value !== undefined) {
                        this.techCall_("setAutoplay", value);
                        this.options_.autoplay = value;
                        return this
                    }
                    return this.techGet_("autoplay", value)
                }
                ;
                Player.prototype.loop = function loop(value) {
                    if (value !== undefined) {
                        this.techCall_("setLoop", value);
                        this.options_.loop = value;
                        return this
                    }
                    return this.techGet_("loop")
                }
                ;
                Player.prototype.poster = function poster(src) {
                    if (src === undefined) {
                        return this.poster_
                    }
                    if (!src) {
                        src = ""
                    }
                    this.poster_ = src;
                    this.techCall_("setPoster", src);
                    this.trigger("posterchange");
                    return this
                }
                ;
                Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
                    if (!this.poster_ && this.tech_ && this.tech_.poster) {
                        this.poster_ = this.tech_.poster() || "";
                        this.trigger("posterchange")
                    }
                }
                ;
                Player.prototype.controls = function controls(bool) {
                    if (bool !== undefined) {
                        bool = !!bool;
                        if (this.controls_ !== bool) {
                            this.controls_ = bool;
                            if (this.usingNativeControls()) {
                                this.techCall_("setControls", bool)
                            }
                            if (bool) {
                                this.removeClass("vjs-controls-disabled");
                                this.addClass("vjs-controls-enabled");
                                this.trigger("controlsenabled");
                                if (!this.usingNativeControls()) {
                                    this.addTechControlsListeners_()
                                }
                            } else {
                                this.removeClass("vjs-controls-enabled");
                                this.addClass("vjs-controls-disabled");
                                this.trigger("controlsdisabled");
                                if (!this.usingNativeControls()) {
                                    this.removeTechControlsListeners_()
                                }
                            }
                        }
                        return this
                    }
                    return !!this.controls_
                }
                ;
                Player.prototype.usingNativeControls = function usingNativeControls(bool) {
                    if (bool !== undefined) {
                        bool = !!bool;
                        if (this.usingNativeControls_ !== bool) {
                            this.usingNativeControls_ = bool;
                            if (bool) {
                                this.addClass("vjs-using-native-controls");
                                this.trigger("usingnativecontrols")
                            } else {
                                this.removeClass("vjs-using-native-controls");
                                this.trigger("usingcustomcontrols")
                            }
                        }
                        return this
                    }
                    return !!this.usingNativeControls_
                }
                ;
                Player.prototype.error = function error(err) {
                    if (err === undefined) {
                        return this.error_ || null
                    }
                    if (err === null) {
                        this.error_ = err;
                        this.removeClass("vjs-error");
                        if (this.errorDisplay) {
                            this.errorDisplay.close()
                        }
                        return this
                    }
                    this.error_ = new _mediaError2["default"](err);
                    this.addClass("vjs-error");
                    _log2["default"].error("(CODE:" + this.error_.code + " " + _mediaError2["default"].errorTypes[this.error_.code] + ")", this.error_.message, this.error_);
                    this.trigger("error");
                    return this
                }
                ;
                Player.prototype.reportUserActivity = function reportUserActivity(event) {
                    this.userActivity_ = true
                }
                ;
                Player.prototype.userActive = function userActive(bool) {
                    if (bool !== undefined) {
                        bool = !!bool;
                        if (bool !== this.userActive_) {
                            this.userActive_ = bool;
                            if (bool) {
                                this.userActivity_ = true;
                                this.removeClass("vjs-user-inactive");
                                this.addClass("vjs-user-active");
                                this.trigger("useractive")
                            } else {
                                this.userActivity_ = false;
                                if (this.tech_) {
                                    this.tech_.one("mousemove", function(e) {
                                        e.stopPropagation();
                                        e.preventDefault()
                                    })
                                }
                                this.removeClass("vjs-user-active");
                                this.addClass("vjs-user-inactive");
                                this.trigger("userinactive")
                            }
                        }
                        return this
                    }
                    return this.userActive_
                }
                ;
                Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
                    var mouseInProgress = void 0;
                    var lastMoveX = void 0;
                    var lastMoveY = void 0;
                    var handleActivity = Fn.bind(this, this.reportUserActivity);
                    var handleMouseMove = function handleMouseMove(e) {
                        if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
                            lastMoveX = e.screenX;
                            lastMoveY = e.screenY;
                            handleActivity()
                        }
                    };
                    var handleMouseDown = function handleMouseDown() {
                        handleActivity();
                        this.clearInterval(mouseInProgress);
                        mouseInProgress = this.setInterval(handleActivity, 250)
                    };
                    var handleMouseUp = function handleMouseUp(event) {
                        handleActivity();
                        this.clearInterval(mouseInProgress)
                    };
                    this.on("mousedown", handleMouseDown);
                    this.on("mousemove", handleMouseMove);
                    this.on("mouseup", handleMouseUp);
                    this.on("keydown", handleActivity);
                    this.on("keyup", handleActivity);
                    var inactivityTimeout = void 0;
                    this.setInterval(function() {
                        if (this.userActivity_) {
                            this.userActivity_ = false;
                            this.userActive(true);
                            this.clearTimeout(inactivityTimeout);
                            var timeout = this.options_.inactivityTimeout;
                            if (timeout > 0) {
                                inactivityTimeout = this.setTimeout(function() {
                                    if (!this.userActivity_) {
                                        this.userActive(false)
                                    }
                                }, timeout)
                            }
                        }
                    }, 250)
                }
                ;
                Player.prototype.playbackRate = function playbackRate(rate) {
                    if (rate !== undefined) {
                        this.techCall_("setPlaybackRate", rate);
                        return this
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return this.techGet_("playbackRate")
                    }
                    return 1
                }
                ;
                Player.prototype.isAudio = function isAudio(bool) {
                    if (bool !== undefined) {
                        this.isAudio_ = !!bool;
                        return this
                    }
                    return !!this.isAudio_
                }
                ;
                Player.prototype.videoTracks = function videoTracks() {
                    if (!this.tech_) {
                        this.videoTracks_ = this.videoTracks_ || new _videoTrackList2["default"];
                        return this.videoTracks_
                    }
                    return this.tech_.videoTracks()
                }
                ;
                Player.prototype.audioTracks = function audioTracks() {
                    if (!this.tech_) {
                        this.audioTracks_ = this.audioTracks_ || new _audioTrackList2["default"];
                        return this.audioTracks_
                    }
                    return this.tech_.audioTracks()
                }
                ;
                Player.prototype.textTracks = function textTracks() {
                    if (this.tech_) {
                        return this.tech_.textTracks()
                    }
                }
                ;
                Player.prototype.remoteTextTracks = function remoteTextTracks() {
                    if (this.tech_) {
                        return this.tech_.remoteTextTracks()
                    }
                }
                ;
                Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
                    if (this.tech_) {
                        return this.tech_.remoteTextTrackEls()
                    }
                }
                ;
                Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
                    if (this.tech_) {
                        return this.tech_.addTextTrack(kind, label, language)
                    }
                }
                ;
                Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
                    if (this.tech_) {
                        return this.tech_.addRemoteTextTrack(options, manualCleanup)
                    }
                }
                ;
                Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
                    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}
                      , _ref3$track = _ref3.track
                      , track = _ref3$track === undefined ? arguments[0] : _ref3$track;
                    if (this.tech_) {
                        return this.tech_.removeRemoteTextTrack(track)
                    }
                }
                ;
                Player.prototype.videoWidth = function videoWidth() {
                    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0
                }
                ;
                Player.prototype.videoHeight = function videoHeight() {
                    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0
                }
                ;
                Player.prototype.language = function language(code) {
                    if (code === undefined) {
                        return this.language_
                    }
                    this.language_ = String(code).toLowerCase();
                    return this
                }
                ;
                Player.prototype.languages = function languages() {
                    return (0,
                    _mergeOptions2["default"])(Player.prototype.options_.languages, this.languages_)
                }
                ;
                Player.prototype.toJSON = function toJSON() {
                    var options = (0,
                    _mergeOptions2["default"])(this.options_);
                    var tracks = options.tracks;
                    options.tracks = [];
                    for (var i = 0; i < tracks.length; i++) {
                        var track = tracks[i];
                        track = (0,
                        _mergeOptions2["default"])(track);
                        track.player = undefined;
                        options.tracks[i] = track
                    }
                    return options
                }
                ;
                Player.prototype.createModal = function createModal(content, options) {
                    var _this5 = this;
                    options = options || {};
                    options.content = content || "";
                    var modal = new _modalDialog2["default"](this,options);
                    this.addChild(modal);
                    modal.on("dispose", function() {
                        _this5.removeChild(modal)
                    });
                    return modal.open()
                }
                ;
                Player.getTagSettings = function getTagSettings(tag) {
                    var baseOptions = {
                        sources: [],
                        tracks: []
                    };
                    var tagOptions = Dom.getElAttributes(tag);
                    var dataSetup = tagOptions["data-setup"];
                    if (Dom.hasElClass(tag, "vjs-fluid")) {
                        tagOptions.fluid = true
                    }
                    if (dataSetup !== null) {
                        var _safeParseTuple = (0,
                        _tuple2["default"])(dataSetup || "{}")
                          , err = _safeParseTuple[0]
                          , data = _safeParseTuple[1];
                        if (err) {
                            _log2["default"].error(err)
                        }
                        (0,
                        _obj.assign)(tagOptions, data)
                    }
                    (0,
                    _obj.assign)(baseOptions, tagOptions);
                    if (tag.hasChildNodes()) {
                        var children = tag.childNodes;
                        for (var i = 0, j = children.length; i < j; i++) {
                            var child = children[i];
                            var childName = child.nodeName.toLowerCase();
                            if (childName === "source") {
                                baseOptions.sources.push(Dom.getElAttributes(child))
                            } else if (childName === "track") {
                                baseOptions.tracks.push(Dom.getElAttributes(child))
                            }
                        }
                    }
                    return baseOptions
                }
                ;
                Player.prototype.flexNotSupported_ = function flexNotSupported_() {
                    var elem = _document2["default"].createElement("i");
                    return !("flexBasis"in elem.style || "webkitFlexBasis"in elem.style || "mozFlexBasis"in elem.style || "msFlexBasis"in elem.style || "msFlexOrder"in elem.style)
                }
                ;
                return Player
            }(_component2["default"]);
            Player.players = {};
            var navigator = _window2["default"].navigator;
            Player.prototype.options_ = {
                techOrder: ["html5", "flash"],
                html5: {},
                flash: {},
                defaultVolume: 0,
                inactivityTimeout: 2e3,
                playbackRates: [],
                children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "controlBar", "errorDisplay", "textTrackSettings"],
                language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || "en",
                languages: {},
                notSupportedMessage: "No compatible source was found for this media."
            };
            ["ended", "seeking", "seekable", "networkState", "readyState"].forEach(function(fn) {
                Player.prototype[fn] = function() {
                    return this.techGet_(fn)
                }
            });
            TECH_EVENTS_RETRIGGER.forEach(function(event) {
                Player.prototype["handleTech" + (0,
                _toTitleCase2["default"])(event) + "_"] = function() {
                    return this.trigger(event)
                }
            });
            _component2["default"].registerComponent("Player", Player);
            exports["default"] = Player
        }
        , {
            1: 1,
            4: 4,
            41: 41,
            44: 44,
            45: 45,
            46: 46,
            5: 5,
            50: 50,
            55: 55,
            59: 59,
            60: 60,
            61: 61,
            62: 62,
            63: 63,
            68: 68,
            69: 69,
            71: 71,
            76: 76,
            78: 78,
            79: 79,
            8: 8,
            81: 81,
            82: 82,
            83: 83,
            85: 85,
            86: 86,
            87: 87,
            88: 88,
            89: 89,
            90: 90,
            91: 91,
            94: 94,
            95: 95,
            97: 97
        }],
        52: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _player = _dereq_(51);
            var _player2 = _interopRequireDefault(_player);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            var plugin = function plugin(name, init) {
                _player2["default"].prototype[name] = init
            };
            exports["default"] = plugin
        }
        , {
            51: 51
        }],
        53: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _clickableComponent = _dereq_(3);
            var _clickableComponent2 = _interopRequireDefault(_clickableComponent);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var PopupButton = function(_ClickableComponent) {
                _inherits(PopupButton, _ClickableComponent);
                function PopupButton(player) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    _classCallCheck(this, PopupButton);
                    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));
                    _this.update();
                    return _this
                }
                PopupButton.prototype.update = function update() {
                    var popup = this.createPopup();
                    if (this.popup) {
                        this.removeChild(this.popup)
                    }
                    this.popup = popup;
                    this.addChild(popup);
                    if (this.items && this.items.length === 0) {
                        this.hide()
                    } else if (this.items && this.items.length > 1) {
                        this.show()
                    }
                }
                ;
                PopupButton.prototype.createPopup = function createPopup() {}
                ;
                PopupButton.prototype.createEl = function createEl() {
                    return _ClickableComponent.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass()
                    })
                }
                ;
                PopupButton.prototype.buildCSSClass = function buildCSSClass() {
                    var menuButtonClass = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        menuButtonClass += "-inline"
                    } else {
                        menuButtonClass += "-popup"
                    }
                    return "vjs-menu-button " + menuButtonClass + " " + _ClickableComponent.prototype.buildCSSClass.call(this)
                }
                ;
                return PopupButton
            }(_clickableComponent2["default"]);
            _component2["default"].registerComponent("PopupButton", PopupButton);
            exports["default"] = PopupButton
        }
        , {
            3: 3,
            5: 5
        }],
        54: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Popup = function(_Component) {
                _inherits(Popup, _Component);
                function Popup() {
                    _classCallCheck(this, Popup);
                    return _possibleConstructorReturn(this, _Component.apply(this, arguments))
                }
                Popup.prototype.addItem = function addItem(component) {
                    this.addChild(component);
                    component.on("click", Fn.bind(this, function() {
                        this.unlockShowing()
                    }))
                }
                ;
                Popup.prototype.createEl = function createEl() {
                    var contentElType = this.options_.contentElType || "ul";
                    this.contentEl_ = Dom.createEl(contentElType, {
                        className: "vjs-menu-content"
                    });
                    var el = _Component.prototype.createEl.call(this, "div", {
                        append: this.contentEl_,
                        className: "vjs-menu"
                    });
                    el.appendChild(this.contentEl_);
                    Events.on(el, "click", function(event) {
                        event.preventDefault();
                        event.stopImmediatePropagation()
                    });
                    return el
                }
                ;
                return Popup
            }(_component2["default"]);
            _component2["default"].registerComponent("Popup", Popup);
            exports["default"] = Popup
        }
        , {
            5: 5,
            81: 81,
            82: 82,
            83: 83
        }],
        55: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _clickableComponent = _dereq_(3);
            var _clickableComponent2 = _interopRequireDefault(_clickableComponent);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var PosterImage = function(_ClickableComponent) {
                _inherits(PosterImage, _ClickableComponent);
                function PosterImage(player, options) {
                    _classCallCheck(this, PosterImage);
                    var _this = _possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));
                    _this.update();
                    player.on("posterchange", Fn.bind(_this, _this.update));
                    return _this
                }
                PosterImage.prototype.dispose = function dispose() {
                    this.player().off("posterchange", this.update);
                    _ClickableComponent.prototype.dispose.call(this)
                }
                ;
                PosterImage.prototype.createEl = function createEl() {
                    var el = Dom.createEl("div", {
                        className: "vjs-poster",
                        tabIndex: -1
                    });
                    if (!browser.BACKGROUND_SIZE_SUPPORTED) {
                        this.fallbackImg_ = Dom.createEl("img");
                        el.appendChild(this.fallbackImg_)
                    }
                    return el
                }
                ;
                PosterImage.prototype.update = function update(event) {
                    var url = this.player().poster();
                    this.setSrc(url);
                    if (url) {
                        this.show()
                    } else {
                        this.hide()
                    }
                }
                ;
                PosterImage.prototype.setSrc = function setSrc(url) {
                    if (this.fallbackImg_) {
                        this.fallbackImg_.src = url
                    } else {
                        var backgroundImage = "";
                        if (url) {
                            backgroundImage = 'url("' + url + '")'
                        }
                        this.el_.style.backgroundImage = backgroundImage
                    }
                }
                ;
                PosterImage.prototype.handleClick = function handleClick(event) {
                    if (!this.player_.controls()) {
                        return
                    }
                    if (this.player_.paused()) {
                        this.player_.play()
                    } else {
                        this.player_.pause()
                    }
                }
                ;
                return PosterImage
            }(_clickableComponent2["default"]);
            _component2["default"].registerComponent("PosterImage", PosterImage);
            exports["default"] = PosterImage
        }
        , {
            3: 3,
            5: 5,
            78: 78,
            81: 81,
            83: 83
        }],
        56: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.hasLoaded = exports.autoSetupTimeout = exports.autoSetup = undefined;
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            var _windowLoaded = false;
            var videojs = void 0;
            var autoSetup = function autoSetup() {
                if (!Dom.isReal()) {
                    return
                }
                var vids = _document2["default"].getElementsByTagName("video");
                var audios = _document2["default"].getElementsByTagName("audio");
                var mediaEls = [];
                if (vids && vids.length > 0) {
                    for (var i = 0, e = vids.length; i < e; i++) {
                        mediaEls.push(vids[i])
                    }
                }
                if (audios && audios.length > 0) {
                    for (var _i = 0, _e = audios.length; _i < _e; _i++) {
                        mediaEls.push(audios[_i])
                    }
                }
                if (mediaEls && mediaEls.length > 0) {
                    for (var _i2 = 0, _e2 = mediaEls.length; _i2 < _e2; _i2++) {
                        var mediaEl = mediaEls[_i2];
                        if (mediaEl && mediaEl.getAttribute) {
                            if (mediaEl.player === undefined) {
                                var options = mediaEl.getAttribute("data-setup");
                                if (options !== null) {
                                    videojs(mediaEl)
                                }
                            }
                        } else {
                            autoSetupTimeout(1);
                            break
                        }
                    }
                } else if (!_windowLoaded) {
                    autoSetupTimeout(1)
                }
            };
            function autoSetupTimeout(wait, vjs) {
                if (vjs) {
                    videojs = vjs
                }
                _window2["default"].setTimeout(autoSetup, wait)
            }
            if (Dom.isReal() && _document2["default"].readyState === "complete") {
                _windowLoaded = true
            } else {
                Events.one(_window2["default"], "load", function() {
                    _windowLoaded = true
                })
            }
            var hasLoaded = function hasLoaded() {
                return _windowLoaded
            };
            exports.autoSetup = autoSetup;
            exports.autoSetupTimeout = autoSetupTimeout;
            exports.hasLoaded = hasLoaded
        }
        , {
            81: 81,
            82: 82,
            94: 94,
            95: 95
        }],
        57: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _obj = _dereq_(88);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Slider = function(_Component) {
                _inherits(Slider, _Component);
                function Slider(player, options) {
                    _classCallCheck(this, Slider);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.bar = _this.getChild(_this.options_.barName);
                    _this.vertical(!!_this.options_.vertical);
                    _this.on("mousedown", _this.handleMouseDown);
                    _this.on("touchstart", _this.handleMouseDown);
                    _this.on("focus", _this.handleFocus);
                    _this.on("blur", _this.handleBlur);
                    _this.on("click", _this.handleClick);
                    _this.on(player, "controlsvisible", _this.update);
                    _this.on(player, _this.playerEvent, _this.update);
                    return _this
                }
                Slider.prototype.createEl = function createEl(type) {
                    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    props.className = props.className + " vjs-slider";
                    props = (0,
                    _obj.assign)({
                        tabIndex: 0
                    }, props);
                    attributes = (0,
                    _obj.assign)({
                        role: "slider",
                        "aria-valuenow": 0,
                        "aria-valuemin": 0,
                        "aria-valuemax": 100,
                        tabIndex: 0
                    }, attributes);
                    return _Component.prototype.createEl.call(this, type, props, attributes)
                }
                ;
                Slider.prototype.handleMouseDown = function handleMouseDown(event) {
                    var doc = this.bar.el_.ownerDocument;
                    event.preventDefault();
                    Dom.blockTextSelection();
                    this.addClass("vjs-sliding");
                    this.trigger("slideractive");
                    this.on(doc, "mousemove", this.handleMouseMove);
                    this.on(doc, "mouseup", this.handleMouseUp);
                    this.on(doc, "touchmove", this.handleMouseMove);
                    this.on(doc, "touchend", this.handleMouseUp);
                    this.handleMouseMove(event)
                }
                ;
                Slider.prototype.handleMouseMove = function handleMouseMove(event) {}
                ;
                Slider.prototype.handleMouseUp = function handleMouseUp() {
                    var doc = this.bar.el_.ownerDocument;
                    Dom.unblockTextSelection();
                    this.removeClass("vjs-sliding");
                    this.trigger("sliderinactive");
                    this.off(doc, "mousemove", this.handleMouseMove);
                    this.off(doc, "mouseup", this.handleMouseUp);
                    this.off(doc, "touchmove", this.handleMouseMove);
                    this.off(doc, "touchend", this.handleMouseUp);
                    this.update()
                }
                ;
                Slider.prototype.update = function update() {
                    if (!this.el_) {
                        return
                    }
                    var progress = this.getPercent();
                    var bar = this.bar;
                    if (!bar) {
                        return
                    }
                    if (typeof progress !== "number" || progress !== progress || progress < 0 || progress === Infinity) {
                        progress = 0
                    }
                    var percentage = (progress * 100).toFixed(2) + "%";
                    if (this.vertical()) {
                        bar.el().style.height = percentage
                    } else {
                        bar.el().style.width = percentage
                    }
                }
                ;
                Slider.prototype.calculateDistance = function calculateDistance(event) {
                    var position = Dom.getPointerPosition(this.el_, event);
                    if (this.vertical()) {
                        return position.y
                    }
                    return position.x
                }
                ;
                Slider.prototype.handleFocus = function handleFocus() {
                    this.on(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress)
                }
                ;
                Slider.prototype.handleKeyPress = function handleKeyPress(event) {
                    if (event.which === 37 || event.which === 40) {
                        event.preventDefault();
                        this.stepBack()
                    } else if (event.which === 38 || event.which === 39) {
                        event.preventDefault();
                        this.stepForward()
                    }
                }
                ;
                Slider.prototype.handleBlur = function handleBlur() {
                    this.off(this.bar.el_.ownerDocument, "keydown", this.handleKeyPress)
                }
                ;
                Slider.prototype.handleClick = function handleClick(event) {
                    event.stopImmediatePropagation();
                    event.preventDefault()
                }
                ;
                Slider.prototype.vertical = function vertical(bool) {
                    if (bool === undefined) {
                        return this.vertical_ || false
                    }
                    this.vertical_ = !!bool;
                    if (this.vertical_) {
                        this.addClass("vjs-slider-vertical")
                    } else {
                        this.addClass("vjs-slider-horizontal")
                    }
                    return this
                }
                ;
                return Slider
            }(_component2["default"]);
            _component2["default"].registerComponent("Slider", Slider);
            exports["default"] = Slider
        }
        , {
            5: 5,
            81: 81,
            88: 88
        }],
        58: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            function FlashRtmpDecorator(Flash) {
                Flash.streamingFormats = {
                    "rtmp/mp4": "MP4",
                    "rtmp/flv": "FLV"
                };
                Flash.streamFromParts = function(connection, stream) {
                    return connection + "&" + stream
                }
                ;
                Flash.streamToParts = function(src) {
                    var parts = {
                        connection: "",
                        stream: ""
                    };
                    if (!src) {
                        return parts
                    }
                    var connEnd = src.search(/&(?!\w+=)/);
                    var streamBegin = void 0;
                    if (connEnd !== -1) {
                        streamBegin = connEnd + 1
                    } else {
                        connEnd = streamBegin = src.lastIndexOf("/") + 1;
                        if (connEnd === 0) {
                            connEnd = streamBegin = src.length
                        }
                    }
                    parts.connection = src.substring(0, connEnd);
                    parts.stream = src.substring(streamBegin, src.length);
                    return parts
                }
                ;
                Flash.isStreamingType = function(srcType) {
                    return srcType in Flash.streamingFormats
                }
                ;
                Flash.RTMP_RE = /^rtmp[set]?:\/\//i;
                Flash.isStreamingSrc = function(src) {
                    return Flash.RTMP_RE.test(src)
                }
                ;
                Flash.rtmpSourceHandler = {};
                Flash.rtmpSourceHandler.canPlayType = function(type) {
                    if (Flash.isStreamingType(type)) {
                        return "maybe"
                    }
                    return ""
                }
                ;
                Flash.rtmpSourceHandler.canHandleSource = function(source, options) {
                    var can = Flash.rtmpSourceHandler.canPlayType(source.type);
                    if (can) {
                        return can
                    }
                    if (Flash.isStreamingSrc(source.src)) {
                        return "maybe"
                    }
                    return ""
                }
                ;
                Flash.rtmpSourceHandler.handleSource = function(source, tech, options) {
                    var srcParts = Flash.streamToParts(source.src);
                    tech.setRtmpConnection(srcParts.connection);
                    tech.setRtmpStream(srcParts.stream)
                }
                ;
                Flash.registerSourceHandler(Flash.rtmpSourceHandler);
                return Flash
            }
            exports["default"] = FlashRtmpDecorator
        }
        , {}],
        59: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _tech = _dereq_(62);
            var _tech2 = _interopRequireDefault(_tech);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _url = _dereq_(92);
            var Url = _interopRequireWildcard(_url);
            var _timeRanges = _dereq_(90);
            var _flashRtmp = _dereq_(58);
            var _flashRtmp2 = _interopRequireDefault(_flashRtmp);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _obj = _dereq_(88);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var navigator = _window2["default"].navigator;
            var Flash = function(_Tech) {
                _inherits(Flash, _Tech);
                function Flash(options, ready) {
                    _classCallCheck(this, Flash);
                    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));
                    if (options.source) {
                        _this.ready(function() {
                            this.setSource(options.source)
                        }, true)
                    }
                    if (options.startTime) {
                        _this.ready(function() {
                            this.load();
                            this.play();
                            this.currentTime(options.startTime)
                        }, true)
                    }
                    _window2["default"].videojs = _window2["default"].videojs || {};
                    _window2["default"].videojs.Flash = _window2["default"].videojs.Flash || {};
                    _window2["default"].videojs.Flash.onReady = Flash.onReady;
                    _window2["default"].videojs.Flash.onEvent = Flash.onEvent;
                    _window2["default"].videojs.Flash.onError = Flash.onError;
                    _this.on("seeked", function() {
                        this.lastSeekTarget_ = undefined
                    });
                    return _this
                }
                Flash.prototype.createEl = function createEl() {
                    var options = this.options_;
                    if (!options.swf) {
                        var ver = "5.1.0";
                        options.swf = "//vjs.zencdn.net/swf/" + ver + "/video-js.swf"
                    }
                    var objId = options.techId;
                    var flashVars = (0,
                    _obj.assign)({
                        readyFunction: "videojs.Flash.onReady",
                        eventProxyFunction: "videojs.Flash.onEvent",
                        errorEventProxyFunction: "videojs.Flash.onError",
                        autoplay: options.autoplay,
                        preload: options.preload,
                        loop: options.loop,
                        muted: options.muted
                    }, options.flashVars);
                    var params = (0,
                    _obj.assign)({
                        wmode: "opaque",
                        bgcolor: "#000000"
                    }, options.params);
                    var attributes = (0,
                    _obj.assign)({
                        id: objId,
                        name: objId,
                        "class": "vjs-tech"
                    }, options.attributes);
                    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
                    this.el_.tech = this;
                    return this.el_
                }
                ;
                Flash.prototype.play = function play() {
                    if (this.ended()) {
                        this.setCurrentTime(0)
                    }
                    this.el_.vjs_play()
                }
                ;
                Flash.prototype.pause = function pause() {
                    this.el_.vjs_pause()
                }
                ;
                Flash.prototype.src = function src(_src) {
                    if (_src === undefined) {
                        return this.currentSrc()
                    }
                    return this.setSrc(_src)
                }
                ;
                Flash.prototype.setSrc = function setSrc(src) {
                    var _this2 = this;
                    src = Url.getAbsoluteURL(src);
                    this.el_.vjs_src(src);
                    if (this.autoplay()) {
                        this.setTimeout(function() {
                            return _this2.play()
                        }, 0)
                    }
                }
                ;
                Flash.prototype.seeking = function seeking() {
                    return this.lastSeekTarget_ !== undefined
                }
                ;
                Flash.prototype.setCurrentTime = function setCurrentTime(time) {
                    var seekable = this.seekable();
                    if (seekable.length) {
                        time = time > seekable.start(0) ? time : seekable.start(0);
                        time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);
                        this.lastSeekTarget_ = time;
                        this.trigger("seeking");
                        this.el_.vjs_setProperty("currentTime", time);
                        _Tech.prototype.setCurrentTime.call(this)
                    }
                }
                ;
                Flash.prototype.currentTime = function currentTime() {
                    if (this.seeking()) {
                        return this.lastSeekTarget_ || 0
                    }
                    return this.el_.vjs_getProperty("currentTime")
                }
                ;
                Flash.prototype.currentSrc = function currentSrc() {
                    if (this.currentSource_) {
                        return this.currentSource_.src
                    }
                    return this.el_.vjs_getProperty("currentSrc")
                }
                ;
                Flash.prototype.duration = function duration() {
                    if (this.readyState() === 0) {
                        return NaN
                    }
                    var duration = this.el_.vjs_getProperty("duration");
                    return duration >= 0 ? duration : Infinity
                }
                ;
                Flash.prototype.load = function load() {
                    this.el_.vjs_load()
                }
                ;
                Flash.prototype.poster = function poster() {
                    this.el_.vjs_getProperty("poster")
                }
                ;
                Flash.prototype.setPoster = function setPoster() {}
                ;
                Flash.prototype.seekable = function seekable() {
                    var duration = this.duration();
                    if (duration === 0) {
                        return (0,
                        _timeRanges.createTimeRange)()
                    }
                    return (0,
                    _timeRanges.createTimeRange)(0, duration)
                }
                ;
                Flash.prototype.buffered = function buffered() {
                    var ranges = this.el_.vjs_getProperty("buffered");
                    if (ranges.length === 0) {
                        return (0,
                        _timeRanges.createTimeRange)()
                    }
                    return (0,
                    _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1])
                }
                ;
                Flash.prototype.supportsFullScreen = function supportsFullScreen() {
                    return false
                }
                ;
                Flash.prototype.enterFullScreen = function enterFullScreen() {
                    return false
                }
                ;
                return Flash
            }(_tech2["default"]);
            var _api = Flash.prototype;
            var _readWrite = "rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted".split(",");
            var _readOnly = "networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight".split(",");
            function _createSetter(attr) {
                var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
                _api["set" + attrUpper] = function(val) {
                    return this.el_.vjs_setProperty(attr, val)
                }
            }
            function _createGetter(attr) {
                _api[attr] = function() {
                    return this.el_.vjs_getProperty(attr)
                }
            }
            for (var i = 0; i < _readWrite.length; i++) {
                _createGetter(_readWrite[i]);
                _createSetter(_readWrite[i])
            }
            for (var _i = 0; _i < _readOnly.length; _i++) {
                _createGetter(_readOnly[_i])
            }
            Flash.isSupported = function() {
                return Flash.version()[0] >= 10
            }
            ;
            _tech2["default"].withSourceHandlers(Flash);
            Flash.nativeSourceHandler = {};
            Flash.nativeSourceHandler.canPlayType = function(type) {
                if (type in Flash.formats) {
                    return "maybe"
                }
                return ""
            }
            ;
            Flash.nativeSourceHandler.canHandleSource = function(source, options) {
                var type = void 0;
                function guessMimeType(src) {
                    var ext = Url.getFileExtension(src);
                    if (ext) {
                        return "video/" + ext
                    }
                    return ""
                }
                if (!source.type) {
                    type = guessMimeType(source.src)
                } else {
                    type = source.type.replace(/;.*/, "").toLowerCase()
                }
                return Flash.nativeSourceHandler.canPlayType(type)
            }
            ;
            Flash.nativeSourceHandler.handleSource = function(source, tech, options) {
                tech.setSrc(source.src)
            }
            ;
            Flash.nativeSourceHandler.dispose = function() {}
            ;
            Flash.registerSourceHandler(Flash.nativeSourceHandler);
            Flash.formats = {
                "video/flv": "FLV",
                "video/x-flv": "FLV",
                "video/mp4": "MP4",
                "video/m4v": "MP4"
            };
            Flash.onReady = function(currSwf) {
                var el = Dom.getEl(currSwf);
                var tech = el && el.tech;
                if (tech && tech.el()) {
                    Flash.checkReady(tech)
                }
            }
            ;
            Flash.checkReady = function(tech) {
                if (!tech.el()) {
                    return
                }
                if (tech.el().vjs_getProperty) {
                    tech.triggerReady()
                } else {
                    this.setTimeout(function() {
                        Flash.checkReady(tech)
                    }, 50)
                }
            }
            ;
            Flash.onEvent = function(swfID, eventName) {
                var tech = Dom.getEl(swfID).tech;
                var args = Array.prototype.slice.call(arguments, 2);
                tech.setTimeout(function() {
                    tech.trigger(eventName, args)
                }, 1)
            }
            ;
            Flash.onError = function(swfID, err) {
                var tech = Dom.getEl(swfID).tech;
                if (err === "srcnotfound") {
                    return tech.error(4)
                }
                tech.error("FLASH: " + err)
            }
            ;
            Flash.version = function() {
                var version = "0,0,0";
                try {
                    version = new _window2["default"].ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version").replace(/\D+/g, ",").match(/^,?(.+),?$/)[1]
                } catch (e) {
                    try {
                        if (navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin) {
                            version = (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]).description.replace(/\D+/g, ",").match(/^,?(.+),?$/)[1]
                        }
                    } catch (err) {}
                }
                return version.split(",")
            }
            ;
            Flash.embed = function(swf, flashVars, params, attributes) {
                var code = Flash.getEmbedCode(swf, flashVars, params, attributes);
                var obj = Dom.createEl("div", {
                    innerHTML: code
                }).childNodes[0];
                return obj
            }
            ;
            Flash.getEmbedCode = function(swf, flashVars, params, attributes) {
                var objTag = '<object type="application/x-shockwave-flash" ';
                var flashVarsString = "";
                var paramsString = "";
                var attrsString = "";
                if (flashVars) {
                    Object.getOwnPropertyNames(flashVars).forEach(function(key) {
                        flashVarsString += key + "=" + flashVars[key] + "&amp;"
                    })
                }
                params = (0,
                _obj.assign)({
                    movie: swf,
                    flashvars: flashVarsString,
                    allowScriptAccess: "always",
                    allowNetworking: "all"
                }, params);
                Object.getOwnPropertyNames(params).forEach(function(key) {
                    paramsString += '<param name="' + key + '" value="' + params[key] + '" />'
                });
                attributes = (0,
                _obj.assign)({
                    data: swf,
                    width: "100%",
                    height: "100%"
                }, attributes);
                Object.getOwnPropertyNames(attributes).forEach(function(key) {
                    attrsString += key + '="' + attributes[key] + '" '
                });
                return "" + objTag + attrsString + ">" + paramsString + "</object>"
            }
            ;
            (0,
            _flashRtmp2["default"])(Flash);
            _component2["default"].registerComponent("Flash", Flash);
            _tech2["default"].registerTech("Flash", Flash);
            exports["default"] = Flash
        }
        , {
            5: 5,
            58: 58,
            62: 62,
            81: 81,
            88: 88,
            90: 90,
            92: 92,
            95: 95
        }],
        60: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj
            }
            : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
            }
            ;
            var _templateObject = _taggedTemplateLiteralLoose(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."], ["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n            This may prevent text tracks from loading."]);
            var _tech = _dereq_(62);
            var _tech2 = _interopRequireDefault(_tech);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _url = _dereq_(92);
            var Url = _interopRequireWildcard(_url);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _tsml = _dereq_(98);
            var _tsml2 = _interopRequireDefault(_tsml);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _obj = _dereq_(88);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            var _toTitleCase = _dereq_(91);
            var _toTitleCase2 = _interopRequireDefault(_toTitleCase);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _taggedTemplateLiteralLoose(strings, raw) {
                strings.raw = raw;
                return strings
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Html5 = function(_Tech) {
                _inherits(Html5, _Tech);
                function Html5(options, ready) {
                    _classCallCheck(this, Html5);
                    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));
                    var source = options.source;
                    var crossoriginTracks = false;
                    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
                        _this.setSource(source)
                    } else {
                        _this.handleLateInit_(_this.el_)
                    }
                    if (_this.el_.hasChildNodes()) {
                        var nodes = _this.el_.childNodes;
                        var nodesLength = nodes.length;
                        var removeNodes = [];
                        while (nodesLength--) {
                            var node = nodes[nodesLength];
                            var nodeName = node.nodeName.toLowerCase();
                            if (nodeName === "track") {
                                if (!_this.featuresNativeTextTracks) {
                                    removeNodes.push(node)
                                } else {
                                    _this.remoteTextTrackEls().addTrackElement_(node);
                                    _this.remoteTextTracks().addTrack_(node.track);
                                    if (!crossoriginTracks && !_this.el_.hasAttribute("crossorigin") && Url.isCrossOrigin(node.src)) {
                                        crossoriginTracks = true
                                    }
                                }
                            }
                        }
                        for (var i = 0; i < removeNodes.length; i++) {
                            _this.el_.removeChild(removeNodes[i])
                        }
                    }
                    var trackTypes = ["audio", "video"];
                    trackTypes.forEach(function(type) {
                        var elTracks = _this.el()[type + "Tracks"];
                        var techTracks = _this[type + "Tracks"]();
                        var capitalType = (0,
                        _toTitleCase2["default"])(type);
                        if (!_this["featuresNative" + capitalType + "Tracks"] || !elTracks || !elTracks.addEventListener) {
                            return
                        }
                        _this["handle" + capitalType + "TrackChange_"] = function(e) {
                            techTracks.trigger({
                                type: "change",
                                target: techTracks,
                                currentTarget: techTracks,
                                srcElement: techTracks
                            })
                        }
                        ;
                        _this["handle" + capitalType + "TrackAdd_"] = function(e) {
                            return techTracks.addTrack(e.track)
                        }
                        ;
                        _this["handle" + capitalType + "TrackRemove_"] = function(e) {
                            return techTracks.removeTrack(e.track)
                        }
                        ;
                        elTracks.addEventListener("change", _this["handle" + capitalType + "TrackChange_"]);
                        elTracks.addEventListener("addtrack", _this["handle" + capitalType + "TrackAdd_"]);
                        elTracks.addEventListener("removetrack", _this["handle" + capitalType + "TrackRemove_"]);
                        _this["removeOld" + capitalType + "Tracks_"] = function(e) {
                            return _this.removeOldTracks_(techTracks, elTracks)
                        }
                        ;
                        _this.on("loadstart", _this["removeOld" + capitalType + "Tracks_"])
                    });
                    if (_this.featuresNativeTextTracks) {
                        if (crossoriginTracks) {
                            _log2["default"].warn((0,
                            _tsml2["default"])(_templateObject))
                        }
                        _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);
                        _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);
                        _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);
                        _this.proxyNativeTextTracks_()
                    }
                    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
                        _this.setControls(true)
                    }
                    _this.proxyWebkitFullscreen_();
                    _this.triggerReady();
                    return _this
                }
                Html5.prototype.dispose = function dispose() {
                    var _this2 = this;
                    ["audio", "video", "text"].forEach(function(type) {
                        var capitalType = (0,
                        _toTitleCase2["default"])(type);
                        var tl = _this2.el_[type + "Tracks"];
                        if (tl && tl.removeEventListener) {
                            tl.removeEventListener("change", _this2["handle" + capitalType + "TrackChange_"]);
                            tl.removeEventListener("addtrack", _this2["handle" + capitalType + "TrackAdd_"]);
                            tl.removeEventListener("removetrack", _this2["handle" + capitalType + "TrackRemove_"])
                        }
                        if (tl) {
                            _this2.off("loadstart", _this2["removeOld" + capitalType + "Tracks_"])
                        }
                    });
                    Html5.disposeMediaElement(this.el_);
                    _Tech.prototype.dispose.call(this)
                }
                ;
                Html5.prototype.createEl = function createEl() {
                    var el = this.options_.tag;
                    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                        if (el) {
                            var clone = el.cloneNode(true);
                            if (el.parentNode) {
                                el.parentNode.insertBefore(clone, el)
                            }
                            Html5.disposeMediaElement(el);
                            el = clone
                        } else {
                            el = _document2["default"].createElement("video");
                            var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
                            var attributes = (0,
                            _mergeOptions2["default"])({}, tagAttributes);
                            if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
                                delete attributes.controls
                            }
                            Dom.setElAttributes(el, (0,
                            _obj.assign)(attributes, {
                                id: this.options_.techId,
                                "class": "vjs-tech"
                            }))
                        }
                        el.playerId = this.options_.playerId
                    }
                    var settingsAttrs = ["autoplay", "preload", "loop", "muted"];
                    for (var i = settingsAttrs.length - 1; i >= 0; i--) {
                        var attr = settingsAttrs[i];
                        var overwriteAttrs = {};
                        if (typeof this.options_[attr] !== "undefined") {
                            overwriteAttrs[attr] = this.options_[attr]
                        }
                        Dom.setElAttributes(el, overwriteAttrs)
                    }
                    return el
                }
                ;
                Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
                    var _this3 = this;
                    if (el.networkState === 0 || el.networkState === 3) {
                        return
                    }
                    if (el.readyState === 0) {
                        var _ret = function() {
                            var loadstartFired = false;
                            var setLoadstartFired = function setLoadstartFired() {
                                loadstartFired = true
                            };
                            _this3.on("loadstart", setLoadstartFired);
                            var triggerLoadstart = function triggerLoadstart() {
                                if (!loadstartFired) {
                                    this.trigger("loadstart")
                                }
                            };
                            _this3.on("loadedmetadata", triggerLoadstart);
                            _this3.ready(function() {
                                this.off("loadstart", setLoadstartFired);
                                this.off("loadedmetadata", triggerLoadstart);
                                if (!loadstartFired) {
                                    this.trigger("loadstart")
                                }
                            });
                            return {
                                v: void 0
                            }
                        }();
                        if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object")
                            return _ret.v
                    }
                    var eventsToTrigger = ["loadstart"];
                    eventsToTrigger.push("loadedmetadata");
                    if (el.readyState >= 2) {
                        eventsToTrigger.push("loadeddata")
                    }
                    if (el.readyState >= 3) {
                        eventsToTrigger.push("canplay")
                    }
                    if (el.readyState >= 4) {
                        eventsToTrigger.push("canplaythrough")
                    }
                    this.ready(function() {
                        eventsToTrigger.forEach(function(type) {
                            this.trigger(type)
                        }, this)
                    })
                }
                ;
                Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
                    var tt = this.el().textTracks;
                    if (tt) {
                        for (var i = 0; i < tt.length; i++) {
                            this.textTracks().addTrack_(tt[i])
                        }
                        if (tt.addEventListener) {
                            tt.addEventListener("change", this.handleTextTrackChange_);
                            tt.addEventListener("addtrack", this.handleTextTrackAdd_);
                            tt.addEventListener("removetrack", this.handleTextTrackRemove_)
                        }
                        this.on("loadstart", this.removeOldTextTracks_)
                    }
                }
                ;
                Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
                    var tt = this.textTracks();
                    this.textTracks().trigger({
                        type: "change",
                        target: tt,
                        currentTarget: tt,
                        srcElement: tt
                    })
                }
                ;
                Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
                    this.textTracks().addTrack_(e.track)
                }
                ;
                Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
                    this.textTracks().removeTrack_(e.track)
                }
                ;
                Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {
                    var removeTracks = [];
                    if (!elTracks) {
                        return
                    }
                    for (var i = 0; i < techTracks.length; i++) {
                        var techTrack = techTracks[i];
                        var found = false;
                        for (var j = 0; j < elTracks.length; j++) {
                            if (elTracks[j] === techTrack) {
                                found = true;
                                break
                            }
                        }
                        if (!found) {
                            removeTracks.push(techTrack)
                        }
                    }
                    for (var _i = 0; _i < removeTracks.length; _i++) {
                        var track = removeTracks[_i];
                        techTracks.removeTrack_(track)
                    }
                }
                ;
                Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {
                    var techTracks = this.textTracks();
                    var elTracks = this.el().textTracks;
                    this.removeOldTracks_(techTracks, elTracks)
                }
                ;
                Html5.prototype.play = function play() {
                    var playPromise = this.el_.play();
                    if (playPromise !== undefined && typeof playPromise.then === "function") {
                        playPromise.then(null, function(e) {})
                    }
                }
                ;
                Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
                    try {
                        this.el_.currentTime = seconds
                    } catch (e) {
                        (0,
                        _log2["default"])(e, "Video is not ready. (Video.js)")
                    }
                }
                ;
                Html5.prototype.duration = function duration() {
                    var _this4 = this;
                    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {
                        if (this.el_.currentTime === 0) {
                            var _ret2 = function() {
                                var checkProgress = function checkProgress() {
                                    if (_this4.el_.currentTime > 0) {
                                        if (_this4.el_.duration === Infinity) {
                                            _this4.trigger("durationchange")
                                        }
                                        _this4.off("timeupdate", checkProgress)
                                    }
                                };
                                _this4.on("timeupdate", checkProgress);
                                return {
                                    v: NaN
                                }
                            }();
                            if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object")
                                return _ret2.v
                        }
                    }
                    return this.el_.duration || NaN
                }
                ;
                Html5.prototype.width = function width() {
                    return this.el_.offsetWidth
                }
                ;
                Html5.prototype.height = function height() {
                    return this.el_.offsetHeight
                }
                ;
                Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
                    var _this5 = this;
                    if (!("webkitDisplayingFullscreen"in this.el_)) {
                        return
                    }
                    var endFn = function endFn() {
                        this.trigger("fullscreenchange", {
                            isFullscreen: false
                        })
                    };
                    var beginFn = function beginFn() {
                        this.one("webkitendfullscreen", endFn);
                        this.trigger("fullscreenchange", {
                            isFullscreen: true
                        })
                    };
                    this.on("webkitbeginfullscreen", beginFn);
                    this.on("dispose", function() {
                        _this5.off("webkitbeginfullscreen", beginFn);
                        _this5.off("webkitendfullscreen", endFn)
                    })
                }
                ;
                Html5.prototype.supportsFullScreen = function supportsFullScreen() {
                    if (typeof this.el_.webkitEnterFullScreen === "function") {
                        var userAgent = _window2["default"].navigator && _window2["default"].navigator.userAgent || "";
                        if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
                            return true
                        }
                    }
                    return false
                }
                ;
                Html5.prototype.enterFullScreen = function enterFullScreen() {
                    var video = this.el_;
                    if (video.paused && video.networkState <= video.HAVE_METADATA) {
                        this.el_.play();
                        this.setTimeout(function() {
                            video.pause();
                            video.webkitEnterFullScreen()
                        }, 0)
                    } else {
                        video.webkitEnterFullScreen()
                    }
                }
                ;
                Html5.prototype.exitFullScreen = function exitFullScreen() {
                    this.el_.webkitExitFullScreen()
                }
                ;
                Html5.prototype.src = function src(_src) {
                    if (_src === undefined) {
                        return this.el_.src
                    }
                    this.setSrc(_src)
                }
                ;
                Html5.prototype.reset = function reset() {
                    Html5.resetMediaElement(this.el_)
                }
                ;
                Html5.prototype.currentSrc = function currentSrc() {
                    if (this.currentSource_) {
                        return this.currentSource_.src
                    }
                    return this.el_.currentSrc
                }
                ;
                Html5.prototype.setControls = function setControls(val) {
                    this.el_.controls = !!val
                }
                ;
                Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
                    if (!this.featuresNativeTextTracks) {
                        return _Tech.prototype.addTextTrack.call(this, kind, label, language)
                    }
                    return this.el_.addTextTrack(kind, label, language)
                }
                ;
                Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
                    if (!this.featuresNativeTextTracks) {
                        return _Tech.prototype.createRemoteTextTrack.call(this, options)
                    }
                    var htmlTrackElement = _document2["default"].createElement("track");
                    if (options.kind) {
                        htmlTrackElement.kind = options.kind
                    }
                    if (options.label) {
                        htmlTrackElement.label = options.label
                    }
                    if (options.language || options.srclang) {
                        htmlTrackElement.srclang = options.language || options.srclang
                    }
                    if (options["default"]) {
                        htmlTrackElement["default"] = options["default"]
                    }
                    if (options.id) {
                        htmlTrackElement.id = options.id
                    }
                    if (options.src) {
                        htmlTrackElement.src = options.src
                    }
                    return htmlTrackElement
                }
                ;
                Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
                    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);
                    if (this.featuresNativeTextTracks) {
                        this.el().appendChild(htmlTrackElement)
                    }
                    return htmlTrackElement
                }
                ;
                Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
                    _Tech.prototype.removeRemoteTextTrack.call(this, track);
                    if (this.featuresNativeTextTracks) {
                        var tracks = this.$$("track");
                        var i = tracks.length;
                        while (i--) {
                            if (track === tracks[i] || track === tracks[i].track) {
                                this.el().removeChild(tracks[i])
                            }
                        }
                    }
                }
                ;
                return Html5
            }(_tech2["default"]);
            if (Dom.isReal()) {
                Html5.TEST_VID = _document2["default"].createElement("video");
                var track = _document2["default"].createElement("track");
                track.kind = "captions";
                track.srclang = "en";
                track.label = "English";
                Html5.TEST_VID.appendChild(track)
            }
            Html5.isSupported = function() {
                try {
                    Html5.TEST_VID.volume = .5
                } catch (e) {
                    return false
                }
                return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType)
            }
            ;
            Html5.canControlVolume = function() {
                try {
                    var volume = Html5.TEST_VID.volume;
                    Html5.TEST_VID.volume = volume / 2 + .1;
                    return volume !== Html5.TEST_VID.volume
                } catch (e) {
                    return false
                }
            }
            ;
            Html5.canControlPlaybackRate = function() {
                if (browser.IS_ANDROID && browser.IS_CHROME) {
                    return false
                }
                try {
                    var playbackRate = Html5.TEST_VID.playbackRate;
                    Html5.TEST_VID.playbackRate = playbackRate / 2 + .1;
                    return playbackRate !== Html5.TEST_VID.playbackRate
                } catch (e) {
                    return false
                }
            }
            ;
            Html5.supportsNativeTextTracks = function() {
                return browser.IS_ANY_SAFARI
            }
            ;
            Html5.supportsNativeVideoTracks = function() {
                return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks)
            }
            ;
            Html5.supportsNativeAudioTracks = function() {
                return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks)
            }
            ;
            Html5.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "volumechange"];
            Html5.prototype.featuresVolumeControl = Html5.canControlVolume();
            Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();
            Html5.prototype.movingMediaElementInDOM = !browser.IS_IOS;
            Html5.prototype.featuresFullscreenResize = true;
            Html5.prototype.featuresProgressEvents = true;
            Html5.prototype.featuresTimeupdateEvents = true;
            Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();
            Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();
            Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();
            var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
            var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
            var mp4RE = /^video\/mp4/i;
            Html5.patchCanPlayType = function() {
                if (browser.ANDROID_VERSION >= 4 && !browser.IS_FIREFOX) {
                    Html5.TEST_VID.constructor.prototype.canPlayType = function(type) {
                        if (type && mpegurlRE.test(type)) {
                            return "maybe"
                        }
                        return canPlayType.call(this, type)
                    }
                } else if (browser.IS_OLD_ANDROID) {
                    Html5.TEST_VID.constructor.prototype.canPlayType = function(type) {
                        if (type && mp4RE.test(type)) {
                            return "maybe"
                        }
                        return canPlayType.call(this, type)
                    }
                }
            }
            ;
            Html5.unpatchCanPlayType = function() {
                var r = Html5.TEST_VID.constructor.prototype.canPlayType;
                Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
                return r
            }
            ;
            Html5.patchCanPlayType();
            Html5.disposeMediaElement = function(el) {
                if (!el) {
                    return
                }
                if (el.parentNode) {
                    el.parentNode.removeChild(el)
                }
                while (el.hasChildNodes()) {
                    el.removeChild(el.firstChild)
                }
                el.removeAttribute("src");
                if (typeof el.load === "function") {
                    (function() {
                        try {
                            el.load()
                        } catch (e) {}
                    }
                    )()
                }
            }
            ;
            Html5.resetMediaElement = function(el) {
                if (!el) {
                    return
                }
                var sources = el.querySelectorAll("source");
                var i = sources.length;
                while (i--) {
                    el.removeChild(sources[i])
                }
                el.removeAttribute("src");
                if (typeof el.load === "function") {
                    (function() {
                        try {
                            el.load()
                        } catch (e) {}
                    }
                    )()
                }
            }
            ;
            ["paused", "currentTime", "buffered", "volume", "muted", "poster", "preload", "autoplay", "controls", "loop", "error", "seeking", "seekable", "ended", "defaultMuted", "playbackRate", "played", "networkState", "readyState", "videoWidth", "videoHeight"].forEach(function(prop) {
                Html5.prototype[prop] = function() {
                    return this.el_[prop]
                }
            });
            ["volume", "muted", "src", "poster", "preload", "autoplay", "loop", "playbackRate"].forEach(function(prop) {
                Html5.prototype["set" + (0,
                _toTitleCase2["default"])(prop)] = function(v) {
                    this.el_[prop] = v
                }
            });
            ["pause", "load"].forEach(function(prop) {
                Html5.prototype[prop] = function() {
                    return this.el_[prop]()
                }
            });
            _tech2["default"].withSourceHandlers(Html5);
            Html5.nativeSourceHandler = {};
            Html5.nativeSourceHandler.canPlayType = function(type) {
                try {
                    return Html5.TEST_VID.canPlayType(type)
                } catch (e) {
                    return ""
                }
            }
            ;
            Html5.nativeSourceHandler.canHandleSource = function(source, options) {
                if (source.type) {
                    return Html5.nativeSourceHandler.canPlayType(source.type)
                } else if (source.src) {
                    var ext = Url.getFileExtension(source.src);
                    return Html5.nativeSourceHandler.canPlayType("video/" + ext)
                }
                return ""
            }
            ;
            Html5.nativeSourceHandler.handleSource = function(source, tech, options) {
                tech.setSrc(source.src)
            }
            ;
            Html5.nativeSourceHandler.dispose = function() {}
            ;
            Html5.registerSourceHandler(Html5.nativeSourceHandler);
            _component2["default"].registerComponent("Html5", Html5);
            _tech2["default"].registerTech("Html5", Html5);
            exports["default"] = Html5
        }
        , {
            5: 5,
            62: 62,
            78: 78,
            81: 81,
            83: 83,
            86: 86,
            87: 87,
            88: 88,
            91: 91,
            92: 92,
            94: 94,
            95: 95,
            98: 98
        }],
        61: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _tech = _dereq_(62);
            var _tech2 = _interopRequireDefault(_tech);
            var _toTitleCase = _dereq_(91);
            var _toTitleCase2 = _interopRequireDefault(_toTitleCase);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var MediaLoader = function(_Component) {
                _inherits(MediaLoader, _Component);
                function MediaLoader(player, options, ready) {
                    _classCallCheck(this, MediaLoader);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));
                    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
                        for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
                            var techName = (0,
                            _toTitleCase2["default"])(j[i]);
                            var tech = _tech2["default"].getTech(techName);
                            if (!techName) {
                                tech = _component2["default"].getComponent(techName)
                            }
                            if (tech && tech.isSupported()) {
                                player.loadTech_(techName);
                                break
                            }
                        }
                    } else {
                        player.src(options.playerOptions.sources)
                    }
                    return _this
                }
                return MediaLoader
            }(_component2["default"]);
            _component2["default"].registerComponent("MediaLoader", MediaLoader);
            exports["default"] = MediaLoader
        }
        , {
            5: 5,
            62: 62,
            91: 91
        }],
        62: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj
            }
            : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
            }
            ;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _htmlTrackElement = _dereq_(66);
            var _htmlTrackElement2 = _interopRequireDefault(_htmlTrackElement);
            var _htmlTrackElementList = _dereq_(65);
            var _htmlTrackElementList2 = _interopRequireDefault(_htmlTrackElementList);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            var _textTrack = _dereq_(72);
            var _textTrack2 = _interopRequireDefault(_textTrack);
            var _textTrackList = _dereq_(70);
            var _textTrackList2 = _interopRequireDefault(_textTrackList);
            var _videoTrackList = _dereq_(76);
            var _videoTrackList2 = _interopRequireDefault(_videoTrackList);
            var _audioTrackList = _dereq_(63);
            var _audioTrackList2 = _interopRequireDefault(_audioTrackList);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _timeRanges = _dereq_(90);
            var _buffer = _dereq_(79);
            var _mediaError = _dereq_(46);
            var _mediaError2 = _interopRequireDefault(_mediaError);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _obj = _dereq_(88);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            function createTrackHelper(self, kind, label, language) {
                var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
                var tracks = self.textTracks();
                options.kind = kind;
                if (label) {
                    options.label = label
                }
                if (language) {
                    options.language = language
                }
                options.tech = self;
                var track = new _textTrack2["default"](options);
                tracks.addTrack_(track);
                return track
            }
            var Tech = function(_Component) {
                _inherits(Tech, _Component);
                function Tech() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function() {}
                    ;
                    _classCallCheck(this, Tech);
                    options.reportTouchActivity = false;
                    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));
                    _this.hasStarted_ = false;
                    _this.on("playing", function() {
                        this.hasStarted_ = true
                    });
                    _this.on("loadstart", function() {
                        this.hasStarted_ = false
                    });
                    _this.textTracks_ = options.textTracks;
                    _this.videoTracks_ = options.videoTracks;
                    _this.audioTracks_ = options.audioTracks;
                    if (!_this.featuresProgressEvents) {
                        _this.manualProgressOn()
                    }
                    if (!_this.featuresTimeupdateEvents) {
                        _this.manualTimeUpdatesOn()
                    }
                    ["Text", "Audio", "Video"].forEach(function(track) {
                        if (options["native" + track + "Tracks"] === false) {
                            _this["featuresNative" + track + "Tracks"] = false
                        }
                    });
                    if (options.nativeCaptions === false) {
                        _this.featuresNativeTextTracks = false
                    }
                    if (!_this.featuresNativeTextTracks) {
                        _this.emulateTextTracks()
                    }
                    _this.autoRemoteTextTracks_ = new _textTrackList2["default"];
                    _this.initTextTrackListeners();
                    _this.initTrackListeners();
                    if (!options.nativeControlsForTouch) {
                        _this.emitTapEvents()
                    }
                    if (_this.constructor) {
                        _this.name_ = _this.constructor.name || "Unknown Tech"
                    }
                    return _this
                }
                Tech.prototype.manualProgressOn = function manualProgressOn() {
                    this.on("durationchange", this.onDurationChange);
                    this.manualProgress = true;
                    this.one("ready", this.trackProgress)
                }
                ;
                Tech.prototype.manualProgressOff = function manualProgressOff() {
                    this.manualProgress = false;
                    this.stopTrackingProgress();
                    this.off("durationchange", this.onDurationChange)
                }
                ;
                Tech.prototype.trackProgress = function trackProgress(event) {
                    this.stopTrackingProgress();
                    this.progressInterval = this.setInterval(Fn.bind(this, function() {
                        var numBufferedPercent = this.bufferedPercent();
                        if (this.bufferedPercent_ !== numBufferedPercent) {
                            this.trigger("progress")
                        }
                        this.bufferedPercent_ = numBufferedPercent;
                        if (numBufferedPercent === 1) {
                            this.stopTrackingProgress()
                        }
                    }), 500)
                }
                ;
                Tech.prototype.onDurationChange = function onDurationChange(event) {
                    this.duration_ = this.duration()
                }
                ;
                Tech.prototype.buffered = function buffered() {
                    return (0,
                    _timeRanges.createTimeRange)(0, 0)
                }
                ;
                Tech.prototype.bufferedPercent = function bufferedPercent() {
                    return (0,
                    _buffer.bufferedPercent)(this.buffered(), this.duration_)
                }
                ;
                Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
                    this.clearInterval(this.progressInterval)
                }
                ;
                Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
                    this.manualTimeUpdates = true;
                    this.on("play", this.trackCurrentTime);
                    this.on("pause", this.stopTrackingCurrentTime)
                }
                ;
                Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
                    this.manualTimeUpdates = false;
                    this.stopTrackingCurrentTime();
                    this.off("play", this.trackCurrentTime);
                    this.off("pause", this.stopTrackingCurrentTime)
                }
                ;
                Tech.prototype.trackCurrentTime = function trackCurrentTime() {
                    if (this.currentTimeInterval) {
                        this.stopTrackingCurrentTime()
                    }
                    this.currentTimeInterval = this.setInterval(function() {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        })
                    }, 250)
                }
                ;
                Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
                    this.clearInterval(this.currentTimeInterval);
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    })
                }
                ;
                Tech.prototype.dispose = function dispose() {
                    this.clearTracks(["audio", "video", "text"]);
                    if (this.manualProgress) {
                        this.manualProgressOff()
                    }
                    if (this.manualTimeUpdates) {
                        this.manualTimeUpdatesOff()
                    }
                    _Component.prototype.dispose.call(this)
                }
                ;
                Tech.prototype.clearTracks = function clearTracks(types) {
                    var _this2 = this;
                    types = [].concat(types);
                    types.forEach(function(type) {
                        var list = _this2[type + "Tracks"]() || [];
                        var i = list.length;
                        while (i--) {
                            var track = list[i];
                            if (type === "text") {
                                _this2.removeRemoteTextTrack(track)
                            }
                            list.removeTrack_(track)
                        }
                    })
                }
                ;
                Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
                    var list = this.autoRemoteTextTracks_ || [];
                    var i = list.length;
                    while (i--) {
                        var track = list[i];
                        this.removeRemoteTextTrack(track)
                    }
                }
                ;
                Tech.prototype.reset = function reset() {}
                ;
                Tech.prototype.error = function error(err) {
                    if (err !== undefined) {
                        this.error_ = new _mediaError2["default"](err);
                        this.trigger("error")
                    }
                    return this.error_
                }
                ;
                Tech.prototype.played = function played() {
                    if (this.hasStarted_) {
                        return (0,
                        _timeRanges.createTimeRange)(0, 0)
                    }
                    return (0,
                    _timeRanges.createTimeRange)()
                }
                ;
                Tech.prototype.setCurrentTime = function setCurrentTime() {
                    if (this.manualTimeUpdates) {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        })
                    }
                }
                ;
                Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
                    var textTrackListChanges = Fn.bind(this, function() {
                        this.trigger("texttrackchange")
                    });
                    var tracks = this.textTracks();
                    if (!tracks) {
                        return
                    }
                    tracks.addEventListener("removetrack", textTrackListChanges);
                    tracks.addEventListener("addtrack", textTrackListChanges);
                    this.on("dispose", Fn.bind(this, function() {
                        tracks.removeEventListener("removetrack", textTrackListChanges);
                        tracks.removeEventListener("addtrack", textTrackListChanges)
                    }))
                }
                ;
                Tech.prototype.initTrackListeners = function initTrackListeners() {
                    var _this3 = this;
                    var trackTypes = ["video", "audio"];
                    trackTypes.forEach(function(type) {
                        var trackListChanges = function trackListChanges() {
                            _this3.trigger(type + "trackchange")
                        };
                        var tracks = _this3[type + "Tracks"]();
                        tracks.addEventListener("removetrack", trackListChanges);
                        tracks.addEventListener("addtrack", trackListChanges);
                        _this3.on("dispose", function() {
                            tracks.removeEventListener("removetrack", trackListChanges);
                            tracks.removeEventListener("addtrack", trackListChanges)
                        })
                    })
                }
                ;
                Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
                    var _this4 = this;
                    if (!_window2["default"].WebVTT && this.el().parentNode !== null && this.el().parentNode !== undefined) {
                        var _ret = function() {
                            var vtt = _dereq_(99);
                            if (!_this4.options_["vtt.js"] && (0,
                            _obj.isPlain)(vtt) && Object.keys(vtt).length > 0) {
                                Object.keys(vtt).forEach(function(k) {
                                    _window2["default"][k] = vtt[k]
                                });
                                _this4.trigger("vttjsloaded");
                                return {
                                    v: void 0
                                }
                            }
                            var script = _document2["default"].createElement("script");
                            script.src = _this4.options_["vtt.js"] || "https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js";
                            script.onload = function() {
                                _this4.trigger("vttjsloaded")
                            }
                            ;
                            script.onerror = function() {
                                _this4.trigger("vttjserror")
                            }
                            ;
                            _this4.on("dispose", function() {
                                script.onload = null;
                                script.onerror = null
                            });
                            _window2["default"].WebVTT = true;
                            _this4.el().parentNode.appendChild(script)
                        }();
                        if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object")
                            return _ret.v
                    }
                }
                ;
                Tech.prototype.emulateTextTracks = function emulateTextTracks() {
                    var _this5 = this;
                    var tracks = this.textTracks();
                    if (!tracks) {
                        return
                    }
                    this.remoteTextTracks().on("addtrack", function(e) {
                        _this5.textTracks().addTrack_(e.track)
                    });
                    this.remoteTextTracks().on("removetrack", function(e) {
                        _this5.textTracks().removeTrack_(e.track)
                    });
                    this.on("ready", this.addWebVttScript_);
                    var updateDisplay = function updateDisplay() {
                        return _this5.trigger("texttrackchange")
                    };
                    var textTracksChanges = function textTracksChanges() {
                        updateDisplay();
                        for (var i = 0; i < tracks.length; i++) {
                            var track = tracks[i];
                            track.removeEventListener("cuechange", updateDisplay);
                            if (track.mode === "showing") {
                                track.addEventListener("cuechange", updateDisplay)
                            }
                        }
                    };
                    textTracksChanges();
                    tracks.addEventListener("change", textTracksChanges);
                    this.on("dispose", function() {
                        tracks.removeEventListener("change", textTracksChanges)
                    })
                }
                ;
                Tech.prototype.videoTracks = function videoTracks() {
                    this.videoTracks_ = this.videoTracks_ || new _videoTrackList2["default"];
                    return this.videoTracks_
                }
                ;
                Tech.prototype.audioTracks = function audioTracks() {
                    this.audioTracks_ = this.audioTracks_ || new _audioTrackList2["default"];
                    return this.audioTracks_
                }
                ;
                Tech.prototype.textTracks = function textTracks() {
                    this.textTracks_ = this.textTracks_ || new _textTrackList2["default"];
                    return this.textTracks_
                }
                ;
                Tech.prototype.remoteTextTracks = function remoteTextTracks() {
                    this.remoteTextTracks_ = this.remoteTextTracks_ || new _textTrackList2["default"];
                    return this.remoteTextTracks_
                }
                ;
                Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
                    this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _htmlTrackElementList2["default"];
                    return this.remoteTextTrackEls_
                }
                ;
                Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
                    if (!kind) {
                        throw new Error("TextTrack kind is required but was not provided")
                    }
                    return createTrackHelper(this, kind, label, language)
                }
                ;
                Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
                    var track = (0,
                    _mergeOptions2["default"])(options, {
                        tech: this
                    });
                    return new _htmlTrackElement2["default"](track)
                }
                ;
                Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var manualCleanup = arguments[1];
                    var htmlTrackElement = this.createRemoteTextTrack(options);
                    if (manualCleanup !== true && manualCleanup !== false) {
                        _log2["default"].warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
                        manualCleanup = true
                    }
                    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
                    this.remoteTextTracks().addTrack_(htmlTrackElement.track);
                    if (manualCleanup !== true) {
                        this.autoRemoteTextTracks_.addTrack_(htmlTrackElement.track)
                    }
                    return htmlTrackElement
                }
                ;
                Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
                    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);
                    this.remoteTextTrackEls().removeTrackElement_(trackElement);
                    this.remoteTextTracks().removeTrack_(track);
                    this.autoRemoteTextTracks_.removeTrack_(track)
                }
                ;
                Tech.prototype.setPoster = function setPoster() {}
                ;
                Tech.prototype.canPlayType = function canPlayType() {
                    return ""
                }
                ;
                Tech.isTech = function isTech(component) {
                    return component.prototype instanceof Tech || component instanceof Tech || component === Tech
                }
                ;
                Tech.registerTech = function registerTech(name, tech) {
                    if (!Tech.techs_) {
                        Tech.techs_ = {}
                    }
                    if (!Tech.isTech(tech)) {
                        throw new Error("Tech " + name + " must be a Tech")
                    }
                    Tech.techs_[name] = tech;
                    return tech
                }
                ;
                Tech.getTech = function getTech(name) {
                    if (Tech.techs_ && Tech.techs_[name]) {
                        return Tech.techs_[name]
                    }
                    if (_window2["default"] && _window2["default"].videojs && _window2["default"].videojs[name]) {
                        _log2["default"].warn("The " + name + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)");
                        return _window2["default"].videojs[name]
                    }
                }
                ;
                return Tech
            }(_component2["default"]);
            Tech.prototype.textTracks_;
            Tech.prototype.audioTracks_;
            Tech.prototype.videoTracks_;
            Tech.prototype.featuresVolumeControl = true;
            Tech.prototype.featuresFullscreenResize = false;
            Tech.prototype.featuresPlaybackRate = false;
            Tech.prototype.featuresProgressEvents = false;
            Tech.prototype.featuresTimeupdateEvents = false;
            Tech.prototype.featuresNativeTextTracks = false;
            Tech.withSourceHandlers = function(_Tech) {
                _Tech.registerSourceHandler = function(handler, index) {
                    var handlers = _Tech.sourceHandlers;
                    if (!handlers) {
                        handlers = _Tech.sourceHandlers = []
                    }
                    if (index === undefined) {
                        index = handlers.length
                    }
                    handlers.splice(index, 0, handler)
                }
                ;
                _Tech.canPlayType = function(type) {
                    var handlers = _Tech.sourceHandlers || [];
                    var can = void 0;
                    for (var i = 0; i < handlers.length; i++) {
                        can = handlers[i].canPlayType(type);
                        if (can) {
                            return can
                        }
                    }
                    return ""
                }
                ;
                _Tech.selectSourceHandler = function(source, options) {
                    var handlers = _Tech.sourceHandlers || [];
                    var can = void 0;
                    for (var i = 0; i < handlers.length; i++) {
                        can = handlers[i].canHandleSource(source, options);
                        if (can) {
                            return handlers[i]
                        }
                    }
                    return null
                }
                ;
                _Tech.canPlaySource = function(srcObj, options) {
                    var sh = _Tech.selectSourceHandler(srcObj, options);
                    if (sh) {
                        return sh.canHandleSource(srcObj, options)
                    }
                    return ""
                }
                ;
                var deferrable = ["seekable", "duration"];
                deferrable.forEach(function(fnName) {
                    var originalFn = this[fnName];
                    if (typeof originalFn !== "function") {
                        return
                    }
                    this[fnName] = function() {
                        if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
                            return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments)
                        }
                        return originalFn.apply(this, arguments)
                    }
                }, _Tech.prototype);
                _Tech.prototype.setSource = function(source) {
                    var sh = _Tech.selectSourceHandler(source, this.options_);
                    if (!sh) {
                        if (_Tech.nativeSourceHandler) {
                            sh = _Tech.nativeSourceHandler
                        } else {
                            _log2["default"].error("No source hander found for the current source.")
                        }
                    }
                    this.disposeSourceHandler();
                    this.off("dispose", this.disposeSourceHandler);
                    if (sh !== _Tech.nativeSourceHandler) {
                        this.currentSource_ = source;
                        this.off(this.el_, "loadstart", _Tech.prototype.firstLoadStartListener_);
                        this.off(this.el_, "loadstart", _Tech.prototype.successiveLoadStartListener_);
                        this.one(this.el_, "loadstart", _Tech.prototype.firstLoadStartListener_)
                    }
                    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
                    this.on("dispose", this.disposeSourceHandler);
                    return this
                }
                ;
                _Tech.prototype.firstLoadStartListener_ = function() {
                    this.one(this.el_, "loadstart", _Tech.prototype.successiveLoadStartListener_)
                }
                ;
                _Tech.prototype.successiveLoadStartListener_ = function() {
                    this.disposeSourceHandler();
                    this.one(this.el_, "loadstart", _Tech.prototype.successiveLoadStartListener_)
                }
                ;
                _Tech.prototype.disposeSourceHandler = function() {
                    if (this.currentSource_) {
                        this.clearTracks(["audio", "video"]);
                        this.currentSource_ = null
                    }
                    this.cleanupAutoTextTracks();
                    if (this.sourceHandler_) {
                        this.off(this.el_, "loadstart", _Tech.prototype.firstLoadStartListener_);
                        this.off(this.el_, "loadstart", _Tech.prototype.successiveLoadStartListener_);
                        if (this.sourceHandler_.dispose) {
                            this.sourceHandler_.dispose()
                        }
                        this.sourceHandler_ = null
                    }
                }
            }
            ;
            _component2["default"].registerComponent("Tech", Tech);
            _component2["default"].registerComponent("MediaTechController", Tech);
            Tech.registerTech("Tech", Tech);
            exports["default"] = Tech
        }
        , {
            46: 46,
            5: 5,
            63: 63,
            65: 65,
            66: 66,
            70: 70,
            72: 72,
            76: 76,
            79: 79,
            83: 83,
            86: 86,
            87: 87,
            88: 88,
            90: 90,
            94: 94,
            95: 95,
            99: 99
        }],
        63: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackList = _dereq_(74);
            var _trackList2 = _interopRequireDefault(_trackList);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var disableOthers = function disableOthers(list, track) {
                for (var i = 0; i < list.length; i++) {
                    if (track.id === list[i].id) {
                        continue
                    }
                    list[i].enabled = false
                }
            };
            var AudioTrackList = function(_TrackList) {
                _inherits(AudioTrackList, _TrackList);
                function AudioTrackList() {
                    var _this, _ret;
                    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    _classCallCheck(this, AudioTrackList);
                    var list = void 0;
                    for (var i = tracks.length - 1; i >= 0; i--) {
                        if (tracks[i].enabled) {
                            disableOthers(tracks, tracks[i]);
                            break
                        }
                    }
                    if (browser.IS_IE8) {
                        list = _document2["default"].createElement("custom");
                        for (var prop in _trackList2["default"].prototype) {
                            if (prop !== "constructor") {
                                list[prop] = _trackList2["default"].prototype[prop]
                            }
                        }
                        for (var _prop in AudioTrackList.prototype) {
                            if (_prop !== "constructor") {
                                list[_prop] = AudioTrackList.prototype[_prop]
                            }
                        }
                    }
                    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)),
                    _this);
                    list.changing_ = false;
                    return _ret = list,
                    _possibleConstructorReturn(_this, _ret)
                }
                AudioTrackList.prototype.addTrack_ = function addTrack_(track) {
                    var _this2 = this;
                    if (track.enabled) {
                        disableOthers(this, track)
                    }
                    _TrackList.prototype.addTrack_.call(this, track);
                    if (!track.addEventListener) {
                        return
                    }
                    track.addEventListener("enabledchange", function() {
                        if (_this2.changing_) {
                            return
                        }
                        _this2.changing_ = true;
                        disableOthers(_this2, track);
                        _this2.changing_ = false;
                        _this2.trigger("change")
                    })
                }
                ;
                AudioTrackList.prototype.addTrack = function addTrack(track) {
                    this.addTrack_(track)
                }
                ;
                AudioTrackList.prototype.removeTrack = function removeTrack(track) {
                    _TrackList.prototype.removeTrack_.call(this, track)
                }
                ;
                return AudioTrackList
            }(_trackList2["default"]);
            exports["default"] = AudioTrackList
        }
        , {
            74: 74,
            78: 78,
            94: 94
        }],
        64: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackEnums = _dereq_(73);
            var _track = _dereq_(75);
            var _track2 = _interopRequireDefault(_track);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var AudioTrack = function(_Track) {
                _inherits(AudioTrack, _Track);
                function AudioTrack() {
                    var _this, _ret;
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    _classCallCheck(this, AudioTrack);
                    var settings = (0,
                    _mergeOptions2["default"])(options, {
                        kind: _trackEnums.AudioTrackKind[options.kind] || ""
                    });
                    var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)),
                    _this);
                    var enabled = false;
                    if (browser.IS_IE8) {
                        for (var prop in AudioTrack.prototype) {
                            if (prop !== "constructor") {
                                track[prop] = AudioTrack.prototype[prop]
                            }
                        }
                    }
                    Object.defineProperty(track, "enabled", {
                        get: function get() {
                            return enabled
                        },
                        set: function set(newEnabled) {
                            if (typeof newEnabled !== "boolean" || newEnabled === enabled) {
                                return
                            }
                            enabled = newEnabled;
                            this.trigger("enabledchange")
                        }
                    });
                    if (settings.enabled) {
                        track.enabled = settings.enabled
                    }
                    track.loaded_ = true;
                    return _ret = track,
                    _possibleConstructorReturn(_this, _ret)
                }
                return AudioTrack
            }(_track2["default"]);
            exports["default"] = AudioTrack
        }
        , {
            73: 73,
            75: 75,
            78: 78,
            87: 87
        }],
        65: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            var HtmlTrackElementList = function() {
                function HtmlTrackElementList() {
                    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    _classCallCheck(this, HtmlTrackElementList);
                    var list = this;
                    if (browser.IS_IE8) {
                        list = _document2["default"].createElement("custom");
                        for (var prop in HtmlTrackElementList.prototype) {
                            if (prop !== "constructor") {
                                list[prop] = HtmlTrackElementList.prototype[prop]
                            }
                        }
                    }
                    list.trackElements_ = [];
                    Object.defineProperty(list, "length", {
                        get: function get() {
                            return this.trackElements_.length
                        }
                    });
                    for (var i = 0, length = trackElements.length; i < length; i++) {
                        list.addTrackElement_(trackElements[i])
                    }
                    if (browser.IS_IE8) {
                        return list
                    }
                }
                HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
                    var index = this.trackElements_.length;
                    if (!("" + index in this)) {
                        Object.defineProperty(this, index, {
                            get: function get() {
                                return this.trackElements_[index]
                            }
                        })
                    }
                    if (this.trackElements_.indexOf(trackElement) === -1) {
                        this.trackElements_.push(trackElement)
                    }
                }
                ;
                HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
                    var trackElement_ = void 0;
                    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
                        if (track === this.trackElements_[i].track) {
                            trackElement_ = this.trackElements_[i];
                            break
                        }
                    }
                    return trackElement_
                }
                ;
                HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
                    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
                        if (trackElement === this.trackElements_[i]) {
                            this.trackElements_.splice(i, 1);
                            break
                        }
                    }
                }
                ;
                return HtmlTrackElementList
            }();
            exports["default"] = HtmlTrackElementList
        }
        , {
            78: 78,
            94: 94
        }],
        66: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _eventTarget = _dereq_(42);
            var _eventTarget2 = _interopRequireDefault(_eventTarget);
            var _textTrack = _dereq_(72);
            var _textTrack2 = _interopRequireDefault(_textTrack);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var NONE = 0;
            var LOADING = 1;
            var LOADED = 2;
            var ERROR = 3;
            var HTMLTrackElement = function(_EventTarget) {
                _inherits(HTMLTrackElement, _EventTarget);
                function HTMLTrackElement() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    _classCallCheck(this, HTMLTrackElement);
                    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));
                    var readyState = void 0;
                    var trackElement = _this;
                    if (browser.IS_IE8) {
                        trackElement = _document2["default"].createElement("custom");
                        for (var prop in HTMLTrackElement.prototype) {
                            if (prop !== "constructor") {
                                trackElement[prop] = HTMLTrackElement.prototype[prop]
                            }
                        }
                    }
                    var track = new _textTrack2["default"](options);
                    trackElement.kind = track.kind;
                    trackElement.src = track.src;
                    trackElement.srclang = track.language;
                    trackElement.label = track.label;
                    trackElement["default"] = track["default"];
                    Object.defineProperty(trackElement, "readyState", {
                        get: function get() {
                            return readyState
                        }
                    });
                    Object.defineProperty(trackElement, "track", {
                        get: function get() {
                            return track
                        }
                    });
                    readyState = NONE;
                    track.addEventListener("loadeddata", function() {
                        readyState = LOADED;
                        trackElement.trigger({
                            type: "load",
                            target: trackElement
                        })
                    });
                    if (browser.IS_IE8) {
                        var _ret;
                        return _ret = trackElement,
                        _possibleConstructorReturn(_this, _ret)
                    }
                    return _this
                }
                return HTMLTrackElement
            }(_eventTarget2["default"]);
            HTMLTrackElement.prototype.allowedEvents_ = {
                load: "load"
            };
            HTMLTrackElement.NONE = NONE;
            HTMLTrackElement.LOADING = LOADING;
            HTMLTrackElement.LOADED = LOADED;
            HTMLTrackElement.ERROR = ERROR;
            exports["default"] = HTMLTrackElement
        }
        , {
            42: 42,
            72: 72,
            78: 78,
            94: 94
        }],
        67: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            var TextTrackCueList = function() {
                function TextTrackCueList(cues) {
                    _classCallCheck(this, TextTrackCueList);
                    var list = this;
                    if (browser.IS_IE8) {
                        list = _document2["default"].createElement("custom");
                        for (var prop in TextTrackCueList.prototype) {
                            if (prop !== "constructor") {
                                list[prop] = TextTrackCueList.prototype[prop]
                            }
                        }
                    }
                    TextTrackCueList.prototype.setCues_.call(list, cues);
                    Object.defineProperty(list, "length", {
                        get: function get() {
                            return this.length_
                        }
                    });
                    if (browser.IS_IE8) {
                        return list
                    }
                }
                TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
                    var oldLength = this.length || 0;
                    var i = 0;
                    var l = cues.length;
                    this.cues_ = cues;
                    this.length_ = cues.length;
                    var defineProp = function defineProp(index) {
                        if (!("" + index in this)) {
                            Object.defineProperty(this, "" + index, {
                                get: function get() {
                                    return this.cues_[index]
                                }
                            })
                        }
                    };
                    if (oldLength < l) {
                        i = oldLength;
                        for (; i < l; i++) {
                            defineProp.call(this, i)
                        }
                    }
                }
                ;
                TextTrackCueList.prototype.getCueById = function getCueById(id) {
                    var result = null;
                    for (var i = 0, l = this.length; i < l; i++) {
                        var cue = this[i];
                        if (cue.id === id) {
                            result = cue;
                            break
                        }
                    }
                    return result
                }
                ;
                return TextTrackCueList
            }();
            exports["default"] = TextTrackCueList
        }
        , {
            78: 78,
            94: 94
        }],
        68: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var darkGray = "#222";
            var lightGray = "#ccc";
            var fontMap = {
                monospace: "monospace",
                sansSerif: "sans-serif",
                serif: "serif",
                monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
                monospaceSerif: '"Courier New", monospace',
                proportionalSansSerif: "sans-serif",
                proportionalSerif: "serif",
                casual: '"Comic Sans MS", Impact, fantasy',
                script: '"Monotype Corsiva", cursive',
                smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
            };
            function constructColor(color, opacity) {
                return "rgba(" + parseInt(color[1] + color[1], 16) + "," + parseInt(color[2] + color[2], 16) + "," + parseInt(color[3] + color[3], 16) + "," + opacity + ")"
            }
            function tryUpdateStyle(el, style, rule) {
                try {
                    el.style[style] = rule
                } catch (e) {
                    return
                }
            }
            var TextTrackDisplay = function(_Component) {
                _inherits(TextTrackDisplay, _Component);
                function TextTrackDisplay(player, options, ready) {
                    _classCallCheck(this, TextTrackDisplay);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options, ready));
                    player.on("loadstart", Fn.bind(_this, _this.toggleDisplay));
                    player.on("texttrackchange", Fn.bind(_this, _this.updateDisplay));
                    player.ready(Fn.bind(_this, function() {
                        if (player.tech_ && player.tech_.featuresNativeTextTracks) {
                            this.hide();
                            return
                        }
                        player.on("fullscreenchange", Fn.bind(this, this.updateDisplay));
                        var tracks = this.options_.playerOptions.tracks || [];
                        for (var i = 0; i < tracks.length; i++) {
                            this.player_.addRemoteTextTrack(tracks[i], true)
                        }
                        var modes = {
                            captions: 1,
                            subtitles: 1
                        };
                        var trackList = this.player_.textTracks();
                        var firstDesc = void 0;
                        var firstCaptions = void 0;
                        if (trackList) {
                            for (var _i = 0; _i < trackList.length; _i++) {
                                var track = trackList[_i];
                                if (track["default"]) {
                                    if (track.kind === "descriptions" && !firstDesc) {
                                        firstDesc = track
                                    } else if (track.kind in modes && !firstCaptions) {
                                        firstCaptions = track
                                    }
                                }
                            }
                            if (firstCaptions) {
                                firstCaptions.mode = "showing"
                            } else if (firstDesc) {
                                firstDesc.mode = "showing"
                            }
                        }
                    }));
                    return _this
                }
                TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
                    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
                        this.hide()
                    } else {
                        this.show()
                    }
                }
                ;
                TextTrackDisplay.prototype.createEl = function createEl() {
                    return _Component.prototype.createEl.call(this, "div", {
                        className: "vjs-text-track-display"
                    }, {
                        "aria-live": "off",
                        "aria-atomic": "true"
                    })
                }
                ;
                TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
                    if (typeof _window2["default"].WebVTT === "function") {
                        _window2["default"].WebVTT.processCues(_window2["default"], [], this.el_)
                    }
                }
                ;
                TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
                    var tracks = this.player_.textTracks();
                    this.clearDisplay();
                    if (!tracks) {
                        return
                    }
                    var descriptionsTrack = null;
                    var captionsSubtitlesTrack = null;
                    var i = tracks.length;
                    while (i--) {
                        var track = tracks[i];
                        if (track.mode === "showing") {
                            if (track.kind === "descriptions") {
                                descriptionsTrack = track
                            } else {
                                captionsSubtitlesTrack = track
                            }
                        }
                    }
                    if (captionsSubtitlesTrack) {
                        if (this.getAttribute("aria-live") !== "off") {
                            this.setAttribute("aria-live", "off")
                        }
                        this.updateForTrack(captionsSubtitlesTrack)
                    } else if (descriptionsTrack) {
                        if (this.getAttribute("aria-live") !== "assertive") {
                            this.setAttribute("aria-live", "assertive")
                        }
                        this.updateForTrack(descriptionsTrack)
                    }
                }
                ;
                TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
                    if (typeof _window2["default"].WebVTT !== "function" || !track.activeCues) {
                        return
                    }
                    var overrides = this.player_.textTrackSettings.getValues();
                    var cues = [];
                    for (var _i2 = 0; _i2 < track.activeCues.length; _i2++) {
                        cues.push(track.activeCues[_i2])
                    }
                    _window2["default"].WebVTT.processCues(_window2["default"], cues, this.el_);
                    var i = cues.length;
                    while (i--) {
                        var cue = cues[i];
                        if (!cue) {
                            continue
                        }
                        var cueDiv = cue.displayState;
                        if (overrides.color) {
                            cueDiv.firstChild.style.color = overrides.color
                        }
                        if (overrides.textOpacity) {
                            tryUpdateStyle(cueDiv.firstChild, "color", constructColor(overrides.color || "#fff", overrides.textOpacity))
                        }
                        if (overrides.backgroundColor) {
                            cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor
                        }
                        if (overrides.backgroundOpacity) {
                            tryUpdateStyle(cueDiv.firstChild, "backgroundColor", constructColor(overrides.backgroundColor || "#000", overrides.backgroundOpacity))
                        }
                        if (overrides.windowColor) {
                            if (overrides.windowOpacity) {
                                tryUpdateStyle(cueDiv, "backgroundColor", constructColor(overrides.windowColor, overrides.windowOpacity))
                            } else {
                                cueDiv.style.backgroundColor = overrides.windowColor
                            }
                        }
                        if (overrides.edgeStyle) {
                            if (overrides.edgeStyle === "dropshadow") {
                                cueDiv.firstChild.style.textShadow = "2px 2px 3px " + darkGray + ", 2px 2px 4px " + darkGray + ", 2px 2px 5px " + darkGray
                            } else if (overrides.edgeStyle === "raised") {
                                cueDiv.firstChild.style.textShadow = "1px 1px " + darkGray + ", 2px 2px " + darkGray + ", 3px 3px " + darkGray
                            } else if (overrides.edgeStyle === "depressed") {
                                cueDiv.firstChild.style.textShadow = "1px 1px " + lightGray + ", 0 1px " + lightGray + ", -1px -1px " + darkGray + ", 0 -1px " + darkGray
                            } else if (overrides.edgeStyle === "uniform") {
                                cueDiv.firstChild.style.textShadow = "0 0 4px " + darkGray + ", 0 0 4px " + darkGray + ", 0 0 4px " + darkGray + ", 0 0 4px " + darkGray
                            }
                        }
                        if (overrides.fontPercent && overrides.fontPercent !== 1) {
                            var fontSize = _window2["default"].parseFloat(cueDiv.style.fontSize);
                            cueDiv.style.fontSize = fontSize * overrides.fontPercent + "px";
                            cueDiv.style.height = "auto";
                            cueDiv.style.top = "auto";
                            cueDiv.style.bottom = "2px"
                        }
                        if (overrides.fontFamily && overrides.fontFamily !== "default") {
                            if (overrides.fontFamily === "small-caps") {
                                cueDiv.firstChild.style.fontVariant = "small-caps"
                            } else {
                                cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily]
                            }
                        }
                    }
                }
                ;
                return TextTrackDisplay
            }(_component2["default"]);
            _component2["default"].registerComponent("TextTrackDisplay", TextTrackDisplay);
            exports["default"] = TextTrackDisplay
        }
        , {
            5: 5,
            83: 83,
            95: 95
        }],
        69: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var trackToJson_ = function trackToJson_(track) {
                var ret = ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce(function(acc, prop, i) {
                    if (track[prop]) {
                        acc[prop] = track[prop]
                    }
                    return acc
                }, {
                    cues: track.cues && Array.prototype.map.call(track.cues, function(cue) {
                        return {
                            startTime: cue.startTime,
                            endTime: cue.endTime,
                            text: cue.text,
                            id: cue.id
                        }
                    })
                });
                return ret
            };
            var textTracksToJson = function textTracksToJson(tech) {
                var trackEls = tech.$$("track");
                var trackObjs = Array.prototype.map.call(trackEls, function(t) {
                    return t.track
                });
                var tracks = Array.prototype.map.call(trackEls, function(trackEl) {
                    var json = trackToJson_(trackEl.track);
                    if (trackEl.src) {
                        json.src = trackEl.src
                    }
                    return json
                });
                return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function(track) {
                    return trackObjs.indexOf(track) === -1
                }).map(trackToJson_))
            };
            var jsonToTextTracks = function jsonToTextTracks(json, tech) {
                json.forEach(function(track) {
                    var addedTrack = tech.addRemoteTextTrack(track).track;
                    if (!track.src && track.cues) {
                        track.cues.forEach(function(cue) {
                            return addedTrack.addCue(cue)
                        })
                    }
                });
                return tech.textTracks()
            };
            exports["default"] = {
                textTracksToJson: textTracksToJson,
                jsonToTextTracks: jsonToTextTracks,
                trackToJson_: trackToJson_
            }
        }
        , {}],
        70: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackList = _dereq_(74);
            var _trackList2 = _interopRequireDefault(_trackList);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TextTrackList = function(_TrackList) {
                _inherits(TextTrackList, _TrackList);
                function TextTrackList() {
                    var _this, _ret;
                    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    _classCallCheck(this, TextTrackList);
                    var list = void 0;
                    if (browser.IS_IE8) {
                        list = _document2["default"].createElement("custom");
                        for (var prop in _trackList2["default"].prototype) {
                            if (prop !== "constructor") {
                                list[prop] = _trackList2["default"].prototype[prop]
                            }
                        }
                        for (var _prop in TextTrackList.prototype) {
                            if (_prop !== "constructor") {
                                list[_prop] = TextTrackList.prototype[_prop]
                            }
                        }
                    }
                    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)),
                    _this);
                    return _ret = list,
                    _possibleConstructorReturn(_this, _ret)
                }
                TextTrackList.prototype.addTrack_ = function addTrack_(track) {
                    _TrackList.prototype.addTrack_.call(this, track);
                    track.addEventListener("modechange", Fn.bind(this, function() {
                        this.trigger("change")
                    }))
                }
                ;
                return TextTrackList
            }(_trackList2["default"]);
            exports["default"] = TextTrackList
        }
        , {
            74: 74,
            78: 78,
            83: 83,
            94: 94
        }],
        71: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _dom = _dereq_(81);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _obj = _dereq_(88);
            var Obj = _interopRequireWildcard(_obj);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var LOCAL_STORAGE_KEY = "vjs-text-track-settings";
            var COLOR_BLACK = ["#000", "Black"];
            var COLOR_BLUE = ["#00F", "Blue"];
            var COLOR_CYAN = ["#0FF", "Cyan"];
            var COLOR_GREEN = ["#0F0", "Green"];
            var COLOR_MAGENTA = ["#F0F", "Magenta"];
            var COLOR_RED = ["#F00", "Red"];
            var COLOR_WHITE = ["#FFF", "White"];
            var COLOR_YELLOW = ["#FF0", "Yellow"];
            var OPACITY_OPAQUE = ["1", "Opaque"];
            var OPACITY_SEMI = ["0.5", "Semi-Transparent"];
            var OPACITY_TRANS = ["0", "Transparent"];
            var selectConfigs = {
                backgroundColor: {
                    selector: ".vjs-bg-color > select",
                    id: "captions-background-color-%s",
                    label: "Color",
                    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
                },
                backgroundOpacity: {
                    selector: ".vjs-bg-opacity > select",
                    id: "captions-background-opacity-%s",
                    label: "Transparency",
                    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
                },
                color: {
                    selector: ".vjs-fg-color > select",
                    id: "captions-foreground-color-%s",
                    label: "Color",
                    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
                },
                edgeStyle: {
                    selector: ".vjs-edge-style > select",
                    id: "%s",
                    label: "Text Edge Style",
                    options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Dropshadow"]]
                },
                fontFamily: {
                    selector: ".vjs-font-family > select",
                    id: "captions-font-family-%s",
                    label: "Font Family",
                    options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]]
                },
                fontPercent: {
                    selector: ".vjs-font-percent > select",
                    id: "captions-font-size-%s",
                    label: "Font Size",
                    options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]],
                    "default": 2,
                    parser: function parser(v) {
                        return v === "1.00" ? null : Number(v)
                    }
                },
                textOpacity: {
                    selector: ".vjs-text-opacity > select",
                    id: "captions-foreground-opacity-%s",
                    label: "Transparency",
                    options: [OPACITY_OPAQUE, OPACITY_SEMI]
                },
                windowColor: {
                    selector: ".vjs-window-color > select",
                    id: "captions-window-color-%s",
                    label: "Color"
                },
                windowOpacity: {
                    selector: ".vjs-window-opacity > select",
                    id: "captions-window-opacity-%s",
                    label: "Transparency",
                    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
                }
            };
            selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;
            function parseOptionValue(value, parser) {
                if (parser) {
                    value = parser(value)
                }
                if (value && value !== "none") {
                    return value
                }
            }
            function getSelectedOptionValue(el, parser) {
                var value = el.options[el.options.selectedIndex].value;
                return parseOptionValue(value, parser)
            }
            function setSelectedOption(el, value, parser) {
                if (!value) {
                    return
                }
                for (var i = 0; i < el.options.length; i++) {
                    if (parseOptionValue(el.options[i].value, parser) === value) {
                        el.selectedIndex = i;
                        break
                    }
                }
            }
            var TextTrackSettings = function(_Component) {
                _inherits(TextTrackSettings, _Component);
                function TextTrackSettings(player, options) {
                    _classCallCheck(this, TextTrackSettings);
                    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));
                    _this.setDefaults();
                    _this.hide();
                    _this.updateDisplay = Fn.bind(_this, _this.updateDisplay);
                    if (options.persistTextTrackSettings === undefined) {
                        _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings
                    }
                    _this.on(_this.$(".vjs-done-button"), "click", function() {
                        _this.saveSettings();
                        _this.hide()
                    });
                    _this.on(_this.$(".vjs-default-button"), "click", function() {
                        _this.setDefaults();
                        _this.updateDisplay()
                    });
                    Obj.each(selectConfigs, function(config) {
                        _this.on(_this.$(config.selector), "change", _this.updateDisplay)
                    });
                    if (_this.options_.persistTextTrackSettings) {
                        _this.restoreSettings()
                    }
                    return _this
                }
                TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
                    var _this2 = this;
                    var config = selectConfigs[key];
                    var id = config.id.replace("%s", this.id_);
                    return [(0,
                    _dom.createEl)("label", {
                        className: "vjs-label",
                        textContent: config.label
                    }, {
                        "for": id
                    }), (0,
                    _dom.createEl)("select", {
                        id: id
                    }, undefined, config.options.map(function(o) {
                        return (0,
                        _dom.createEl)("option", {
                            textContent: _this2.localize(o[1]),
                            value: o[0]
                        })
                    }))]
                }
                ;
                TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
                    var legend = (0,
                    _dom.createEl)("legend", {
                        textContent: this.localize("Text")
                    });
                    var select = this.createElSelect_("color");
                    var opacity = (0,
                    _dom.createEl)("span", {
                        className: "vjs-text-opacity vjs-opacity"
                    }, undefined, this.createElSelect_("textOpacity"));
                    return (0,
                    _dom.createEl)("fieldset", {
                        className: "vjs-fg-color vjs-tracksetting"
                    }, undefined, [legend].concat(select, opacity))
                }
                ;
                TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
                    var legend = (0,
                    _dom.createEl)("legend", {
                        textContent: this.localize("Background")
                    });
                    var select = this.createElSelect_("backgroundColor");
                    var opacity = (0,
                    _dom.createEl)("span", {
                        className: "vjs-bg-opacity vjs-opacity"
                    }, undefined, this.createElSelect_("backgroundOpacity"));
                    return (0,
                    _dom.createEl)("fieldset", {
                        className: "vjs-bg-color vjs-tracksetting"
                    }, undefined, [legend].concat(select, opacity))
                }
                ;
                TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
                    var legend = (0,
                    _dom.createEl)("legend", {
                        textContent: this.localize("Window")
                    });
                    var select = this.createElSelect_("windowColor");
                    var opacity = (0,
                    _dom.createEl)("span", {
                        className: "vjs-window-opacity vjs-opacity"
                    }, undefined, this.createElSelect_("windowOpacity"));
                    return (0,
                    _dom.createEl)("fieldset", {
                        className: "vjs-window-color vjs-tracksetting"
                    }, undefined, [legend].concat(select, opacity))
                }
                ;
                TextTrackSettings.prototype.createElColors_ = function createElColors_() {
                    return (0,
                    _dom.createEl)("div", {
                        className: "vjs-tracksettings-colors"
                    }, undefined, [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()])
                }
                ;
                TextTrackSettings.prototype.createElFont_ = function createElFont_() {
                    var fontPercent = (0,
                    _dom.createEl)("div", {
                        className: "vjs-font-percent vjs-tracksetting"
                    }, undefined, this.createElSelect_("fontPercent"));
                    var edgeStyle = (0,
                    _dom.createEl)("div", {
                        className: "vjs-edge-style vjs-tracksetting"
                    }, undefined, this.createElSelect_("edgeStyle"));
                    var fontFamily = (0,
                    _dom.createEl)("div", {
                        className: "vjs-font-family vjs-tracksetting"
                    }, undefined, this.createElSelect_("fontFamily"));
                    return (0,
                    _dom.createEl)("div", {
                        className: "vjs-tracksettings-font"
                    }, undefined, [fontPercent, edgeStyle, fontFamily])
                }
                ;
                TextTrackSettings.prototype.createElControls_ = function createElControls_() {
                    var defaultsButton = (0,
                    _dom.createEl)("button", {
                        className: "vjs-default-button",
                        textContent: this.localize("Defaults")
                    });
                    var doneButton = (0,
                    _dom.createEl)("button", {
                        className: "vjs-done-button",
                        textContent: "Done"
                    });
                    return (0,
                    _dom.createEl)("div", {
                        className: "vjs-tracksettings-controls"
                    }, undefined, [defaultsButton, doneButton])
                }
                ;
                TextTrackSettings.prototype.createEl = function createEl() {
                    var settings = (0,
                    _dom.createEl)("div", {
                        className: "vjs-tracksettings"
                    }, undefined, [this.createElColors_(), this.createElFont_(), this.createElControls_()]);
                    var heading = (0,
                    _dom.createEl)("div", {
                        className: "vjs-control-text",
                        id: "TTsettingsDialogLabel-" + this.id_,
                        textContent: "Caption Settings Dialog"
                    }, {
                        "aria-level": "1",
                        role: "heading"
                    });
                    var description = (0,
                    _dom.createEl)("div", {
                        className: "vjs-control-text",
                        id: "TTsettingsDialogDescription-" + this.id_,
                        textContent: "Beginning of dialog window. Escape will cancel and close the window."
                    });
                    var doc = (0,
                    _dom.createEl)("div", undefined, {
                        role: "document"
                    }, [heading, description, settings]);
                    return (0,
                    _dom.createEl)("div", {
                        className: "vjs-caption-settings vjs-modal-overlay",
                        tabIndex: -1
                    }, {
                        role: "dialog",
                        "aria-labelledby": heading.id,
                        "aria-describedby": description.id
                    }, doc)
                }
                ;
                TextTrackSettings.prototype.getValues = function getValues() {
                    var _this3 = this;
                    return Obj.reduce(selectConfigs, function(accum, config, key) {
                        var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);
                        if (value !== undefined) {
                            accum[key] = value
                        }
                        return accum
                    }, {})
                }
                ;
                TextTrackSettings.prototype.setValues = function setValues(values) {
                    var _this4 = this;
                    Obj.each(selectConfigs, function(config, key) {
                        setSelectedOption(_this4.$(config.selector), values[key], config.parser)
                    })
                }
                ;
                TextTrackSettings.prototype.setDefaults = function setDefaults() {
                    var _this5 = this;
                    Obj.each(selectConfigs, function(config) {
                        var index = config.hasOwnProperty("default") ? config["default"] : 0;
                        _this5.$(config.selector).selectedIndex = index
                    })
                }
                ;
                TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
                    var values = void 0;
                    try {
                        values = JSON.parse(_window2["default"].localStorage.getItem(LOCAL_STORAGE_KEY))
                    } catch (err) {
                        _log2["default"].warn(err)
                    }
                    if (values) {
                        this.setValues(values)
                    }
                }
                ;
                TextTrackSettings.prototype.saveSettings = function saveSettings() {
                    if (!this.options_.persistTextTrackSettings) {
                        return
                    }
                    var values = this.getValues();
                    try {
                        if (Object.keys(values).length) {
                            _window2["default"].localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values))
                        } else {
                            _window2["default"].localStorage.removeItem(LOCAL_STORAGE_KEY)
                        }
                    } catch (err) {
                        _log2["default"].warn(err)
                    }
                }
                ;
                TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
                    var ttDisplay = this.player_.getChild("textTrackDisplay");
                    if (ttDisplay) {
                        ttDisplay.updateDisplay()
                    }
                }
                ;
                return TextTrackSettings
            }(_component2["default"]);
            _component2["default"].registerComponent("TextTrackSettings", TextTrackSettings);
            exports["default"] = TextTrackSettings
        }
        , {
            5: 5,
            81: 81,
            83: 83,
            86: 86,
            88: 88,
            95: 95
        }],
        72: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _textTrackCueList = _dereq_(67);
            var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _trackEnums = _dereq_(73);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _track = _dereq_(75);
            var _track2 = _interopRequireDefault(_track);
            var _url = _dereq_(92);
            var _xhr = _dereq_(105);
            var _xhr2 = _interopRequireDefault(_xhr);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var parseCues = function parseCues(srcContent, track) {
                var parser = new _window2["default"].WebVTT.Parser(_window2["default"],_window2["default"].vttjs,_window2["default"].WebVTT.StringDecoder());
                var errors = [];
                parser.oncue = function(cue) {
                    track.addCue(cue)
                }
                ;
                parser.onparsingerror = function(error) {
                    errors.push(error)
                }
                ;
                parser.onflush = function() {
                    track.trigger({
                        type: "loadeddata",
                        target: track
                    })
                }
                ;
                parser.parse(srcContent);
                if (errors.length > 0) {
                    if (_window2["default"].console && _window2["default"].console.groupCollapsed) {
                        _window2["default"].console.groupCollapsed("Text Track parsing errors for " + track.src)
                    }
                    errors.forEach(function(error) {
                        return _log2["default"].error(error)
                    });
                    if (_window2["default"].console && _window2["default"].console.groupEnd) {
                        _window2["default"].console.groupEnd()
                    }
                }
                parser.flush()
            };
            var loadTrack = function loadTrack(src, track) {
                var opts = {
                    uri: src
                };
                var crossOrigin = (0,
                _url.isCrossOrigin)(src);
                if (crossOrigin) {
                    opts.cors = crossOrigin
                }
                (0,
                _xhr2["default"])(opts, Fn.bind(this, function(err, response, responseBody) {
                    if (err) {
                        return _log2["default"].error(err, response)
                    }
                    track.loaded_ = true;
                    if (typeof _window2["default"].WebVTT !== "function") {
                        if (track.tech_) {
                            (function() {
                                var loadHandler = function loadHandler() {
                                    return parseCues(responseBody, track)
                                };
                                track.tech_.on("vttjsloaded", loadHandler);
                                track.tech_.on("vttjserror", function() {
                                    _log2["default"].error("vttjs failed to load, stopping trying to process " + track.src);
                                    track.tech_.off("vttjsloaded", loadHandler)
                                })
                            }
                            )()
                        }
                    } else {
                        parseCues(responseBody, track)
                    }
                }))
            };
            var TextTrack = function(_Track) {
                _inherits(TextTrack, _Track);
                function TextTrack() {
                    var _this, _ret2;
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    _classCallCheck(this, TextTrack);
                    if (!options.tech) {
                        throw new Error("A tech was not provided.")
                    }
                    var settings = (0,
                    _mergeOptions2["default"])(options, {
                        kind: _trackEnums.TextTrackKind[options.kind] || "subtitles",
                        language: options.language || options.srclang || ""
                    });
                    var mode = _trackEnums.TextTrackMode[settings.mode] || "disabled";
                    var default_ = settings["default"];
                    if (settings.kind === "metadata" || settings.kind === "chapters") {
                        mode = "hidden"
                    }
                    var tt = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)),
                    _this);
                    tt.tech_ = settings.tech;
                    if (browser.IS_IE8) {
                        for (var prop in TextTrack.prototype) {
                            if (prop !== "constructor") {
                                tt[prop] = TextTrack.prototype[prop]
                            }
                        }
                    }
                    tt.cues_ = [];
                    tt.activeCues_ = [];
                    var cues = new _textTrackCueList2["default"](tt.cues_);
                    var activeCues = new _textTrackCueList2["default"](tt.activeCues_);
                    var changed = false;
                    var timeupdateHandler = Fn.bind(tt, function() {
                        this.activeCues;
                        if (changed) {
                            this.trigger("cuechange");
                            changed = false
                        }
                    });
                    if (mode !== "disabled") {
                        tt.tech_.on("timeupdate", timeupdateHandler)
                    }
                    Object.defineProperty(tt, "default", {
                        get: function get() {
                            return default_
                        },
                        set: function set() {}
                    });
                    Object.defineProperty(tt, "mode", {
                        get: function get() {
                            return mode
                        },
                        set: function set(newMode) {
                            if (!_trackEnums.TextTrackMode[newMode]) {
                                return
                            }
                            mode = newMode;
                            if (mode === "showing") {
                                this.tech_.on("timeupdate", timeupdateHandler)
                            }
                            this.trigger("modechange")
                        }
                    });
                    Object.defineProperty(tt, "cues", {
                        get: function get() {
                            if (!this.loaded_) {
                                return null
                            }
                            return cues
                        },
                        set: function set() {}
                    });
                    Object.defineProperty(tt, "activeCues", {
                        get: function get() {
                            if (!this.loaded_) {
                                return null
                            }
                            if (this.cues.length === 0) {
                                return activeCues
                            }
                            var ct = this.tech_.currentTime();
                            var active = [];
                            for (var i = 0, l = this.cues.length; i < l; i++) {
                                var cue = this.cues[i];
                                if (cue.startTime <= ct && cue.endTime >= ct) {
                                    active.push(cue)
                                } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + .5 >= ct) {
                                    active.push(cue)
                                }
                            }
                            changed = false;
                            if (active.length !== this.activeCues_.length) {
                                changed = true
                            } else {
                                for (var _i = 0; _i < active.length; _i++) {
                                    if (this.activeCues_.indexOf(active[_i]) === -1) {
                                        changed = true
                                    }
                                }
                            }
                            this.activeCues_ = active;
                            activeCues.setCues_(this.activeCues_);
                            return activeCues
                        },
                        set: function set() {}
                    });
                    if (settings.src) {
                        tt.src = settings.src;
                        loadTrack(settings.src, tt)
                    } else {
                        tt.loaded_ = true
                    }
                    return _ret2 = tt,
                    _possibleConstructorReturn(_this, _ret2)
                }
                TextTrack.prototype.addCue = function addCue(cue) {
                    var tracks = this.tech_.textTracks();
                    if (tracks) {
                        for (var i = 0; i < tracks.length; i++) {
                            if (tracks[i] !== this) {
                                tracks[i].removeCue(cue)
                            }
                        }
                    }
                    this.cues_.push(cue);
                    this.cues.setCues_(this.cues_)
                }
                ;
                TextTrack.prototype.removeCue = function removeCue(_removeCue) {
                    var removed = false;
                    for (var i = 0, l = this.cues_.length; i < l; i++) {
                        var cue = this.cues_[i];
                        if (cue === _removeCue) {
                            this.cues_.splice(i, 1);
                            removed = true
                        }
                    }
                    if (removed) {
                        this.cues.setCues_(this.cues_)
                    }
                }
                ;
                return TextTrack
            }(_track2["default"]);
            TextTrack.prototype.allowedEvents_ = {
                cuechange: "cuechange"
            };
            exports["default"] = TextTrack
        }
        , {
            105: 105,
            67: 67,
            73: 73,
            75: 75,
            78: 78,
            83: 83,
            86: 86,
            87: 87,
            92: 92,
            95: 95
        }],
        73: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var VideoTrackKind = exports.VideoTrackKind = {
                alternative: "alternative",
                captions: "captions",
                main: "main",
                sign: "sign",
                subtitles: "subtitles",
                commentary: "commentary"
            };
            var AudioTrackKind = exports.AudioTrackKind = {
                alternative: "alternative",
                descriptions: "descriptions",
                main: "main",
                "main-desc": "main-desc",
                translation: "translation",
                commentary: "commentary"
            };
            var TextTrackKind = exports.TextTrackKind = {
                subtitles: "subtitles",
                captions: "captions",
                descriptions: "descriptions",
                chapters: "chapters",
                metadata: "metadata"
            };
            var TextTrackMode = exports.TextTrackMode = {
                disabled: "disabled",
                hidden: "hidden",
                showing: "showing"
            }
        }
        , {}],
        74: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _eventTarget = _dereq_(42);
            var _eventTarget2 = _interopRequireDefault(_eventTarget);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var TrackList = function(_EventTarget) {
                _inherits(TrackList, _EventTarget);
                function TrackList() {
                    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    var _ret;
                    var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                    _classCallCheck(this, TrackList);
                    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));
                    if (!list) {
                        list = _this;
                        if (browser.IS_IE8) {
                            list = _document2["default"].createElement("custom");
                            for (var prop in TrackList.prototype) {
                                if (prop !== "constructor") {
                                    list[prop] = TrackList.prototype[prop]
                                }
                            }
                        }
                    }
                    list.tracks_ = [];
                    Object.defineProperty(list, "length", {
                        get: function get() {
                            return this.tracks_.length
                        }
                    });
                    for (var i = 0; i < tracks.length; i++) {
                        list.addTrack_(tracks[i])
                    }
                    return _ret = list,
                    _possibleConstructorReturn(_this, _ret)
                }
                TrackList.prototype.addTrack_ = function addTrack_(track) {
                    var index = this.tracks_.length;
                    if (!("" + index in this)) {
                        Object.defineProperty(this, index, {
                            get: function get() {
                                return this.tracks_[index]
                            }
                        })
                    }
                    if (this.tracks_.indexOf(track) === -1) {
                        this.tracks_.push(track);
                        this.trigger({
                            track: track,
                            type: "addtrack"
                        })
                    }
                }
                ;
                TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
                    var track = void 0;
                    for (var i = 0, l = this.length; i < l; i++) {
                        if (this[i] === rtrack) {
                            track = this[i];
                            if (track.off) {
                                track.off()
                            }
                            this.tracks_.splice(i, 1);
                            break
                        }
                    }
                    if (!track) {
                        return
                    }
                    this.trigger({
                        track: track,
                        type: "removetrack"
                    })
                }
                ;
                TrackList.prototype.getTrackById = function getTrackById(id) {
                    var result = null;
                    for (var i = 0, l = this.length; i < l; i++) {
                        var track = this[i];
                        if (track.id === id) {
                            result = track;
                            break
                        }
                    }
                    return result
                }
                ;
                return TrackList
            }(_eventTarget2["default"]);
            TrackList.prototype.allowedEvents_ = {
                change: "change",
                addtrack: "addtrack",
                removetrack: "removetrack"
            };
            for (var event in TrackList.prototype.allowedEvents_) {
                TrackList.prototype["on" + event] = null
            }
            exports["default"] = TrackList
        }
        , {
            42: 42,
            78: 78,
            94: 94
        }],
        75: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _guid = _dereq_(85);
            var Guid = _interopRequireWildcard(_guid);
            var _eventTarget = _dereq_(42);
            var _eventTarget2 = _interopRequireDefault(_eventTarget);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var Track = function(_EventTarget) {
                _inherits(Track, _EventTarget);
                function Track() {
                    var _ret;
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    _classCallCheck(this, Track);
                    var _this = _possibleConstructorReturn(this, _EventTarget.call(this));
                    var track = _this;
                    if (browser.IS_IE8) {
                        track = _document2["default"].createElement("custom");
                        for (var prop in Track.prototype) {
                            if (prop !== "constructor") {
                                track[prop] = Track.prototype[prop]
                            }
                        }
                    }
                    var trackProps = {
                        id: options.id || "vjs_track_" + Guid.newGUID(),
                        kind: options.kind || "",
                        label: options.label || "",
                        language: options.language || ""
                    };
                    var _loop = function _loop(key) {
                        Object.defineProperty(track, key, {
                            get: function get() {
                                return trackProps[key]
                            },
                            set: function set() {}
                        })
                    };
                    for (var key in trackProps) {
                        _loop(key)
                    }
                    return _ret = track,
                    _possibleConstructorReturn(_this, _ret)
                }
                return Track
            }(_eventTarget2["default"]);
            exports["default"] = Track
        }
        , {
            42: 42,
            78: 78,
            85: 85,
            94: 94
        }],
        76: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackList = _dereq_(74);
            var _trackList2 = _interopRequireDefault(_trackList);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var disableOthers = function disableOthers(list, track) {
                for (var i = 0; i < list.length; i++) {
                    if (track.id === list[i].id) {
                        continue
                    }
                    list[i].selected = false
                }
            };
            var VideoTrackList = function(_TrackList) {
                _inherits(VideoTrackList, _TrackList);
                function VideoTrackList() {
                    var _this, _ret;
                    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    _classCallCheck(this, VideoTrackList);
                    var list = void 0;
                    for (var i = tracks.length - 1; i >= 0; i--) {
                        if (tracks[i].selected) {
                            disableOthers(tracks, tracks[i]);
                            break
                        }
                    }
                    if (browser.IS_IE8) {
                        list = _document2["default"].createElement("custom");
                        for (var prop in _trackList2["default"].prototype) {
                            if (prop !== "constructor") {
                                list[prop] = _trackList2["default"].prototype[prop]
                            }
                        }
                        for (var _prop in VideoTrackList.prototype) {
                            if (_prop !== "constructor") {
                                list[_prop] = VideoTrackList.prototype[_prop]
                            }
                        }
                    }
                    list = (_this = _possibleConstructorReturn(this, _TrackList.call(this, tracks, list)),
                    _this);
                    list.changing_ = false;
                    Object.defineProperty(list, "selectedIndex", {
                        get: function get() {
                            for (var _i = 0; _i < this.length; _i++) {
                                if (this[_i].selected) {
                                    return _i
                                }
                            }
                            return -1
                        },
                        set: function set() {}
                    });
                    return _ret = list,
                    _possibleConstructorReturn(_this, _ret)
                }
                VideoTrackList.prototype.addTrack_ = function addTrack_(track) {
                    var _this2 = this;
                    if (track.selected) {
                        disableOthers(this, track)
                    }
                    _TrackList.prototype.addTrack_.call(this, track);
                    if (!track.addEventListener) {
                        return
                    }
                    track.addEventListener("selectedchange", function() {
                        if (_this2.changing_) {
                            return
                        }
                        _this2.changing_ = true;
                        disableOthers(_this2, track);
                        _this2.changing_ = false;
                        _this2.trigger("change")
                    })
                }
                ;
                VideoTrackList.prototype.addTrack = function addTrack(track) {
                    this.addTrack_(track)
                }
                ;
                VideoTrackList.prototype.removeTrack = function removeTrack(track) {
                    _TrackList.prototype.removeTrack_.call(this, track)
                }
                ;
                return VideoTrackList
            }(_trackList2["default"]);
            exports["default"] = VideoTrackList
        }
        , {
            74: 74,
            78: 78,
            94: 94
        }],
        77: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _trackEnums = _dereq_(73);
            var _track = _dereq_(75);
            var _track2 = _interopRequireDefault(_track);
            var _mergeOptions = _dereq_(87);
            var _mergeOptions2 = _interopRequireDefault(_mergeOptions);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function")
                }
            }
            function _possibleConstructorReturn(self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return call && (typeof call === "object" || typeof call === "function") ? call : self
            }
            function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass)
                    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
            }
            var VideoTrack = function(_Track) {
                _inherits(VideoTrack, _Track);
                function VideoTrack() {
                    var _this, _ret;
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    _classCallCheck(this, VideoTrack);
                    var settings = (0,
                    _mergeOptions2["default"])(options, {
                        kind: _trackEnums.VideoTrackKind[options.kind] || ""
                    });
                    var track = (_this = _possibleConstructorReturn(this, _Track.call(this, settings)),
                    _this);
                    var selected = false;
                    if (browser.IS_IE8) {
                        for (var prop in VideoTrack.prototype) {
                            if (prop !== "constructor") {
                                track[prop] = VideoTrack.prototype[prop]
                            }
                        }
                    }
                    Object.defineProperty(track, "selected", {
                        get: function get() {
                            return selected
                        },
                        set: function set(newSelected) {
                            if (typeof newSelected !== "boolean" || newSelected === selected) {
                                return
                            }
                            selected = newSelected;
                            this.trigger("selectedchange")
                        }
                    });
                    if (settings.selected) {
                        track.selected = settings.selected
                    }
                    return _ret = track,
                    _possibleConstructorReturn(_this, _ret)
                }
                return VideoTrack
            }(_track2["default"]);
            exports["default"] = VideoTrack
        }
        , {
            73: 73,
            75: 75,
            78: 78,
            87: 87
        }],
        78: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.BACKGROUND_SIZE_SUPPORTED = exports.TOUCH_ENABLED = exports.IS_ANY_SAFARI = exports.IS_SAFARI = exports.IE_VERSION = exports.IS_IE8 = exports.IS_CHROME = exports.IS_EDGE = exports.IS_FIREFOX = exports.IS_NATIVE_ANDROID = exports.IS_OLD_ANDROID = exports.ANDROID_VERSION = exports.IS_ANDROID = exports.IOS_VERSION = exports.IS_IOS = exports.IS_IPOD = exports.IS_IPHONE = exports.IS_IPAD = undefined;
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            var USER_AGENT = _window2["default"].navigator && _window2["default"].navigator.userAgent || "";
            var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
            var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;
            var IS_IPAD = exports.IS_IPAD = /iPad/i.test(USER_AGENT);
            var IS_IPHONE = exports.IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
            var IS_IPOD = exports.IS_IPOD = /iPod/i.test(USER_AGENT);
            var IS_IOS = exports.IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;
            var IOS_VERSION = exports.IOS_VERSION = function() {
                var match = USER_AGENT.match(/OS (\d+)_/i);
                if (match && match[1]) {
                    return match[1]
                }
                return null
            }();
            var IS_ANDROID = exports.IS_ANDROID = /Android/i.test(USER_AGENT);
            var ANDROID_VERSION = exports.ANDROID_VERSION = function() {
                var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
                if (!match) {
                    return null
                }
                var major = match[1] && parseFloat(match[1]);
                var minor = match[2] && parseFloat(match[2]);
                if (major && minor) {
                    return parseFloat(match[1] + "." + match[2])
                } else if (major) {
                    return major
                }
                return null
            }();
            var IS_OLD_ANDROID = exports.IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
            var IS_NATIVE_ANDROID = exports.IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;
            var IS_FIREFOX = exports.IS_FIREFOX = /Firefox/i.test(USER_AGENT);
            var IS_EDGE = exports.IS_EDGE = /Edge/i.test(USER_AGENT);
            var IS_CHROME = exports.IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
            var IS_IE8 = exports.IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
            var IE_VERSION = exports.IE_VERSION = function(result) {
                return result && parseFloat(result[1])
            }(/MSIE\s(\d+)\.\d/.exec(USER_AGENT));
            var IS_SAFARI = exports.IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
            var IS_ANY_SAFARI = exports.IS_ANY_SAFARI = IS_SAFARI || IS_IOS;
            var TOUCH_ENABLED = exports.TOUCH_ENABLED = Dom.isReal() && ("ontouchstart"in _window2["default"] || _window2["default"].DocumentTouch && _window2["default"].document instanceof _window2["default"].DocumentTouch);
            var BACKGROUND_SIZE_SUPPORTED = exports.BACKGROUND_SIZE_SUPPORTED = Dom.isReal() && "backgroundSize"in _window2["default"].document.createElement("video").style
        }
        , {
            81: 81,
            95: 95
        }],
        79: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.bufferedPercent = bufferedPercent;
            var _timeRanges = _dereq_(90);
            function bufferedPercent(buffered, duration) {
                var bufferedDuration = 0;
                var start = void 0;
                var end = void 0;
                if (!duration) {
                    return 0
                }
                if (!buffered || !buffered.length) {
                    buffered = (0,
                    _timeRanges.createTimeRange)(0, 0)
                }
                for (var i = 0; i < buffered.length; i++) {
                    start = buffered.start(i);
                    end = buffered.end(i);
                    if (end > duration) {
                        end = duration
                    }
                    bufferedDuration += end - start
                }
                return bufferedDuration / duration
            }
        }
        , {
            90: 90
        }],
        80: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports["default"] = computedStyle;
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function computedStyle(el, prop) {
                if (!el || !prop) {
                    return ""
                }
                if (typeof _window2["default"].getComputedStyle === "function") {
                    var cs = _window2["default"].getComputedStyle(el);
                    return cs ? cs[prop] : ""
                }
                return el.currentStyle[prop] || ""
            }
        }
        , {
            95: 95
        }],
        81: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.$$ = exports.$ = undefined;
            var _templateObject = _taggedTemplateLiteralLoose(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ", " to ", "."], ["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ", " to ", "."]);
            exports.isReal = isReal;
            exports.isEl = isEl;
            exports.getEl = getEl;
            exports.createEl = createEl;
            exports.textContent = textContent;
            exports.insertElFirst = insertElFirst;
            exports.getElData = getElData;
            exports.hasElData = hasElData;
            exports.removeElData = removeElData;
            exports.hasElClass = hasElClass;
            exports.addElClass = addElClass;
            exports.removeElClass = removeElClass;
            exports.toggleElClass = toggleElClass;
            exports.setElAttributes = setElAttributes;
            exports.getElAttributes = getElAttributes;
            exports.getAttribute = getAttribute;
            exports.setAttribute = setAttribute;
            exports.removeAttribute = removeAttribute;
            exports.blockTextSelection = blockTextSelection;
            exports.unblockTextSelection = unblockTextSelection;
            exports.findElPosition = findElPosition;
            exports.getPointerPosition = getPointerPosition;
            exports.isTextNode = isTextNode;
            exports.emptyEl = emptyEl;
            exports.normalizeContent = normalizeContent;
            exports.appendContent = appendContent;
            exports.insertContent = insertContent;
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _guid = _dereq_(85);
            var Guid = _interopRequireWildcard(_guid);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _tsml = _dereq_(98);
            var _tsml2 = _interopRequireDefault(_tsml);
            var _obj = _dereq_(88);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _taggedTemplateLiteralLoose(strings, raw) {
                strings.raw = raw;
                return strings
            }
            function isNonBlankString(str) {
                return typeof str === "string" && /\S/.test(str)
            }
            function throwIfWhitespace(str) {
                if (/\s/.test(str)) {
                    throw new Error("class has illegal whitespace characters")
                }
            }
            function classRegExp(className) {
                return new RegExp("(^|\\s)" + className + "($|\\s)")
            }
            function isReal() {
                return _document2["default"] === _window2["default"].document && typeof _document2["default"].createElement !== "undefined"
            }
            function isEl(value) {
                return (0,
                _obj.isObject)(value) && value.nodeType === 1
            }
            function createQuerier(method) {
                return function(selector, context) {
                    if (!isNonBlankString(selector)) {
                        return _document2["default"][method](null)
                    }
                    if (isNonBlankString(context)) {
                        context = _document2["default"].querySelector(context)
                    }
                    var ctx = isEl(context) ? context : _document2["default"];
                    return ctx[method] && ctx[method](selector)
                }
            }
            function getEl(id) {
                if (id.indexOf("#") === 0) {
                    id = id.slice(1)
                }
                return _document2["default"].getElementById(id)
            }
            function createEl() {
                var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "div";
                var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var content = arguments[3];
                var el = _document2["default"].createElement(tagName);
                Object.getOwnPropertyNames(properties).forEach(function(propName) {
                    var val = properties[propName];
                    if (propName.indexOf("aria-") !== -1 || propName === "role" || propName === "type") {
                        _log2["default"].warn((0,
                        _tsml2["default"])(_templateObject, propName, val));
                        el.setAttribute(propName, val)
                    } else if (propName === "textContent") {
                        textContent(el, val)
                    } else {
                        el[propName] = val
                    }
                });
                Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
                    el.setAttribute(attrName, attributes[attrName])
                });
                if (content) {
                    appendContent(el, content)
                }
                return el
            }
            function textContent(el, text) {
                if (typeof el.textContent === "undefined") {
                    el.innerText = text
                } else {
                    el.textContent = text
                }
                return el
            }
            function insertElFirst(child, parent) {
                if (parent.firstChild) {
                    parent.insertBefore(child, parent.firstChild)
                } else {
                    parent.appendChild(child)
                }
            }
            var elData = {};
            var elIdAttr = "vdata" + (new Date).getTime();
            function getElData(el) {
                var id = el[elIdAttr];
                if (!id) {
                    id = el[elIdAttr] = Guid.newGUID()
                }
                if (!elData[id]) {
                    elData[id] = {}
                }
                return elData[id]
            }
            function hasElData(el) {
                var id = el[elIdAttr];
                if (!id) {
                    return false
                }
                return !!Object.getOwnPropertyNames(elData[id]).length
            }
            function removeElData(el) {
                var id = el[elIdAttr];
                if (!id) {
                    return
                }
                delete elData[id];
                try {
                    delete el[elIdAttr]
                } catch (e) {
                    if (el.removeAttribute) {
                        el.removeAttribute(elIdAttr)
                    } else {
                        el[elIdAttr] = null
                    }
                }
            }
            function hasElClass(element, classToCheck) {
                throwIfWhitespace(classToCheck);
                if (element.classList) {
                    return element.classList.contains(classToCheck)
                }
                return classRegExp(classToCheck).test(element.className)
            }
            function addElClass(element, classToAdd) {
                if (element.classList) {
                    element.classList.add(classToAdd)
                } else if (!hasElClass(element, classToAdd)) {
                    element.className = (element.className + " " + classToAdd).trim()
                }
                return element
            }
            function removeElClass(element, classToRemove) {
                if (element.classList) {
                    element.classList.remove(classToRemove)
                } else {
                    throwIfWhitespace(classToRemove);
                    element.className = element.className.split(/\s+/).filter(function(c) {
                        return c !== classToRemove
                    }).join(" ")
                }
                return element
            }
            function toggleElClass(element, classToToggle, predicate) {
                var has = hasElClass(element, classToToggle);
                if (typeof predicate === "function") {
                    predicate = predicate(element, classToToggle)
                }
                if (typeof predicate !== "boolean") {
                    predicate = !has
                }
                if (predicate === has) {
                    return
                }
                if (predicate) {
                    addElClass(element, classToToggle)
                } else {
                    removeElClass(element, classToToggle)
                }
                return element
            }
            function setElAttributes(el, attributes) {
                Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
                    var attrValue = attributes[attrName];
                    if (attrValue === null || typeof attrValue === "undefined" || attrValue === false) {
                        el.removeAttribute(attrName)
                    } else {
                        el.setAttribute(attrName, attrValue === true ? "" : attrValue)
                    }
                })
            }
            function getElAttributes(tag) {
                var obj = {};
                var knownBooleans = "," + "autoplay,controls,loop,muted,default" + ",";
                if (tag && tag.attributes && tag.attributes.length > 0) {
                    var attrs = tag.attributes;
                    for (var i = attrs.length - 1; i >= 0; i--) {
                        var attrName = attrs[i].name;
                        var attrVal = attrs[i].value;
                        if (typeof tag[attrName] === "boolean" || knownBooleans.indexOf("," + attrName + ",") !== -1) {
                            attrVal = attrVal !== null ? true : false
                        }
                        obj[attrName] = attrVal
                    }
                }
                return obj
            }
            function getAttribute(el, attribute) {
                return el.getAttribute(attribute)
            }
            function setAttribute(el, attribute, value) {
                el.setAttribute(attribute, value)
            }
            function removeAttribute(el, attribute) {
                el.removeAttribute(attribute)
            }
            function blockTextSelection() {
                _document2["default"].body.focus();
                _document2["default"].onselectstart = function() {
                    return false
                }
            }
            function unblockTextSelection() {
                _document2["default"].onselectstart = function() {
                    return true
                }
            }
            function findElPosition(el) {
                var box = void 0;
                if (el.getBoundingClientRect && el.parentNode) {
                    box = el.getBoundingClientRect()
                }
                if (!box) {
                    return {
                        left: 0,
                        top: 0
                    }
                }
                var docEl = _document2["default"].documentElement;
                var body = _document2["default"].body;
                var clientLeft = docEl.clientLeft || body.clientLeft || 0;
                var scrollLeft = _window2["default"].pageXOffset || body.scrollLeft;
                var left = box.left + scrollLeft - clientLeft;
                var clientTop = docEl.clientTop || body.clientTop || 0;
                var scrollTop = _window2["default"].pageYOffset || body.scrollTop;
                var top = box.top + scrollTop - clientTop;
                return {
                    left: Math.round(left),
                    top: Math.round(top)
                }
            }
            function getPointerPosition(el, event) {
                var position = {};
                var box = findElPosition(el);
                var boxW = el.offsetWidth;
                var boxH = el.offsetHeight;
                var boxY = box.top;
                var boxX = box.left;
                var pageY = event.pageY;
                var pageX = event.pageX;
                if (event.changedTouches) {
                    pageX = event.changedTouches[0].pageX;
                    pageY = event.changedTouches[0].pageY
                }
                position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
                position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));
                return position
            }
            function isTextNode(value) {
                return (0,
                _obj.isObject)(value) && value.nodeType === 3
            }
            function emptyEl(el) {
                while (el.firstChild) {
                    el.removeChild(el.firstChild)
                }
                return el
            }
            function normalizeContent(content) {
                if (typeof content === "function") {
                    content = content()
                }
                return (Array.isArray(content) ? content : [content]).map(function(value) {
                    if (typeof value === "function") {
                        value = value()
                    }
                    if (isEl(value) || isTextNode(value)) {
                        return value
                    }
                    if (typeof value === "string" && /\S/.test(value)) {
                        return _document2["default"].createTextNode(value)
                    }
                }).filter(function(value) {
                    return value
                })
            }
            function appendContent(el, content) {
                normalizeContent(content).forEach(function(node) {
                    return el.appendChild(node)
                });
                return el
            }
            function insertContent(el, content) {
                return appendContent(emptyEl(el), content)
            }
            var $ = exports.$ = createQuerier("querySelector");
            var $$ = exports.$$ = createQuerier("querySelectorAll")
        }
        , {
            85: 85,
            86: 86,
            88: 88,
            94: 94,
            95: 95,
            98: 98
        }],
        82: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.fixEvent = fixEvent;
            exports.on = on;
            exports.off = off;
            exports.trigger = trigger;
            exports.one = one;
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _guid = _dereq_(85);
            var Guid = _interopRequireWildcard(_guid);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _cleanUpEvents(elem, type) {
                var data = Dom.getElData(elem);
                if (data.handlers[type].length === 0) {
                    delete data.handlers[type];
                    if (elem.removeEventListener) {
                        elem.removeEventListener(type, data.dispatcher, false)
                    } else if (elem.detachEvent) {
                        elem.detachEvent("on" + type, data.dispatcher)
                    }
                }
                if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
                    delete data.handlers;
                    delete data.dispatcher;
                    delete data.disabled
                }
                if (Object.getOwnPropertyNames(data).length === 0) {
                    Dom.removeElData(elem)
                }
            }
            function _handleMultipleEvents(fn, elem, types, callback) {
                types.forEach(function(type) {
                    fn(elem, type, callback)
                })
            }
            function fixEvent(event) {
                function returnTrue() {
                    return true
                }
                function returnFalse() {
                    return false
                }
                if (!event || !event.isPropagationStopped) {
                    (function() {
                        var old = event || _window2["default"].event;
                        event = {};
                        for (var key in old) {
                            if (key !== "layerX" && key !== "layerY" && key !== "keyLocation" && key !== "webkitMovementX" && key !== "webkitMovementY") {
                                if (!(key === "returnValue" && old.preventDefault)) {
                                    event[key] = old[key]
                                }
                            }
                        }
                        if (!event.target) {
                            event.target = event.srcElement || _document2["default"]
                        }
                        if (!event.relatedTarget) {
                            event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement
                        }
                        event.preventDefault = function() {
                            if (old.preventDefault) {
                                old.preventDefault()
                            }
                            event.returnValue = false;
                            old.returnValue = false;
                            event.defaultPrevented = true
                        }
                        ;
                        event.defaultPrevented = false;
                        event.stopPropagation = function() {
                            if (old.stopPropagation) {
                                old.stopPropagation()
                            }
                            event.cancelBubble = true;
                            old.cancelBubble = true;
                            event.isPropagationStopped = returnTrue
                        }
                        ;
                        event.isPropagationStopped = returnFalse;
                        event.stopImmediatePropagation = function() {
                            if (old.stopImmediatePropagation) {
                                old.stopImmediatePropagation()
                            }
                            event.isImmediatePropagationStopped = returnTrue;
                            event.stopPropagation()
                        }
                        ;
                        event.isImmediatePropagationStopped = returnFalse;
                        if (event.clientX !== null && event.clientX !== undefined) {
                            var doc = _document2["default"].documentElement;
                            var body = _document2["default"].body;
                            event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                            event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
                        }
                        event.which = event.charCode || event.keyCode;
                        if (event.button !== null && event.button !== undefined) {
                            event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0
                        }
                    }
                    )()
                }
                return event
            }
            function on(elem, type, fn) {
                if (Array.isArray(type)) {
                    return _handleMultipleEvents(on, elem, type, fn)
                }
                var data = Dom.getElData(elem);
                if (!data.handlers) {
                    data.handlers = {}
                }
                if (!data.handlers[type]) {
                    data.handlers[type] = []
                }
                if (!fn.guid) {
                    fn.guid = Guid.newGUID()
                }
                data.handlers[type].push(fn);
                if (!data.dispatcher) {
                    data.disabled = false;
                    data.dispatcher = function(event, hash) {
                        if (data.disabled) {
                            return
                        }
                        event = fixEvent(event);
                        var handlers = data.handlers[event.type];
                        if (handlers) {
                            var handlersCopy = handlers.slice(0);
                            for (var m = 0, n = handlersCopy.length; m < n; m++) {
                                if (event.isImmediatePropagationStopped()) {
                                    break
                                } else {
                                    try {
                                        handlersCopy[m].call(elem, event, hash)
                                    } catch (e) {
                                        _log2["default"].error(e)
                                    }
                                }
                            }
                        }
                    }
                }
                if (data.handlers[type].length === 1) {
                    if (elem.addEventListener) {
                        elem.addEventListener(type, data.dispatcher, false)
                    } else if (elem.attachEvent) {
                        elem.attachEvent("on" + type, data.dispatcher)
                    }
                }
            }
            function off(elem, type, fn) {
                if (!Dom.hasElData(elem)) {
                    return
                }
                var data = Dom.getElData(elem);
                if (!data.handlers) {
                    return
                }
                if (Array.isArray(type)) {
                    return _handleMultipleEvents(off, elem, type, fn)
                }
                var removeType = function removeType(t) {
                    data.handlers[t] = [];
                    _cleanUpEvents(elem, t)
                };
                if (!type) {
                    for (var t in data.handlers) {
                        removeType(t)
                    }
                    return
                }
                var handlers = data.handlers[type];
                if (!handlers) {
                    return
                }
                if (!fn) {
                    removeType(type);
                    return
                }
                if (fn.guid) {
                    for (var n = 0; n < handlers.length; n++) {
                        if (handlers[n].guid === fn.guid) {
                            handlers.splice(n--, 1)
                        }
                    }
                }
                _cleanUpEvents(elem, type)
            }
            function trigger(elem, event, hash) {
                var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
                var parent = elem.parentNode || elem.ownerDocument;
                if (typeof event === "string") {
                    event = {
                        type: event,
                        target: elem
                    }
                }
                event = fixEvent(event);
                if (elemData.dispatcher) {
                    elemData.dispatcher.call(elem, event, hash)
                }
                if (parent && !event.isPropagationStopped() && event.bubbles === true) {
                    trigger.call(null, parent, event, hash)
                } else if (!parent && !event.defaultPrevented) {
                    var targetData = Dom.getElData(event.target);
                    if (event.target[event.type]) {
                        targetData.disabled = true;
                        if (typeof event.target[event.type] === "function") {
                            event.target[event.type]()
                        }
                        targetData.disabled = false
                    }
                }
                return !event.defaultPrevented
            }
            function one(elem, type, fn) {
                if (Array.isArray(type)) {
                    return _handleMultipleEvents(one, elem, type, fn)
                }
                var func = function func() {
                    off(elem, type, func);
                    fn.apply(this, arguments)
                };
                func.guid = fn.guid = fn.guid || Guid.newGUID();
                on(elem, type, func)
            }
        }
        , {
            81: 81,
            85: 85,
            86: 86,
            94: 94,
            95: 95
        }],
        83: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.throttle = exports.bind = undefined;
            var _guid = _dereq_(85);
            var bind = exports.bind = function bind(context, fn, uid) {
                if (!fn.guid) {
                    fn.guid = (0,
                    _guid.newGUID)()
                }
                var bound = function bound() {
                    return fn.apply(context, arguments)
                };
                bound.guid = uid ? uid + "_" + fn.guid : fn.guid;
                return bound
            }
            ;
            var throttle = exports.throttle = function throttle(fn, wait) {
                var last = Date.now();
                var throttled = function throttled() {
                    var now = Date.now();
                    if (now - last >= wait) {
                        fn.apply(undefined, arguments);
                        last = now
                    }
                };
                return throttled
            }
        }
        , {
            85: 85
        }],
        84: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            function formatTime(seconds) {
                var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;
                seconds = seconds < 0 ? 0 : seconds;
                var s = Math.floor(seconds % 60);
                var m = Math.floor(seconds / 60 % 60);
                var h = Math.floor(seconds / 3600);
                var gm = Math.floor(guide / 60 % 60);
                var gh = Math.floor(guide / 3600);
                if (isNaN(seconds) || seconds === Infinity) {
                    h = m = s = "-"
                }
                h = h > 0 || gh > 0 ? h + ":" : "";
                m = ((h || gm >= 10) && m < 10 ? "0" + m : m) + ":";
                s = s < 10 ? "0" + s : s;
                return h + m + s
            }
            exports["default"] = formatTime
        }
        , {}],
        85: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.newGUID = newGUID;
            var _guid = 1;
            function newGUID() {
                return _guid++
            }
        }
        , {}],
        86: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.logByType = undefined;
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _browser = _dereq_(78);
            var _obj = _dereq_(88);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            var log = void 0;
            var logByType = exports.logByType = function logByType(type, args) {
                var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;
                if (type !== "log") {
                    args.unshift(type.toUpperCase() + ":")
                }
                log.history.push(args);
                args.unshift("VIDEOJS:");
                var fn = _window2["default"].console && _window2["default"].console[type];
                if (!fn) {
                    return
                }
                if (stringify) {
                    args = args.map(function(a) {
                        if ((0,
                        _obj.isObject)(a) || Array.isArray(a)) {
                            try {
                                return JSON.stringify(a)
                            } catch (x) {
                                return String(a)
                            }
                        }
                        return String(a)
                    }).join(" ")
                }
                if (!fn.apply) {
                    fn(args)
                } else {
                    fn[Array.isArray(args) ? "apply" : "call"](_window2["default"].console, args)
                }
            }
            ;
            log = function log() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key]
                }
                logByType("log", args)
            }
            ;
            log.history = [];
            log.error = function() {
                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2]
                }
                return logByType("error", args)
            }
            ;
            log.warn = function() {
                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = arguments[_key3]
                }
                return logByType("warn", args)
            }
            ;
            exports["default"] = log
        }
        , {
            78: 78,
            88: 88,
            95: 95
        }],
        87: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports["default"] = mergeOptions;
            var _obj = _dereq_(88);
            function mergeOptions() {
                var result = {};
                for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
                    sources[_key] = arguments[_key]
                }
                sources.forEach(function(source) {
                    if (!source) {
                        return
                    }
                    (0,
                    _obj.each)(source, function(value, key) {
                        if (!(0,
                        _obj.isPlain)(value)) {
                            result[key] = value;
                            return
                        }
                        if (!(0,
                        _obj.isPlain)(result[key])) {
                            result[key] = {}
                        }
                        result[key] = mergeOptions(result[key], value)
                    })
                });
                return result
            }
        }
        , {
            88: 88
        }],
        88: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj
            }
            : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
            }
            ;
            exports.each = each;
            exports.reduce = reduce;
            exports.assign = assign;
            exports.isObject = isObject;
            exports.isPlain = isPlain;
            var toString = Object.prototype.toString;
            function each(object, fn) {
                Object.keys(object).forEach(function(key) {
                    return fn(object[key], key)
                })
            }
            function reduce(object, fn) {
                var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                return Object.keys(object).reduce(function(accum, key) {
                    return fn(accum, object[key], key)
                }, initial)
            }
            function assign(target) {
                for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    sources[_key - 1] = arguments[_key]
                }
                if (Object.assign) {
                    return Object.assign.apply(Object, [target].concat(sources))
                }
                sources.forEach(function(source) {
                    if (!source) {
                        return
                    }
                    each(source, function(value, key) {
                        target[key] = value
                    })
                });
                return target
            }
            function isObject(value) {
                return !!value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object"
            }
            function isPlain(value) {
                return isObject(value) && toString.call(value) === "[object Object]" && value.constructor === Object
            }
        }
        , {}],
        89: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.setTextContent = exports.createStyleElement = undefined;
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            var createStyleElement = exports.createStyleElement = function createStyleElement(className) {
                var style = _document2["default"].createElement("style");
                style.className = className;
                return style
            }
            ;
            var setTextContent = exports.setTextContent = function setTextContent(el, content) {
                if (el.styleSheet) {
                    el.styleSheet.cssText = content
                } else {
                    el.textContent = content
                }
            }
        }
        , {
            94: 94
        }],
        90: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.createTimeRange = undefined;
            exports.createTimeRanges = createTimeRanges;
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            function rangeCheck(fnName, index, maxIndex) {
                if (index < 0 || index > maxIndex) {
                    throw new Error("Failed to execute '" + fnName + "' on 'TimeRanges': The index provided (" + index + ") is greater than or equal to the maximum bound (" + maxIndex + ").")
                }
            }
            function getRange(fnName, valueIndex, ranges, rangeIndex) {
                if (rangeIndex === undefined) {
                    _log2["default"].warn("DEPRECATED: Function '" + fnName + "' on 'TimeRanges' called without an index argument.");
                    rangeIndex = 0
                }
                rangeCheck(fnName, rangeIndex, ranges.length - 1);
                return ranges[rangeIndex][valueIndex]
            }
            function createTimeRangesObj(ranges) {
                if (ranges === undefined || ranges.length === 0) {
                    return {
                        length: 0,
                        start: function start() {
                            throw new Error("This TimeRanges object is empty")
                        },
                        end: function end() {
                            throw new Error("This TimeRanges object is empty")
                        }
                    }
                }
                return {
                    length: ranges.length,
                    start: getRange.bind(null, "start", 0, ranges),
                    end: getRange.bind(null, "end", 1, ranges)
                }
            }
            function createTimeRanges(start, end) {
                if (Array.isArray(start)) {
                    return createTimeRangesObj(start)
                } else if (start === undefined || end === undefined) {
                    return createTimeRangesObj()
                }
                return createTimeRangesObj([[start, end]])
            }
            exports.createTimeRange = createTimeRanges
        }
        , {
            86: 86
        }],
        91: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            function toTitleCase(string) {
                if (typeof string !== "string") {
                    return string
                }
                return string.charAt(0).toUpperCase() + string.slice(1)
            }
            exports["default"] = toTitleCase
        }
        , {}],
        92: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            exports.isCrossOrigin = exports.getFileExtension = exports.getAbsoluteURL = exports.parseUrl = undefined;
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            var parseUrl = exports.parseUrl = function parseUrl(url) {
                var props = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"];
                var a = _document2["default"].createElement("a");
                a.href = url;
                var addToBody = a.host === "" && a.protocol !== "file:";
                var div = void 0;
                if (addToBody) {
                    div = _document2["default"].createElement("div");
                    div.innerHTML = '<a href="' + url + '"></a>';
                    a = div.firstChild;
                    div.setAttribute("style", "display:none; position:absolute;");
                    _document2["default"].body.appendChild(div)
                }
                var details = {};
                for (var i = 0; i < props.length; i++) {
                    details[props[i]] = a[props[i]]
                }
                if (details.protocol === "http:") {
                    details.host = details.host.replace(/:80$/, "")
                }
                if (details.protocol === "https:") {
                    details.host = details.host.replace(/:443$/, "")
                }
                if (addToBody) {
                    _document2["default"].body.removeChild(div)
                }
                return details
            }
            ;
            var getAbsoluteURL = exports.getAbsoluteURL = function getAbsoluteURL(url) {
                if (!url.match(/^https?:\/\//)) {
                    var div = _document2["default"].createElement("div");
                    div.innerHTML = '<a href="' + url + '">x</a>';
                    url = div.firstChild.href
                }
                return url
            }
            ;
            var getFileExtension = exports.getFileExtension = function getFileExtension(path) {
                if (typeof path === "string") {
                    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
                    var pathParts = splitPathRe.exec(path);
                    if (pathParts) {
                        return pathParts.pop().toLowerCase()
                    }
                }
                return ""
            }
            ;
            var isCrossOrigin = exports.isCrossOrigin = function isCrossOrigin(url) {
                var winLoc = _window2["default"].location;
                var urlInfo = parseUrl(url);
                var srcProtocol = urlInfo.protocol === ":" ? winLoc.protocol : urlInfo.protocol;
                var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
                return crossOrigin
            }
        }
        , {
            94: 94,
            95: 95
        }],
        93: [function(_dereq_, module, exports) {
            "use strict";
            exports.__esModule = true;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                return typeof obj
            }
            : function(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
            }
            ;
            var _window = _dereq_(95);
            var _window2 = _interopRequireDefault(_window);
            var _document = _dereq_(94);
            var _document2 = _interopRequireDefault(_document);
            var _setup = _dereq_(56);
            var setup = _interopRequireWildcard(_setup);
            var _stylesheet = _dereq_(89);
            var stylesheet = _interopRequireWildcard(_stylesheet);
            var _component = _dereq_(5);
            var _component2 = _interopRequireDefault(_component);
            var _eventTarget = _dereq_(42);
            var _eventTarget2 = _interopRequireDefault(_eventTarget);
            var _events = _dereq_(82);
            var Events = _interopRequireWildcard(_events);
            var _player = _dereq_(51);
            var _player2 = _interopRequireDefault(_player);
            var _plugins = _dereq_(52);
            var _plugins2 = _interopRequireDefault(_plugins);
            var _mergeOptions2 = _dereq_(87);
            var _mergeOptions3 = _interopRequireDefault(_mergeOptions2);
            var _fn = _dereq_(83);
            var Fn = _interopRequireWildcard(_fn);
            var _textTrack = _dereq_(72);
            var _textTrack2 = _interopRequireDefault(_textTrack);
            var _audioTrack = _dereq_(64);
            var _audioTrack2 = _interopRequireDefault(_audioTrack);
            var _videoTrack = _dereq_(77);
            var _videoTrack2 = _interopRequireDefault(_videoTrack);
            var _timeRanges = _dereq_(90);
            var _formatTime = _dereq_(84);
            var _formatTime2 = _interopRequireDefault(_formatTime);
            var _log = _dereq_(86);
            var _log2 = _interopRequireDefault(_log);
            var _dom = _dereq_(81);
            var Dom = _interopRequireWildcard(_dom);
            var _browser = _dereq_(78);
            var browser = _interopRequireWildcard(_browser);
            var _url = _dereq_(92);
            var Url = _interopRequireWildcard(_url);
            var _obj = _dereq_(88);
            var _computedStyle = _dereq_(80);
            var _computedStyle2 = _interopRequireDefault(_computedStyle);
            var _extend = _dereq_(43);
            var _extend2 = _interopRequireDefault(_extend);
            var _xhr = _dereq_(105);
            var _xhr2 = _interopRequireDefault(_xhr);
            var _tech = _dereq_(62);
            var _tech2 = _interopRequireDefault(_tech);
            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                newObj[key] = obj[key]
                        }
                    }
                    newObj["default"] = obj;
                    return newObj
                }
            }
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    "default": obj
                }
            }
            if (typeof HTMLVideoElement === "undefined" && Dom.isReal()) {
                _document2["default"].createElement("video");
                _document2["default"].createElement("audio");
                _document2["default"].createElement("track")
            }
            function videojs(id, options, ready) {
                var tag = void 0;
                if (typeof id === "string") {
                    if (id.indexOf("#") === 0) {
                        id = id.slice(1)
                    }
                    if (videojs.getPlayers()[id]) {
                        if (options) {
                            _log2["default"].warn('Player "' + id + '" is already initialised. Options will not be applied.')
                        }
                        if (ready) {
                            videojs.getPlayers()[id].ready(ready)
                        }
                        return videojs.getPlayers()[id]
                    }
                    tag = Dom.getEl(id)
                } else {
                    tag = id
                }
                if (!tag || !tag.nodeName) {
                    throw new TypeError("The element or ID supplied is not valid. (videojs)")
                }
                if (tag.player || _player2["default"].players[tag.playerId]) {
                    return tag.player || _player2["default"].players[tag.playerId]
                }
                options = options || {};
                videojs.hooks("beforesetup").forEach(function(hookFunction) {
                    var opts = hookFunction(tag, (0,
                    _mergeOptions3["default"])(options));
                    if (!(0,
                    _obj.isObject)(opts) || Array.isArray(opts)) {
                        _log2["default"].error("please return an object in beforesetup hooks");
                        return
                    }
                    options = (0,
                    _mergeOptions3["default"])(options, opts)
                });
                var PlayerComponent = _component2["default"].getComponent("Player");
                var player = new PlayerComponent(tag,options,ready);
                videojs.hooks("setup").forEach(function(hookFunction) {
                    return hookFunction(player)
                });
                return player
            }
            videojs.hooks_ = {};
            videojs.hooks = function(type, fn) {
                videojs.hooks_[type] = videojs.hooks_[type] || [];
                if (fn) {
                    videojs.hooks_[type] = videojs.hooks_[type].concat(fn)
                }
                return videojs.hooks_[type]
            }
            ;
            videojs.hook = function(type, fn) {
                videojs.hooks(type, fn)
            }
            ;
            videojs.removeHook = function(type, fn) {
                var index = videojs.hooks(type).indexOf(fn);
                if (index <= -1) {
                    return false
                }
                videojs.hooks_[type] = videojs.hooks_[type].slice();
                videojs.hooks_[type].splice(index, 1);
                return true
            }
            ;
            if (_window2["default"].VIDEOJS_NO_DYNAMIC_STYLE !== true && Dom.isReal()) {
                var style = Dom.$(".vjs-styles-defaults");
                if (!style) {
                    style = stylesheet.createStyleElement("vjs-styles-defaults");
                    var head = Dom.$("head");
                    if (head) {
                        head.insertBefore(style, head.firstChild)
                    }
                    stylesheet.setTextContent(style, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ")
                }
            }
            setup.autoSetupTimeout(1, videojs);
            videojs.VERSION = "5.16.0";
            videojs.options = _player2["default"].prototype.options_;
            videojs.getPlayers = function() {
                return _player2["default"].players
            }
            ;
            videojs.players = _player2["default"].players;
            videojs.getComponent = _component2["default"].getComponent;
            videojs.registerComponent = function(name, comp) {
                if (_tech2["default"].isTech(comp)) {
                    _log2["default"].warn("The " + name + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)")
                }
                _component2["default"].registerComponent.call(_component2["default"], name, comp)
            }
            ;
            videojs.getTech = _tech2["default"].getTech;
            videojs.registerTech = _tech2["default"].registerTech;
            videojs.browser = browser;
            videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;
            videojs.extend = _extend2["default"];
            videojs.mergeOptions = _mergeOptions3["default"];
            videojs.bind = Fn.bind;
            videojs.plugin = _plugins2["default"];
            videojs.addLanguage = function(code, data) {
                var _mergeOptions;
                code = ("" + code).toLowerCase();
                videojs.options.languages = (0,
                _mergeOptions3["default"])(videojs.options.languages, (_mergeOptions = {},
                _mergeOptions[code] = data,
                _mergeOptions));
                return videojs.options.languages[code]
            }
            ;
            videojs.log = _log2["default"];
            videojs.createTimeRange = videojs.createTimeRanges = _timeRanges.createTimeRanges;
            videojs.formatTime = _formatTime2["default"];
            videojs.parseUrl = Url.parseUrl;
            videojs.isCrossOrigin = Url.isCrossOrigin;
            videojs.EventTarget = _eventTarget2["default"];
            videojs.on = Events.on;
            videojs.one = Events.one;
            videojs.off = Events.off;
            videojs.trigger = Events.trigger;
            videojs.xhr = _xhr2["default"];
            videojs.TextTrack = _textTrack2["default"];
            videojs.AudioTrack = _audioTrack2["default"];
            videojs.VideoTrack = _videoTrack2["default"];
            videojs.isEl = Dom.isEl;
            videojs.isTextNode = Dom.isTextNode;
            videojs.createEl = Dom.createEl;
            videojs.hasClass = Dom.hasElClass;
            videojs.addClass = Dom.addElClass;
            videojs.removeClass = Dom.removeElClass;
            videojs.toggleClass = Dom.toggleElClass;
            videojs.setAttributes = Dom.setElAttributes;
            videojs.getAttributes = Dom.getElAttributes;
            videojs.emptyEl = Dom.emptyEl;
            videojs.appendContent = Dom.appendContent;
            videojs.insertContent = Dom.insertContent;
            videojs.computedStyle = _computedStyle2["default"];
            if (typeof define === "function" && define.amd) {
                define("videojs", [], function() {
                    return videojs
                })
            } else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && (typeof module === "undefined" ? "undefined" : _typeof(module)) === "object") {
                module.exports = videojs
            }
            exports["default"] = videojs
        }
        , {
            105: 105,
            42: 42,
            43: 43,
            5: 5,
            51: 51,
            52: 52,
            56: 56,
            62: 62,
            64: 64,
            72: 72,
            77: 77,
            78: 78,
            80: 80,
            81: 81,
            82: 82,
            83: 83,
            84: 84,
            86: 86,
            87: 87,
            88: 88,
            89: 89,
            90: 90,
            92: 92,
            94: 94,
            95: 95
        }],
        94: [function(_dereq_, module, exports) {
            (function(global) {
                var topLevel = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
                var minDoc = _dereq_(96);
                if (typeof document !== "undefined") {
                    module.exports = document
                } else {
                    var doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
                    if (!doccy) {
                        doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc
                    }
                    module.exports = doccy
                }
            }
            ).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }
        , {
            96: 96
        }],
        95: [function(_dereq_, module, exports) {
            (function(global) {
                if (typeof window !== "undefined") {
                    module.exports = window
                } else if (typeof global !== "undefined") {
                    module.exports = global
                } else if (typeof self !== "undefined") {
                    module.exports = self
                } else {
                    module.exports = {}
                }
            }
            ).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
        }
        , {}],
        96: [function(_dereq_, module, exports) {}
        , {}],
        97: [function(_dereq_, module, exports) {
            module.exports = SafeParseTuple;
            function SafeParseTuple(obj, reviver) {
                var json;
                var error = null;
                try {
                    json = JSON.parse(obj, reviver)
                } catch (err) {
                    error = err
                }
                return [error, json]
            }
        }
        , {}],
        98: [function(_dereq_, module, exports) {
            function clean(s) {
                return s.replace(/\n\r?\s*/g, "")
            }
            module.exports = function tsml(sa) {
                var s = ""
                  , i = 0;
                for (; i < arguments.length; i++)
                    s += clean(sa[i]) + (arguments[i + 1] || "");
                return s
            }
        }
        , {}],
        99: [function(_dereq_, module, exports) {
            module.exports = {
                WebVTT: _dereq_(100).WebVTT,
                VTTCue: _dereq_(101).VTTCue,
                VTTRegion: _dereq_(103).VTTRegion
            }
        }
        , {
            100: 100,
            101: 101,
            103: 103
        }],
        100: [function(_dereq_, module, exports) {
            (function(global) {
                var _objCreate = Object.create || function() {
                    function F() {}
                    return function(o) {
                        if (arguments.length !== 1) {
                            throw new Error("Object.create shim only accepts one parameter.")
                        }
                        F.prototype = o;
                        return new F
                    }
                }();
                function ParsingError(errorData, message) {
                    this.name = "ParsingError";
                    this.code = errorData.code;
                    this.message = message || errorData.message
                }
                ParsingError.prototype = _objCreate(Error.prototype);
                ParsingError.prototype.constructor = ParsingError;
                ParsingError.Errors = {
                    BadSignature: {
                        code: 0,
                        message: "Malformed WebVTT signature."
                    },
                    BadTimeStamp: {
                        code: 1,
                        message: "Malformed time stamp."
                    }
                };
                function parseTimeStamp(input) {
                    function computeSeconds(h, m, s, f) {
                        return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1e3
                    }
                    var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
                    if (!m) {
                        return null
                    }
                    if (m[3]) {
                        return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4])
                    } else if (m[1] > 59) {
                        return computeSeconds(m[1], m[2], 0, m[4])
                    } else {
                        return computeSeconds(0, m[1], m[2], m[4])
                    }
                }
                function Settings() {
                    this.values = _objCreate(null)
                }
                Settings.prototype = {
                    set: function(k, v) {
                        if (!this.get(k) && v !== "") {
                            this.values[k] = v
                        }
                    },
                    get: function(k, dflt, defaultKey) {
                        if (defaultKey) {
                            return this.has(k) ? this.values[k] : dflt[defaultKey]
                        }
                        return this.has(k) ? this.values[k] : dflt
                    },
                    has: function(k) {
                        return k in this.values
                    },
                    alt: function(k, v, a) {
                        for (var n = 0; n < a.length; ++n) {
                            if (v === a[n]) {
                                this.set(k, v);
                                break
                            }
                        }
                    },
                    integer: function(k, v) {
                        if (/^-?\d+$/.test(v)) {
                            this.set(k, parseInt(v, 10))
                        }
                    },
                    percent: function(k, v) {
                        var m;
                        if (m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
                            v = parseFloat(v);
                            if (v >= 0 && v <= 100) {
                                this.set(k, v);
                                return true
                            }
                        }
                        return false
                    }
                };
                function parseOptions(input, callback, keyValueDelim, groupDelim) {
                    var groups = groupDelim ? input.split(groupDelim) : [input];
                    for (var i in groups) {
                        if (typeof groups[i] !== "string") {
                            continue
                        }
                        var kv = groups[i].split(keyValueDelim);
                        if (kv.length !== 2) {
                            continue
                        }
                        var k = kv[0];
                        var v = kv[1];
                        callback(k, v)
                    }
                }
                function parseCue(input, cue, regionList) {
                    var oInput = input;
                    function consumeTimeStamp() {
                        var ts = parseTimeStamp(input);
                        if (ts === null) {
                            throw new ParsingError(ParsingError.Errors.BadTimeStamp,"Malformed timestamp: " + oInput)
                        }
                        input = input.replace(/^[^\sa-zA-Z-]+/, "");
                        return ts
                    }
                    function consumeCueSettings(input, cue) {
                        var settings = new Settings;
                        parseOptions(input, function(k, v) {
                            switch (k) {
                            case "region":
                                for (var i = regionList.length - 1; i >= 0; i--) {
                                    if (regionList[i].id === v) {
                                        settings.set(k, regionList[i].region);
                                        break
                                    }
                                }
                                break;
                            case "vertical":
                                settings.alt(k, v, ["rl", "lr"]);
                                break;
                            case "line":
                                var vals = v.split(",")
                                  , vals0 = vals[0];
                                settings.integer(k, vals0);
                                settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
                                settings.alt(k, vals0, ["auto"]);
                                if (vals.length === 2) {
                                    settings.alt("lineAlign", vals[1], ["start", "middle", "end"])
                                }
                                break;
                            case "position":
                                vals = v.split(",");
                                settings.percent(k, vals[0]);
                                if (vals.length === 2) {
                                    settings.alt("positionAlign", vals[1], ["start", "middle", "end"])
                                }
                                break;
                            case "size":
                                settings.percent(k, v);
                                break;
                            case "align":
                                settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
                                break
                            }
                        }, /:/, /\s/);
                        cue.region = settings.get("region", null);
                        cue.vertical = settings.get("vertical", "");
                        cue.line = settings.get("line", "auto");
                        cue.lineAlign = settings.get("lineAlign", "start");
                        cue.snapToLines = settings.get("snapToLines", true);
                        cue.size = settings.get("size", 100);
                        cue.align = settings.get("align", "middle");
                        cue.position = settings.get("position", {
                            start: 0,
                            left: 0,
                            middle: 50,
                            end: 100,
                            right: 100
                        }, cue.align);
                        cue.positionAlign = settings.get("positionAlign", {
                            start: "start",
                            left: "start",
                            middle: "middle",
                            end: "end",
                            right: "end"
                        }, cue.align)
                    }
                    function skipWhitespace() {
                        input = input.replace(/^\s+/, "")
                    }
                    skipWhitespace();
                    cue.startTime = consumeTimeStamp();
                    skipWhitespace();
                    if (input.substr(0, 3) !== "--\x3e") {
                        throw new ParsingError(ParsingError.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '--\x3e'): " + oInput)
                    }
                    input = input.substr(3);
                    skipWhitespace();
                    cue.endTime = consumeTimeStamp();
                    skipWhitespace();
                    consumeCueSettings(input, cue)
                }
                var ESCAPE = {
                    "&amp;": "&",
                    "&lt;": "<",
                    "&gt;": ">",
                    "&lrm;": "‎",
                    "&rlm;": "‏",
                    "&nbsp;": " "
                };
                var TAG_NAME = {
                    c: "span",
                    i: "i",
                    b: "b",
                    u: "u",
                    ruby: "ruby",
                    rt: "rt",
                    v: "span",
                    lang: "span"
                };
                var TAG_ANNOTATION = {
                    v: "title",
                    lang: "lang"
                };
                var NEEDS_PARENT = {
                    rt: "ruby"
                };
                function parseContent(window, input) {
                    function nextToken() {
                        if (!input) {
                            return null
                        }
                        function consume(result) {
                            input = input.substr(result.length);
                            return result
                        }
                        var m = input.match(/^([^<]*)(<[^>]+>?)?/);
                        return consume(m[1] ? m[1] : m[2])
                    }
                    function unescape1(e) {
                        return ESCAPE[e]
                    }
                    function unescape(s) {
                        while (m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/)) {
                            s = s.replace(m[0], unescape1)
                        }
                        return s
                    }
                    function shouldAdd(current, element) {
                        return !NEEDS_PARENT[element.localName] || NEEDS_PARENT[element.localName] === current.localName
                    }
                    function createElement(type, annotation) {
                        var tagName = TAG_NAME[type];
                        if (!tagName) {
                            return null
                        }
                        var element = window.document.createElement(tagName);
                        element.localName = tagName;
                        var name = TAG_ANNOTATION[type];
                        if (name && annotation) {
                            element[name] = annotation.trim()
                        }
                        return element
                    }
                    var rootDiv = window.document.createElement("div"), current = rootDiv, t, tagStack = [];
                    while ((t = nextToken()) !== null) {
                        if (t[0] === "<") {
                            if (t[1] === "/") {
                                if (tagStack.length && tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
                                    tagStack.pop();
                                    current = current.parentNode
                                }
                                continue
                            }
                            var ts = parseTimeStamp(t.substr(1, t.length - 2));
                            var node;
                            if (ts) {
                                node = window.document.createProcessingInstruction("timestamp", ts);
                                current.appendChild(node);
                                continue
                            }
                            var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                            if (!m) {
                                continue
                            }
                            node = createElement(m[1], m[3]);
                            if (!node) {
                                continue
                            }
                            if (!shouldAdd(current, node)) {
                                continue
                            }
                            if (m[2]) {
                                node.className = m[2].substr(1).replace(".", " ")
                            }
                            tagStack.push(m[1]);
                            current.appendChild(node);
                            current = node;
                            continue
                        }
                        current.appendChild(window.document.createTextNode(unescape(t)))
                    }
                    return rootDiv
                }
                var strongRTLChars = [1470, 1472, 1475, 1478, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1520, 1521, 1522, 1523, 1524, 1544, 1547, 1549, 1563, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1645, 1646, 1647, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1765, 1766, 1774, 1775, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1807, 1808, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1969, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2e3, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2036, 2037, 2042, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2074, 2084, 2088, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2142, 2208, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 8207, 64285, 64287, 64288, 64289, 64290, 64291, 64292, 64293, 64294, 64295, 64296, 64298, 64299, 64300, 64301, 64302, 64303, 64304, 64305, 64306, 64307, 64308, 64309, 64310, 64312, 64313, 64314, 64315, 64316, 64318, 64320, 64321, 64323, 64324, 64326, 64327, 64328, 64329, 64330, 64331, 64332, 64333, 64334, 64335, 64336, 64337, 64338, 64339, 64340, 64341, 64342, 64343, 64344, 64345, 64346, 64347, 64348, 64349, 64350, 64351, 64352, 64353, 64354, 64355, 64356, 64357, 64358, 64359, 64360, 64361, 64362, 64363, 64364, 64365, 64366, 64367, 64368, 64369, 64370, 64371, 64372, 64373, 64374, 64375, 64376, 64377, 64378, 64379, 64380, 64381, 64382, 64383, 64384, 64385, 64386, 64387, 64388, 64389, 64390, 64391, 64392, 64393, 64394, 64395, 64396, 64397, 64398, 64399, 64400, 64401, 64402, 64403, 64404, 64405, 64406, 64407, 64408, 64409, 64410, 64411, 64412, 64413, 64414, 64415, 64416, 64417, 64418, 64419, 64420, 64421, 64422, 64423, 64424, 64425, 64426, 64427, 64428, 64429, 64430, 64431, 64432, 64433, 64434, 64435, 64436, 64437, 64438, 64439, 64440, 64441, 64442, 64443, 64444, 64445, 64446, 64447, 64448, 64449, 64467, 64468, 64469, 64470, 64471, 64472, 64473, 64474, 64475, 64476, 64477, 64478, 64479, 64480, 64481, 64482, 64483, 64484, 64485, 64486, 64487, 64488, 64489, 64490, 64491, 64492, 64493, 64494, 64495, 64496, 64497, 64498, 64499, 64500, 64501, 64502, 64503, 64504, 64505, 64506, 64507, 64508, 64509, 64510, 64511, 64512, 64513, 64514, 64515, 64516, 64517, 64518, 64519, 64520, 64521, 64522, 64523, 64524, 64525, 64526, 64527, 64528, 64529, 64530, 64531, 64532, 64533, 64534, 64535, 64536, 64537, 64538, 64539, 64540, 64541, 64542, 64543, 64544, 64545, 64546, 64547, 64548, 64549, 64550, 64551, 64552, 64553, 64554, 64555, 64556, 64557, 64558, 64559, 64560, 64561, 64562, 64563, 64564, 64565, 64566, 64567, 64568, 64569, 64570, 64571, 64572, 64573, 64574, 64575, 64576, 64577, 64578, 64579, 64580, 64581, 64582, 64583, 64584, 64585, 64586, 64587, 64588, 64589, 64590, 64591, 64592, 64593, 64594, 64595, 64596, 64597, 64598, 64599, 64600, 64601, 64602, 64603, 64604, 64605, 64606, 64607, 64608, 64609, 64610, 64611, 64612, 64613, 64614, 64615, 64616, 64617, 64618, 64619, 64620, 64621, 64622, 64623, 64624, 64625, 64626, 64627, 64628, 64629, 64630, 64631, 64632, 64633, 64634, 64635, 64636, 64637, 64638, 64639, 64640, 64641, 64642, 64643, 64644, 64645, 64646, 64647, 64648, 64649, 64650, 64651, 64652, 64653, 64654, 64655, 64656, 64657, 64658, 64659, 64660, 64661, 64662, 64663, 64664, 64665, 64666, 64667, 64668, 64669, 64670, 64671, 64672, 64673, 64674, 64675, 64676, 64677, 64678, 64679, 64680, 64681, 64682, 64683, 64684, 64685, 64686, 64687, 64688, 64689, 64690, 64691, 64692, 64693, 64694, 64695, 64696, 64697, 64698, 64699, 64700, 64701, 64702, 64703, 64704, 64705, 64706, 64707, 64708, 64709, 64710, 64711, 64712, 64713, 64714, 64715, 64716, 64717, 64718, 64719, 64720, 64721, 64722, 64723, 64724, 64725, 64726, 64727, 64728, 64729, 64730, 64731, 64732, 64733, 64734, 64735, 64736, 64737, 64738, 64739, 64740, 64741, 64742, 64743, 64744, 64745, 64746, 64747, 64748, 64749, 64750, 64751, 64752, 64753, 64754, 64755, 64756, 64757, 64758, 64759, 64760, 64761, 64762, 64763, 64764, 64765, 64766, 64767, 64768, 64769, 64770, 64771, 64772, 64773, 64774, 64775, 64776, 64777, 64778, 64779, 64780, 64781, 64782, 64783, 64784, 64785, 64786, 64787, 64788, 64789, 64790, 64791, 64792, 64793, 64794, 64795, 64796, 64797, 64798, 64799, 64800, 64801, 64802, 64803, 64804, 64805, 64806, 64807, 64808, 64809, 64810, 64811, 64812, 64813, 64814, 64815, 64816, 64817, 64818, 64819, 64820, 64821, 64822, 64823, 64824, 64825, 64826, 64827, 64828, 64829, 64848, 64849, 64850, 64851, 64852, 64853, 64854, 64855, 64856, 64857, 64858, 64859, 64860, 64861, 64862, 64863, 64864, 64865, 64866, 64867, 64868, 64869, 64870, 64871, 64872, 64873, 64874, 64875, 64876, 64877, 64878, 64879, 64880, 64881, 64882, 64883, 64884, 64885, 64886, 64887, 64888, 64889, 64890, 64891, 64892, 64893, 64894, 64895, 64896, 64897, 64898, 64899, 64900, 64901, 64902, 64903, 64904, 64905, 64906, 64907, 64908, 64909, 64910, 64911, 64914, 64915, 64916, 64917, 64918, 64919, 64920, 64921, 64922, 64923, 64924, 64925, 64926, 64927, 64928, 64929, 64930, 64931, 64932, 64933, 64934, 64935, 64936, 64937, 64938, 64939, 64940, 64941, 64942, 64943, 64944, 64945, 64946, 64947, 64948, 64949, 64950, 64951, 64952, 64953, 64954, 64955, 64956, 64957, 64958, 64959, 64960, 64961, 64962, 64963, 64964, 64965, 64966, 64967, 65008, 65009, 65010, 65011, 65012, 65013, 65014, 65015, 65016, 65017, 65018, 65019, 65020, 65136, 65137, 65138, 65139, 65140, 65142, 65143, 65144, 65145, 65146, 65147, 65148, 65149, 65150, 65151, 65152, 65153, 65154, 65155, 65156, 65157, 65158, 65159, 65160, 65161, 65162, 65163, 65164, 65165, 65166, 65167, 65168, 65169, 65170, 65171, 65172, 65173, 65174, 65175, 65176, 65177, 65178, 65179, 65180, 65181, 65182, 65183, 65184, 65185, 65186, 65187, 65188, 65189, 65190, 65191, 65192, 65193, 65194, 65195, 65196, 65197, 65198, 65199, 65200, 65201, 65202, 65203, 65204, 65205, 65206, 65207, 65208, 65209, 65210, 65211, 65212, 65213, 65214, 65215, 65216, 65217, 65218, 65219, 65220, 65221, 65222, 65223, 65224, 65225, 65226, 65227, 65228, 65229, 65230, 65231, 65232, 65233, 65234, 65235, 65236, 65237, 65238, 65239, 65240, 65241, 65242, 65243, 65244, 65245, 65246, 65247, 65248, 65249, 65250, 65251, 65252, 65253, 65254, 65255, 65256, 65257, 65258, 65259, 65260, 65261, 65262, 65263, 65264, 65265, 65266, 65267, 65268, 65269, 65270, 65271, 65272, 65273, 65274, 65275, 65276, 67584, 67585, 67586, 67587, 67588, 67589, 67592, 67594, 67595, 67596, 67597, 67598, 67599, 67600, 67601, 67602, 67603, 67604, 67605, 67606, 67607, 67608, 67609, 67610, 67611, 67612, 67613, 67614, 67615, 67616, 67617, 67618, 67619, 67620, 67621, 67622, 67623, 67624, 67625, 67626, 67627, 67628, 67629, 67630, 67631, 67632, 67633, 67634, 67635, 67636, 67637, 67639, 67640, 67644, 67647, 67648, 67649, 67650, 67651, 67652, 67653, 67654, 67655, 67656, 67657, 67658, 67659, 67660, 67661, 67662, 67663, 67664, 67665, 67666, 67667, 67668, 67669, 67671, 67672, 67673, 67674, 67675, 67676, 67677, 67678, 67679, 67840, 67841, 67842, 67843, 67844, 67845, 67846, 67847, 67848, 67849, 67850, 67851, 67852, 67853, 67854, 67855, 67856, 67857, 67858, 67859, 67860, 67861, 67862, 67863, 67864, 67865, 67866, 67867, 67872, 67873, 67874, 67875, 67876, 67877, 67878, 67879, 67880, 67881, 67882, 67883, 67884, 67885, 67886, 67887, 67888, 67889, 67890, 67891, 67892, 67893, 67894, 67895, 67896, 67897, 67903, 67968, 67969, 67970, 67971, 67972, 67973, 67974, 67975, 67976, 67977, 67978, 67979, 67980, 67981, 67982, 67983, 67984, 67985, 67986, 67987, 67988, 67989, 67990, 67991, 67992, 67993, 67994, 67995, 67996, 67997, 67998, 67999, 68e3, 68001, 68002, 68003, 68004, 68005, 68006, 68007, 68008, 68009, 68010, 68011, 68012, 68013, 68014, 68015, 68016, 68017, 68018, 68019, 68020, 68021, 68022, 68023, 68030, 68031, 68096, 68112, 68113, 68114, 68115, 68117, 68118, 68119, 68121, 68122, 68123, 68124, 68125, 68126, 68127, 68128, 68129, 68130, 68131, 68132, 68133, 68134, 68135, 68136, 68137, 68138, 68139, 68140, 68141, 68142, 68143, 68144, 68145, 68146, 68147, 68160, 68161, 68162, 68163, 68164, 68165, 68166, 68167, 68176, 68177, 68178, 68179, 68180, 68181, 68182, 68183, 68184, 68192, 68193, 68194, 68195, 68196, 68197, 68198, 68199, 68200, 68201, 68202, 68203, 68204, 68205, 68206, 68207, 68208, 68209, 68210, 68211, 68212, 68213, 68214, 68215, 68216, 68217, 68218, 68219, 68220, 68221, 68222, 68223, 68352, 68353, 68354, 68355, 68356, 68357, 68358, 68359, 68360, 68361, 68362, 68363, 68364, 68365, 68366, 68367, 68368, 68369, 68370, 68371, 68372, 68373, 68374, 68375, 68376, 68377, 68378, 68379, 68380, 68381, 68382, 68383, 68384, 68385, 68386, 68387, 68388, 68389, 68390, 68391, 68392, 68393, 68394, 68395, 68396, 68397, 68398, 68399, 68400, 68401, 68402, 68403, 68404, 68405, 68416, 68417, 68418, 68419, 68420, 68421, 68422, 68423, 68424, 68425, 68426, 68427, 68428, 68429, 68430, 68431, 68432, 68433, 68434, 68435, 68436, 68437, 68440, 68441, 68442, 68443, 68444, 68445, 68446, 68447, 68448, 68449, 68450, 68451, 68452, 68453, 68454, 68455, 68456, 68457, 68458, 68459, 68460, 68461, 68462, 68463, 68464, 68465, 68466, 68472, 68473, 68474, 68475, 68476, 68477, 68478, 68479, 68608, 68609, 68610, 68611, 68612, 68613, 68614, 68615, 68616, 68617, 68618, 68619, 68620, 68621, 68622, 68623, 68624, 68625, 68626, 68627, 68628, 68629, 68630, 68631, 68632, 68633, 68634, 68635, 68636, 68637, 68638, 68639, 68640, 68641, 68642, 68643, 68644, 68645, 68646, 68647, 68648, 68649, 68650, 68651, 68652, 68653, 68654, 68655, 68656, 68657, 68658, 68659, 68660, 68661, 68662, 68663, 68664, 68665, 68666, 68667, 68668, 68669, 68670, 68671, 68672, 68673, 68674, 68675, 68676, 68677, 68678, 68679, 68680, 126464, 126465, 126466, 126467, 126469, 126470, 126471, 126472, 126473, 126474, 126475, 126476, 126477, 126478, 126479, 126480, 126481, 126482, 126483, 126484, 126485, 126486, 126487, 126488, 126489, 126490, 126491, 126492, 126493, 126494, 126495, 126497, 126498, 126500, 126503, 126505, 126506, 126507, 126508, 126509, 126510, 126511, 126512, 126513, 126514, 126516, 126517, 126518, 126519, 126521, 126523, 126530, 126535, 126537, 126539, 126541, 126542, 126543, 126545, 126546, 126548, 126551, 126553, 126555, 126557, 126559, 126561, 126562, 126564, 126567, 126568, 126569, 126570, 126572, 126573, 126574, 126575, 126576, 126577, 126578, 126580, 126581, 126582, 126583, 126585, 126586, 126587, 126588, 126590, 126592, 126593, 126594, 126595, 126596, 126597, 126598, 126599, 126600, 126601, 126603, 126604, 126605, 126606, 126607, 126608, 126609, 126610, 126611, 126612, 126613, 126614, 126615, 126616, 126617, 126618, 126619, 126625, 126626, 126627, 126629, 126630, 126631, 126632, 126633, 126635, 126636, 126637, 126638, 126639, 126640, 126641, 126642, 126643, 126644, 126645, 126646, 126647, 126648, 126649, 126650, 126651, 1114109];
                function determineBidi(cueDiv) {
                    var nodeStack = [], text = "", charCode;
                    if (!cueDiv || !cueDiv.childNodes) {
                        return "ltr"
                    }
                    function pushNodes(nodeStack, node) {
                        for (var i = node.childNodes.length - 1; i >= 0; i--) {
                            nodeStack.push(node.childNodes[i])
                        }
                    }
                    function nextTextNode(nodeStack) {
                        if (!nodeStack || !nodeStack.length) {
                            return null
                        }
                        var node = nodeStack.pop()
                          , text = node.textContent || node.innerText;
                        if (text) {
                            var m = text.match(/^.*(\n|\r)/);
                            if (m) {
                                nodeStack.length = 0;
                                return m[0]
                            }
                            return text
                        }
                        if (node.tagName === "ruby") {
                            return nextTextNode(nodeStack)
                        }
                        if (node.childNodes) {
                            pushNodes(nodeStack, node);
                            return nextTextNode(nodeStack)
                        }
                    }
                    pushNodes(nodeStack, cueDiv);
                    while (text = nextTextNode(nodeStack)) {
                        for (var i = 0; i < text.length; i++) {
                            charCode = text.charCodeAt(i);
                            for (var j = 0; j < strongRTLChars.length; j++) {
                                if (strongRTLChars[j] === charCode) {
                                    return "rtl"
                                }
                            }
                        }
                    }
                    return "ltr"
                }
                function computeLinePos(cue) {
                    if (typeof cue.line === "number" && (cue.snapToLines || cue.line >= 0 && cue.line <= 100)) {
                        return cue.line
                    }
                    if (!cue.track || !cue.track.textTrackList || !cue.track.textTrackList.mediaElement) {
                        return -1
                    }
                    var track = cue.track
                      , trackList = track.textTrackList
                      , count = 0;
                    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
                        if (trackList[i].mode === "showing") {
                            count++
                        }
                    }
                    return ++count * -1
                }
                function StyleBox() {}
                StyleBox.prototype.applyStyles = function(styles, div) {
                    div = div || this.div;
                    for (var prop in styles) {
                        if (styles.hasOwnProperty(prop)) {
                            div.style[prop] = styles[prop]
                        }
                    }
                }
                ;
                StyleBox.prototype.formatStyle = function(val, unit) {
                    return val === 0 ? 0 : val + unit
                }
                ;
                function CueStyleBox(window, cue, styleOptions) {
                    var isIE8 = /MSIE\s8\.0/.test(navigator.userAgent);
                    var color = "rgba(255, 255, 255, 1)";
                    var backgroundColor = "rgba(0, 0, 0, 0.8)";
                    if (isIE8) {
                        color = "rgb(255, 255, 255)";
                        backgroundColor = "rgb(0, 0, 0)"
                    }
                    StyleBox.call(this);
                    this.cue = cue;
                    this.cueDiv = parseContent(window, cue.text);
                    var styles = {
                        color: color,
                        backgroundColor: backgroundColor,
                        position: "relative",
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0,
                        display: "inline"
                    };
                    if (!isIE8) {
                        styles.writingMode = cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl";
                        styles.unicodeBidi = "plaintext"
                    }
                    this.applyStyles(styles, this.cueDiv);
                    this.div = window.document.createElement("div");
                    styles = {
                        textAlign: cue.align === "middle" ? "center" : cue.align,
                        font: styleOptions.font,
                        whiteSpace: "pre-line",
                        position: "absolute"
                    };
                    if (!isIE8) {
                        styles.direction = determineBidi(this.cueDiv);
                        styles.writingMode = cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl".stylesunicodeBidi = "plaintext"
                    }
                    this.applyStyles(styles);
                    this.div.appendChild(this.cueDiv);
                    var textPos = 0;
                    switch (cue.positionAlign) {
                    case "start":
                        textPos = cue.position;
                        break;
                    case "middle":
                        textPos = cue.position - cue.size / 2;
                        break;
                    case "end":
                        textPos = cue.position - cue.size;
                        break
                    }
                    if (cue.vertical === "") {
                        this.applyStyles({
                            left: this.formatStyle(textPos, "%"),
                            width: this.formatStyle(cue.size, "%")
                        })
                    } else {
                        this.applyStyles({
                            top: this.formatStyle(textPos, "%"),
                            height: this.formatStyle(cue.size, "%")
                        })
                    }
                    this.move = function(box) {
                        this.applyStyles({
                            top: this.formatStyle(box.top, "px"),
                            bottom: this.formatStyle(box.bottom, "px"),
                            left: this.formatStyle(box.left, "px"),
                            right: this.formatStyle(box.right, "px"),
                            height: this.formatStyle(box.height, "px"),
                            width: this.formatStyle(box.width, "px")
                        })
                    }
                }
                CueStyleBox.prototype = _objCreate(StyleBox.prototype);
                CueStyleBox.prototype.constructor = CueStyleBox;
                function BoxPosition(obj) {
                    var isIE8 = /MSIE\s8\.0/.test(navigator.userAgent);
                    var lh, height, width, top;
                    if (obj.div) {
                        height = obj.div.offsetHeight;
                        width = obj.div.offsetWidth;
                        top = obj.div.offsetTop;
                        var rects = (rects = obj.div.childNodes) && (rects = rects[0]) && rects.getClientRects && rects.getClientRects();
                        obj = obj.div.getBoundingClientRect();
                        lh = rects ? Math.max(rects[0] && rects[0].height || 0, obj.height / rects.length) : 0
                    }
                    this.left = obj.left;
                    this.right = obj.right;
                    this.top = obj.top || top;
                    this.height = obj.height || height;
                    this.bottom = obj.bottom || top + (obj.height || height);
                    this.width = obj.width || width;
                    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;
                    if (isIE8 && !this.lineHeight) {
                        this.lineHeight = 13
                    }
                }
                BoxPosition.prototype.move = function(axis, toMove) {
                    toMove = toMove !== undefined ? toMove : this.lineHeight;
                    switch (axis) {
                    case "+x":
                        this.left += toMove;
                        this.right += toMove;
                        break;
                    case "-x":
                        this.left -= toMove;
                        this.right -= toMove;
                        break;
                    case "+y":
                        this.top += toMove;
                        this.bottom += toMove;
                        break;
                    case "-y":
                        this.top -= toMove;
                        this.bottom -= toMove;
                        break
                    }
                }
                ;
                BoxPosition.prototype.overlaps = function(b2) {
                    return this.left < b2.right && this.right > b2.left && this.top < b2.bottom && this.bottom > b2.top
                }
                ;
                BoxPosition.prototype.overlapsAny = function(boxes) {
                    for (var i = 0; i < boxes.length; i++) {
                        if (this.overlaps(boxes[i])) {
                            return true
                        }
                    }
                    return false
                }
                ;
                BoxPosition.prototype.within = function(container) {
                    return this.top >= container.top && this.bottom <= container.bottom && this.left >= container.left && this.right <= container.right
                }
                ;
                BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
                    switch (axis) {
                    case "+x":
                        return this.left < container.left;
                    case "-x":
                        return this.right > container.right;
                    case "+y":
                        return this.top < container.top;
                    case "-y":
                        return this.bottom > container.bottom
                    }
                }
                ;
                BoxPosition.prototype.intersectPercentage = function(b2) {
                    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left))
                      , y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top))
                      , intersectArea = x * y;
                    return intersectArea / (this.height * this.width)
                }
                ;
                BoxPosition.prototype.toCSSCompatValues = function(reference) {
                    return {
                        top: this.top - reference.top,
                        bottom: reference.bottom - this.bottom,
                        left: this.left - reference.left,
                        right: reference.right - this.right,
                        height: this.height,
                        width: this.width
                    }
                }
                ;
                BoxPosition.getSimpleBoxPosition = function(obj) {
                    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
                    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
                    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;
                    obj = obj.div ? obj.div.getBoundingClientRect() : obj.tagName ? obj.getBoundingClientRect() : obj;
                    var ret = {
                        left: obj.left,
                        right: obj.right,
                        top: obj.top || top,
                        height: obj.height || height,
                        bottom: obj.bottom || top + (obj.height || height),
                        width: obj.width || width
                    };
                    return ret
                }
                ;
                function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {
                    function findBestPosition(b, axis) {
                        var bestPosition, specifiedPosition = new BoxPosition(b), percentage = 1;
                        for (var i = 0; i < axis.length; i++) {
                            while (b.overlapsOppositeAxis(containerBox, axis[i]) || b.within(containerBox) && b.overlapsAny(boxPositions)) {
                                b.move(axis[i])
                            }
                            if (b.within(containerBox)) {
                                return b
                            }
                            var p = b.intersectPercentage(containerBox);
                            if (percentage > p) {
                                bestPosition = new BoxPosition(b);
                                percentage = p
                            }
                            b = new BoxPosition(specifiedPosition)
                        }
                        return bestPosition || specifiedPosition
                    }
                    var boxPosition = new BoxPosition(styleBox)
                      , cue = styleBox.cue
                      , linePos = computeLinePos(cue)
                      , axis = [];
                    if (cue.snapToLines) {
                        var size;
                        switch (cue.vertical) {
                        case "":
                            axis = ["+y", "-y"];
                            size = "height";
                            break;
                        case "rl":
                            axis = ["+x", "-x"];
                            size = "width";
                            break;
                        case "lr":
                            axis = ["-x", "+x"];
                            size = "width";
                            break
                        }
                        var step = boxPosition.lineHeight
                          , position = step * Math.round(linePos)
                          , maxPosition = containerBox[size] + step
                          , initialAxis = axis[0];
                        if (Math.abs(position) > maxPosition) {
                            position = position < 0 ? -1 : 1;
                            position *= Math.ceil(maxPosition / step) * step
                        }
                        if (linePos < 0) {
                            position += cue.vertical === "" ? containerBox.height : containerBox.width;
                            axis = axis.reverse()
                        }
                        boxPosition.move(initialAxis, position)
                    } else {
                        var calculatedPercentage = boxPosition.lineHeight / containerBox.height * 100;
                        switch (cue.lineAlign) {
                        case "middle":
                            linePos -= calculatedPercentage / 2;
                            break;
                        case "end":
                            linePos -= calculatedPercentage;
                            break
                        }
                        switch (cue.vertical) {
                        case "":
                            styleBox.applyStyles({
                                top: styleBox.formatStyle(linePos, "%")
                            });
                            break;
                        case "rl":
                            styleBox.applyStyles({
                                left: styleBox.formatStyle(linePos, "%")
                            });
                            break;
                        case "lr":
                            styleBox.applyStyles({
                                right: styleBox.formatStyle(linePos, "%")
                            });
                            break
                        }
                        axis = ["+y", "-x", "+x", "-y"];
                        boxPosition = new BoxPosition(styleBox)
                    }
                    var bestPosition = findBestPosition(boxPosition, axis);
                    styleBox.move(bestPosition.toCSSCompatValues(containerBox))
                }
                function WebVTT() {}
                WebVTT.StringDecoder = function() {
                    return {
                        decode: function(data) {
                            if (!data) {
                                return ""
                            }
                            if (typeof data !== "string") {
                                throw new Error("Error - expected string data.")
                            }
                            return decodeURIComponent(encodeURIComponent(data))
                        }
                    }
                }
                ;
                WebVTT.convertCueToDOMTree = function(window, cuetext) {
                    if (!window || !cuetext) {
                        return null
                    }
                    return parseContent(window, cuetext)
                }
                ;
                var FONT_SIZE_PERCENT = .05;
                var FONT_STYLE = "sans-serif";
                var CUE_BACKGROUND_PADDING = "1.5%";
                WebVTT.processCues = function(window, cues, overlay) {
                    if (!window || !cues || !overlay) {
                        return null
                    }
                    while (overlay.firstChild) {
                        overlay.removeChild(overlay.firstChild)
                    }
                    var paddedOverlay = window.document.createElement("div");
                    paddedOverlay.style.position = "absolute";
                    paddedOverlay.style.left = "0";
                    paddedOverlay.style.right = "0";
                    paddedOverlay.style.top = "0";
                    paddedOverlay.style.bottom = "0";
                    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
                    overlay.appendChild(paddedOverlay);
                    function shouldCompute(cues) {
                        for (var i = 0; i < cues.length; i++) {
                            if (cues[i].hasBeenReset || !cues[i].displayState) {
                                return true
                            }
                        }
                        return false
                    }
                    if (!shouldCompute(cues)) {
                        for (var i = 0; i < cues.length; i++) {
                            paddedOverlay.appendChild(cues[i].displayState)
                        }
                        return
                    }
                    var boxPositions = []
                      , containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay)
                      , fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
                    var styleOptions = {
                        font: fontSize + "px " + FONT_STYLE
                    };
                    (function() {
                        var styleBox, cue;
                        for (var i = 0; i < cues.length; i++) {
                            cue = cues[i];
                            styleBox = new CueStyleBox(window,cue,styleOptions);
                            paddedOverlay.appendChild(styleBox.div);
                            moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);
                            cue.displayState = styleBox.div;
                            boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox))
                        }
                    }
                    )()
                }
                ;
                WebVTT.Parser = function(window, vttjs, decoder) {
                    if (!decoder) {
                        decoder = vttjs;
                        vttjs = {}
                    }
                    if (!vttjs) {
                        vttjs = {}
                    }
                    this.window = window;
                    this.vttjs = vttjs;
                    this.state = "INITIAL";
                    this.buffer = "";
                    this.decoder = decoder || new TextDecoder("utf8");
                    this.regionList = []
                }
                ;
                WebVTT.Parser.prototype = {
                    reportOrThrowError: function(e) {
                        if (e instanceof ParsingError) {
                            this.onparsingerror && this.onparsingerror(e)
                        } else {
                            throw e
                        }
                    },
                    parse: function(data) {
                        var self = this;
                        if (data) {
                            self.buffer += self.decoder.decode(data, {
                                stream: true
                            })
                        }
                        function collectNextLine() {
                            var buffer = self.buffer;
                            var pos = 0;
                            while (pos < buffer.length && buffer[pos] !== "\r" && buffer[pos] !== "\n") {
                                ++pos
                            }
                            var line = buffer.substr(0, pos);
                            if (buffer[pos] === "\r") {
                                ++pos
                            }
                            if (buffer[pos] === "\n") {
                                ++pos
                            }
                            self.buffer = buffer.substr(pos);
                            return line
                        }
                        function parseRegion(input) {
                            var settings = new Settings;
                            parseOptions(input, function(k, v) {
                                switch (k) {
                                case "id":
                                    settings.set(k, v);
                                    break;
                                case "width":
                                    settings.percent(k, v);
                                    break;
                                case "lines":
                                    settings.integer(k, v);
                                    break;
                                case "regionanchor":
                                case "viewportanchor":
                                    var xy = v.split(",");
                                    if (xy.length !== 2) {
                                        break
                                    }
                                    var anchor = new Settings;
                                    anchor.percent("x", xy[0]);
                                    anchor.percent("y", xy[1]);
                                    if (!anchor.has("x") || !anchor.has("y")) {
                                        break
                                    }
                                    settings.set(k + "X", anchor.get("x"));
                                    settings.set(k + "Y", anchor.get("y"));
                                    break;
                                case "scroll":
                                    settings.alt(k, v, ["up"]);
                                    break
                                }
                            }, /=/, /\s/);
                            if (settings.has("id")) {
                                var region = new (self.vttjs.VTTRegion || self.window.VTTRegion);
                                region.width = settings.get("width", 100);
                                region.lines = settings.get("lines", 3);
                                region.regionAnchorX = settings.get("regionanchorX", 0);
                                region.regionAnchorY = settings.get("regionanchorY", 100);
                                region.viewportAnchorX = settings.get("viewportanchorX", 0);
                                region.viewportAnchorY = settings.get("viewportanchorY", 100);
                                region.scroll = settings.get("scroll", "");
                                self.onregion && self.onregion(region);
                                self.regionList.push({
                                    id: settings.get("id"),
                                    region: region
                                })
                            }
                        }
                        function parseHeader(input) {
                            parseOptions(input, function(k, v) {
                                switch (k) {
                                case "Region":
                                    parseRegion(v);
                                    break
                                }
                            }, /:/)
                        }
                        try {
                            var line;
                            if (self.state === "INITIAL") {
                                if (!/\r\n|\n/.test(self.buffer)) {
                                    return this
                                }
                                line = collectNextLine();
                                var m = line.match(/^WEBVTT([ \t].*)?$/);
                                if (!m || !m[0]) {
                                    throw new ParsingError(ParsingError.Errors.BadSignature)
                                }
                                self.state = "HEADER"
                            }
                            var alreadyCollectedLine = false;
                            while (self.buffer) {
                                if (!/\r\n|\n/.test(self.buffer)) {
                                    return this
                                }
                                if (!alreadyCollectedLine) {
                                    line = collectNextLine()
                                } else {
                                    alreadyCollectedLine = false
                                }
                                switch (self.state) {
                                case "HEADER":
                                    if (/:/.test(line)) {
                                        parseHeader(line)
                                    } else if (!line) {
                                        self.state = "ID"
                                    }
                                    continue;
                                case "NOTE":
                                    if (!line) {
                                        self.state = "ID"
                                    }
                                    continue;
                                case "ID":
                                    if (/^NOTE($|[ \t])/.test(line)) {
                                        self.state = "NOTE";
                                        break
                                    }
                                    if (!line) {
                                        continue
                                    }
                                    self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0,0,"");
                                    self.state = "CUE";
                                    if (line.indexOf("--\x3e") === -1) {
                                        self.cue.id = line;
                                        continue
                                    }
                                case "CUE":
                                    try {
                                        parseCue(line, self.cue, self.regionList)
                                    } catch (e) {
                                        self.reportOrThrowError(e);
                                        self.cue = null;
                                        self.state = "BADCUE";
                                        continue
                                    }
                                    self.state = "CUETEXT";
                                    continue;
                                case "CUETEXT":
                                    var hasSubstring = line.indexOf("--\x3e") !== -1;
                                    if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                                        self.oncue && self.oncue(self.cue);
                                        self.cue = null;
                                        self.state = "ID";
                                        continue
                                    }
                                    if (self.cue.text) {
                                        self.cue.text += "\n"
                                    }
                                    self.cue.text += line;
                                    continue;
                                case "BADCUE":
                                    if (!line) {
                                        self.state = "ID"
                                    }
                                    continue
                                }
                            }
                        } catch (e) {
                            self.reportOrThrowError(e);
                            if (self.state === "CUETEXT" && self.cue && self.oncue) {
                                self.oncue(self.cue)
                            }
                            self.cue = null;
                            self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE"
                        }
                        return this
                    },
                    flush: function() {
                        var self = this;
                        try {
                            self.buffer += self.decoder.decode();
                            if (self.cue || self.state === "HEADER") {
                                self.buffer += "\n\n";
                                self.parse()
                            }
                            if (self.state === "INITIAL") {
                                throw new ParsingError(ParsingError.Errors.BadSignature)
                            }
                        } catch (e) {
                            self.reportOrThrowError(e)
                        }
                        self.onflush && self.onflush();
                        return this
                    }
                };
                global.WebVTT = WebVTT
            }
            )(this, this.vttjs || {})
        }
        , {}],
        101: [function(_dereq_, module, exports) {
            if (typeof module !== "undefined" && module.exports) {
                this.VTTCue = this.VTTCue || _dereq_(102).VTTCue
            }
            (function(root) {
                root.VTTCue.prototype.toJSON = function() {
                    var cue = {}
                      , self = this;
                    Object.keys(this).forEach(function(key) {
                        if (key !== "getCueAsHTML" && key !== "hasBeenReset" && key !== "displayState") {
                            cue[key] = self[key]
                        }
                    });
                    return cue
                }
                ;
                root.VTTCue.create = function(options) {
                    if (!options.hasOwnProperty("startTime") || !options.hasOwnProperty("endTime") || !options.hasOwnProperty("text")) {
                        throw new Error("You must at least have start time, end time, and text.")
                    }
                    var cue = new root.VTTCue(options.startTime,options.endTime,options.text);
                    for (var key in options) {
                        if (cue.hasOwnProperty(key)) {
                            cue[key] = options[key]
                        }
                    }
                    return cue
                }
                ;
                root.VTTCue.fromJSON = function(json) {
                    return this.create(JSON.parse(json))
                }
            }
            )(this)
        }
        , {
            102: 102
        }],
        102: [function(_dereq_, module, exports) {
            (function(root, vttjs) {
                var autoKeyword = "auto";
                var directionSetting = {
                    "": true,
                    lr: true,
                    rl: true
                };
                var alignSetting = {
                    start: true,
                    middle: true,
                    end: true,
                    left: true,
                    right: true
                };
                function findDirectionSetting(value) {
                    if (typeof value !== "string") {
                        return false
                    }
                    var dir = directionSetting[value.toLowerCase()];
                    return dir ? value.toLowerCase() : false
                }
                function findAlignSetting(value) {
                    if (typeof value !== "string") {
                        return false
                    }
                    var align = alignSetting[value.toLowerCase()];
                    return align ? value.toLowerCase() : false
                }
                function extend(obj) {
                    var i = 1;
                    for (; i < arguments.length; i++) {
                        var cobj = arguments[i];
                        for (var p in cobj) {
                            obj[p] = cobj[p]
                        }
                    }
                    return obj
                }
                function VTTCue(startTime, endTime, text) {
                    var cue = this;
                    var isIE8 = /MSIE\s8\.0/.test(navigator.userAgent);
                    var baseObj = {};
                    if (isIE8) {
                        cue = document.createElement("custom")
                    } else {
                        baseObj.enumerable = true
                    }
                    cue.hasBeenReset = false;
                    var _id = "";
                    var _pauseOnExit = false;
                    var _startTime = startTime;
                    var _endTime = endTime;
                    var _text = text;
                    var _region = null;
                    var _vertical = "";
                    var _snapToLines = true;
                    var _line = "auto";
                    var _lineAlign = "start";
                    var _position = 50;
                    var _positionAlign = "middle";
                    var _size = 50;
                    var _align = "middle";
                    Object.defineProperty(cue, "id", extend({}, baseObj, {
                        get: function() {
                            return _id
                        },
                        set: function(value) {
                            _id = "" + value
                        }
                    }));
                    Object.defineProperty(cue, "pauseOnExit", extend({}, baseObj, {
                        get: function() {
                            return _pauseOnExit
                        },
                        set: function(value) {
                            _pauseOnExit = !!value
                        }
                    }));
                    Object.defineProperty(cue, "startTime", extend({}, baseObj, {
                        get: function() {
                            return _startTime
                        },
                        set: function(value) {
                            if (typeof value !== "number") {
                                throw new TypeError("Start time must be set to a number.")
                            }
                            _startTime = value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "endTime", extend({}, baseObj, {
                        get: function() {
                            return _endTime
                        },
                        set: function(value) {
                            if (typeof value !== "number") {
                                throw new TypeError("End time must be set to a number.")
                            }
                            _endTime = value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "text", extend({}, baseObj, {
                        get: function() {
                            return _text
                        },
                        set: function(value) {
                            _text = "" + value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "region", extend({}, baseObj, {
                        get: function() {
                            return _region
                        },
                        set: function(value) {
                            _region = value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "vertical", extend({}, baseObj, {
                        get: function() {
                            return _vertical
                        },
                        set: function(value) {
                            var setting = findDirectionSetting(value);
                            if (setting === false) {
                                throw new SyntaxError("An invalid or illegal string was specified.")
                            }
                            _vertical = setting;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "snapToLines", extend({}, baseObj, {
                        get: function() {
                            return _snapToLines
                        },
                        set: function(value) {
                            _snapToLines = !!value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "line", extend({}, baseObj, {
                        get: function() {
                            return _line
                        },
                        set: function(value) {
                            if (typeof value !== "number" && value !== autoKeyword) {
                                throw new SyntaxError("An invalid number or illegal string was specified.")
                            }
                            _line = value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "lineAlign", extend({}, baseObj, {
                        get: function() {
                            return _lineAlign
                        },
                        set: function(value) {
                            var setting = findAlignSetting(value);
                            if (!setting) {
                                throw new SyntaxError("An invalid or illegal string was specified.")
                            }
                            _lineAlign = setting;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "position", extend({}, baseObj, {
                        get: function() {
                            return _position
                        },
                        set: function(value) {
                            if (value < 0 || value > 100) {
                                throw new Error("Position must be between 0 and 100.")
                            }
                            _position = value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "positionAlign", extend({}, baseObj, {
                        get: function() {
                            return _positionAlign
                        },
                        set: function(value) {
                            var setting = findAlignSetting(value);
                            if (!setting) {
                                throw new SyntaxError("An invalid or illegal string was specified.")
                            }
                            _positionAlign = setting;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "size", extend({}, baseObj, {
                        get: function() {
                            return _size
                        },
                        set: function(value) {
                            if (value < 0 || value > 100) {
                                throw new Error("Size must be between 0 and 100.")
                            }
                            _size = value;
                            this.hasBeenReset = true
                        }
                    }));
                    Object.defineProperty(cue, "align", extend({}, baseObj, {
                        get: function() {
                            return _align
                        },
                        set: function(value) {
                            var setting = findAlignSetting(value);
                            if (!setting) {
                                throw new SyntaxError("An invalid or illegal string was specified.")
                            }
                            _align = setting;
                            this.hasBeenReset = true
                        }
                    }));
                    cue.displayState = undefined;
                    if (isIE8) {
                        return cue
                    }
                }
                VTTCue.prototype.getCueAsHTML = function() {
                    return WebVTT.convertCueToDOMTree(window, this.text)
                }
                ;
                root.VTTCue = root.VTTCue || VTTCue;
                vttjs.VTTCue = VTTCue
            }
            )(this, this.vttjs || {})
        }
        , {}],
        103: [function(_dereq_, module, exports) {
            if (typeof module !== "undefined" && module.exports) {
                this.VTTRegion = _dereq_(104).VTTRegion
            }
            (function(root) {
                root.VTTRegion.create = function(options) {
                    var region = new root.VTTRegion;
                    for (var key in options) {
                        if (region.hasOwnProperty(key)) {
                            region[key] = options[key]
                        }
                    }
                    return region
                }
                ;
                root.VTTRegion.fromJSON = function(json) {
                    return this.create(JSON.parse(json))
                }
            }
            )(this)
        }
        , {
            104: 104
        }],
        104: [function(_dereq_, module, exports) {
            (function(root, vttjs) {
                var scrollSetting = {
                    "": true,
                    up: true
                };
                function findScrollSetting(value) {
                    if (typeof value !== "string") {
                        return false
                    }
                    var scroll = scrollSetting[value.toLowerCase()];
                    return scroll ? value.toLowerCase() : false
                }
                function isValidPercentValue(value) {
                    return typeof value === "number" && (value >= 0 && value <= 100)
                }
                function VTTRegion() {
                    var _width = 100;
                    var _lines = 3;
                    var _regionAnchorX = 0;
                    var _regionAnchorY = 100;
                    var _viewportAnchorX = 0;
                    var _viewportAnchorY = 100;
                    var _scroll = "";
                    Object.defineProperties(this, {
                        width: {
                            enumerable: true,
                            get: function() {
                                return _width
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("Width must be between 0 and 100.")
                                }
                                _width = value
                            }
                        },
                        lines: {
                            enumerable: true,
                            get: function() {
                                return _lines
                            },
                            set: function(value) {
                                if (typeof value !== "number") {
                                    throw new TypeError("Lines must be set to a number.")
                                }
                                _lines = value
                            }
                        },
                        regionAnchorY: {
                            enumerable: true,
                            get: function() {
                                return _regionAnchorY
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("RegionAnchorX must be between 0 and 100.")
                                }
                                _regionAnchorY = value
                            }
                        },
                        regionAnchorX: {
                            enumerable: true,
                            get: function() {
                                return _regionAnchorX
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("RegionAnchorY must be between 0 and 100.")
                                }
                                _regionAnchorX = value
                            }
                        },
                        viewportAnchorY: {
                            enumerable: true,
                            get: function() {
                                return _viewportAnchorY
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("ViewportAnchorY must be between 0 and 100.")
                                }
                                _viewportAnchorY = value
                            }
                        },
                        viewportAnchorX: {
                            enumerable: true,
                            get: function() {
                                return _viewportAnchorX
                            },
                            set: function(value) {
                                if (!isValidPercentValue(value)) {
                                    throw new Error("ViewportAnchorX must be between 0 and 100.")
                                }
                                _viewportAnchorX = value
                            }
                        },
                        scroll: {
                            enumerable: true,
                            get: function() {
                                return _scroll
                            },
                            set: function(value) {
                                var setting = findScrollSetting(value);
                                if (setting === false) {
                                    throw new SyntaxError("An invalid or illegal string was specified.")
                                }
                                _scroll = setting
                            }
                        }
                    })
                }
                root.VTTRegion = root.VTTRegion || VTTRegion;
                vttjs.VTTRegion = VTTRegion
            }
            )(this, this.vttjs || {})
        }
        , {}],
        105: [function(_dereq_, module, exports) {
            "use strict";
            var window = _dereq_(95);
            var isFunction = _dereq_(106);
            var parseHeaders = _dereq_(109);
            var xtend = _dereq_(110);
            module.exports = createXHR;
            createXHR.XMLHttpRequest = window.XMLHttpRequest || noop;
            createXHR.XDomainRequest = "withCredentials"in new createXHR.XMLHttpRequest ? createXHR.XMLHttpRequest : window.XDomainRequest;
            forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
                createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
                    options = initParams(uri, options, callback);
                    options.method = method.toUpperCase();
                    return _createXHR(options)
                }
            });
            function forEachArray(array, iterator) {
                for (var i = 0; i < array.length; i++) {
                    iterator(array[i])
                }
            }
            function isEmpty(obj) {
                for (var i in obj) {
                    if (obj.hasOwnProperty(i))
                        return false
                }
                return true
            }
            function initParams(uri, options, callback) {
                var params = uri;
                if (isFunction(options)) {
                    callback = options;
                    if (typeof uri === "string") {
                        params = {
                            uri: uri
                        }
                    }
                } else {
                    params = xtend(options, {
                        uri: uri
                    })
                }
                params.callback = callback;
                return params
            }
            function createXHR(uri, options, callback) {
                options = initParams(uri, options, callback);
                return _createXHR(options)
            }
            function _createXHR(options) {
                if (typeof options.callback === "undefined") {
                    throw new Error("callback argument missing")
                }
                var called = false;
                var callback = function cbOnce(err, response, body) {
                    if (!called) {
                        called = true;
                        options.callback(err, response, body)
                    }
                };
                function readystatechange() {
                    if (xhr.readyState === 4) {
                        loadFunc()
                    }
                }
                function getBody() {
                    var body = undefined;
                    if (xhr.response) {
                        body = xhr.response
                    } else {
                        body = xhr.responseText || getXml(xhr)
                    }
                    if (isJson) {
                        try {
                            body = JSON.parse(body)
                        } catch (e) {}
                    }
                    return body
                }
                var failureResponse = {
                    body: undefined,
                    headers: {},
                    statusCode: 0,
                    method: method,
                    url: uri,
                    rawRequest: xhr
                };
                function errorFunc(evt) {
                    clearTimeout(timeoutTimer);
                    if (!(evt instanceof Error)) {
                        evt = new Error("" + (evt || "Unknown XMLHttpRequest Error"))
                    }
                    evt.statusCode = 0;
                    return callback(evt, failureResponse)
                }
                function loadFunc() {
                    if (aborted)
                        return;
                    var status;
                    clearTimeout(timeoutTimer);
                    if (options.useXDR && xhr.status === undefined) {
                        status = 200
                    } else {
                        status = xhr.status === 1223 ? 204 : xhr.status
                    }
                    var response = failureResponse;
                    var err = null;
                    if (status !== 0) {
                        response = {
                            body: getBody(),
                            statusCode: status,
                            method: method,
                            headers: {},
                            url: uri,
                            rawRequest: xhr
                        };
                        if (xhr.getAllResponseHeaders) {
                            response.headers = parseHeaders(xhr.getAllResponseHeaders())
                        }
                    } else {
                        err = new Error("Internal XMLHttpRequest Error")
                    }
                    return callback(err, response, response.body)
                }
                var xhr = options.xhr || null;
                if (!xhr) {
                    if (options.cors || options.useXDR) {
                        xhr = new createXHR.XDomainRequest
                    } else {
                        xhr = new createXHR.XMLHttpRequest
                    }
                }
                var key;
                var aborted;
                var uri = xhr.url = options.uri || options.url;
                var method = xhr.method = options.method || "GET";
                var body = options.body || options.data || null;
                var headers = xhr.headers = options.headers || {};
                var sync = !!options.sync;
                var isJson = false;
                var timeoutTimer;
                if ("json"in options) {
                    isJson = true;
                    headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json");
                    if (method !== "GET" && method !== "HEAD") {
                        headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json");
                        body = JSON.stringify(options.json)
                    }
                }
                xhr.onreadystatechange = readystatechange;
                xhr.onload = loadFunc;
                xhr.onerror = errorFunc;
                xhr.onprogress = function() {}
                ;
                xhr.ontimeout = errorFunc;
                xhr.open(method, uri, !sync, options.username, options.password);
                if (!sync) {
                    xhr.withCredentials = !!options.withCredentials
                }
                if (!sync && options.timeout > 0) {
                    timeoutTimer = setTimeout(function() {
                        aborted = true;
                        xhr.abort("timeout");
                        var e = new Error("XMLHttpRequest timeout");
                        e.code = "ETIMEDOUT";
                        errorFunc(e)
                    }, options.timeout)
                }
                if (xhr.setRequestHeader) {
                    for (key in headers) {
                        if (headers.hasOwnProperty(key)) {
                            xhr.setRequestHeader(key, headers[key])
                        }
                    }
                } else if (options.headers && !isEmpty(options.headers)) {
                    throw new Error("Headers cannot be set on an XDomainRequest object")
                }
                if ("responseType"in options) {
                    xhr.responseType = options.responseType
                }
                if ("beforeSend"in options && typeof options.beforeSend === "function") {
                    options.beforeSend(xhr)
                }
                xhr.send(body);
                return xhr
            }
            function getXml(xhr) {
                if (xhr.responseType === "document") {
                    return xhr.responseXML
                }
                var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
                if (xhr.responseType === "" && !firefoxBugTakenEffect) {
                    return xhr.responseXML
                }
                return null
            }
            function noop() {}
        }
        , {
            106: 106,
            109: 109,
            110: 110,
            95: 95
        }],
        106: [function(_dereq_, module, exports) {
            module.exports = isFunction;
            var toString = Object.prototype.toString;
            function isFunction(fn) {
                var string = toString.call(fn);
                return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
            }
        }
        , {}],
        107: [function(_dereq_, module, exports) {
            var isFunction = _dereq_(106);
            module.exports = forEach;
            var toString = Object.prototype.toString;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            function forEach(list, iterator, context) {
                if (!isFunction(iterator)) {
                    throw new TypeError("iterator must be a function")
                }
                if (arguments.length < 3) {
                    context = this
                }
                if (toString.call(list) === "[object Array]")
                    forEachArray(list, iterator, context);
                else if (typeof list === "string")
                    forEachString(list, iterator, context);
                else
                    forEachObject(list, iterator, context)
            }
            function forEachArray(array, iterator, context) {
                for (var i = 0, len = array.length; i < len; i++) {
                    if (hasOwnProperty.call(array, i)) {
                        iterator.call(context, array[i], i, array)
                    }
                }
            }
            function forEachString(string, iterator, context) {
                for (var i = 0, len = string.length; i < len; i++) {
                    iterator.call(context, string.charAt(i), i, string)
                }
            }
            function forEachObject(object, iterator, context) {
                for (var k in object) {
                    if (hasOwnProperty.call(object, k)) {
                        iterator.call(context, object[k], k, object)
                    }
                }
            }
        }
        , {
            106: 106
        }],
        108: [function(_dereq_, module, exports) {
            exports = module.exports = trim;
            function trim(str) {
                return str.replace(/^\s*|\s*$/g, "")
            }
            exports.left = function(str) {
                return str.replace(/^\s*/, "")
            }
            ;
            exports.right = function(str) {
                return str.replace(/\s*$/, "")
            }
        }
        , {}],
        109: [function(_dereq_, module, exports) {
            var trim = _dereq_(108)
              , forEach = _dereq_(107)
              , isArray = function(arg) {
                return Object.prototype.toString.call(arg) === "[object Array]"
            };
            module.exports = function(headers) {
                if (!headers)
                    return {};
                var result = {};
                forEach(trim(headers).split("\n"), function(row) {
                    var index = row.indexOf(":")
                      , key = trim(row.slice(0, index)).toLowerCase()
                      , value = trim(row.slice(index + 1));
                    if (typeof result[key] === "undefined") {
                        result[key] = value
                    } else if (isArray(result[key])) {
                        result[key].push(value)
                    } else {
                        result[key] = [result[key], value]
                    }
                });
                return result
            }
        }
        , {
            107: 107,
            108: 108
        }],
        110: [function(_dereq_, module, exports) {
            module.exports = extend;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            function extend() {
                var target = {};
                for (var i = 0; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (hasOwnProperty.call(source, key)) {
                            target[key] = source[key]
                        }
                    }
                }
                return target
            }
        }
        , {}]
    }, {}, [93])(93)
});
(function($) {
    "use strict";
    $.fn.sectionScroll = function(options) {
        var $container = this, $window = $(window), $section_number = 1, lastId, settings = $.extend({
            bulletsClass: "section-bullets",
            sectionsClass: "scrollable-section",
            scrollDuration: 1e3,
            titles: true,
            topOffset: 0,
            easing: ""
        }, options);
        var $sections = $("." + settings.sectionsClass);
        var $bullets = $('<div class="bullets-container"><ul class="' + settings.bulletsClass + '"></ul></div>').prependTo($container).find("ul");
        var bullets_html = "";
        $sections.each(function() {
            var $this = $(this);
            var title = $this.data("section-title") || "";
            $this.attr("id", "scrollto-section-" + $section_number);
            var bullet_title = settings.titles ? "<span>" + title + "</span>" : "";
            bullets_html += '<li><a title="' + title + '" href="#scrollto-section-' + $section_number + '">' + bullet_title + "</a></li>";
            $section_number++
        });
        var $bullets_items = $(bullets_html).appendTo($bullets);
        var scrollItems = $bullets_items.map(function() {
            var item = $($(this).find("a").attr("href"));
            if (item[0]) {
                return item
            }
        });
        $bullets_items.on("click", function(e) {
            var href = $(this).find("a").attr("href")
              , offsetTop = href === "#" ? 0 : $(href).offset().top;
            $("html, body").stop().animate({
                scrollTop: offsetTop - settings.topOffset
            }, settings.scrollDuration, settings.easing, function() {
                $container.trigger("scrolled-to-section").stop()
            });
            e.preventDefault()
        });
        $window.on("scroll", function() {
            var fromTop = $window.scrollTop() + $window.height() / 2.5;
            var cur = scrollItems.map(function() {
                if ($(this).offset().top < fromTop) {
                    return this
                }
            });
            cur = cur.length > 0 ? cur[cur.length - 1] : [];
            var id = cur[0] ? cur[0].id : "";
            if (lastId !== id) {
                $sections.removeClass("active-section");
                $(cur).addClass("active-section");
                $bullets_items.removeClass("active").find('a[href="#' + id + '"]').parent().addClass("active");
                lastId = id;
                $.fn.sectionScroll.activeSection = cur;
                $container.trigger("section-reached")
            }
        });
        $(function() {
            $window.scroll()
        });
        return $container
    }
}
)(jQuery);
(function(root, factory) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = factory(require("video.js"))
    } else if (typeof define === "function" && define.amd) {
        define(["videojs"], function(videojs) {
            return root.Youtube = factory(videojs)
        })
    } else {
        root.Youtube = factory(root.videojs)
    }
}
)(this, function(videojs) {
    "use strict";
    var Tech = videojs.getComponent("Tech");
    var Youtube = videojs.extend(Tech, {
        constructor: function(options, ready) {
            Tech.call(this, options, ready);
            this.setPoster(options.poster);
            this.setSrc(this.options_.source, true);
            setTimeout(function() {
                this.el_.parentNode.className += " vjs-youtube";
                if (_isOnMobile) {
                    this.el_.parentNode.className += " vjs-youtube-mobile"
                }
                if (Youtube.isApiReady) {
                    this.initYTPlayer()
                } else {
                    Youtube.apiReadyQueue.push(this)
                }
            }
            .bind(this))
        },
        dispose: function() {
            if (this.ytPlayer) {
                this.ytPlayer.stopVideo();
                this.ytPlayer.destroy()
            } else {
                var index = Youtube.apiReadyQueue.indexOf(this);
                if (index !== -1) {
                    Youtube.apiReadyQueue.splice(index, 1)
                }
            }
            this.ytPlayer = null;
            this.el_.parentNode.className = this.el_.parentNode.className.replace(" vjs-youtube", "").replace(" vjs-youtube-mobile", "");
            this.el_.parentNode.removeChild(this.el_);
            Tech.prototype.dispose.call(this)
        },
        createEl: function() {
            var div = document.createElement("div");
            div.setAttribute("id", this.options_.techId);
            div.setAttribute("style", "width:100%;height:100%;top:0;left:0;position:absolute");
            div.setAttribute("class", "vjs-tech");
            var divWrapper = document.createElement("div");
            divWrapper.appendChild(div);
            if (!_isOnMobile && !this.options_.ytControls) {
                var divBlocker = document.createElement("div");
                divBlocker.setAttribute("class", "vjs-iframe-blocker");
                divBlocker.setAttribute("style", "position:absolute;top:0;left:0;width:100%;height:100%");
                divBlocker.onclick = function() {
                    this.pause()
                }
                .bind(this);
                divWrapper.appendChild(divBlocker)
            }
            return divWrapper
        },
        initYTPlayer: function() {
            var playerVars = {
                controls: 0,
                modestbranding: 1,
                rel: 0,
                showinfo: 0,
                loop: this.options_.loop ? 1 : 0
            };
            if (typeof this.options_.autohide !== "undefined") {
                playerVars.autohide = this.options_.autohide
            }
            if (typeof this.options_["cc_load_policy"] !== "undefined") {
                playerVars["cc_load_policy"] = this.options_["cc_load_policy"]
            }
            if (typeof this.options_.ytControls !== "undefined") {
                playerVars.controls = this.options_.ytControls
            }
            if (typeof this.options_.disablekb !== "undefined") {
                playerVars.disablekb = this.options_.disablekb
            }
            if (typeof this.options_.end !== "undefined") {
                playerVars.end = this.options_.end
            }
            if (typeof this.options_.color !== "undefined") {
                playerVars.color = this.options_.color
            }
            if (!playerVars.controls) {
                playerVars.fs = 0
            } else if (typeof this.options_.fs !== "undefined") {
                playerVars.fs = this.options_.fs
            }
            if (typeof this.options_.end !== "undefined") {
                playerVars.end = this.options_.end
            }
            if (typeof this.options_.hl !== "undefined") {
                playerVars.hl = this.options_.hl
            } else if (typeof this.options_.language !== "undefined") {
                playerVars.hl = this.options_.language.substr(0, 2)
            }
            if (typeof this.options_["iv_load_policy"] !== "undefined") {
                playerVars["iv_load_policy"] = this.options_["iv_load_policy"]
            }
            if (typeof this.options_.list !== "undefined") {
                playerVars.list = this.options_.list
            } else if (this.url && typeof this.url.listId !== "undefined") {
                playerVars.list = this.url.listId
            }
            if (typeof this.options_.listType !== "undefined") {
                playerVars.listType = this.options_.listType
            }
            if (typeof this.options_.modestbranding !== "undefined") {
                playerVars.modestbranding = this.options_.modestbranding
            }
            if (typeof this.options_.playlist !== "undefined") {
                playerVars.playlist = this.options_.playlist
            }
            if (typeof this.options_.playsinline !== "undefined") {
                playerVars.playsinline = this.options_.playsinline
            }
            if (typeof this.options_.rel !== "undefined") {
                playerVars.rel = this.options_.rel
            }
            if (typeof this.options_.showinfo !== "undefined") {
                playerVars.showinfo = this.options_.showinfo
            }
            if (typeof this.options_.start !== "undefined") {
                playerVars.start = this.options_.start
            }
            if (typeof this.options_.theme !== "undefined") {
                playerVars.theme = this.options_.theme
            }
            if (typeof this.options_.customVars !== "undefined") {
                var customVars = this.options_.customVars;
                Object.keys(customVars).forEach(function(key) {
                    playerVars[key] = customVars[key]
                })
            }
            this.activeVideoId = this.url ? this.url.videoId : null;
            this.activeList = playerVars.list;
            this.ytPlayer = new YT.Player(this.options_.techId,{
                videoId: this.activeVideoId,
                playerVars: playerVars,
                events: {
                    onReady: this.onPlayerReady.bind(this),
                    onPlaybackQualityChange: this.onPlayerPlaybackQualityChange.bind(this),
                    onStateChange: this.onPlayerStateChange.bind(this),
                    onError: this.onPlayerError.bind(this)
                }
            })
        },
        onPlayerReady: function() {
            if (this.options_.muted) {
                this.ytPlayer.mute()
            }
            this.playerReady_ = true;
            this.triggerReady();
            if (this.playOnReady) {
                this.play()
            } else if (this.cueOnReady) {
                this.ytPlayer.cueVideoById(this.url.videoId);
                this.activeVideoId = this.url.videoId
            }
        },
        onPlayerPlaybackQualityChange: function() {},
        onPlayerStateChange: function(e) {
            var state = e.data;
            if (state === this.lastState || this.errorNumber) {
                return
            }
            this.lastState = state;
            switch (state) {
            case -1:
                this.trigger("loadstart");
                this.trigger("loadedmetadata");
                this.trigger("durationchange");
                break;
            case YT.PlayerState.ENDED:
                this.trigger("ended");
                break;
            case YT.PlayerState.PLAYING:
                this.trigger("timeupdate");
                this.trigger("durationchange");
                this.trigger("playing");
                this.trigger("play");
                if (this.isSeeking) {
                    this.onSeeked()
                }
                break;
            case YT.PlayerState.PAUSED:
                this.trigger("canplay");
                if (this.isSeeking) {
                    this.onSeeked()
                } else {
                    this.trigger("pause")
                }
                break;
            case YT.PlayerState.BUFFERING:
                this.player_.trigger("timeupdate");
                this.player_.trigger("waiting");
                break
            }
        },
        onPlayerError: function(e) {
            this.errorNumber = e.data;
            this.trigger("error");
            this.ytPlayer.stopVideo()
        },
        error: function() {
            switch (this.errorNumber) {
            case 5:
                return {
                    code: "Error while trying to play the video"
                };
            case 2:
            case 100:
                return {
                    code: "Unable to find the video"
                };
            case 101:
            case 150:
                return {
                    code: "Playback on other Websites has been disabled by the video owner."
                }
            }
            return {
                code: "YouTube unknown error (" + this.errorNumber + ")"
            }
        },
        src: function(src) {
            if (src) {
                this.setSrc({
                    src: src
                })
            }
            return this.source
        },
        poster: function() {
            if (_isOnMobile) {
                return null
            }
            return this.poster_
        },
        setPoster: function(poster) {
            this.poster_ = poster
        },
        setSrc: function(source) {
            if (!source || !source.src) {
                return
            }
            delete this.errorNumber;
            this.source = source;
            this.url = Youtube.parseUrl(source.src);
            if (!this.options_.poster) {
                if (this.url.videoId) {
                    this.poster_ = "https://img.youtube.com/vi/" + this.url.videoId + "/0.jpg";
                    this.trigger("posterchange");
                    this.checkHighResPoster()
                }
            }
            if (this.options_.autoplay && !_isOnMobile) {
                if (this.isReady_) {
                    this.play()
                } else {
                    this.playOnReady = true
                }
            } else if (this.activeVideoId !== this.url.videoId) {
                if (this.isReady_) {
                    this.ytPlayer.cueVideoById(this.url.videoId);
                    this.activeVideoId = this.url.videoId
                } else {
                    this.cueOnReady = true
                }
            }
        },
        autoplay: function() {
            return this.options_.autoplay
        },
        setAutoplay: function(val) {
            this.options_.autoplay = val
        },
        loop: function() {
            return this.options_.loop
        },
        setLoop: function(val) {
            this.options_.loop = val
        },
        play: function() {
            if (!this.url || !this.url.videoId) {
                return
            }
            this.wasPausedBeforeSeek = false;
            if (this.isReady_) {
                if (this.url.listId) {
                    if (this.activeList === this.url.listId) {
                        this.ytPlayer.playVideo()
                    } else {
                        this.ytPlayer.loadPlaylist(this.url.listId);
                        this.activeList = this.url.listId
                    }
                }
                if (this.activeVideoId === this.url.videoId) {
                    this.ytPlayer.playVideo()
                } else {
                    this.ytPlayer.loadVideoById(this.url.videoId);
                    this.activeVideoId = this.url.videoId
                }
            } else {
                this.trigger("waiting");
                this.playOnReady = true
            }
        },
        pause: function() {
            if (this.ytPlayer) {
                this.ytPlayer.pauseVideo()
            }
        },
        paused: function() {
            return this.ytPlayer ? this.lastState !== YT.PlayerState.PLAYING && this.lastState !== YT.PlayerState.BUFFERING : true
        },
        currentTime: function() {
            return this.ytPlayer ? this.ytPlayer.getCurrentTime() : 0
        },
        setCurrentTime: function(seconds) {
            if (this.lastState === YT.PlayerState.PAUSED) {
                this.timeBeforeSeek = this.currentTime()
            }
            if (!this.isSeeking) {
                this.wasPausedBeforeSeek = this.paused()
            }
            this.ytPlayer.seekTo(seconds, true);
            this.trigger("timeupdate");
            this.trigger("seeking");
            this.isSeeking = true;
            if (this.lastState === YT.PlayerState.PAUSED && this.timeBeforeSeek !== seconds) {
                clearInterval(this.checkSeekedInPauseInterval);
                this.checkSeekedInPauseInterval = setInterval(function() {
                    if (this.lastState !== YT.PlayerState.PAUSED || !this.isSeeking) {
                        clearInterval(this.checkSeekedInPauseInterval)
                    } else if (this.currentTime() !== this.timeBeforeSeek) {
                        this.trigger("timeupdate");
                        this.onSeeked()
                    }
                }
                .bind(this), 250)
            }
        },
        seeking: function() {
            return this.isSeeking
        },
        seekable: function() {
            if (!this.ytPlayer || !this.ytPlayer.getVideoLoadedFraction) {
                return {
                    length: 0,
                    start: function() {
                        throw new Error("This TimeRanges object is empty")
                    },
                    end: function() {
                        throw new Error("This TimeRanges object is empty")
                    }
                }
            }
            var end = this.ytPlayer.getDuration();
            return {
                length: 1,
                start: function() {
                    return 0
                },
                end: function() {
                    return end
                }
            }
        },
        onSeeked: function() {
            clearInterval(this.checkSeekedInPauseInterval);
            this.isSeeking = false;
            if (this.wasPausedBeforeSeek) {
                this.pause()
            }
            this.trigger("seeked")
        },
        playbackRate: function() {
            return this.ytPlayer ? this.ytPlayer.getPlaybackRate() : 1
        },
        setPlaybackRate: function(suggestedRate) {
            if (!this.ytPlayer) {
                return
            }
            this.ytPlayer.setPlaybackRate(suggestedRate);
            this.trigger("ratechange")
        },
        duration: function() {
            return this.ytPlayer ? this.ytPlayer.getDuration() : 0
        },
        currentSrc: function() {
            return this.source && this.source.src
        },
        ended: function() {
            return this.ytPlayer ? this.lastState === YT.PlayerState.ENDED : false
        },
        volume: function() {
            return this.ytPlayer ? this.ytPlayer.getVolume() / 100 : 1
        },
        setVolume: function(percentAsDecimal) {
            if (!this.ytPlayer) {
                return
            }
            this.ytPlayer.setVolume(percentAsDecimal * 100);
            this.setTimeout(function() {
                this.trigger("volumechange")
            }, 50)
        },
        muted: function() {
            return this.ytPlayer ? this.ytPlayer.isMuted() : false
        },
        setMuted: function(mute) {
            if (!this.ytPlayer) {
                return
            } else {
                this.muted(true)
            }
            if (mute) {
                this.ytPlayer.mute()
            } else {
                this.ytPlayer.unMute()
            }
            this.setTimeout(function() {
                this.trigger("volumechange")
            }, 50)
        },
        buffered: function() {
            if (!this.ytPlayer || !this.ytPlayer.getVideoLoadedFraction) {
                return {
                    length: 0,
                    start: function() {
                        throw new Error("This TimeRanges object is empty")
                    },
                    end: function() {
                        throw new Error("This TimeRanges object is empty")
                    }
                }
            }
            var end = this.ytPlayer.getVideoLoadedFraction() * this.ytPlayer.getDuration();
            return {
                length: 1,
                start: function() {
                    return 0
                },
                end: function() {
                    return end
                }
            }
        },
        preload: function() {},
        load: function() {},
        reset: function() {},
        supportsFullScreen: function() {
            return true
        },
        checkHighResPoster: function() {
            var uri = "https://img.youtube.com/vi/" + this.url.videoId + "/maxresdefault.jpg";
            try {
                var image = new Image;
                image.onload = function() {
                    if ("naturalHeight"in image) {
                        if (image.naturalHeight <= 90 || image.naturalWidth <= 120) {
                            return
                        }
                    } else if (image.height <= 90 || image.width <= 120) {
                        return
                    }
                    this.poster_ = uri;
                    this.trigger("posterchange")
                }
                .bind(this);
                image.onerror = function() {}
                ;
                image.src = uri
            } catch (e) {}
        }
    });
    Youtube.isSupported = function() {
        return true
    }
    ;
    Youtube.canPlaySource = function(e) {
        return Youtube.canPlayType(e.type)
    }
    ;
    Youtube.canPlayType = function(e) {
        return e === "video/youtube"
    }
    ;
    var _isOnMobile = videojs.browser.IS_IOS || useNativeControlsOnAndroid();
    Youtube.parseUrl = function(url) {
        var result = {
            videoId: null
        };
        var regex = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        var match = url.match(regex);
        if (match && match[2].length === 11) {
            result.videoId = match[2]
        }
        var regPlaylist = /[?&]list=([^#\&\?]+)/;
        match = url.match(regPlaylist);
        if (match && match[1]) {
            result.listId = match[1]
        }
        return result
    }
    ;
    function apiLoaded() {
        YT.ready(function() {
            Youtube.isApiReady = true;
            for (var i = 0; i < Youtube.apiReadyQueue.length; ++i) {
                Youtube.apiReadyQueue[i].initYTPlayer()
            }
        })
    }
    function loadScript(src, callback) {
        var loaded = false;
        var tag = document.createElement("script");
        var firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        tag.onload = function() {
            if (!loaded) {
                loaded = true;
                callback()
            }
        }
        ;
        tag.onreadystatechange = function() {
            if (!loaded && (this.readyState === "complete" || this.readyState === "loaded")) {
                loaded = true;
                callback()
            }
        }
        ;
        tag.src = src
    }
    function injectCss() {
        var css = ".vjs-youtube .vjs-iframe-blocker { display: none; }" + ".vjs-youtube.vjs-user-inactive .vjs-iframe-blocker { display: block; }" + ".vjs-youtube .vjs-poster { background-size: cover; }" + ".vjs-youtube-mobile .vjs-big-play-button { display: none; }";
        var head = document.head || document.getElementsByTagName("head")[0];
        var style = document.createElement("style");
        style.type = "text/css";
        if (style.styleSheet) {
            style.styleSheet.cssText = css
        } else {
            style.appendChild(document.createTextNode(css))
        }
        head.appendChild(style)
    }
    function useNativeControlsOnAndroid() {
        var stockRegex = window.navigator.userAgent.match(/applewebkit\/(\d*).*Version\/(\d*.\d*)/i);
        return videojs.browser.IS_ANDROID && videojs.browser.ANDROID_VERSION < 5 && stockRegex && stockRegex[2] > 0
    }
    Youtube.apiReadyQueue = [];
    loadScript("https://www.youtube.com/iframe_api", apiLoaded);
    injectCss();
    if (typeof videojs.registerTech !== "undefined") {
        videojs.registerTech("Youtube", Youtube)
    } else {
        videojs.registerComponent("Youtube", Youtube)
    }
});
(function($) {
    "use strict";
    var Util = function() {
        function Util() {}
        Util.prototype.css2json = function(css) {
            var s = {};
            if (!css)
                return s;
            if (css instanceof CSSStyleDeclaration) {
                for (var i in css) {
                    if (css[i].toLowerCase) {
                        s[css[i].toLowerCase()] = css[css[i]]
                    }
                }
            } else if (typeof css == "string") {
                css = css.split(";");
                for (var i in css) {
                    var l = css[i].split(":");
                    if (l.length == 2) {
                        s[l[0].toLowerCase().trim()] = l[1].trim()
                    }
                }
            }
            return s
        }
        ;
        return Util
    }();
    var WeakMap = window.WeakMap || window.MozWeakMap || (WeakMap = function() {
        function WeakMap() {
            this.keys = [];
            this.values = []
        }
        WeakMap.prototype.get = function(key) {
            var i, item, j, len, ref;
            ref = this.keys;
            for (i = j = 0,
            len = ref.length; j < len; i = ++j) {
                item = ref[i];
                if (item === key) {
                    return this.values[i]
                }
            }
        }
        ;
        WeakMap.prototype.set = function(key, value) {
            var i, item, j, len, ref;
            ref = this.keys;
            for (i = j = 0,
            len = ref.length; j < len; i = ++j) {
                item = ref[i];
                if (item === key) {
                    this.values[i] = value;
                    return
                }
            }
            this.keys.push(key);
            return this.values.push(value)
        }
        ;
        return WeakMap
    }());
    var ITEM_DATA_NAME = "pinto";
    var _counter = 0;
    function Pinto(container, config) {
        this.container = null;
        this.items = null;
        this.config = null;
        this.containerStyleCache = null;
        this.styleCache = null;
        this.timer = null;
        this.id = ++_counter;
        this.init(container, config)
    }
    Pinto.prototype = {
        defaults: {
            itemClass: "pinto",
            itemSkipClass: "pintoskip",
            itemWidth: 220,
            gapX: 10,
            gapY: 10,
            align: "left",
            fitWidth: true,
            autoResize: true,
            resizeDelay: 50,
            onItemLayout: function(el, column, position) {}
        },
        init: function(container, config) {
            this.destroy();
            this.container = container;
            this.config = config;
            this.styleCache = new WeakMap;
            this.build();
            this.layout()
        },
        applyHandlers: function() {
            if (this.config.autoResize) {
                $(window).on("resize.pinto" + this.id, $.proxy(this.onResizeHandler, this))
            }
            this.container.on("remove", $.proxy(this.resetHandlers, this))
        },
        resetHandlers: function() {
            $(window).off("resize.pinto" + this.id, $.proxy(this.onResizeHandler, this));
            clearTimeout(this.timer)
        },
        onResizeHandler: function() {
            clearTimeout(this.timer);
            this.timer = setTimeout($.proxy(this.layout, this), this.config.resizeDelay)
        },
        build: function() {
            this.applyHandlers();
            this.containerStyleCache = this.util().css2json(this.container.attr("style"));
            this.items = this.container.find("." + this.config.itemClass);
            if (this.items.length) {
                this.items.each($.proxy(function(index, item) {
                    this.cacheStyle(item)
                }, this))
            }
            if (this.container.css("position") == "static") {
                this.container.css("position", "relative")
            }
        },
        layout: function() {
            if (!this.container.is(":visible")) {
                return
            }
            var width = this.container.innerWidth()
              , itemWidth = this.config.itemWidth
              , gapX = parseInt(this.config.gapX || 0)
              , gapY = parseInt(this.config.gapY || 0)
              , offset = 0
              , colsCount = 0;
            while (width > offset) {
                offset += itemWidth;
                if (width >= offset) {
                    colsCount++
                } else {
                    break
                }
                offset += gapX
            }
            colsCount = Math.max(colsCount, 1);
            var cols = []
              , colsH = []
              , i = colsCount;
            while (i--) {
                cols.push(0);
                colsH.push(0)
            }
            offset = 0;
            var gap = (colsCount - 1) * gapX;
            if (this.config.fitWidth) {
                itemWidth += Math.floor(.5 + (width - gap - colsCount * itemWidth) / colsCount)
            } else {
                if (this.config.align === "center") {
                    offset += Math.floor(.5 + (width - gap - colsCount * itemWidth) >> 1)
                } else if (this.config.align === "right") {
                    offset += Math.floor(.5 + (width - gap - colsCount * itemWidth))
                }
            }
            this.items.each($.proxy(function(index, item) {
                var $item = $(item);
                if (!$item.is(":visible") || $item.hasClass(this.itemSkipClass)) {
                    return
                }
                var i = this.getSmallestIndex(colsH);
                $item.css({
                    position: "absolute",
                    top: colsH[i] + "px",
                    left: (itemWidth + gapX) * i + offset + "px",
                    width: itemWidth
                });
                colsH[i] += $item.outerHeight() + gapY;
                if (typeof this.config.onItemLayout == "function") {
                    this.config.onItemLayout.call(this, item, i, cols[i])
                }
                cols[i]++
            }, this));
            var height = 0;
            i = colsCount;
            while (i--)
                if (colsH[i] > height)
                    height = colsH[i];
            this.container.css({
                height: height
            })
        },
        destroy: function() {
            this.resetHandlers();
            if (this.containerStyleCache) {
                this.container.removeAttr("style").css(this.containerStyleCache)
            }
            if (this.items) {
                this.items.each($.proxy(function(index, item) {
                    this.resetStyle(item)
                }, this))
            }
            this.items = null;
            this.config = null;
            this.containerStyleCache = null,
            this.styleCache = null;
            this.timer = null
        },
        sync: function() {
            if (this.items) {
                this.items.each($.proxy(function(index, item) {
                    this.resetStyle(item)
                }, this))
            }
            this.items = $("." + this.config.itemClass);
            if (this.items.length) {
                this.items.each($.proxy(function(index, item) {
                    this.cacheStyle(item)
                }, this))
            }
            this.layout()
        },
        cacheStyle: function(item) {
            return this.styleCache.set(item, this.util().css2json($(item).attr("style")))
        },
        resetStyle: function(item) {
            $(item).removeAttr("style").css(this.styleCache.get(item))
        },
        getSmallestIndex: function(a) {
            var index = 0;
            for (var i = 1, len = a.length; i < len; i++) {
                if (a[i] < a[index])
                    index = i
            }
            return index
        },
        util: function() {
            return this._util != null ? this._util : this._util = new Util
        }
    };
    $.fn.pinto = function(CfgOrCmd, CmdArgs) {
        return this.each(function() {
            var container = $(this)
              , instance = container.data(ITEM_DATA_NAME)
              , options = $.isPlainObject(CfgOrCmd) ? CfgOrCmd : {};
            if (CfgOrCmd == "layout") {
                if (!instance) {
                    throw Error("Calling 'layout' method on not initialized instance is forbidden")
                }
                instance.layout();
                return
            }
            if (CfgOrCmd == "sync") {
                if (!instance) {
                    throw Error("Calling 'sync' method on not initialized instance is forbidden")
                }
                instance.sync();
                return
            }
            if (CfgOrCmd == "destroy") {
                if (!instance) {
                    throw Error("Calling 'destroy' method on not initialized instance is forbidden")
                }
                container.removeData(ITEM_DATA_NAME);
                instance.destroy();
                return
            }
            if (instance) {
                var config = $.extend({}, instance.config, options);
                instance.init(container, config)
            } else {
                var config = $.extend({}, Pinto.prototype.defaults, options);
                instance = new Pinto(container,config);
                container.data(ITEM_DATA_NAME, instance)
            }
        })
    }
}
)(window.jQuery);
if (typeof Object.create !== "function") {
    Object.create = function(obj) {
        function F() {}
        F.prototype = obj;
        return new F
    }
}
(function($, window, document, undefined) {
    var EZP = {
        init: function(options, elem) {
            var self = this;
            var $galleries;
            self.elem = elem;
            self.$elem = $(elem);
            self.options = $.extend({}, $.fn.ezPlus.options, self.responsiveConfig(options || {}));
            self.imageSrc = self.$elem.data(self.options.attrImageZoomSrc) ? self.$elem.data(self.options.attrImageZoomSrc) : self.$elem.attr("src");
            if (!self.options.enabled) {
                return
            }
            if (self.options.tint) {
                self.options.lensColour = "transparent";
                self.options.lensOpacity = "1"
            }
            if (self.options.zoomType === "inner") {
                self.options.showLens = false
            }
            if (self.options.zoomType === "lens") {
                self.options.zoomWindowWidth = 0
            }
            if (self.options.zoomId === -1) {
                self.options.zoomId = generateUUID()
            }
            self.$elem.parent().removeAttr("title").removeAttr("alt");
            self.zoomImage = self.imageSrc;
            self.refresh(1);
            $galleries = $(self.options.gallery ? "#" + self.options.gallery : self.options.gallerySelector);
            $galleries.on("click.zoom", self.options.galleryItem, function(e) {
                if (self.options.galleryActiveClass) {
                    $(self.options.galleryItem, $galleries).removeClass(self.options.galleryActiveClass);
                    $(this).addClass(self.options.galleryActiveClass)
                }
                if (this.tagName === "A") {
                    e.preventDefault()
                }
                if ($(this).data(self.options.attrImageZoomSrc)) {
                    self.zoomImagePre = $(this).data(self.options.attrImageZoomSrc)
                } else {
                    self.zoomImagePre = $(this).data("image")
                }
                self.swaptheimage($(this).data("image"), self.zoomImagePre);
                if (this.tagName === "A") {
                    return false
                }
            });
            function generateUUID() {
                var d = (new Date).getTime();
                var uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                    var r = (d + Math.random() * 16) % 16 | 0;
                    d = Math.floor(d / 16);
                    return (c == "x" ? r : r & 3 | 8).toString(16)
                });
                return uuid
            }
        },
        refresh: function(length) {
            var self = this;
            setTimeout(function() {
                self.fetch(self.imageSrc, self.$elem, self.options.minZoomLevel)
            }, length || self.options.refresh)
        },
        fetch: function(imgsrc, element, minZoom) {
            var self = this;
            var newImg = new Image;
            newImg.onload = function() {
                if (newImg.width / element.width() <= minZoom) {
                    self.largeWidth = element.width() * minZoom
                } else {
                    self.largeWidth = newImg.width
                }
                if (newImg.height / element.height() <= minZoom) {
                    self.largeHeight = element.height() * minZoom
                } else {
                    self.largeHeight = newImg.height
                }
                self.startZoom();
                self.currentImage = self.imageSrc;
                self.options.onZoomedImageLoaded(self.$elem)
            }
            ;
            self.setImageSource(newImg, imgsrc);
            return
        },
        setImageSource: function(image, src) {
            image.src = src
        },
        startZoom: function() {
            var self = this;
            self.nzWidth = self.$elem.width();
            self.nzHeight = self.$elem.height();
            self.isWindowActive = false;
            self.isLensActive = false;
            self.isTintActive = false;
            self.overWindow = false;
            if (self.options.imageCrossfade) {
                self.zoomWrap = self.$elem.wrap('<div style="height:' + self.nzHeight + "px;width:" + self.nzWidth + 'px;" class="zoomWrapper" />');
                self.$elem.css("position", "absolute")
            }
            self.zoomLock = 1;
            self.scrollingLock = false;
            self.changeBgSize = false;
            self.currentZoomLevel = self.options.zoomLevel;
            self.updateOffset(self);
            self.widthRatio = self.largeWidth / self.currentZoomLevel / self.nzWidth;
            self.heightRatio = self.largeHeight / self.currentZoomLevel / self.nzHeight;
            function getWindowZoomStyle() {
                return "display: none;" + "position: absolute;" + "float: left;" + "height: " + String(self.options.zoomWindowHeight) + "px;" + "width: " + String(self.options.zoomWindowWidth) + "px;" + "text-align: center;" + "border: " + String(self.options.borderSize) + "px solid " + self.options.borderColour + ";" + "background-size: " + self.largeWidth / self.currentZoomLevel + "px " + self.largeHeight / self.currentZoomLevel + "px;" + "background-position: 0px 0px;" + "background-repeat: no-repeat;" + "background-color: " + String(self.options.zoomWindowBgColour) + ";" + "overflow: hidden;" + "z-index: 100;"
            }
            if (self.options.zoomType === "window") {
                self.zoomWindowStyle = getWindowZoomStyle()
            }
            function getInnerZoomStyle() {
                var borderWidth = self.$elem.css("border-left-width");
                return "display: none;" + "position: absolute;" + "float: left;" + "height: " + String(self.nzHeight) + "px;" + "width: " + String(self.nzWidth) + "px;" + "margin-top: " + String(borderWidth) + ";" + "margin-left: " + String(borderWidth) + ";" + "border: " + String(self.options.borderSize) + "px solid " + self.options.borderColour + ";" + "background-position: 0px 0px;" + "background-repeat: no-repeat;" + "cursor:" + self.options.cursor + ";" + "overflow: hidden;" + "zindex: " + self.options.zIndex + ";"
            }
            if (self.options.zoomType === "inner") {
                self.zoomWindowStyle = getInnerZoomStyle()
            }
            function getWindowLensStyle() {
                if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {
                    self.lensHeight = self.nzHeight
                } else {
                    self.lensHeight = String(self.options.zoomWindowHeight / self.heightRatio)
                }
                if (self.largeWidth < self.options.zoomWindowWidth) {
                    self.lensWidth = self.nzWidth
                } else {
                    self.lensWidth = String(self.options.zoomWindowWidth / self.widthRatio)
                }
                return "display: none;" + "position: absolute;" + "float: right;" + "height: " + self.lensHeight + "px;" + "width: " + self.lensWidth + "px;" + "border: " + self.options.lensBorderSize + "px" + " solid " + self.options.lensBorderColour + ";" + "background-position: 0px 0px;" + "background-repeat: no-repeat;" + "background-color: " + self.options.lensColour + ";" + "opacity: " + self.options.lensOpacity + ";" + "filter: alpha(opacity = " + self.options.lensOpacity * 100 + ");" + "zoom: 1;" + "cursor:" + self.options.cursor + ";" + "z-index: 999;" + "overflow: hidden;"
            }
            if (self.options.zoomType === "window") {
                self.lensStyle = getWindowLensStyle()
            }
            self.tintStyle = "display: block;" + "position: absolute;" + "height: " + self.nzHeight + "px;" + "width: " + self.nzWidth + "px;" + "background-color: " + self.options.tintColour + ";" + "filter: alpha(opacity=0);" + "opacity: 0;";
            self.lensRound = "";
            if (self.options.zoomType === "lens") {
                self.lensStyle = "display: none;" + "position: absolute;" + "float: left;" + "height:" + String(self.options.lensSize) + "px;" + "width:" + String(self.options.lensSize) + "px;" + "border: " + String(self.options.borderSize) + "px solid " + self.options.borderColour + ";" + "background-position: 0px 0px;" + "background-repeat: no-repeat;" + "background-color: " + self.options.lensColour + ";" + "cursor:" + self.options.cursor + ";"
            }
            if (self.options.lensShape === "round") {
                self.lensRound = "border-radius: " + String(self.options.lensSize / 2 + self.options.borderSize) + "px;"
            }
            self.zoomContainer = $('<div class="zoomContainer" ' + 'uuid="' + self.options.zoomId + '"' + 'style="' + "position: absolute;" + "top: " + self.nzOffset.top + "px;" + "left: " + self.nzOffset.left + "px;" + "height: " + self.nzHeight + "px;" + "" + "width: " + self.nzWidth + "px;" + "z-index: " + self.options.zIndex + '"></div>');
            if (self.$elem.attr("id")) {
                self.zoomContainer.attr("id", self.$elem.attr("id") + "-zoomContainer")
            }
            $(self.options.zoomContainerAppendTo).append(self.zoomContainer);
            if (self.options.containLensZoom && self.options.zoomType === "lens") {
                self.zoomContainer.css("overflow", "hidden")
            }
            if (self.options.zoomType !== "inner") {
                self.zoomLens = $('<div class="zoomLens" style="' + self.lensStyle + self.lensRound + '">&nbsp;</div>').appendTo(self.zoomContainer).click(function() {
                    self.$elem.trigger("click")
                });
                if (self.options.tint) {
                    self.tintContainer = $("<div/>").addClass("tintContainer");
                    self.zoomTint = $('<div class="zoomTint" style="' + self.tintStyle + '"></div>');
                    self.zoomLens.wrap(self.tintContainer);
                    self.zoomTintcss = self.zoomLens.after(self.zoomTint);
                    self.zoomTintImage = $('<img style="' + "position: absolute;" + "top: 0px;" + "left: 0px;" + "height: " + self.nzHeight + 'px;" ' + "width: " + self.nzWidth + "px; " + "max-width: none; " + 'src="' + self.$elem.attr("src") + '">').appendTo(self.zoomLens).click(function() {
                        self.$elem.trigger("click")
                    })
                }
            }
            var targetZoomContainer = isNaN(self.options.zoomWindowPosition) ? "body" : self.zoomContainer;
            self.zoomWindow = $('<div style="' + "z-index: 999;" + "top: " + self.windowOffsetTop + "px;" + "left: " + self.windowOffsetLeft + "px;" + self.zoomWindowStyle + '" class="zoomWindow">&nbsp;</div>').appendTo(targetZoomContainer).click(function() {
                self.$elem.trigger("click")
            });
            self.zoomWindowContainer = $("<div/>").addClass("zoomWindowContainer").css("width", self.options.zoomWindowWidth);
            self.zoomWindow.wrap(self.zoomWindowContainer);
            if (self.options.zoomType === "lens") {
                self.zoomLens.css("background-image", 'url("' + self.imageSrc + '")')
            }
            if (self.options.zoomType === "window") {
                self.zoomWindow.css("background-image", 'url("' + self.imageSrc + '")')
            }
            if (self.options.zoomType === "inner") {
                self.zoomWindow.css("background-image", 'url("' + self.imageSrc + '")')
            }
            if (self.options.touchEnabled) {
                self.$elem.bind("touchmove.ezpspace", function(e) {
                    e.preventDefault();
                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                    self.setPosition(touch)
                });
                self.zoomContainer.bind("touchmove.ezpspace", function(e) {
                    self.setElements("show");
                    e.preventDefault();
                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                    self.setPosition(touch)
                });
                self.zoomContainer.bind("touchend.ezpspace", function(e) {
                    self.showHideWindow("hide");
                    if (self.options.showLens) {
                        self.showHideLens("hide")
                    }
                    if (self.options.tint && self.options.zoomType !== "inner") {
                        self.showHideTint("hide")
                    }
                });
                self.$elem.bind("touchend.ezpspace", function(e) {
                    self.showHideWindow("hide");
                    if (self.options.showLens) {
                        self.showHideLens("hide")
                    }
                    if (self.options.tint && self.options.zoomType !== "inner") {
                        self.showHideTint("hide")
                    }
                });
                if (self.options.showLens) {
                    self.zoomLens.bind("touchmove.ezpspace", function(e) {
                        e.preventDefault();
                        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                        self.setPosition(touch)
                    });
                    self.zoomLens.bind("touchend.ezpspace", function(e) {
                        self.showHideWindow("hide");
                        if (self.options.showLens) {
                            self.showHideLens("hide")
                        }
                        if (self.options.tint && self.options.zoomType !== "inner") {
                            self.showHideTint("hide")
                        }
                    })
                }
            }
            self.$elem.bind("mousemove.ezpspace", function(e) {
                if (self.overWindow === false) {
                    self.setElements("show")
                }
                if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
                    self.setPosition(e);
                    self.currentLoc = e
                }
                self.lastX = e.clientX;
                self.lastY = e.clientY
            });
            self.zoomContainer.bind("click.ezpspace touchstart.ezpspace", self.options.onImageClick);
            self.zoomContainer.bind("mousemove.ezpspace", function(e) {
                if (self.overWindow === false) {
                    self.setElements("show")
                }
                mouseMoveZoomHandler(e)
            });
            function mouseMoveZoomHandler(e) {
                if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
                    self.setPosition(e);
                    self.currentLoc = e
                }
                self.lastX = e.clientX;
                self.lastY = e.clientY
            }
            var elementToTrack = null;
            if (self.options.zoomType !== "inner") {
                elementToTrack = self.zoomLens
            }
            if (self.options.tint && self.options.zoomType !== "inner") {
                elementToTrack = self.zoomTint
            }
            if (self.options.zoomType === "inner") {
                elementToTrack = self.zoomWindow
            }
            if (elementToTrack) {
                elementToTrack.bind("mousemove.ezpspace", mouseMoveZoomHandler)
            }
            self.zoomContainer.add(self.$elem).mouseenter(function() {
                if (self.overWindow === false) {
                    self.setElements("show")
                }
            }).mouseleave(function() {
                if (!self.scrollLock) {
                    self.setElements("hide");
                    self.options.onDestroy(self.$elem)
                }
            });
            if (self.options.zoomType !== "inner") {
                self.zoomWindow.mouseenter(function() {
                    self.overWindow = true;
                    self.setElements("hide")
                }).mouseleave(function() {
                    self.overWindow = false
                })
            }
            if (self.options.minZoomLevel) {
                self.minZoomLevel = self.options.minZoomLevel
            } else {
                self.minZoomLevel = self.options.scrollZoomIncrement * 2
            }
            if (self.options.scrollZoom) {
                self.zoomContainer.add(self.$elem).bind("wheel DOMMouseScroll MozMousePixelScroll", function(e) {
                    self.scrollLock = true;
                    clearTimeout($.data(this, "timer"));
                    $.data(this, "timer", setTimeout(function() {
                        self.scrollLock = false
                    }, 250));
                    var theEvent = e.originalEvent.deltaY || e.originalEvent.detail * -1;
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    e.preventDefault();
                    if (theEvent == 0) {
                        return false
                    }
                    if (theEvent / 120 > 0) {
                        var nextZoomLevel = parseFloat(self.currentZoomLevel) - self.options.scrollZoomIncrement;
                        if (nextZoomLevel >= parseFloat(self.minZoomLevel)) {
                            self.changeZoomLevel(nextZoomLevel)
                        }
                    } else {
                        if (!self.fullheight && !self.fullwidth || !self.options.mantainZoomAspectRatio) {
                            var nextZoomLevel = parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement;
                            if (self.options.maxZoomLevel) {
                                if (nextZoomLevel <= self.options.maxZoomLevel) {
                                    self.changeZoomLevel(nextZoomLevel)
                                }
                            } else {
                                self.changeZoomLevel(nextZoomLevel)
                            }
                        }
                    }
                    return false
                })
            }
        },
        destroy: function() {
            var self = this;
            self.$elem.unbind("ezpspace");
            $(self.zoomContainer).remove();
            if (self.options.loadingIcon && !!self.spinner && !!self.spinner.length) {
                self.spinner.remove();
                delete self.spinner
            }
        },
        getIdentifier: function() {
            var self = this;
            return self.options.zoomId
        },
        setElements: function(type) {
            var self = this;
            if (!self.options.zoomEnabled) {
                return false
            }
            if (type === "show") {
                if (self.isWindowSet) {
                    if (self.options.zoomType === "inner") {
                        self.showHideWindow("show")
                    }
                    if (self.options.zoomType === "window") {
                        self.showHideWindow("show")
                    }
                    if (self.options.showLens) {
                        self.showHideLens("show")
                    }
                    if (self.options.tint && self.options.zoomType !== "inner") {
                        self.showHideTint("show")
                    }
                }
            }
            if (type === "hide") {
                if (self.options.zoomType === "window") {
                    self.showHideWindow("hide")
                }
                if (!self.options.tint) {
                    self.showHideWindow("hide")
                }
                if (self.options.showLens) {
                    self.showHideLens("hide")
                }
                if (self.options.tint) {
                    self.showHideTint("hide")
                }
            }
        },
        setPosition: function(e) {
            var self = this;
            if (!self.options.zoomEnabled) {
                return false
            }
            self.nzHeight = self.$elem.height();
            self.nzWidth = self.$elem.width();
            self.updateOffset(self);
            if (self.options.tint && self.options.zoomType !== "inner") {
                self.zoomTint.css({
                    top: 0,
                    left: 0
                })
            }
            if (self.options.responsive && !self.options.scrollZoom) {
                if (self.options.showLens) {
                    var lensHeight, lensWidth;
                    if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
                        self.lensHeight = self.nzHeight
                    } else {
                        self.lensHeight = String(self.options.zoomWindowHeight / self.heightRatio)
                    }
                    if (self.largeWidth < self.options.zoomWindowWidth) {
                        self.lensWidth = self.nzWidth
                    } else {
                        self.lensWidth = self.options.zoomWindowWidth / self.widthRatio
                    }
                    self.widthRatio = self.largeWidth / self.nzWidth;
                    self.heightRatio = self.largeHeight / self.nzHeight;
                    if (self.options.zoomType !== "lens") {
                        if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
                            self.lensHeight = self.nzHeight
                        } else {
                            self.lensHeight = String(self.options.zoomWindowHeight / self.heightRatio)
                        }
                        if (self.nzWidth < self.options.zoomWindowHeight / self.heightRatio) {
                            self.lensWidth = self.nzWidth
                        } else {
                            self.lensWidth = String(self.options.zoomWindowWidth / self.widthRatio)
                        }
                        self.zoomLens.css({
                            width: self.lensWidth,
                            height: self.lensHeight
                        });
                        if (self.options.tint) {
                            self.zoomTintImage.css({
                                width: self.nzWidth,
                                height: self.nzHeight
                            })
                        }
                    }
                    if (self.options.zoomType === "lens") {
                        self.zoomLens.css({
                            width: String(self.options.lensSize) + "px",
                            height: String(self.options.lensSize) + "px"
                        })
                    }
                }
            }
            self.zoomContainer.css({
                top: self.nzOffset.top,
                left: self.nzOffset.left,
                width: self.nzWidth,
                height: self.nzHeight
            });
            self.mouseLeft = parseInt(e.pageX - self.nzOffset.left);
            self.mouseTop = parseInt(e.pageY - self.nzOffset.top);
            if (self.options.zoomType === "window") {
                var zoomLensHeight = self.zoomLens.height() / 2;
                var zoomLensWidth = self.zoomLens.width() / 2;
                self.Etoppos = self.mouseTop < 0 + zoomLensHeight;
                self.Eboppos = self.mouseTop > self.nzHeight - zoomLensHeight - self.options.lensBorderSize * 2;
                self.Eloppos = self.mouseLeft < 0 + zoomLensWidth;
                self.Eroppos = self.mouseLeft > self.nzWidth - zoomLensWidth - self.options.lensBorderSize * 2
            }
            if (self.options.zoomType === "inner") {
                self.Etoppos = self.mouseTop < self.nzHeight / 2 / self.heightRatio;
                self.Eboppos = self.mouseTop > self.nzHeight - self.nzHeight / 2 / self.heightRatio;
                self.Eloppos = self.mouseLeft < 0 + self.nzWidth / 2 / self.widthRatio;
                self.Eroppos = self.mouseLeft > self.nzWidth - self.nzWidth / 2 / self.widthRatio - self.options.lensBorderSize * 2
            }
            if (self.mouseLeft < 0 || self.mouseTop < 0 || self.mouseLeft > self.nzWidth || self.mouseTop > self.nzHeight) {
                self.setElements("hide");
                return
            } else {
                if (self.options.showLens) {
                    self.lensLeftPos = String(Math.floor(self.mouseLeft - self.zoomLens.width() / 2));
                    self.lensTopPos = String(Math.floor(self.mouseTop - self.zoomLens.height() / 2))
                }
                if (self.Etoppos) {
                    self.lensTopPos = 0
                }
                if (self.Eloppos) {
                    self.windowLeftPos = 0;
                    self.lensLeftPos = 0;
                    self.tintpos = 0
                }
                if (self.options.zoomType === "window") {
                    if (self.Eboppos) {
                        self.lensTopPos = Math.max(self.nzHeight - self.zoomLens.height() - self.options.lensBorderSize * 2, 0)
                    }
                    if (self.Eroppos) {
                        self.lensLeftPos = self.nzWidth - self.zoomLens.width() - self.options.lensBorderSize * 2
                    }
                }
                if (self.options.zoomType === "inner") {
                    if (self.Eboppos) {
                        self.lensTopPos = Math.max(self.nzHeight - self.options.lensBorderSize * 2, 0)
                    }
                    if (self.Eroppos) {
                        self.lensLeftPos = self.nzWidth - self.nzWidth - self.options.lensBorderSize * 2
                    }
                }
                if (self.options.zoomType === "lens") {
                    self.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomLens.width() / 2) * -1);
                    self.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomLens.height() / 2) * -1);
                    self.zoomLens.css("background-position", self.windowLeftPos + "px " + self.windowTopPos + "px");
                    if (self.changeBgSize) {
                        if (self.nzHeight > self.nzWidth) {
                            if (self.options.zoomType === "lens") {
                                self.zoomLens.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                            }
                            self.zoomWindow.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                        } else {
                            if (self.options.zoomType === "lens") {
                                self.zoomLens.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                            }
                            self.zoomWindow.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                        }
                        self.changeBgSize = false
                    }
                    self.setWindowPosition(e)
                }
                if (self.options.tint && self.options.zoomType !== "inner") {
                    self.setTintPosition(e)
                }
                if (self.options.zoomType === "window") {
                    self.setWindowPosition(e)
                }
                if (self.options.zoomType === "inner") {
                    self.setWindowPosition(e)
                }
                if (self.options.showLens) {
                    if (self.fullwidth && self.options.zoomType !== "lens") {
                        self.lensLeftPos = 0
                    }
                    self.zoomLens.css({
                        left: self.lensLeftPos + "px",
                        top: self.lensTopPos + "px"
                    })
                }
            }
        },
        showHideZoomContainer: function(change) {
            var self = this;
            if (change === "show") {
                if (self.zoomContainer) {
                    self.zoomContainer.show()
                }
            }
            if (change === "hide") {
                if (self.zoomContainer) {
                    self.zoomContainer.hide()
                }
            }
        },
        showHideWindow: function(change) {
            var self = this;
            if (change === "show") {
                if (!self.isWindowActive && self.zoomWindow) {
                    self.options.onShow(self);
                    if (self.options.zoomWindowFadeIn) {
                        self.zoomWindow.stop(true, true, false).fadeIn(self.options.zoomWindowFadeIn)
                    } else {
                        self.zoomWindow.show()
                    }
                    self.isWindowActive = true
                }
            }
            if (change === "hide") {
                if (self.isWindowActive) {
                    if (self.options.zoomWindowFadeOut) {
                        self.zoomWindow.stop(true, true).fadeOut(self.options.zoomWindowFadeOut, function() {
                            if (self.loop) {
                                clearInterval(self.loop);
                                self.loop = false
                            }
                        })
                    } else {
                        self.zoomWindow.hide()
                    }
                    self.isWindowActive = false
                }
            }
        },
        showHideLens: function(change) {
            var self = this;
            if (change === "show") {
                if (!self.isLensActive) {
                    if (self.zoomLens) {
                        if (self.options.lensFadeIn) {
                            self.zoomLens.stop(true, true, false).fadeIn(self.options.lensFadeIn)
                        } else {
                            self.zoomLens.show()
                        }
                    }
                    self.isLensActive = true
                }
            }
            if (change === "hide") {
                if (self.isLensActive) {
                    if (self.zoomLens) {
                        if (self.options.lensFadeOut) {
                            self.zoomLens.stop(true, true).fadeOut(self.options.lensFadeOut)
                        } else {
                            self.zoomLens.hide()
                        }
                    }
                    self.isLensActive = false
                }
            }
        },
        showHideTint: function(change) {
            var self = this;
            if (change === "show") {
                if (!self.isTintActive && self.zoomTint) {
                    if (self.options.zoomTintFadeIn) {
                        self.zoomTint.css("opacity", self.options.tintOpacity).animate().stop(true, true).fadeIn("slow")
                    } else {
                        self.zoomTint.css("opacity", self.options.tintOpacity).animate();
                        self.zoomTint.show()
                    }
                    self.isTintActive = true
                }
            }
            if (change === "hide") {
                if (self.isTintActive) {
                    if (self.options.zoomTintFadeOut) {
                        self.zoomTint.stop(true, true).fadeOut(self.options.zoomTintFadeOut)
                    } else {
                        self.zoomTint.hide()
                    }
                    self.isTintActive = false
                }
            }
        },
        setLensPosition: function(e) {},
        setWindowPosition: function(e) {
            var self = this;
            if (!isNaN(self.options.zoomWindowPosition)) {
                switch (self.options.zoomWindowPosition) {
                case 1:
                    self.windowOffsetTop = self.options.zoomWindowOffsetY;
                    self.windowOffsetLeft = +self.nzWidth;
                    break;
                case 2:
                    if (self.options.zoomWindowHeight > self.nzHeight) {
                        self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
                        self.windowOffsetLeft = self.nzWidth
                    } else {
                        $.noop()
                    }
                    break;
                case 3:
                    self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2;
                    self.windowOffsetLeft = self.nzWidth;
                    break;
                case 4:
                    self.windowOffsetTop = self.nzHeight;
                    self.windowOffsetLeft = self.nzWidth;
                    break;
                case 5:
                    self.windowOffsetTop = self.nzHeight;
                    self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2;
                    break;
                case 6:
                    if (self.options.zoomWindowHeight > self.nzHeight) {
                        self.windowOffsetTop = self.nzHeight;
                        self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1
                    } else {
                        $.noop()
                    }
                    break;
                case 7:
                    self.windowOffsetTop = self.nzHeight;
                    self.windowOffsetLeft = 0;
                    break;
                case 8:
                    self.windowOffsetTop = self.nzHeight;
                    self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1;
                    break;
                case 9:
                    self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2;
                    self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1;
                    break;
                case 10:
                    if (self.options.zoomWindowHeight > self.nzHeight) {
                        self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
                        self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1
                    } else {
                        $.noop()
                    }
                    break;
                case 11:
                    self.windowOffsetTop = self.options.zoomWindowOffsetY;
                    self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1;
                    break;
                case 12:
                    self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1;
                    self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1;
                    break;
                case 13:
                    self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1;
                    self.windowOffsetLeft = 0;
                    break;
                case 14:
                    if (self.options.zoomWindowHeight > self.nzHeight) {
                        self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1;
                        self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1
                    } else {
                        $.noop()
                    }
                    break;
                case 15:
                    self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1;
                    self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2;
                    break;
                case 16:
                    self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1;
                    self.windowOffsetLeft = self.nzWidth;
                    break;
                default:
                    self.windowOffsetTop = self.options.zoomWindowOffsetY;
                    self.windowOffsetLeft = self.nzWidth
                }
            } else {
                self.externalContainer = $(self.options.zoomWindowPosition);
                if (!self.externalContainer.length) {
                    self.externalContainer = $("#" + self.options.zoomWindowPosition)
                }
                self.externalContainerWidth = self.externalContainer.width();
                self.externalContainerHeight = self.externalContainer.height();
                self.externalContainerOffset = self.externalContainer.offset();
                self.windowOffsetTop = self.externalContainerOffset.top;
                self.windowOffsetLeft = self.externalContainerOffset.left
            }
            self.isWindowSet = true;
            self.windowOffsetTop = self.windowOffsetTop + self.options.zoomWindowOffsetY;
            self.windowOffsetLeft = self.windowOffsetLeft + self.options.zoomWindowOffsetX;
            self.zoomWindow.css({
                top: self.windowOffsetTop,
                left: self.windowOffsetLeft
            });
            if (self.options.zoomType === "inner") {
                self.zoomWindow.css({
                    top: 0,
                    left: 0
                })
            }
            self.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1);
            self.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1);
            if (self.Etoppos) {
                self.windowTopPos = 0
            }
            if (self.Eloppos) {
                self.windowLeftPos = 0
            }
            if (self.Eboppos) {
                self.windowTopPos = (self.largeHeight / self.currentZoomLevel - self.zoomWindow.height()) * -1
            }
            if (self.Eroppos) {
                self.windowLeftPos = (self.largeWidth / self.currentZoomLevel - self.zoomWindow.width()) * -1
            }
            if (self.fullheight) {
                self.windowTopPos = 0
            }
            if (self.fullwidth) {
                self.windowLeftPos = 0
            }
            if (self.options.zoomType === "window" || self.options.zoomType === "inner") {
                if (self.zoomLock === 1) {
                    if (self.widthRatio <= 1) {
                        self.windowLeftPos = 0
                    }
                    if (self.heightRatio <= 1) {
                        self.windowTopPos = 0
                    }
                }
                if (self.options.zoomType === "window") {
                    if (self.largeHeight < self.options.zoomWindowHeight) {
                        self.windowTopPos = 0
                    }
                    if (self.largeWidth < self.options.zoomWindowWidth) {
                        self.windowLeftPos = 0
                    }
                }
                if (self.options.easing) {
                    if (!self.xp) {
                        self.xp = 0
                    }
                    if (!self.yp) {
                        self.yp = 0
                    }
                    var interval = 16;
                    if (Number.isInteger(parseInt(self.options.easing))) {
                        interval = parseInt(self.options.easing)
                    }
                    if (!self.loop) {
                        self.loop = setInterval(function() {
                            self.xp += (self.windowLeftPos - self.xp) / self.options.easingAmount;
                            self.yp += (self.windowTopPos - self.yp) / self.options.easingAmount;
                            if (self.scrollingLock) {
                                clearInterval(self.loop);
                                self.xp = self.windowLeftPos;
                                self.yp = self.windowTopPos;
                                self.xp = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1;
                                self.yp = ((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1;
                                if (self.changeBgSize) {
                                    if (self.nzHeight > self.nzWidth) {
                                        if (self.options.zoomType === "lens") {
                                            self.zoomLens.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                                        }
                                        self.zoomWindow.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                                    } else {
                                        if (self.options.zoomType !== "lens") {
                                            self.zoomLens.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvalueheight + "px")
                                        }
                                        self.zoomWindow.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                                    }
                                    self.changeBgSize = false
                                }
                                self.zoomWindow.css("background-position", self.windowLeftPos + "px " + self.windowTopPos + "px");
                                self.scrollingLock = false;
                                self.loop = false
                            } else if (Math.round(Math.abs(self.xp - self.windowLeftPos) + Math.abs(self.yp - self.windowTopPos)) < 1) {
                                clearInterval(self.loop);
                                self.zoomWindow.css("background-position", self.windowLeftPos + "px " + self.windowTopPos + "px");
                                self.loop = false
                            } else {
                                if (self.changeBgSize) {
                                    if (self.nzHeight > self.nzWidth) {
                                        if (self.options.zoomType === "lens") {
                                            self.zoomLens.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                                        }
                                        self.zoomWindow.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                                    } else {
                                        if (self.options.zoomType !== "lens") {
                                            self.zoomLens.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                                        }
                                        self.zoomWindow.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                                    }
                                    self.changeBgSize = false
                                }
                                self.zoomWindow.css("background-position", self.xp + "px " + self.yp + "px")
                            }
                        }, interval)
                    }
                } else {
                    if (self.changeBgSize) {
                        if (self.nzHeight > self.nzWidth) {
                            if (self.options.zoomType === "lens") {
                                self.zoomLens.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                            }
                            self.zoomWindow.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                        } else {
                            if (self.options.zoomType === "lens") {
                                self.zoomLens.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                            }
                            if (self.largeHeight / self.newvaluewidth < self.options.zoomWindowHeight) {
                                self.zoomWindow.css("background-size", self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px")
                            } else {
                                self.zoomWindow.css("background-size", self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px")
                            }
                        }
                        self.changeBgSize = false
                    }
                    self.zoomWindow.css("background-position", self.windowLeftPos + "px " + self.windowTopPos + "px")
                }
            }
        },
        setTintPosition: function(e) {
            var self = this;
            var zoomLensWidth = self.zoomLens.width();
            var zoomLensHeight = self.zoomLens.height();
            self.updateOffset(self);
            self.tintpos = String((e.pageX - self.nzOffset.left - zoomLensWidth / 2) * -1);
            self.tintposy = String((e.pageY - self.nzOffset.top - zoomLensHeight / 2) * -1);
            if (self.Etoppos) {
                self.tintposy = 0
            }
            if (self.Eloppos) {
                self.tintpos = 0
            }
            if (self.Eboppos) {
                self.tintposy = (self.nzHeight - zoomLensHeight - self.options.lensBorderSize * 2) * -1
            }
            if (self.Eroppos) {
                self.tintpos = (self.nzWidth - zoomLensWidth - self.options.lensBorderSize * 2) * -1
            }
            if (self.options.tint) {
                if (self.fullheight) {
                    self.tintposy = 0
                }
                if (self.fullwidth) {
                    self.tintpos = 0
                }
                self.zoomTintImage.css({
                    left: self.tintpos + "px",
                    top: self.tintposy + "px"
                })
            }
        },
        swaptheimage: function(smallimage, largeimage) {
            var self = this;
            var newImg = new Image;
            if (self.options.loadingIcon && !self.spinner) {
                var styleAttr = "background: url('" + self.options.loadingIcon + "') no-repeat center;" + "height:" + self.nzHeight + "px;" + "width:" + self.nzWidth + "px;" + "z-index: 2000;" + "position: absolute; " + "background-position: center center;";
                if (self.options.zoomType === "inner") {
                    styleAttr += "top: 0px;"
                }
                self.spinner = $('<div class="ezp-spinner" style="' + styleAttr + '"></div>');
                self.$elem.after(self.spinner)
            } else if (self.spinner) {
                self.spinner.show()
            }
            self.options.onImageSwap(self.$elem);
            newImg.onload = function() {
                self.largeWidth = newImg.width;
                self.largeHeight = newImg.height;
                self.zoomImage = largeimage;
                self.zoomWindow.css("background-size", self.largeWidth + "px " + self.largeHeight + "px");
                self.swapAction(smallimage, largeimage);
                return
            }
            ;
            self.setImageSource(newImg, largeimage)
        },
        swapAction: function(smallimage, largeimage) {
            var self = this;
            var elemWidth = self.$elem.width();
            var elemHeight = self.$elem.height();
            var newImg2 = new Image;
            newImg2.onload = function() {
                self.nzHeight = newImg2.height;
                self.nzWidth = newImg2.width;
                self.options.onImageSwapComplete(self.$elem);
                self.doneCallback();
                return
            }
            ;
            self.setImageSource(newImg2, smallimage);
            self.currentZoomLevel = self.options.zoomLevel;
            self.options.maxZoomLevel = false;
            if (self.options.zoomType === "lens") {
                self.zoomLens.css("background-image", 'url("' + largeimage + '")')
            }
            if (self.options.zoomType === "window") {
                self.zoomWindow.css("background-image", 'url("' + largeimage + '")')
            }
            if (self.options.zoomType === "inner") {
                self.zoomWindow.css("background-image", 'url("' + largeimage + '")')
            }
            self.currentImage = largeimage;
            if (self.options.imageCrossfade) {
                var oldImg = self.$elem;
                var newImg = oldImg.clone();
                self.$elem.attr("src", smallimage);
                self.$elem.after(newImg);
                newImg.stop(true).fadeOut(self.options.imageCrossfade, function() {
                    $(this).remove()
                });
                self.$elem.width("auto").removeAttr("width");
                self.$elem.height("auto").removeAttr("height");
                oldImg.fadeIn(self.options.imageCrossfade);
                if (self.options.tint && self.options.zoomType !== "inner") {
                    var oldImgTint = self.zoomTintImage;
                    var newImgTint = oldImgTint.clone();
                    self.zoomTintImage.attr("src", largeimage);
                    self.zoomTintImage.after(newImgTint);
                    newImgTint.stop(true).fadeOut(self.options.imageCrossfade, function() {
                        $(this).remove()
                    });
                    oldImgTint.fadeIn(self.options.imageCrossfade);
                    self.zoomTint.css({
                        height: elemHeight,
                        width: elemWidth
                    })
                }
                self.zoomContainer.css({
                    height: elemHeight,
                    width: elemWidth
                });
                if (self.options.zoomType === "inner") {
                    if (!self.options.constrainType) {
                        self.zoomWrap.parent().css({
                            height: elemHeight,
                            width: elemWidth
                        });
                        self.zoomWindow.css({
                            height: elemHeight,
                            width: elemWidth
                        })
                    }
                }
                if (self.options.imageCrossfade) {
                    self.zoomWrap.css({
                        height: elemHeight,
                        width: elemWidth
                    })
                }
            } else {
                self.$elem.attr("src", smallimage);
                if (self.options.tint) {
                    self.zoomTintImage.attr("src", largeimage);
                    self.zoomTintImage.attr("height", elemHeight);
                    self.zoomTintImage.css("height", elemHeight);
                    self.zoomTint.css("height", elemHeight)
                }
                self.zoomContainer.css({
                    height: elemHeight,
                    width: elemWidth
                });
                if (self.options.imageCrossfade) {
                    self.zoomWrap.css({
                        height: elemHeight,
                        width: elemWidth
                    })
                }
            }
            if (self.options.constrainType) {
                if (self.options.constrainType === "height") {
                    var autoWDimension = {
                        height: self.options.constrainSize,
                        width: "auto"
                    };
                    self.zoomContainer.css(autoWDimension);
                    if (self.options.imageCrossfade) {
                        self.zoomWrap.css(autoWDimension);
                        self.constwidth = self.zoomWrap.width()
                    } else {
                        self.$elem.css(autoWDimension);
                        self.constwidth = elemWidth
                    }
                    var constWDim = {
                        height: self.options.constrainSize,
                        width: self.constwidth
                    };
                    if (self.options.zoomType === "inner") {
                        self.zoomWrap.parent().css(constWDim);
                        self.zoomWindow.css(constWDim)
                    }
                    if (self.options.tint) {
                        self.tintContainer.css(constWDim);
                        self.zoomTint.css(constWDim);
                        self.zoomTintImage.css(constWDim)
                    }
                }
                if (self.options.constrainType === "width") {
                    var autoHDimension = {
                        height: "auto",
                        width: self.options.constrainSize
                    };
                    self.zoomContainer.css(autoHDimension);
                    if (self.options.imageCrossfade) {
                        self.zoomWrap.css(autoHDimension);
                        self.constheight = self.zoomWrap.height()
                    } else {
                        self.$elem.css(autoHDimension);
                        self.constheight = elemHeight
                    }
                    var constHDim = {
                        height: self.constheight,
                        width: self.options.constrainSize
                    };
                    if (self.options.zoomType === "inner") {
                        self.zoomWrap.parent().css(constHDim);
                        self.zoomWindow.css(constHDim)
                    }
                    if (self.options.tint) {
                        self.tintContainer.css(constHDim);
                        self.zoomTint.css(constHDim);
                        self.zoomTintImage.css(constHDim)
                    }
                }
            }
        },
        doneCallback: function() {
            var self = this;
            if (self.options.loadingIcon && !!self.spinner && !!self.spinner.length) {
                self.spinner.hide()
            }
            self.updateOffset(self);
            self.nzWidth = self.$elem.width();
            self.nzHeight = self.$elem.height();
            self.currentZoomLevel = self.options.zoomLevel;
            self.widthRatio = self.largeWidth / self.nzWidth;
            self.heightRatio = self.largeHeight / self.nzHeight;
            if (self.options.zoomType === "window") {
                if (self.nzHeight < self.options.zoomWindowHeight / self.heightRatio) {
                    self.lensHeight = self.nzHeight
                } else {
                    self.lensHeight = String(self.options.zoomWindowHeight / self.heightRatio)
                }
                if (self.nzWidth < self.options.zoomWindowWidth) {
                    self.lensWidth = self.nzWidth
                } else {
                    self.lensWidth = self.options.zoomWindowWidth / self.widthRatio
                }
                if (self.zoomLens) {
                    self.zoomLens.css({
                        width: self.lensWidth,
                        height: self.lensHeight
                    })
                }
            }
        },
        getCurrentImage: function() {
            var self = this;
            return self.zoomImage
        },
        getGalleryList: function() {
            var self = this;
            self.gallerylist = [];
            if (self.options.gallery) {
                $("#" + self.options.gallery + " a").each(function() {
                    var imgSrc = "";
                    if ($(this).data(self.options.attrImageZoomSrc)) {
                        imgSrc = $(this).data(self.options.attrImageZoomSrc)
                    } else if ($(this).data("image")) {
                        imgSrc = $(this).data("image")
                    }
                    if (imgSrc === self.zoomImage) {
                        self.gallerylist.unshift({
                            href: "" + imgSrc + "",
                            title: $(this).find("img").attr("title")
                        })
                    } else {
                        self.gallerylist.push({
                            href: "" + imgSrc + "",
                            title: $(this).find("img").attr("title")
                        })
                    }
                })
            } else {
                self.gallerylist.push({
                    href: "" + self.zoomImage + "",
                    title: $(this).find("img").attr("title")
                })
            }
            return self.gallerylist
        },
        changeZoomLevel: function(value) {
            var self = this;
            self.scrollingLock = true;
            self.newvalue = parseFloat(value).toFixed(2);
            var newvalue = self.newvalue;
            var maxheightnewvalue = self.largeHeight / (self.options.zoomWindowHeight / self.nzHeight * self.nzHeight);
            var maxwidthtnewvalue = self.largeWidth / (self.options.zoomWindowWidth / self.nzWidth * self.nzWidth);
            if (self.options.zoomType !== "inner") {
                if (maxheightnewvalue <= newvalue) {
                    self.heightRatio = self.largeHeight / maxheightnewvalue / self.nzHeight;
                    self.newvalueheight = maxheightnewvalue;
                    self.fullheight = true
                } else {
                    self.heightRatio = self.largeHeight / newvalue / self.nzHeight;
                    self.newvalueheight = newvalue;
                    self.fullheight = false
                }
                if (maxwidthtnewvalue <= newvalue) {
                    self.widthRatio = self.largeWidth / maxwidthtnewvalue / self.nzWidth;
                    self.newvaluewidth = maxwidthtnewvalue;
                    self.fullwidth = true
                } else {
                    self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                    self.newvaluewidth = newvalue;
                    self.fullwidth = false
                }
                if (self.options.zoomType === "lens") {
                    if (maxheightnewvalue <= newvalue) {
                        self.fullwidth = true;
                        self.newvaluewidth = maxheightnewvalue
                    } else {
                        self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                        self.newvaluewidth = newvalue;
                        self.fullwidth = false
                    }
                }
            }
            if (self.options.zoomType === "inner") {
                maxheightnewvalue = parseFloat(self.largeHeight / self.nzHeight).toFixed(2);
                maxwidthtnewvalue = parseFloat(self.largeWidth / self.nzWidth).toFixed(2);
                if (newvalue > maxheightnewvalue) {
                    newvalue = maxheightnewvalue
                }
                if (newvalue > maxwidthtnewvalue) {
                    newvalue = maxwidthtnewvalue
                }
                if (maxheightnewvalue <= newvalue) {
                    self.heightRatio = self.largeHeight / newvalue / self.nzHeight;
                    if (newvalue > maxheightnewvalue) {
                        self.newvalueheight = maxheightnewvalue
                    } else {
                        self.newvalueheight = newvalue
                    }
                    self.fullheight = true
                } else {
                    self.heightRatio = self.largeHeight / newvalue / self.nzHeight;
                    if (newvalue > maxheightnewvalue) {
                        self.newvalueheight = maxheightnewvalue
                    } else {
                        self.newvalueheight = newvalue
                    }
                    self.fullheight = false
                }
                if (maxwidthtnewvalue <= newvalue) {
                    self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                    if (newvalue > maxwidthtnewvalue) {
                        self.newvaluewidth = maxwidthtnewvalue
                    } else {
                        self.newvaluewidth = newvalue
                    }
                    self.fullwidth = true
                } else {
                    self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
                    self.newvaluewidth = newvalue;
                    self.fullwidth = false
                }
            }
            var scrcontinue = false;
            if (self.options.zoomType === "inner") {
                if (self.nzWidth >= self.nzHeight) {
                    if (self.newvaluewidth <= maxwidthtnewvalue) {
                        scrcontinue = true
                    } else {
                        scrcontinue = false;
                        self.fullheight = true;
                        self.fullwidth = true
                    }
                }
                if (self.nzHeight > self.nzWidth) {
                    if (self.newvaluewidth <= maxwidthtnewvalue) {
                        scrcontinue = true
                    } else {
                        scrcontinue = false;
                        self.fullheight = true;
                        self.fullwidth = true
                    }
                }
            }
            if (self.options.zoomType !== "inner") {
                scrcontinue = true
            }
            if (scrcontinue) {
                self.zoomLock = 0;
                self.changeZoom = true;
                if (self.options.zoomWindowHeight / self.heightRatio <= self.nzHeight) {
                    self.currentZoomLevel = self.newvalueheight;
                    if (self.options.zoomType !== "lens" && self.options.zoomType !== "inner") {
                        self.changeBgSize = true;
                        self.zoomLens.css("height", String(self.options.zoomWindowHeight / self.heightRatio) + "px")
                    }
                    if (self.options.zoomType === "lens" || self.options.zoomType === "inner") {
                        self.changeBgSize = true
                    }
                }
                if (self.options.zoomWindowWidth / self.widthRatio <= self.nzWidth) {
                    if (self.options.zoomType !== "inner") {
                        if (self.newvaluewidth > self.newvalueheight) {
                            self.currentZoomLevel = self.newvaluewidth
                        }
                    }
                    if (self.options.zoomType !== "lens" && self.options.zoomType !== "inner") {
                        self.changeBgSize = true;
                        self.zoomLens.css("width", String(self.options.zoomWindowWidth / self.widthRatio) + "px")
                    }
                    if (self.options.zoomType === "lens" || self.options.zoomType === "inner") {
                        self.changeBgSize = true
                    }
                }
                if (self.options.zoomType === "inner") {
                    self.changeBgSize = true;
                    if (self.nzWidth > self.nzHeight) {
                        self.currentZoomLevel = self.newvaluewidth
                    } else if (self.nzHeight >= self.nzWidth) {
                        self.currentZoomLevel = self.newvaluewidth
                    }
                }
            }
            self.setPosition(self.currentLoc)
        },
        closeAll: function() {
            var self = this;
            if (self.zoomWindow) {
                self.zoomWindow.hide()
            }
            if (self.zoomLens) {
                self.zoomLens.hide()
            }
            if (self.zoomTint) {
                self.zoomTint.hide()
            }
        },
        updateOffset: function(self) {
            if (self.options.zoomContainerAppendTo != "body") {
                self.nzOffset = self.$elem.offset();
                appendedPosition = $(self.options.zoomContainerAppendTo).offset();
                self.nzOffset.top = self.$elem.offset().top - appendedPosition.top;
                self.nzOffset.left = self.$elem.offset().left - appendedPosition.left
            } else {
                self.nzOffset = self.$elem.offset()
            }
        },
        changeState: function(value) {
            var self = this;
            if (value === "enable") {
                self.options.zoomEnabled = true
            }
            if (value === "disable") {
                self.options.zoomEnabled = false
            }
        },
        responsiveConfig: function(options) {
            if (options.respond && options.respond.length > 0) {
                return $.extend({}, options, this.configByScreenWidth(options))
            }
            return options
        },
        configByScreenWidth: function(options) {
            var screenWidth = $(window).width();
            var config = $.grep(options.respond, function(item) {
                var range = item.range.split("-");
                return screenWidth >= range[0] && screenWidth <= range[1]
            });
            if (config.length > 0) {
                return config[0]
            } else {
                return options
            }
        }
    };
    $.fn.ezPlus = function(options) {
        return this.each(function() {
            var elevate = Object.create(EZP);
            elevate.init(options, this);
            $.data(this, "ezPlus", elevate)
        })
    }
    ;
    $.fn.ezPlus.options = {
        attrImageZoomSrc: "zoom-image",
        borderColour: "#888",
        borderSize: 4,
        constrainSize: false,
        constrainType: false,
        containLensZoom: false,
        cursor: "inherit",
        debug: false,
        easing: false,
        easingAmount: 12,
        enabled: true,
        gallery: false,
        galleryActiveClass: "zoomGalleryActive",
        gallerySelector: false,
        galleryItem: "a",
        imageCrossfade: false,
        lensBorderColour: "#000",
        lensBorderSize: 1,
        lensColour: "white",
        lensFadeIn: false,
        lensFadeOut: false,
        lensOpacity: .4,
        lensShape: "square",
        lensSize: 200,
        lenszoom: false,
        loadingIcon: false,
        mantainZoomAspectRatio: false,
        maxZoomLevel: false,
        minZoomLevel: 1.01,
        onComplete: $.noop,
        onDestroy: $.noop,
        onImageClick: $.noop,
        onImageSwap: $.noop,
        onImageSwapComplete: $.noop,
        onShow: $.noop,
        onZoomedImageLoaded: $.noop,
        preloading: 1,
        respond: [],
        responsive: true,
        scrollZoom: false,
        scrollZoomIncrement: .1,
        showLens: true,
        tint: false,
        tintColour: "#333",
        tintOpacity: .4,
        touchEnabled: true,
        zoomActivation: "hover",
        zoomContainerAppendTo: "body",
        zoomId: -1,
        zoomLevel: 1,
        zoomTintFadeIn: false,
        zoomTintFadeOut: false,
        zoomType: "window",
        zoomWindowAlwaysShow: false,
        zoomWindowBgColour: "#fff",
        zoomWindowFadeIn: false,
        zoomWindowFadeOut: false,
        zoomWindowHeight: 400,
        zoomWindowOffsetX: 0,
        zoomWindowOffsetY: 0,
        zoomWindowPosition: 1,
        zoomWindowWidth: 400,
        zoomEnabled: true,
        zIndex: 999
    }
}
)(jQuery, window, document);
